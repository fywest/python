[
{"name": "Index", "url": "http://flask.pocoo.org/docs/0.12/genindex/", "content": ",,,,,Index \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,Flask 0.12.4 documentation,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,Index,,,_,|,A,|,B,|,C,|,D,|,E,|,F,|,G,|,H,|,I,|,J,|,K,|,L,|,M,|,N,|,O,|,P,|,R,|,S,|,T,|,U,|,V,|,W,|,Y,,,_,,,,_app_ctx_stack (in module flask),,,,,_request_ctx_stack (in module flask),,,,,A,,,,abort() (in module flask),,,add_app_template_filter() (flask.Blueprint method),,,add_app_template_global() (flask.Blueprint method),,,add_app_template_test() (flask.Blueprint method),,,add_template_filter() (flask.Flask method),,,add_template_global() (flask.Flask method),,,add_template_test() (flask.Flask method),,,add_url_rule() (flask.Blueprint method),,,(flask.Flask method),,,(flask.blueprints.BlueprintSetupState method),,,,after_app_request() (flask.Blueprint method),,,after_request() (flask.Blueprint method),,,(flask.Flask method),,,,after_request_funcs (flask.Flask attribute),,,after_this_request() (in module flask),,,app (flask.blueprints.BlueprintSetupState attribute),,,app_context() (flask.Flask method),,,,,app_context_processor() (flask.Blueprint method),,,app_ctx_globals_class (flask.Flask attribute),,,app_errorhandler() (flask.Blueprint method),,,app_import_path (flask.cli.ScriptInfo attribute),,,app_template_filter() (flask.Blueprint method),,,app_template_global() (flask.Blueprint method),,,app_template_test() (flask.Blueprint method),,,app_url_defaults() (flask.Blueprint method),,,app_url_value_preprocessor() (flask.Blueprint method),,,AppContext (class in flask.ctx),,,appcontext_popped (in module flask),,,appcontext_pushed (in module flask),,,appcontext_tearing_down (in module flask),,,AppGroup (class in flask.cli),,,args (flask.Request attribute),,,as_view() (flask.views.View class method),,,auto_find_instance_path() (flask.Flask method),,,,,B,,,,base_url (flask.Request attribute),,,before_app_first_request() (flask.Blueprint method),,,before_app_request() (flask.Blueprint method),,,before_first_request() (flask.Flask method),,,before_first_request_funcs (flask.Flask attribute),,,before_request() (flask.Blueprint method),,,(flask.Flask method),,,,,,before_request_funcs (flask.Flask attribute),,,Blueprint (class in flask),,,blueprint (flask.blueprints.BlueprintSetupState attribute),,,(flask.Request attribute),,,,blueprints (flask.Flask attribute),,,BlueprintSetupState (class in flask.blueprints),,,,,C,,,,cli (flask.Flask attribute),,,command() (flask.cli.AppGroup method),,,Config (class in flask),,,config (flask.Flask attribute),,,config_class (flask.Flask attribute),,,context_processor() (flask.Blueprint method),,,(flask.Flask method),,,,,,cookies (flask.Request attribute),,,copy() (flask.ctx.RequestContext method),,,copy_current_request_context() (in module flask),,,create_app (flask.cli.ScriptInfo attribute),,,create_global_jinja_loader() (flask.Flask method),,,create_jinja_environment() (flask.Flask method),,,create_url_adapter() (flask.Flask method),,,current_app (in module flask),,,,,D,,,,data (flask.cli.ScriptInfo attribute),,,(flask.Request attribute),,,(flask.Response attribute),,,,debug (flask.Flask attribute),,,decorators (flask.views.View attribute),,,default() (flask.json.JSONEncoder method),,,default_config (flask.Flask attribute),,,,,digest_method() (flask.sessions.SecureCookieSessionInterface static method),,,dispatch_request() (flask.Flask method),,,(flask.views.MethodView method),,,(flask.views.View method),,,,do_teardown_appcontext() (flask.Flask method),,,do_teardown_request() (flask.Flask method),,,dump() (in module flask.json),,,dumps() (in module flask.json),,,,,E,,,,endpoint (flask.Request attribute),,,endpoint() (flask.Blueprint method),,,(flask.Flask method),,,,environ (flask.Request attribute),,,environment variable,,FLASKR_SETTINGS,,,FLASK_DEBUG,,,YOURAPPLICATION_SETTINGS,,,,,,error_handler_spec (flask.Flask attribute),,,errorhandler() (flask.Blueprint method),,,(flask.Flask method),,,,escape() (flask.Markup class method),,,(in module flask),,,,extensions (flask.Flask attribute),,,,,F,,,,files (flask.Request attribute),,,first_registration (flask.blueprints.BlueprintSetupState attribute),,,flash() (in module flask),,,Flask (class in flask),,,flask (module),,,flask.ext (in module flask),,,flask.json (module),,,FLASK_DEBUG,,,FlaskClient (class in flask.testing),,,,,FlaskGroup (class in flask.cli),,,FLASKR_SETTINGS,,,form (flask.Request attribute),,,from_envvar() (flask.Config method),,,from_json() (flask.Config method),,,from_mapping() (flask.Config method),,,from_object() (flask.Config method),,,from_pyfile() (flask.Config method),,,full_dispatch_request() (flask.Flask method),,,full_path (flask.Request attribute),,,,,G,,,,g (in module flask),,,get_command() (flask.cli.FlaskGroup method),,,get_cookie_domain() (flask.sessions.SessionInterface method),,,get_cookie_httponly() (flask.sessions.SessionInterface method),,,get_cookie_path() (flask.sessions.SessionInterface method),,,get_cookie_secure() (flask.sessions.SessionInterface method),,,get_expiration_time() (flask.sessions.SessionInterface method),,,get_flashed_messages() (in module flask),,,,,get_json() (flask.Request method),,,get_namespace() (flask.Config method),,,get_send_file_max_age() (flask.Blueprint method),,,(flask.Flask method),,,,get_template_attribute() (in module flask),,,got_first_request (flask.Flask attribute),,,got_request_exception (in module flask),,,group() (flask.cli.AppGroup method),,,,,H,,,,handle_exception() (flask.Flask method),,,handle_http_exception() (flask.Flask method),,,handle_url_build_error() (flask.Flask method),,,handle_user_exception() (flask.Flask method),,,has_app_context() (in module flask),,,,,has_request_context() (in module flask),,,has_static_folder (flask.Blueprint attribute),,,(flask.Flask attribute),,,,headers (flask.Request attribute),,,(flask.Response attribute),,,,,,I,,,,init_jinja_globals() (flask.Flask method),,,inject_url_defaults() (flask.Flask method),,,instance_path (flask.Flask attribute),,,,,is_json (flask.Request attribute),,,is_null_session() (flask.sessions.SessionInterface method),,,is_xhr (flask.Request attribute),,,iter_blueprints() (flask.Flask method),,,,,J,,,,jinja_env (flask.Flask attribute),,,jinja_environment (flask.Flask attribute),,,jinja_loader (flask.Blueprint attribute),,,(flask.Flask attribute),,,,jinja_options (flask.Flask attribute),,,,,json (flask.Request attribute),,,json_decoder (flask.Flask attribute),,,json_encoder (flask.Flask attribute),,,JSONDecoder (class in flask.json),,,JSONEncoder (class in flask.json),,,jsonify() (in module flask.json),,,,,K,,,,key_derivation (flask.sessions.SecureCookieSessionInterface attribute),,,,,L,,,,list_commands() (flask.cli.FlaskGroup method),,,load() (in module flask.json),,,load_app() (flask.cli.ScriptInfo method),,,,,loads() (in module flask.json),,,log_exception() (flask.Flask method),,,logger (flask.Flask attribute),,,logger_name (flask.Flask attribute),,,,,M,,,,main() (flask.cli.FlaskGroup method),,,make_config() (flask.Flask method),,,make_default_options_response() (flask.Flask method),,,make_null_session() (flask.Flask method),,,(flask.sessions.SessionInterface method),,,,make_response() (flask.Flask method),,,(in module flask),,,,make_setup_state() (flask.Blueprint method),,,make_shell_context() (flask.Flask method),,,Markup (class in flask),,,,,match_request() (flask.ctx.RequestContext method),,,max_content_length (flask.Request attribute),,,message_flashed (in module flask),,,method (flask.Request attribute),,,methods (flask.views.View attribute),,,MethodView (class in flask.views),,,mimetype (flask.Response attribute),,,modified (flask.session attribute),,,(flask.sessions.SessionMixin attribute),,,,module (flask.Request attribute),,,,,N,,,,name (flask.Flask attribute),,,new (flask.session attribute),,,(flask.sessions.SessionMixin attribute),,,,,,null_session_class (flask.sessions.SessionInterface attribute),,,NullSession (class in flask.sessions),,,,,O,,,,on_json_loading_failed() (flask.Request method),,,open() (flask.testing.FlaskClient method),,,open_instance_resource() (flask.Flask method),,,open_resource() (flask.Blueprint method),,,(flask.Flask method),,,,,,open_session() (flask.Flask method),,,(flask.sessions.SecureCookieSessionInterface method),,,(flask.sessions.SessionInterface method),,,,options (flask.blueprints.BlueprintSetupState attribute),,,,,P,,,,pass_script_info() (in module flask.cli),,,path (flask.Request attribute),,,permanent (flask.session attribute),,,(flask.sessions.SessionMixin attribute),,,,permanent_session_lifetime (flask.Flask attribute),,,pickle_based (flask.sessions.SessionInterface attribute),,,pop() (flask.ctx.AppContext method),,,(flask.ctx.RequestContext method),,,,,,preprocess_request() (flask.Flask method),,,preserve_context_on_exception (flask.Flask attribute),,,process_response() (flask.Flask method),,,propagate_exceptions (flask.Flask attribute),,,push() (flask.ctx.AppContext method),,,(flask.ctx.RequestContext method),,,,Python Enhancement Proposals,,PEP 8,,,,,,R,,,,record() (flask.Blueprint method),,,record_once() (flask.Blueprint method),,,redirect() (in module flask),,,register() (flask.Blueprint method),,,register_blueprint() (flask.Flask method),,,register_error_handler() (flask.Blueprint method),,,(flask.Flask method),,,,render_template() (in module flask),,,render_template_string() (in module flask),,,Request (class in flask),,,request (class in flask),,,request_class (flask.Flask attribute),,,request_context() (flask.Flask method),,,,,request_finished (in module flask),,,request_started (in module flask),,,request_tearing_down (in module flask),,,RequestContext (class in flask.ctx),,,Response (class in flask),,,response_class (flask.Flask attribute),,,RFC,,RFC 822,,,RFC 8259,,,,route() (flask.Blueprint method),,,(flask.Flask method),,,,routing_exception (flask.Request attribute),,,run() (flask.Flask method),,,run_command (in module flask.cli),,,,,S,,,,safe_join() (in module flask),,,salt (flask.sessions.SecureCookieSessionInterface attribute),,,save_session() (flask.Flask method),,,(flask.sessions.SecureCookieSessionInterface method),,,(flask.sessions.SessionInterface method),,,,script_root (flask.Request attribute),,,ScriptInfo (class in flask.cli),,,secret_key (flask.Flask attribute),,,SecureCookieSession (class in flask.sessions),,,SecureCookieSessionInterface (class in flask.sessions),,,select_jinja_autoescape() (flask.Flask method),,,send_file() (in module flask),,,send_file_max_age_default (flask.Flask attribute),,,send_from_directory() (in module flask),,,send_static_file() (flask.Blueprint method),,,(flask.Flask method),,,,serializer (flask.sessions.SecureCookieSessionInterface attribute),,,session (class in flask),,,session_class (flask.sessions.SecureCookieSessionInterface attribute),,,session_cookie_name (flask.Flask attribute),,,session_interface (flask.Flask attribute),,,,,session_json_serializer (in module flask.sessions),,,session_transaction() (flask.testing.FlaskClient method),,,SessionInterface (class in flask.sessions),,,SessionMixin (class in flask.sessions),,,set_cookie() (flask.Response method),,,shell_command (in module flask.cli),,,shell_context_processor() (flask.Flask method),,,shell_context_processors (flask.Flask attribute),,,should_ignore_error() (flask.Flask method),,,should_set_cookie() (flask.sessions.SessionInterface method),,,signal() (flask.signals.Namespace method),,,signals.Namespace (class in flask),,,signals.signals_available (in module flask),,,static_folder (flask.Blueprint attribute),,,(flask.Flask attribute),,,,status (flask.Response attribute),,,status_code (flask.Response attribute),,,stream (flask.Request attribute),,,stream_with_context() (in module flask),,,striptags() (flask.Markup method),,,subdomain (flask.blueprints.BlueprintSetupState attribute),,,,,T,,,,teardown_app_request() (flask.Blueprint method),,,teardown_appcontext() (flask.Flask method),,,teardown_appcontext_funcs (flask.Flask attribute),,,teardown_request() (flask.Blueprint method),,,(flask.Flask method),,,,teardown_request_funcs (flask.Flask attribute),,,template_context_processors (flask.Flask attribute),,,template_filter() (flask.Flask method),,,,,template_global() (flask.Flask method),,,template_rendered (in module flask),,,template_test() (flask.Flask method),,,test_client() (flask.Flask method),,,test_client_class (flask.Flask attribute),,,test_request_context() (flask.Flask method),,,testing (flask.Flask attribute),,,trap_http_exception() (flask.Flask method),,,,,U,,,,unescape() (flask.Markup method),,,update_template_context() (flask.Flask method),,,url (flask.Request attribute),,,url_build_error_handlers (flask.Flask attribute),,,url_default_functions (flask.Flask attribute),,,url_defaults (flask.blueprints.BlueprintSetupState attribute),,,url_defaults() (flask.Blueprint method),,,(flask.Flask method),,,,url_for() (in module flask),,,,,url_map (flask.Flask attribute),,,url_prefix (flask.blueprints.BlueprintSetupState attribute),,,url_root (flask.Request attribute),,,url_rule (flask.Request attribute),,,url_rule_class (flask.Flask attribute),,,url_value_preprocessor() (flask.Blueprint method),,,(flask.Flask method),,,,url_value_preprocessors (flask.Flask attribute),,,use_x_sendfile (flask.Flask attribute),,,,,V,,,,values (flask.Request attribute),,,View (class in flask.views),,,,,view_args (flask.Request attribute),,,view_functions (flask.Flask attribute),,,,,W,,,,with_appcontext() (in module flask.cli),,,,,wsgi_app() (flask.Flask method),,,,,Y,,,,YOURAPPLICATION_SETTINGS,,,,,,,,,,,,,Navigation,,,Overview,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Step 4: Database Connections", "url": "http://flask.pocoo.org/docs/0.12/tutorial/dbcon/", "content": ",,,,,Step 4: Database Connections \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,Tutorial,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,Step 4: Database Connections,\u00b6,,You currently have a function for establishing a database connection with,connect_db,, but by itself, it is not particularly useful.  Creating and\nclosing database connections all the time is very inefficient, so you will\nneed to keep it around for longer.  Because database connections\nencapsulate a transaction, you will need to make sure that only one\nrequest at a time uses the connection. An elegant way to do this is by\nutilizing the,application context,.,,Flask provides two contexts: the,application context,and the,request context,.  For the time being, all you have to know is that there\nare special variables that use these.  For instance, the,request,variable is the request object associated with\nthe current request, whereas,g,is a general purpose\nvariable associated with the current application context.  The tutorial\nwill cover some more details of this later on.,,For the time being, all you have to know is that you can store information\nsafely on the,g,object.,,So when do you put it on there?  To do that you can make a helper\nfunction.  The first time the function is called, it will create a database\nconnection for the current context, and successive calls will return the\nalready established connection:,,def,,get_db,():,,\"\"\"Opens a new database connection if there is none yet for the,,current application context.,,\"\"\",,if,,not,,hasattr,(,g,,,,'sqlite_db',):,,g,.,sqlite_db,,=,,connect_db,(),,return,,g,.,sqlite_db,,,,Now you know how to connect, but how can you properly disconnect?  For\nthat, Flask provides us with the,teardown_appcontext(),decorator.  It\u2019s executed every time the application context tears down:,,@app,.,teardown_appcontext,,def,,close_db,(,error,):,,\"\"\"Closes the database again at the end of the request.\"\"\",,if,,hasattr,(,g,,,,'sqlite_db',):,,g,.,sqlite_db,.,close,(),,,,Functions marked with,teardown_appcontext(),are called\nevery time the app context tears down.  What does this mean?\nEssentially, the app context is created before the request comes in and is\ndestroyed (torn down) whenever the request finishes.  A teardown can\nhappen because of two reasons: either everything went well (the error\nparameter will be,None,) or an exception happened, in which case the error\nis passed to the teardown function.,,Curious about what these contexts mean?  Have a look at the,The Application Context,documentation to learn more.,,Continue to,Step 5: Creating The Database,.,,,Hint,,Where do I put this code?,,If you\u2019ve been following along in this tutorial, you might be wondering\nwhere to put the code from this step and the next.  A logical place is to\ngroup these module-level functions together, and put your new,get_db,and,close_db,functions below your existing,connect_db,function (following the tutorial line-by-line).,,If you need a moment to find your bearings, take a look at how the,example source,is organized.  In Flask, you\ncan put all of your application code into a single Python module.\nYou don\u2019t have to, and if your app,grows larger,, it\u2019s a good idea not to.,,,,,,,,,,,,Navigation,,,Overview,,,Tutorial,,,Previous:,Step 3: Installing flaskr as a Package,,Next:,Step 5: Creating The Database,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Testing Flask Applications", "url": "http://flask.pocoo.org/docs/0.12/testing/", "content": ",,,,,Testing Flask Applications \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,Testing Flask Applications,\u00b6,,,Something that is untested is broken.,,The origin of this quote is unknown and while it is not entirely correct, it is also\nnot far from the truth.  Untested applications make it hard to\nimprove existing code and developers of untested applications tend to\nbecome pretty paranoid.  If an application has automated tests, you can\nsafely make changes and instantly know if anything breaks.,,Flask provides a way to test your application by exposing the Werkzeug\ntest,Client,and handling the context locals for you.\nYou can then use that with your favourite testing solution.  In this documentation\nwe will use the,unittest,package that comes pre-installed with Python.,,,The Application,\u00b6,,First, we need an application to test; we will use the application from\nthe,Tutorial,.  If you don\u2019t have that application yet, get the\nsources from,the examples,.,,,,The Testing Skeleton,\u00b6,,In order to test the application, we add a second module\n(,flaskr_tests.py,) and create a unittest skeleton there:,,import,,os,,import,,flaskr,,import,,unittest,,import,,tempfile,,class,,FlaskrTestCase,(,unittest,.,TestCase,):,,def,,setUp,(,self,):,,self,.,db_fd,,,,flaskr,.,app,.,config,[,'DATABASE',],,=,,tempfile,.,mkstemp,(),,flaskr,.,app,.,testing,,=,,True,,self,.,app,,=,,flaskr,.,app,.,test_client,(),,with,,flaskr,.,app,.,app_context,():,,flaskr,.,init_db,(),,def,,tearDown,(,self,):,,os,.,close,(,self,.,db_fd,),,os,.,unlink,(,flaskr,.,app,.,config,[,'DATABASE',]),,if,,__name__,,==,,'__main__',:,,unittest,.,main,(),,,,The code in the,setUp(),method creates a new test\nclient and initializes a new database.  This function is called before\neach individual test function is run.  To delete the database after the\ntest, we close the file and remove it from the filesystem in the,tearDown(),method.  Additionally during setup the,TESTING,config flag is activated.  What it does is disable the error\ncatching during request handling so that you get better error reports when\nperforming test requests against the application.,,This test client will give us a simple interface to the application.  We can\ntrigger test requests to the application, and the client will also keep track\nof cookies for us.,,Because SQLite3 is filesystem-based we can easily use the tempfile module\nto create a temporary database and initialize it.  The,mkstemp(),function does two things for us: it returns a\nlow-level file handle and a random file name, the latter we use as\ndatabase name.  We just have to keep the,db_fd,around so that we can use\nthe,os.close(),function to close the file.,,If we now run the test suite, we should see the following output:,,$ python flaskr_tests.py\n\n----------------------------------------------------------------------\nRan 0 tests in 0.000s\n\nOK,,,Even though it did not run any actual tests, we already know that our flaskr\napplication is syntactically valid, otherwise the import would have died\nwith an exception.,,,,The First Test,\u00b6,,Now it\u2019s time to start testing the functionality of the application.\nLet\u2019s check that the application shows \u201cNo entries here so far\u201d if we\naccess the root of the application (,/,). To do this, we add a new\ntest method to our class, like this:,,class,,FlaskrTestCase,(,unittest,.,TestCase,):,,def,,setUp,(,self,):,,self,.,db_fd,,,,flaskr,.,app,.,config,[,'DATABASE',],,=,,tempfile,.,mkstemp,(),,flaskr,.,app,.,testing,,=,,True,,self,.,app,,=,,flaskr,.,app,.,test_client,(),,with,,flaskr,.,app,.,app_context,():,,flaskr,.,init_db,(),,def,,tearDown,(,self,):,,os,.,close,(,self,.,db_fd,),,os,.,unlink,(,flaskr,.,app,.,config,[,'DATABASE',]),,def,,test_empty_db,(,self,):,,rv,,=,,self,.,app,.,get,(,'/',),,assert,,b,'No entries here so far',,in,,rv,.,data,,,,Notice that our test functions begin with the word,test,; this allows,unittest,to automatically identify the method as a test to run.,,By using,self.app.get,we can send an HTTP,GET,request to the application with\nthe given path.  The return value will be a,response_class,object.\nWe can now use the,data,attribute to inspect\nthe return value (as string) from the application.  In this case, we ensure that,'No,,entries,,here,,so,,far',is part of the output.,,Run it again and you should see one passing test:,,$ python flaskr_tests.py\n.\n----------------------------------------------------------------------\nRan 1 test in 0.034s\n\nOK,,,,,Logging In and Out,\u00b6,,The majority of the functionality of our application is only available for\nthe administrative user, so we need a way to log our test client in and out\nof the application.  To do this, we fire some requests to the login and logout\npages with the required form data (username and password).  And because the\nlogin and logout pages redirect, we tell the client to,follow_redirects,.,,Add the following two methods to your,FlaskrTestCase,class:,,def,,login,(,self,,,,username,,,,password,):,,return,,self,.,app,.,post,(,'/login',,,,data,=,dict,(,,username,=,username,,,,password,=,password,,),,,follow_redirects,=,True,),,def,,logout,(,self,):,,return,,self,.,app,.,get,(,'/logout',,,,follow_redirects,=,True,),,,,Now we can easily test that logging in and out works and that it fails with\ninvalid credentials.  Add this new test to the class:,,def,,test_login_logout,(,self,):,,rv,,=,,self,.,login,(,'admin',,,,'default',),,assert,,b,'You were logged in',,in,,rv,.,data,,rv,,=,,self,.,logout,(),,assert,,b,'You were logged out',,in,,rv,.,data,,rv,,=,,self,.,login,(,'adminx',,,,'default',),,assert,,b,'Invalid username',,in,,rv,.,data,,rv,,=,,self,.,login,(,'admin',,,,'defaultx',),,assert,,b,'Invalid password',,in,,rv,.,data,,,,,,Test Adding Messages,\u00b6,,We should also test that adding messages works.  Add a new test method\nlike this:,,def,,test_messages,(,self,):,,self,.,login,(,'admin',,,,'default',),,rv,,=,,self,.,app,.,post,(,'/add',,,,data,=,dict,(,,title,=,'<Hello>',,,,text,=,'<strong>HTML</strong> allowed here',,),,,follow_redirects,=,True,),,assert,,b,'No entries here so far',,not,,in,,rv,.,data,,assert,,b,'&lt;Hello&gt;',,in,,rv,.,data,,assert,,b,'<strong>HTML</strong> allowed here',,in,,rv,.,data,,,,Here we check that HTML is allowed in the text but not in the title,\nwhich is the intended behavior.,,Running that should now give us three passing tests:,,$ python flaskr_tests.py\n...\n----------------------------------------------------------------------\nRan 3 tests in 0.332s\n\nOK,,,For more complex tests with headers and status codes, check out the,MiniTwit Example,from the sources which contains a larger test\nsuite.,,,,Other Testing Tricks,\u00b6,,Besides using the test client as shown above, there is also the,test_request_context(),method that can be used\nin combination with the,with,statement to activate a request context\ntemporarily.  With this you can access the,request,,,g,and,session,objects like in view\nfunctions.  Here is a full example that demonstrates this approach:,,import,,flask,,app,,=,,flask,.,Flask,(,__name__,),,with,,app,.,test_request_context,(,'/?name=Peter',):,,assert,,flask,.,request,.,path,,==,,'/',,assert,,flask,.,request,.,args,[,'name',],,==,,'Peter',,,,All the other objects that are context bound can be used in the same\nway.,,If you want to test your application with different configurations and\nthere does not seem to be a good way to do that, consider switching to\napplication factories (see,Application Factories,).,,Note however that if you are using a test request context, the,before_request(),and,after_request(),functions are not called automatically.  However,teardown_request(),functions are indeed executed when\nthe test request context leaves the,with,block.  If you do want the,before_request(),functions to be called as well, you\nneed to call,preprocess_request(),yourself:,,app,,=,,flask,.,Flask,(,__name__,),,with,,app,.,test_request_context,(,'/?name=Peter',):,,app,.,preprocess_request,(),,...,,,,This can be necessary to open database connections or something similar\ndepending on how your application was designed.,,If you want to call the,after_request(),functions you\nneed to call into,process_response(),which however\nrequires that you pass it a response object:,,app,,=,,flask,.,Flask,(,__name__,),,with,,app,.,test_request_context,(,'/?name=Peter',):,,resp,,=,,Response,(,'...',),,resp,,=,,app,.,process_response,(,resp,),,...,,,,This in general is less useful because at that point you can directly\nstart using the test client.,,,,Faking Resources and Context,\u00b6,,,Changelog,,New in version 0.10.,,,A very common pattern is to store user authorization information and\ndatabase connections on the application context or the,flask.g,object.  The general pattern for this is to put the object on there on\nfirst usage and then to remove it on a teardown.  Imagine for instance\nthis code to get the current user:,,def,,get_user,():,,user,,=,,getattr,(,g,,,,'user',,,,None,),,if,,user,,is,,None,:,,user,,=,,fetch_current_user_from_database,(),,g,.,user,,=,,user,,return,,user,,,,For a test it would be nice to override this user from the outside without\nhaving to change some code.  This can be accomplished with\nhooking the,flask.appcontext_pushed,signal:,,from,,contextlib,,import,,contextmanager,,from,,flask,,import,,appcontext_pushed,,,,g,,@contextmanager,,def,,user_set,(,app,,,,user,):,,def,,handler,(,sender,,,,**,kwargs,):,,g,.,user,,=,,user,,with,,appcontext_pushed,.,connected_to,(,handler,,,,app,):,,yield,,,,And then to use it:,,from,,flask,,import,,json,,,,jsonify,,@app,.,route,(,'/users/me',),,def,,users_me,():,,return,,jsonify,(,username,=,g,.,user,.,username,),,with,,user_set,(,app,,,,my_user,):,,with,,app,.,test_client,(),,as,,c,:,,resp,,=,,c,.,get,(,'/users/me',),,data,,=,,json,.,loads,(,resp,.,data,),,self,.,assert_equal,(,data,[,'username',],,,my_user,.,username,),,,,,,Keeping the Context Around,\u00b6,,,Changelog,,New in version 0.4.,,,Sometimes it is helpful to trigger a regular request but still keep the\ncontext around for a little longer so that additional introspection can\nhappen.  With Flask 0.4 this is possible by using the,test_client(),with a,with,block:,,app,,=,,flask,.,Flask,(,__name__,),,with,,app,.,test_client,(),,as,,c,:,,rv,,=,,c,.,get,(,'/?tequila=42',),,assert,,request,.,args,[,'tequila',],,==,,'42',,,,If you were to use just the,test_client(),without\nthe,with,block, the,assert,would fail with an error because,request,is no longer available (because you are trying to use it outside of the actual request).,,,,Accessing and Modifying Sessions,\u00b6,,,Changelog,,New in version 0.8.,,,Sometimes it can be very helpful to access or modify the sessions from the\ntest client.  Generally there are two ways for this.  If you just want to\nensure that a session has certain keys set to certain values you can just\nkeep the context around and access,flask.session,:,,with,,app,.,test_client,(),,as,,c,:,,rv,,=,,c,.,get,(,'/',),,assert,,flask,.,session,[,'foo',],,==,,42,,,,This however does not make it possible to also modify the session or to\naccess the session before a request was fired.  Starting with Flask 0.8 we\nprovide a so called \u201csession transaction\u201d which simulates the appropriate\ncalls to open a session in the context of the test client and to modify\nit.  At the end of the transaction the session is stored.  This works\nindependently of the session backend used:,,with,,app,.,test_client,(),,as,,c,:,,with,,c,.,session_transaction,(),,as,,sess,:,,sess,[,'a_key',],,=,,'a value',,# once this is reached the session was stored,,,,Note that in this case you have to use the,sess,object instead of the,flask.session,proxy.  The object however itself will provide the\nsame interface.,,,,,,,,,,,,,Contents,,,Testing Flask Applications,,The Application,,The Testing Skeleton,,The First Test,,Logging In and Out,,Test Adding Messages,,Other Testing Tricks,,Faking Resources and Context,,Keeping the Context Around,,Accessing and Modifying Sessions,,,,,Navigation,,,Overview,,,Previous:,Templates,,Next:,Application Errors,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Templates", "url": "http://flask.pocoo.org/docs/0.12/templating/", "content": ",,,,,Templates \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,Templates,\u00b6,,Flask leverages Jinja2 as template engine.  You are obviously free to use\na different template engine, but you still have to install Jinja2 to run\nFlask itself.  This requirement is necessary to enable rich extensions.\nAn extension can depend on Jinja2 being present.,,This section only gives a very quick introduction into how Jinja2\nis integrated into Flask.  If you want information on the template\nengine\u2019s syntax itself, head over to the official,Jinja2 Template\nDocumentation,for\nmore information.,,,Jinja Setup,\u00b6,,Unless customized, Jinja2 is configured by Flask as follows:,,,autoescaping is enabled for all templates ending in,.html,,,.htm,,,.xml,as well as,.xhtml,when using,render_template(),.,,autoescaping is enabled for all strings when using,render_template_string(),.,,a template has the ability to opt in/out autoescaping with the,{%,,autoescape,,%},tag.,,Flask inserts a couple of global functions and helpers into the\nJinja2 context, additionally to the values that are present by\ndefault.,,,,,Standard Context,\u00b6,,The following global variables are available within Jinja2 templates\nby default:,,,,config,,The current configuration object (,flask.config,),,,Changelog,,Changed in version 0.10:,This is now always available, even in imported templates.,,,,New in version 0.6.,,,,,,request,,The current request object (,flask.request,).  This variable is\nunavailable if the template was rendered without an active request\ncontext.,,,,,session,,The current session object (,flask.session,).  This variable\nis unavailable if the template was rendered without an active request\ncontext.,,,,,g,,The request-bound object for global variables (,flask.g,).  This\nvariable is unavailable if the template was rendered without an active\nrequest context.,,,,,url_for,(,),,The,flask.url_for(),function.,,,,,get_flashed_messages,(,),,The,flask.get_flashed_messages(),function.,,,,The Jinja Context Behavior,,These variables are added to the context of variables, they are not\nglobal variables.  The difference is that by default these will not\nshow up in the context of imported templates.  This is partially caused\nby performance considerations, partially to keep things explicit.,,What does this mean for you?  If you have a macro you want to import,\nthat needs to access the request object you have two possibilities:,,,you explicitly pass the request to the macro as parameter, or\nthe attribute of the request object you are interested in.,,you import the macro \u201cwith context\u201d.,,,Importing with context looks like this:,,{%,,from,,'_helpers.html',,import,,my_macro,,with context,,%},,,,,,,Standard Filters,\u00b6,,These filters are available in Jinja2 additionally to the filters provided\nby Jinja2 itself:,,,,tojson,(,),,This function converts the given object into JSON representation.  This\nis for example very helpful if you try to generate JavaScript on the\nfly.,,Note that inside,script,tags no escaping must take place, so make\nsure to disable escaping with,|safe,before Flask 0.10 if you intend\nto use it inside,script,tags:,,<,script,,type,=,text/javascript,>,,doSomethingWith,(,{{,,user.username,|,tojson,|,safe,,}},);,,</,script,>,,,,,,,Controlling Autoescaping,\u00b6,,Autoescaping is the concept of automatically escaping special characters\nfor you.  Special characters in the sense of HTML (or XML, and thus XHTML)\nare,&,,,>,,,<,,,\",as well as,',.  Because these characters\ncarry specific meanings in documents on their own you have to replace them\nby so called \u201centities\u201d if you want to use them for text.  Not doing so\nwould not only cause user frustration by the inability to use these\ncharacters in text, but can also lead to security problems.  (see,Cross-Site Scripting (XSS),),,Sometimes however you will need to disable autoescaping in templates.\nThis can be the case if you want to explicitly inject HTML into pages, for\nexample if they come from a system that generates secure HTML like a\nmarkdown to HTML converter.,,There are three ways to accomplish that:,,,In the Python code, wrap the HTML string in a,Markup,object before passing it to the template.  This is in general the\nrecommended way.,,Inside the template, use the,|safe,filter to explicitly mark a\nstring as safe HTML (,{{,,myvariable|safe,,}},),,Temporarily disable the autoescape system altogether.,,,To disable the autoescape system in templates, you can use the,{%,,autoescape,,%},block:,,{%,,autoescape,,false,,%},,<,p,>,autoescaping is disabled here,<,p,>,{{,,will_not_be_escaped,,}},,{%,,endautoescape,,%},,,,Whenever you do this, please be very cautious about the variables you are\nusing in this block.,,,,Registering Filters,\u00b6,,If you want to register your own filters in Jinja2 you have two ways to do\nthat.  You can either put them by hand into the,jinja_env,of the application or use the,template_filter(),decorator.,,The two following examples work the same and both reverse an object:,,@app,.,template_filter,(,'reverse',),,def,,reverse_filter,(,s,):,,return,,s,[::,-,1,],,def,,reverse_filter,(,s,):,,return,,s,[::,-,1,],,app,.,jinja_env,.,filters,[,'reverse',],,=,,reverse_filter,,,,In case of the decorator the argument is optional if you want to use the\nfunction name as name of the filter.  Once registered, you can use the filter\nin your templates in the same way as Jinja2\u2019s builtin filters, for example if\nyou have a Python list in context called,mylist,:,,{,%,,for,,x,,in,,mylist,,|,,reverse,,%,},,{,%,,endfor,,%,},,,,,,Context Processors,\u00b6,,To inject new variables automatically into the context of a template,\ncontext processors exist in Flask.  Context processors run before the\ntemplate is rendered and have the ability to inject new values into the\ntemplate context.  A context processor is a function that returns a\ndictionary.  The keys and values of this dictionary are then merged with\nthe template context, for all templates in the app:,,@app,.,context_processor,,def,,inject_user,():,,return,,dict,(,user,=,g,.,user,),,,,The context processor above makes a variable called,user,available in\nthe template with the value of,g.user,.  This example is not very\ninteresting because,g,is available in templates anyways, but it gives an\nidea how this works.,,Variables are not limited to values; a context processor can also make\nfunctions available to templates (since Python allows passing around\nfunctions):,,@app,.,context_processor,,def,,utility_processor,():,,def,,format_price,(,amount,,,,currency,=,u,'\u20ac',):,,return,,u,',{0:.2f}{1},',.,format,(,amount,,,,currency,),,return,,dict,(,format_price,=,format_price,),,,,The context processor above makes the,format_price,function available to all\ntemplates:,,{{,,format_price,(,0.33,),,}},,,,You could also build,format_price,as a template filter (see,Registering Filters,), but this demonstrates how to pass functions in a\ncontext processor.,,,,,,,,,,,,,Contents,,,Templates,,Jinja Setup,,Standard Context,,Standard Filters,,Controlling Autoescaping,,Registering Filters,,Context Processors,,,,,Navigation,,,Overview,,,Previous:,Bonus: Testing the Application,,Next:,Testing Flask Applications,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Step 8: Adding Style", "url": "http://flask.pocoo.org/docs/0.12/tutorial/css/", "content": ",,,,,Step 8: Adding Style \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,Tutorial,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,Step 8: Adding Style,\u00b6,,Now that everything else works, it\u2019s time to add some style to the\napplication.  Just create a stylesheet called,style.css,in the,static,folder:,,body,,{,,font-family,:,,sans-serif,;,,background,:,,#eee,;,,},,a,,,,h1,,,,h2,,{,,color,:,,#377ba8,;,,},,h1,,,,h2,,{,,font-family,:,,'Georgia',,,,serif,;,,margin,:,,0,;,,},,h1,,{,,border-bottom,:,,2,px,,solid,,#eee,;,,},,h2,,{,,font-size,:,,1.2,em,;,,},,.,page,,{,,margin,:,,2,em,,auto,;,,width,:,,35,em,;,,border,:,,5,px,,solid,,#ccc,;,,padding,:,,0.8,em,;,,background,:,,white,;,,},,.,entries,,{,,list-style,:,,none,;,,margin,:,,0,;,,padding,:,,0,;,,},,.,entries,,li,,{,,margin,:,,0.8,em,,1.2,em,;,,},,.,entries,,li,,h2,,{,,margin-left,:,,-1,em,;,,},,.,add-entry,,{,,font-size,:,,0.9,em,;,,border-bottom,:,,1,px,,solid,,#ccc,;,,},,.,add-entry,,dl,,{,,font-weight,:,,bold,;,,},,.,metanav,,{,,text-align,:,,right,;,,font-size,:,,0.8,em,;,,padding,:,,0.3,em,;,,margin-bottom,:,,1,em,;,,background,:,,#fafafa,;,,},,.,flash,,{,,background,:,,#cee5F5,;,,padding,:,,0.5,em,;,,border,:,,1,px,,solid,,#aacbe2,;,,},,.,error,,{,,background,:,,#f0d6d6,;,,padding,:,,0.5,em,;,,},,,,Continue with,Bonus: Testing the Application,.,,,,,,,,,,,Navigation,,,Overview,,,Tutorial,,,Previous:,Step 7: The Templates,,Next:,Bonus: Testing the Application,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Step 7: The Templates", "url": "http://flask.pocoo.org/docs/0.12/tutorial/templates/", "content": ",,,,,Step 7: The Templates \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,Tutorial,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,Step 7: The Templates,\u00b6,,Now it is time to start working on the templates.  As you may have\nnoticed, if you make requests with the app running, you will get\nan exception that Flask cannot find the templates.  The templates\nare using,Jinja2,syntax and have autoescaping enabled by\ndefault.  This means that unless you mark a value in the code with,Markup,or with the,|safe,filter in the template,\nJinja2 will ensure that special characters such as,<,or,>,are\nescaped with their XML equivalents.,,We are also using template inheritance which makes it possible to reuse\nthe layout of the website in all pages.,,Put the following templates into the,templates,folder:,,,layout.html,\u00b6,,This template contains the HTML skeleton, the header and a link to log in\n(or log out if the user was already logged in).  It also displays the\nflashed messages if there are any.  The,{%,,block,,body,,%},block can be\nreplaced by a block of the same name (,body,) in a child template.,,The,session,dict is available in the template as well and\nyou can use that to check if the user is logged in or not.  Note that in\nJinja you can access missing attributes and items of objects / dicts which\nmakes the following code work, even if there is no,'logged_in',key in\nthe session:,,<!doctype html>,,<,title,>,Flaskr,</,title,>,,<,link,,rel,=,stylesheet,,type,=,text/css,,href,=,\",{{,,url_for,(,'static',,,,filename,=,'style.css',),,}},\",>,,<,div,,class,=,page,>,,<,h1,>,Flaskr,</,h1,>,,<,div,,class,=,metanav,>,,{%,,if,,not,,session.logged_in,,%},,<,a,,href,=,\",{{,,url_for,(,'login',),,}},\",>,log in,</,a,>,,{%,,else,,%},,<,a,,href,=,\",{{,,url_for,(,'logout',),,}},\",>,log out,</,a,>,,{%,,endif,,%},,</,div,>,,{%,,for,,message,,in,,get_flashed_messages,(),,%},,<,div,,class,=,flash,>,{{,,message,,}},</,div,>,,{%,,endfor,,%},,{%,,block,,body,,%}{%,,endblock,,%},,</,div,>,,,,,,show_entries.html,\u00b6,,This template extends the,layout.html,template from above to display the\nmessages.  Note that the,for,loop iterates over the messages we passed\nin with the,render_template(),function.  Notice that the form is\nconfigured to to submit to the,add_entry,view function and use,POST,as\nHTTP method:,,{%,,extends,,\"layout.html\",,%},,{%,,block,,body,,%},,{%,,if,,session.logged_in,,%},,<,form,,action,=,\",{{,,url_for,(,'add_entry',),,}},\",,method,=,post,,class,=,add-entry,>,,<,dl,>,,<,dt,>,Title:,<,dd,><,input,,type,=,text,,size,=,30,,name,=,title,>,,<,dt,>,Text:,<,dd,><,textarea,,name,=,text,,rows,=,5,,cols,=,40,></,textarea,>,,<,dd,><,input,,type,=,submit,,value,=,Share,>,,</,dl,>,,</,form,>,,{%,,endif,,%},,<,ul,,class,=,entries,>,,{%,,for,,entry,,in,,entries,,%},,<,li,><,h2,>,{{,,entry.title,,}},</,h2,>,{{,,entry.text,|,safe,,}},,{%,,else,,%},,<,li,><,em,>,Unbelievable.  No entries here so far,</,em,>,,{%,,endfor,,%},,</,ul,>,,{%,,endblock,,%},,,,,,login.html,\u00b6,,This is the login template, which basically just displays a form to allow\nthe user to login:,,{%,,extends,,\"layout.html\",,%},,{%,,block,,body,,%},,<,h2,>,Login,</,h2,>,,{%,,if,,error,,%},<,p,,class,=,error,><,strong,>,Error:,</,strong,>,,{{,,error,,}}{%,,endif,,%},,<,form,,action,=,\",{{,,url_for,(,'login',),,}},\",,method,=,post,>,,<,dl,>,,<,dt,>,Username:,<,dd,><,input,,type,=,text,,name,=,username,>,,<,dt,>,Password:,<,dd,><,input,,type,=,password,,name,=,password,>,,<,dd,><,input,,type,=,submit,,value,=,Login,>,,</,dl,>,,</,form,>,,{%,,endblock,,%},,,,Continue with,Step 8: Adding Style,.,,,,,,,,,,,,,Contents,,,Step 7: The Templates,,layout.html,,show_entries.html,,login.html,,,,,Navigation,,,Overview,,,Tutorial,,,Previous:,Step 6: The View Functions,,Next:,Step 8: Adding Style,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Bonus: Testing the Application", "url": "http://flask.pocoo.org/docs/0.12/tutorial/testing/", "content": ",,,,,Bonus: Testing the Application \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,Tutorial,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,Bonus: Testing the Application,\u00b6,,Now that you have finished the application and everything works as\nexpected, it\u2019s probably not a bad idea to add automated tests to simplify\nmodifications in the future.  The application above is used as a basic\nexample of how to perform unit testing in the,Testing Flask Applications,section of the\ndocumentation.  Go there to see how easy it is to test Flask applications.,,,Adding tests to flaskr,\u00b6,,Assuming you have seen the,Testing Flask Applications,section and have either written\nyour own tests for,flaskr,or have followed along with the examples\nprovided, you might be wondering about ways to organize the project.,,One possible and recommended project structure is:,,flaskr,/,,flaskr,/,,__init__,.,py,,static,/,,templates,/,,tests,/,,test_flaskr,.,py,,setup,.,py,,MANIFEST,.,in,,,,For now go ahead a create the,tests/,directory as well as the,test_flaskr.py,file.,,,,Running the tests,\u00b6,,At this point you can run the tests. Here,pytest,will be used.,,,Note,,Make sure that,pytest,is installed in the same virtualenv\nas flaskr. Otherwise,pytest,test will not be able to import the\nrequired components to test the application:,,pip,,install,,-,e,,.,,pip,,install,,pytest,,,,,Run and watch the tests pass, within the top-level,flaskr/,directory as:,,py,.,test,,,,,,Testing + setuptools,\u00b6,,One way to handle testing is to integrate it with,setuptools,. Here\nthat requires adding a couple of lines to the,setup.py,file and\ncreating a new file,setup.cfg,. One benefit of running the tests\nthis way is that you do not have to install,pytest,. Go ahead and\nupdate the,setup.py,file to contain:,,from,,setuptools,,import,,setup,,setup,(,,name,=,'flaskr',,,,packages,=,[,'flaskr',],,,include_package_data,=,True,,,,install_requires,=,[,,'flask',,,,],,,setup_requires,=,[,,'pytest-runner',,,,],,,tests_require,=,[,,'pytest',,,,],,,),,,,Now create,setup.cfg,in the project root (alongside,setup.py,):,,[,aliases,],,test,=,pytest,,,,Now you can run:,,python,,setup,.,py,,test,,,,This calls on the alias created in,setup.cfg,which in turn runs,pytest,via,pytest-runner,, as the,setup.py,script has\nbeen called. (Recall the,setup_requires,argument in,setup.py,)\nFollowing the standard rules of test-discovery your tests will be\nfound, run, and hopefully pass.,,This is one possible way to run and manage testing.  Here,pytest,is\nused, but there are other options such as,nose,.  Integrating testing\nwith,setuptools,is convenient because it is not necessary to actually\ndownload,pytest,or any other testing framework one might use.,,,,,,,,,,,,,Contents,,,Bonus: Testing the Application,,Adding tests to flaskr,,Running the tests,,Testing + setuptools,,,,,Navigation,,,Overview,,,Tutorial,,,Previous:,Step 8: Adding Style,,Next:,Templates,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Step 5: Creating The Database", "url": "http://flask.pocoo.org/docs/0.12/tutorial/dbinit/", "content": ",,,,,Step 5: Creating The Database \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,Tutorial,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,Step 5: Creating The Database,\u00b6,,As outlined earlier, Flaskr is a database powered application, and more\nprecisely, it is an application powered by a relational database system.  Such\nsystems need a schema that tells them how to store that information.\nBefore starting the server for the first time, it\u2019s important to create\nthat schema.,,Such a schema can be created by piping the,schema.sql,file into the,sqlite3,command as follows:,,sqlite3,,/,tmp,/,flaskr,.,db,,<,,schema,.,sql,,,,The downside of this is that it requires the,sqlite3,command to be\ninstalled, which is not necessarily the case on every system.  This also\nrequires that you provide the path to the database, which can introduce\nerrors.  It\u2019s a good idea to add a function that initializes the database\nfor you, to the application.,,To do this, you can create a function and hook it into a,flask,command that initializes the database.  For now just take a look at the\ncode segment below.  A good place to add this function, and command, is\njust below the,connect_db,function in,flaskr.py,:,,def,,init_db,():,,db,,=,,get_db,(),,with,,app,.,open_resource,(,'schema.sql',,,,mode,=,'r',),,as,,f,:,,db,.,cursor,(),.,executescript,(,f,.,read,()),,db,.,commit,(),,@app,.,cli,.,command,(,'initdb',),,def,,initdb_command,():,,\"\"\"Initializes the database.\"\"\",,init_db,(),,print,(,'Initialized the database.',),,,,The,app.cli.command(),decorator registers a new command with the,flask,script.  When the command executes, Flask will automatically\ncreate an application context which is bound to the right application.\nWithin the function, you can then access,flask.g,and other things as\nyou might expect.  When the script ends, the application context tears down\nand the database connection is released.,,You will want to keep an actual function around that initializes the database,\nthough, so that we can easily create databases in unit tests later on.  (For\nmore information see,Testing Flask Applications,.),,The,open_resource(),method of the application object\nis a convenient helper function that will open a resource that the\napplication provides.  This function opens a file from the resource\nlocation (the,flaskr/flaskr,folder) and allows you to read from it.\nIt is used in this example to execute a script on the database connection.,,The connection object provided by SQLite can give you a cursor object.\nOn that cursor, there is a method to execute a complete script.  Finally, you\nonly have to commit the changes.  SQLite3 and other transactional\ndatabases will not commit unless you explicitly tell it to.,,Now, it is possible to create a database with the,flask,script:,,flask,,initdb,,Initialized,,the,,database,.,,,,,Troubleshooting,,If you get an exception later on stating that a table cannot be found, check\nthat you did execute the,initdb,command and that your table names are\ncorrect (singular vs. plural, for example).,,,Continue with,Step 6: The View Functions,,,,,,,,,,,Navigation,,,Overview,,,Tutorial,,,Previous:,Step 4: Database Connections,,Next:,Step 6: The View Functions,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Step 6: The View Functions", "url": "http://flask.pocoo.org/docs/0.12/tutorial/views/", "content": ",,,,,Step 6: The View Functions \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,Tutorial,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,Step 6: The View Functions,\u00b6,,Now that the database connections are working, you can start writing the\nview functions.  You will need four of them:,,,Show Entries,\u00b6,,This view shows all the entries stored in the database.  It listens on the\nroot of the application and will select title and text from the database.\nThe one with the highest id (the newest entry) will be on top.  The rows\nreturned from the cursor look a bit like dictionaries because we are using\nthe,sqlite3.Row,row factory.,,The view function will pass the entries to the,show_entries.html,template and return the rendered one:,,@app,.,route,(,'/',),,def,,show_entries,():,,db,,=,,get_db,(),,cur,,=,,db,.,execute,(,'select title, text from entries order by id desc',),,entries,,=,,cur,.,fetchall,(),,return,,render_template,(,'show_entries.html',,,,entries,=,entries,),,,,,,Add New Entry,\u00b6,,This view lets the user add new entries if they are logged in.  This only\nresponds to,POST,requests; the actual form is shown on the,show_entries,page.  If everything worked out well, it will,flash(),an information message to the next request and\nredirect back to the,show_entries,page:,,@app,.,route,(,'/add',,,,methods,=,[,'POST',]),,def,,add_entry,():,,if,,not,,session,.,get,(,'logged_in',):,,abort,(,401,),,db,,=,,get_db,(),,db,.,execute,(,'insert into entries (title, text) values (?, ?)',,,,[,request,.,form,[,'title',],,,request,.,form,[,'text',]]),,db,.,commit,(),,flash,(,'New entry was successfully posted',),,return,,redirect,(,url_for,(,'show_entries',)),,,,Note that this view checks that the user is logged in (that is, if the,logged_in,key is present in the session and,True,).,,,Security Note,,Be sure to use question marks when building SQL statements, as done in the\nexample above.  Otherwise, your app will be vulnerable to SQL injection when\nyou use string formatting to build SQL statements.\nSee,Using SQLite 3 with Flask,for more.,,,,,Login and Logout,\u00b6,,These functions are used to sign the user in and out.  Login checks the\nusername and password against the ones from the configuration and sets the,logged_in,key for the session.  If the user logged in successfully, that\nkey is set to,True,, and the user is redirected back to the,show_entries,page.  In addition, a message is flashed that informs the user that he or\nshe was logged in successfully.  If an error occurred, the template is\nnotified about that, and the user is asked again:,,@app,.,route,(,'/login',,,,methods,=,[,'GET',,,,'POST',]),,def,,login,():,,error,,=,,None,,if,,request,.,method,,==,,'POST',:,,if,,request,.,form,[,'username',],,!=,,app,.,config,[,'USERNAME',]:,,error,,=,,'Invalid username',,elif,,request,.,form,[,'password',],,!=,,app,.,config,[,'PASSWORD',]:,,error,,=,,'Invalid password',,else,:,,session,[,'logged_in',],,=,,True,,flash,(,'You were logged in',),,return,,redirect,(,url_for,(,'show_entries',)),,return,,render_template,(,'login.html',,,,error,=,error,),,,,The,logout,function, on the other hand, removes that key from the session\nagain.  There is a neat trick here: if you use the,pop(),method\nof the dict and pass a second parameter to it (the default), the method\nwill delete the key from the dictionary if present or do nothing when that\nkey is not in there.  This is helpful because now it is not necessary to\ncheck if the user was logged in.,,@app,.,route,(,'/logout',),,def,,logout,():,,session,.,pop,(,'logged_in',,,,None,),,flash,(,'You were logged out',),,return,,redirect,(,url_for,(,'show_entries',)),,,,,Security Note,,Passwords should never be stored in plain text in a production\nsystem. This tutorial uses plain text passwords for simplicity. If you\nplan to release a project based off this tutorial out into the world,\npasswords should be both,hashed and salted,before being stored in a\ndatabase or file.,,Fortunately, there are Flask extensions for the purpose of\nhashing passwords and verifying passwords against hashes, so adding\nthis functionality is fairly straight forward. There are also\nmany general python libraries that can be used for hashing.,,You can find a list of recommended Flask extensions,here,,,Continue with,Step 7: The Templates,.,,,,,,,,,,,,,Contents,,,Step 6: The View Functions,,Show Entries,,Add New Entry,,Login and Logout,,,,,Navigation,,,Overview,,,Tutorial,,,Previous:,Step 5: Creating The Database,,Next:,Step 7: The Templates,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Step 3: Installing flaskr as a Package", "url": "http://flask.pocoo.org/docs/0.12/tutorial/packaging/", "content": ",,,,,Step 3: Installing flaskr as a Package \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,Tutorial,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,Step 3: Installing flaskr as a Package,\u00b6,,Flask is now shipped with built-in support for,Click,.  Click provides\nFlask with enhanced and extensible command line utilities.  Later in this\ntutorial you will see exactly how to extend the,flask,command line\ninterface (CLI).,,A useful pattern to manage a Flask application is to install your app\nfollowing the,Python Packaging Guide,.  Presently this involves\ncreating two new files;,setup.py,and,MANIFEST.in,in the\nprojects root directory.  You also need to add an,__init__.py,file to make the,flaskr/flaskr,directory a package.  After these\nchanges, your code structure should be:,,/,flaskr,,/,flaskr,,__init__,.,py,,/,static,,/,templates,,flaskr,.,py,,schema,.,sql,,setup,.,py,,MANIFEST,.,in,,,,The content of the,setup.py,file for,flaskr,is:,,from,,setuptools,,import,,setup,,setup,(,,name,=,'flaskr',,,,packages,=,[,'flaskr',],,,include_package_data,=,True,,,,install_requires,=,[,,'flask',,,,],,,),,,,When using setuptools, it is also necessary to specify any special files\nthat should be included in your package (in the,MANIFEST.in,).\nIn this case, the static and templates directories need to be included,\nas well as the schema. Create the,MANIFEST.in,and add the\nfollowing lines:,,graft,,flaskr,/,templates,,graft,,flaskr,/,static,,include,,flaskr,/,schema,.,sql,,,,To simplify locating the application, add the following import statement\ninto this file,,flaskr/__init__.py,:,,from,,.flaskr,,import,,app,,,,This import statement brings the application instance into the top-level\nof the application package.  When it is time to run the application, the\nFlask development server needs the location of the app instance.  This\nimport statement simplifies the location process.  Without it the export\nstatement a few steps below would need to be,export,,FLASK_APP=flaskr.flaskr,.,,At this point you should be able to install the application.  As usual, it\nis recommended to install your Flask application within a,virtualenv,.\nWith that said, go ahead and install the application with:,,pip,,install,,--,editable,,.,,,,The above installation command assumes that it is run within the projects\nroot directory,,flaskr/,.  The,editable,flag allows editing\nsource code without having to reinstall the Flask app each time you make\nchanges.  The flaskr app is now installed in your virtualenv (see output\nof,pip,,freeze,).,,With that out of the way, you should be able to start up the application.\nDo this with the following commands:,,export,,FLASK_APP,=,flaskr,,export,,FLASK_DEBUG,=,true,,flask,,run,,,,(In case you are on Windows you need to use,set,instead of,export,).\nThe,FLASK_DEBUG,flag enables or disables the interactive debugger.,Never leave debug mode activated in a production system,, because it will\nallow users to execute code on the server!,,You will see a message telling you that server has started along with\nthe address at which you can access it.,,When you head over to the server in your browser, you will get a 404 error\nbecause we don\u2019t have any views yet.  That will be addressed a little later,\nbut first, you should get the database working.,,,Externally Visible Server,,Want your server to be publicly available?  Check out the,externally visible server,section for more\ninformation.,,,Continue with,Step 4: Database Connections,.,,,,,,,,,,,Navigation,,,Overview,,,Tutorial,,,Previous:,Step 2: Application Setup Code,,Next:,Step 4: Database Connections,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Step 2: Application Setup Code", "url": "http://flask.pocoo.org/docs/0.12/tutorial/setup/", "content": ",,,,,Step 2: Application Setup Code \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,Tutorial,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,Step 2: Application Setup Code,\u00b6,,Now that the schema is in place, you can create the application module,,flaskr.py,.  This file should be placed inside of the,flaskr/flaskr,folder.  The first several lines of code in the\napplication module are the needed import statements.  After that there will be a\nfew lines of configuration code. For small applications like,flaskr,, it is\npossible to drop the configuration directly into the module.  However, a cleaner\nsolution is to create a separate,.ini,or,.py,file, load that, and\nimport the values from there.,,Here are the import statements (in,flaskr.py,):,,# all the imports,,import,,os,,import,,sqlite3,,from,,flask,,import,,Flask,,,,request,,,,session,,,,g,,,,redirect,,,,url_for,,,,abort,,,\\,render_template,,,,flash,,,,The next couple lines will create the actual application instance and\ninitialize it with the config from the same file in,flaskr.py,:,,app,,=,,Flask,(,__name__,),,# create the application instance :),,app,.,config,.,from_object,(,__name__,),,# load config from this file , flaskr.py,,# Load default config and override config from an environment variable,,app,.,config,.,update,(,dict,(,,DATABASE,=,os,.,path,.,join,(,app,.,root_path,,,,'flaskr.db',),,,SECRET_KEY,=,'development key',,,,USERNAME,=,'admin',,,,PASSWORD,=,'default',,)),,app,.,config,.,from_envvar,(,'FLASKR_SETTINGS',,,,silent,=,True,),,,,The,Config,object works similarly to a dictionary, so it can be\nupdated with new values.,,,Database Path,,Operating systems know the concept of a current working directory for\neach process.  Unfortunately, you cannot depend on this in web\napplications because you might have more than one application in the\nsame process.,,For this reason the,app.root_path,attribute can be used to\nget the path to the application.  Together with the,os.path,module,\nfiles can then easily be found.  In this example, we place the\ndatabase right next to it.,,For a real-world application, it\u2019s recommended to use,Instance Folders,instead.,,,Usually, it is a good idea to load a separate, environment-specific\nconfiguration file.  Flask allows you to import multiple configurations and it\nwill use the setting defined in the last import.  This enables robust\nconfiguration setups.,from_envvar(),can help achieve this.,,app,.,config,.,from_envvar,(,'FLASKR_SETTINGS',,,,silent,=,True,),,,,Simply define the environment variable,FLASKR_SETTINGS,that points to\na config file to be loaded.  The silent switch just tells Flask to not complain\nif no such environment key is set.,,In addition to that, you can use the,from_object(),method on the config object and provide it with an import name of a\nmodule.  Flask will then initialize the variable from that module.  Note\nthat in all cases, only variable names that are uppercase are considered.,,The,SECRET_KEY,is needed to keep the client-side sessions secure.\nChoose that key wisely and as hard to guess and complex as possible.,,Lastly, you will add a method that allows for easy connections to the\nspecified database.  This can be used to open a connection on request and\nalso from the interactive Python shell or a script.  This will come in\nhandy later.  You can create a simple database connection through SQLite and\nthen tell it to use the,sqlite3.Row,object to represent rows.\nThis allows the rows to be treated as if they were dictionaries instead of\ntuples.,,def,,connect_db,():,,\"\"\"Connects to the specific database.\"\"\",,rv,,=,,sqlite3,.,connect,(,app,.,config,[,'DATABASE',]),,rv,.,row_factory,,=,,sqlite3,.,Row,,return,,rv,,,,In the next section you will see how to run the application.,,Continue with,Step 3: Installing flaskr as a Package,.,,,,,,,,,,,Navigation,,,Overview,,,Tutorial,,,Previous:,Step 1: Database Schema,,Next:,Step 3: Installing flaskr as a Package,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Step 0: Creating The Folders", "url": "http://flask.pocoo.org/docs/0.12/tutorial/folders/", "content": ",,,,,Step 0: Creating The Folders \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,Tutorial,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,Step 0: Creating The Folders,\u00b6,,Before getting started, you will need to create the folders needed for this\napplication:,,/,flaskr,,/,flaskr,,/,static,,/,templates,,,,The application will be installed and run as Python package.  This is the\nrecommended way to install and run Flask applications.  You will see exactly\nhow to run,flaskr,later on in this tutorial.  For now go ahead and create\nthe applications directory structure.  In the next few steps you will be\ncreating the database schema as well as the main module.,,As a quick side note, the files inside of the,static,folder are\navailable to users of the application via HTTP.  This is the place where CSS and\nJavaScript files go.  Inside the,templates,folder, Flask will look for,Jinja2,templates.  You will see examples of this later on.,,For now you should continue with,Step 1: Database Schema,.,,,,,,,,,,,Navigation,,,Overview,,,Tutorial,,,Previous:,Introducing Flaskr,,Next:,Step 1: Database Schema,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Step 1: Database Schema", "url": "http://flask.pocoo.org/docs/0.12/tutorial/schema/", "content": ",,,,,Step 1: Database Schema \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,Tutorial,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,Step 1: Database Schema,\u00b6,,In this step, you will create the database schema.  Only a single table is\nneeded for this application and it will only support SQLite.  All you need to do\nis put the following contents into a file named,schema.sql,in the,flaskr/flaskr,folder:,,drop,,table,,if,,exists,,entries,;,,create,,table,,entries,,(,,id,,integer,,primary,,key,,autoincrement,,,,title,,text,,not,,null,,,,'text',,text,,not,,null,,);,,,,This schema consists of a single table called,entries,.  Each row in\nthis table has an,id,, a,title,, and a,text,.  The,id,is an\nautomatically incrementing integer and a primary key, the other two are\nstrings that must not be null.,,Continue with,Step 2: Application Setup Code,.,,,,,,,,,,,Navigation,,,Overview,,,Tutorial,,,Previous:,Step 0: Creating The Folders,,Next:,Step 2: Application Setup Code,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Introducing Flaskr", "url": "http://flask.pocoo.org/docs/0.12/tutorial/introduction/", "content": ",,,,,Introducing Flaskr \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,Tutorial,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,Introducing Flaskr,\u00b6,,This tutorial will demonstrate a blogging application named Flaskr, but feel\nfree to choose your own less Web-2.0-ish name ;)  Essentially, it will do the\nfollowing things:,,,Let the user sign in and out with credentials specified in the\nconfiguration.  Only one user is supported.,,When the user is logged in, they can add new entries to the page\nconsisting of a text-only title and some HTML for the text.  This HTML\nis not sanitized because we trust the user here.,,The index page shows all entries so far in reverse chronological order\n(newest on top) and the user can add new ones from there if logged in.,,,SQLite3 will be used directly for this application because it\u2019s good enough\nfor an application of this size.  For larger applications, however,\nit makes a lot of sense to use,SQLAlchemy,, as it handles database\nconnections in a more intelligent way, allowing you to target different\nrelational databases at once and more.  You might also want to consider\none of the popular NoSQL databases if your data is more suited for those.,,Here a screenshot of the final application:,,,Continue with,Step 0: Creating The Folders,.,,,,,,,,,,,Navigation,,,Overview,,,Tutorial,,,Previous:,Tutorial,,Next:,Step 0: Creating The Folders,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Patterns for Flask", "url": "http://flask.pocoo.org/docs/0.12/patterns/", "content": ",,,,,Patterns for Flask \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,Patterns for Flask,\u00b6,,Certain things are common enough that the chances are high you will find\nthem in most web applications.  For example quite a lot of applications\nare using relational databases and user authentication.  In that case,\nchances are they will open a database connection at the beginning of the\nrequest and get the information of the currently logged in user.  At the\nend of the request, the database connection is closed again.,,There are more user contributed snippets and patterns in the,Flask\nSnippet Archives,.,,,,Larger Applications,,Simple Packages,,Working with Blueprints,,,,Application Factories,,Basic Factories,,Factories & Extensions,,Using Applications,,Factory Improvements,,,,Application Dispatching,,Working with this Document,,Combining Applications,,Dispatch by Subdomain,,Dispatch by Path,,,,Implementing API Exceptions,,Simple Exception Class,,Registering an Error Handler,,Usage in Views,,,,Using URL Processors,,Internationalized Application URLs,,Internationalized Blueprint URLs,,,,Deploying with Setuptools,,Basic Setup Script,,Tagging Builds,,Distributing Resources,,Declaring Dependencies,,Installing / Developing,,,,Deploying with Fabric,,Creating the first Fabfile,,Running Fabfiles,,The WSGI File,,The Configuration File,,First Deployment,,Next Steps,,,,Using SQLite 3 with Flask,,Connect on Demand,,Easy Querying,,Initial Schemas,,,,SQLAlchemy in Flask,,Flask-SQLAlchemy Extension,,Declarative,,Manual Object Relational Mapping,,SQL Abstraction Layer,,,,Uploading Files,,A Gentle Introduction,,Improving Uploads,,Upload Progress Bars,,An Easier Solution,,,,Caching,,Setting up a Cache,,Using a Cache,,,,View Decorators,,Login Required Decorator,,Caching Decorator,,Templating Decorator,,Endpoint Decorator,,,,Form Validation with WTForms,,The Forms,,In the View,,Forms in Templates,,,,Template Inheritance,,Base Template,,Child Template,,,,Message Flashing,,Simple Flashing,,Flashing With Categories,,Filtering Flash Messages,,,,AJAX with jQuery,,Loading jQuery,,Where is My Site?,,JSON View Functions,,The HTML,,,,Custom Error Pages,,Common Error Codes,,Error Handlers,,,,Lazily Loading Views,,Converting to Centralized URL Map,,Loading Late,,,,MongoKit in Flask,,Declarative,,PyMongo Compatibility Layer,,,,Adding a favicon,,See also,,,,Streaming Contents,,Basic Usage,,Streaming from Templates,,Streaming with Context,,,,Deferred Request Callbacks,,The Decorator,,Calling the Deferred,,A Practical Example,,,,Adding HTTP Method Overrides,,Request Content Checksums,,Celery Based Background Tasks,,Installing Celery,,Configuring Celery,,Minimal Example,,Running the Celery Worker,,,,Subclassing Flask,,,,,,,,,,,,,Navigation,,,Overview,,,Previous:,Working with the Shell,,Next:,Larger Applications,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Foreword for Experienced Programmers", "url": "http://flask.pocoo.org/docs/0.12/advanced_foreword/", "content": ",,,,,Foreword for Experienced Programmers \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,Foreword for Experienced Programmers,\u00b6,,,Thread-Locals in Flask,\u00b6,,One of the design decisions in Flask was that simple tasks should be simple;\nthey should not take a lot of code and yet they should not limit you. Because\nof that, Flask has a few design choices that some people might find surprising or\nunorthodox. For example, Flask uses thread-local objects internally so that you\ndon\u2019t have to pass objects around from function to function within a request in\norder to stay threadsafe. This approach is convenient, but requires a valid\nrequest context for dependency injection or when attempting to reuse code which\nuses a value pegged to the request.  The Flask project is honest about\nthread-locals, does not hide them, and calls out in the code and documentation\nwhere they are used.,,,,Develop for the Web with Caution,\u00b6,,Always keep security in mind when building web applications.,,If you write a web application, you are probably allowing users to register\nand leave their data on your server.  The users are entrusting you with data.\nAnd even if you are the only user that might leave data in your application,\nyou still want that data to be stored securely.,,Unfortunately, there are many ways the security of a web application can be\ncompromised.  Flask protects you against one of the most common security\nproblems of modern web applications: cross-site scripting (XSS).  Unless you\ndeliberately mark insecure HTML as secure, Flask and the underlying Jinja2\ntemplate engine have you covered.  But there are many more ways to cause\nsecurity problems.,,The documentation will warn you about aspects of web development that require\nattention to security.  Some of these security concerns are far more complex\nthan one might think, and we all sometimes underestimate the likelihood that a\nvulnerability will be exploited - until a clever attacker figures out a way to\nexploit our applications.  And don\u2019t think that your application is not\nimportant enough to attract an attacker.  Depending on the kind of attack,\nchances are that automated bots are probing for ways to fill your database with\nspam, links to malicious software, and the like.,,Flask is no different from any other framework in that you the developer must\nbuild with caution, watching for exploits when building to your requirements.,,,,Python 3 Support in Flask,\u00b6,,Flask, its dependencies, and most Flask extensions all support Python 3.\nIf you want to use Flask with Python 3 have a look at the,Python 3 Support,page.,,Continue to,Installation,or the,Quickstart,.,,,,,,,,,,,,,Contents,,,Foreword for Experienced Programmers,,Thread-Locals in Flask,,Develop for the Web with Caution,,Python 3 Support in Flask,,,,,Navigation,,,Overview,,,Previous:,Foreword,,Next:,Installation,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Welcome to Flask", "url": "http://flask.pocoo.org/docs/dev/", "content": ",,,,,Welcome to Flask \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '';,,,,Navigation,,,,index,,,modules,|,,,next,|,,Flask 1.1.dev documentation,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,Welcome to Flask,\u00b6,,,Welcome to Flask\u2019s documentation. Get started with,Installation,and then get an overview with the,Quickstart,. There is also a\nmore detailed,Tutorial,that shows how to create a small but\ncomplete application with Flask. Common patterns are described in the,Patterns for Flask,section. The rest of the docs describe each component of\nFlask in detail, with a full reference in the,API,section.,,Flask depends on the,Jinja,template engine and the,Werkzeug,WSGI\ntoolkit. The documentation for these libraries can be found at:,,,Jinja documentation,,Werkzeug documentation,,,,User\u2019s Guide,\u00b6,,This part of the documentation, which is mostly prose, begins with some\nbackground information about Flask, then focuses on step-by-step\ninstructions for web development with Flask.,,,,Foreword,,What does \u201cmicro\u201d mean?,,Configuration and Conventions,,Growing with Flask,,,,Foreword for Experienced Programmers,,Thread-Locals in Flask,,Develop for the Web with Caution,,,,Installation,,Python Version,,Dependencies,,Virtual environments,,Install Flask,,Install virtualenv,,,,Quickstart,,A Minimal Application,,What to do if the Server does not Start,,Debug Mode,,Routing,,Static Files,,Rendering Templates,,Accessing Request Data,,Redirects and Errors,,About Responses,,Sessions,,Message Flashing,,Logging,,Hooking in WSGI Middlewares,,Using Flask Extensions,,Deploying to a Web Server,,,,Tutorial,,Project Layout,,Application Setup,,Define and Access the Database,,Blueprints and Views,,Templates,,Static Files,,Blog Blueprint,,Make the Project Installable,,Test Coverage,,Deploy to Production,,Keep Developing!,,,,Templates,,Jinja Setup,,Standard Context,,Standard Filters,,Controlling Autoescaping,,Registering Filters,,Context Processors,,,,Testing Flask Applications,,The Application,,The Testing Skeleton,,The First Test,,Logging In and Out,,Test Adding Messages,,Other Testing Tricks,,Faking Resources and Context,,Keeping the Context Around,,Accessing and Modifying Sessions,,Testing JSON APIs,,Testing CLI Commands,,,,Application Errors,,Error Logging Tools,,Error handlers,,Logging,,,,Debugging Application Errors,,When in Doubt, Run Manually,,Working with Debuggers,,,,Logging,,Basic Configuration,,Email Errors to Admins,,Injecting Request Information,,Other Libraries,,,,Configuration Handling,,Configuration Basics,,Environment and Debug Features,,Builtin Configuration Values,,Configuring from Files,,Configuring from Environment Variables,,Configuration Best Practices,,Development / Production,,Instance Folders,,,,Signals,,Subscribing to Signals,,Creating Signals,,Sending Signals,,Signals and Flask\u2019s Request Context,,Decorator Based Signal Subscriptions,,Core Signals,,,,Pluggable Views,,Basic Principle,,Method Hints,,Method Based Dispatching,,Decorating Views,,Method Views for APIs,,,,The Application Context,,Purpose of the Context,,Lifetime of the Context,,Manually Push a Context,,Storing Data,,Events and Signals,,,,The Request Context,,Purpose of the Context,,Lifetime of the Context,,Manually Push a Context,,How the Context Works,,Callbacks and Errors,,Context Preservation on Error,,Notes On Proxies,,,,Modular Applications with Blueprints,,Why Blueprints?,,The Concept of Blueprints,,My First Blueprint,,Registering Blueprints,,Blueprint Resources,,Building URLs,,Error Handlers,,,,Extensions,,Finding Extensions,,Using Extensions,,Building Extensions,,,,Command Line Interface,,Application Discovery,,Run the Development Server,,Open a Shell,,Environments,,Debug Mode,,Environment Variables From dotenv,,Environment Variables From virtualenv,,Custom Commands,,Plugins,,Custom Scripts,,PyCharm Integration,,,,Development Server,,Command Line,,In Code,,,,Working with the Shell,,Command Line Interface,,Creating a Request Context,,Firing Before/After Request,,Further Improving the Shell Experience,,,,Patterns for Flask,,Larger Applications,,Application Factories,,Application Dispatching,,Implementing API Exceptions,,Using URL Processors,,Deploying with Setuptools,,Deploying with Fabric,,Using SQLite 3 with Flask,,SQLAlchemy in Flask,,Uploading Files,,Caching,,View Decorators,,Form Validation with WTForms,,Template Inheritance,,Message Flashing,,AJAX with jQuery,,Custom Error Pages,,Lazily Loading Views,,MongoKit in Flask,,Adding a favicon,,Streaming Contents,,Deferred Request Callbacks,,Adding HTTP Method Overrides,,Request Content Checksums,,Celery Background Tasks,,Subclassing Flask,,,,Deployment Options,,Hosted options,,Self-hosted options,,,,Becoming Big,,Read the Source.,,Hook. Extend.,,Subclass.,,Wrap with middleware.,,Fork.,,Scale like a pro.,,Discuss with the community.,,,,,,,,API Reference,\u00b6,,If you are looking for information on a specific function, class or\nmethod, this part of the documentation is for you.,,,,API,,Application Object,,Blueprint Objects,,Incoming Request Data,,Response Objects,,Sessions,,Session Interface,,Test Client,,Test CLI Runner,,Application Globals,,Useful Functions and Classes,,Message Flashing,,JSON Support,,Template Rendering,,Configuration,,Stream Helpers,,Useful Internals,,Signals,,Class-Based Views,,URL Route Registrations,,View Function Options,,Command Line Interface,,,,,,,,Additional Notes,\u00b6,,Design notes, legal information and changelog are here for the interested.,,,,Design Decisions in Flask,,The Explicit Application Object,,The Routing System,,One Template Engine,,Micro with Dependencies,,Thread Locals,,What Flask is, What Flask is Not,,,,HTML/XHTML FAQ,,History of XHTML,,History of HTML5,,HTML versus XHTML,,What does \u201cstrict\u201d mean?,,New technologies in HTML5,,What should be used?,,,,Security Considerations,,Cross-Site Scripting (XSS),,Cross-Site Request Forgery (CSRF),,JSON Security,,Security Headers,,,,Unicode in Flask,,Automatic Conversion,,The Golden Rule,,Encoding and Decoding Yourself,,Configuring Editors,,,,Flask Extension Development,,Anatomy of an Extension,,\u201cHello Flaskext!\u201d,,Initializing Extensions,,The Extension Code,,Using _app_ctx_stack,,Learn from Others,,Approved Extensions,,,,Pocoo Styleguide,,General Layout,,Expressions and Statements,,Naming Conventions,,Docstrings,,Comments,,,,Upgrading to Newer Releases,,Version 0.12,,Version 0.11,,Version 0.10,,Version 0.9,,Version 0.8,,Version 0.7,,Version 0.6,,Version 0.5,,Version 0.4,,Version 0.3,,,,Flask Changelog,,Version 1.1,,Version 1.0.3,,Version 1.0.2,,Version 1.0.1,,Version 1.0,,Version 0.12.4,,Version 0.12.3,,Version 0.12.2,,Version 0.12.1,,Version 0.12,,Version 0.11.2,,Version 0.11.1,,Version 0.11,,Version 0.10.2,,Version 0.10.1,,Version 0.10,,Version 0.9,,Version 0.8.1,,Version 0.8,,Version 0.7.3,,Version 0.7.2,,Version 0.7.1,,Version 0.7,,Version 0.6.1,,Version 0.6,,Version 0.5.2,,Version 0.5.1,,Version 0.5,,Version 0.4,,Version 0.3.1,,Version 0.3,,Version 0.2,,Version 0.1,,,,License,,Authors,,General License Definitions,,Flask License,,Flask Artwork License,,,,How to contribute to Flask,,Support questions,,Reporting issues,,Submitting patches,,Caution: zero-padded file modes,,,,,,,,,,,,,,,,,Project Links,,,Donate to Pallets,,Flask Website,,PyPI releases,,Source Code,,Issue Tracker,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Upgrading to Newer Releases", "url": "http://flask.pocoo.org/docs/0.12/upgrading/", "content": ",,,,,Upgrading to Newer Releases \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,Upgrading to Newer Releases,\u00b6,,Flask itself is changing like any software is changing over time.  Most of\nthe changes are the nice kind, the kind where you don\u2019t have to change\nanything in your code to profit from a new release.,,However every once in a while there are changes that do require some\nchanges in your code or there are changes that make it possible for you to\nimprove your own code quality by taking advantage of new features in\nFlask.,,This section of the documentation enumerates all the changes in Flask from\nrelease to release and how you can change your code to have a painless\nupdating experience.,,Use the,pip,command to upgrade your existing Flask installation by\nproviding the,--upgrade,parameter:,,$ pip install --upgrade Flask,,,,Version 0.12,\u00b6,,,Changes to send_file,\u00b6,,The,filename,is no longer automatically inferred from file-like objects.\nThis means that the following code will no longer automatically have,X-Sendfile,support, etag generation or MIME-type guessing:,,response,,=,,send_file,(,open,(,'/path/to/file.txt',)),,,,Any of the following is functionally equivalent:,,fname,,=,,'/path/to/file.txt',,# Just pass the filepath directly,,response,,=,,send_file,(,fname,),,# Set the MIME-type and ETag explicitly,,response,,=,,send_file,(,open,(,fname,),,,mimetype,=,'text/plain',),,response,.,set_etag,(,...,),,# Set `attachment_filename` for MIME-type guessing,,# ETag still needs to be manually set,,response,,=,,send_file,(,open,(,fname,),,,attachment_filename,=,fname,),,response,.,set_etag,(,...,),,,,The reason for this is that some file-like objects have a invalid or even\nmisleading,name,attribute. Silently swallowing errors in such cases was not\na satisfying solution.,,Additionally the default of falling back to,application/octet-stream,has\nbeen restricted. If Flask can\u2019t guess one or the user didn\u2019t provide one, the\nfunction fails if no filename information was provided.,,,,,Version 0.11,\u00b6,,0.11 is an odd release in the Flask release cycle because it was supposed\nto be the 1.0 release.  However because there was such a long lead time up\nto the release we decided to push out a 0.11 release first with some\nchanges removed to make the transition easier.  If you have been tracking\nthe master branch which was 1.0 you might see some unexpected changes.,,In case you did track the master branch you will notice that,flask --app,is removed now.  You need to use the environment variable to specify an\napplication.,,,Debugging,\u00b6,,Flask 0.11 removed the,debug_log_format,attribute from Flask\napplications.  Instead the new,LOGGER_HANDLER_POLICY,configuration can\nbe used to disable the default log handlers and custom log handlers can be\nset up.,,,,Error handling,\u00b6,,The behavior of error handlers was changed.\nThe precedence of handlers used to be based on the decoration/call order of,errorhandler(),and,register_error_handler(),, respectively.\nNow the inheritance hierarchy takes precedence and handlers for more\nspecific exception classes are executed instead of more general ones.\nSee,Error handlers,for specifics.,,Trying to register a handler on an instance now raises,ValueError,.,,,Note,,There used to be a logic error allowing you to register handlers\nonly for exception,instances,. This was unintended and plain wrong,\nand therefore was replaced with the intended behavior of registering\nhandlers only using exception classes and HTTP error codes.,,,,,Templating,\u00b6,,The,render_template_string(),function has changed to\nautoescape template variables by default. This better matches the behavior\nof,render_template(),.,,,,Extension imports,\u00b6,,Extension imports of the form,flask.ext.foo,are deprecated, you should use,flask_foo,.,,The old form still works, but Flask will issue a,flask.exthook.ExtDeprecationWarning,for each extension you import the old\nway. We also provide a migration utility called,flask-ext-migrate,that is supposed to\nautomatically rewrite your imports for this.,,,,,Version 0.10,\u00b6,,The biggest change going from 0.9 to 0.10 is that the cookie serialization\nformat changed from pickle to a specialized JSON format.  This change has\nbeen done in order to avoid the damage an attacker can do if the secret\nkey is leaked.  When you upgrade you will notice two major changes: all\nsessions that were issued before the upgrade are invalidated and you can\nonly store a limited amount of types in the session.  The new sessions are\nby design much more restricted to only allow JSON with a few small\nextensions for tuples and strings with HTML markup.,,In order to not break people\u2019s sessions it is possible to continue using\nthe old session system by using the,Flask-OldSessions,extension.,,Flask also started storing the,flask.g,object on the application\ncontext instead of the request context.  This change should be transparent\nfor you but it means that you now can store things on the,g,object\nwhen there is no request context yet but an application context.  The old,flask.Flask.request_globals_class,attribute was renamed to,flask.Flask.app_ctx_globals_class,.,,,,Version 0.9,\u00b6,,The behavior of returning tuples from a function was simplified.  If you\nreturn a tuple it no longer defines the arguments for the response object\nyou\u2019re creating, it\u2019s now always a tuple in the form,(response,,,status,,,headers),where at least one item has to be provided.  If you depend on\nthe old behavior, you can add it easily by subclassing Flask:,,class,,TraditionalFlask,(,Flask,):,,def,,make_response,(,self,,,,rv,):,,if,,isinstance,(,rv,,,,tuple,):,,return,,self,.,response_class,(,*,rv,),,return,,Flask,.,make_response,(,self,,,,rv,),,,,If you maintain an extension that was using,_request_ctx_stack,before, please consider changing to,_app_ctx_stack,if it makes\nsense for your extension.  For instance, the app context stack makes sense for\nextensions which connect to databases.  Using the app context stack instead of\nthe request context stack will make extensions more readily handle use cases\noutside of requests.,,,,Version 0.8,\u00b6,,Flask introduced a new session interface system.  We also noticed that\nthere was a naming collision between,flask.session,the module that\nimplements sessions and,flask.session,which is the global session\nobject.  With that introduction we moved the implementation details for\nthe session system into a new module called,flask.sessions,.  If you\nused the previously undocumented session support we urge you to upgrade.,,If invalid JSON data was submitted Flask will now raise a,BadRequest,exception instead of letting the\ndefault,ValueError,bubble up.  This has the advantage that you no\nlonger have to handle that error to avoid an internal server error showing\nup for the user.  If you were catching this down explicitly in the past\nas,ValueError,you will need to change this.,,Due to a bug in the test client Flask 0.7 did not trigger teardown\nhandlers when the test client was used in a with statement.  This was\nsince fixed but might require some changes in your test suites if you\nrelied on this behavior.,,,,Version 0.7,\u00b6,,In Flask 0.7 we cleaned up the code base internally a lot and did some\nbackwards incompatible changes that make it easier to implement larger\napplications with Flask.  Because we want to make upgrading as easy as\npossible we tried to counter the problems arising from these changes by\nproviding a script that can ease the transition.,,The script scans your whole application and generates an unified diff with\nchanges it assumes are safe to apply.  However as this is an automated\ntool it won\u2019t be able to find all use cases and it might miss some.  We\ninternally spread a lot of deprecation warnings all over the place to make\nit easy to find pieces of code that it was unable to upgrade.,,We strongly recommend that you hand review the generated patchfile and\nonly apply the chunks that look good.,,If you are using git as version control system for your project we\nrecommend applying the patch with,path,,-p1,,<,,patchfile.diff,and then\nusing the interactive commit feature to only apply the chunks that look\ngood.,,To apply the upgrade script do the following:,,,Download the script:,flask-07-upgrade.py,,,Run it in the directory of your application:,,python,,flask,-,07,-,upgrade,.,py,,>,,patchfile,.,diff,,,,,Review the generated patchfile.,,,Apply the patch:,,patch,,-,p1,,<,,patchfile,.,diff,,,,,If you were using per-module template folders you need to move some\ntemplates around.  Previously if you had a folder named,templates,next to a blueprint named,admin,the implicit template path\nautomatically was,admin/index.html,for a template file called,templates/index.html,.  This no longer is the case.  Now you need\nto name the template,templates/admin/index.html,.  The tool will\nnot detect this so you will have to do that on your own.,,,,Please note that deprecation warnings are disabled by default starting\nwith Python 2.7.  In order to see the deprecation warnings that might be\nemitted you have to enabled them with the,warnings,module.,,If you are working with windows and you lack the,patch,command line\nutility you can get it as part of various Unix runtime environments for\nwindows including cygwin, msysgit or ming32.  Also source control systems\nlike svn, hg or git have builtin support for applying unified diffs as\ngenerated by the tool.  Check the manual of your version control system\nfor more information.,,,Bug in Request Locals,\u00b6,,Due to a bug in earlier implementations the request local proxies now\nraise a,RuntimeError,instead of an,AttributeError,when they\nare unbound.  If you caught these exceptions with,AttributeError,before, you should catch them with,RuntimeError,now.,,Additionally the,send_file(),function is now issuing\ndeprecation warnings if you depend on functionality that will be removed\nin Flask 0.11.  Previously it was possible to use etags and mimetypes\nwhen file objects were passed.  This was unreliable and caused issues\nfor a few setups.  If you get a deprecation warning, make sure to\nupdate your application to work with either filenames there or disable\netag attaching and attach them yourself.,,Old code:,,return,,send_file,(,my_file_object,),,return,,send_file,(,my_file_object,),,,,New code:,,return,,send_file,(,my_file_object,,,,add_etags,=,False,),,,,,,Upgrading to new Teardown Handling,\u00b6,,We streamlined the behavior of the callbacks for request handling.  For\nthings that modify the response the,after_request(),decorators continue to work as expected, but for things that absolutely\nmust happen at the end of request we introduced the new,teardown_request(),decorator.  Unfortunately that\nchange also made after-request work differently under error conditions.\nIt\u2019s not consistently skipped if exceptions happen whereas previously it\nmight have been called twice to ensure it is executed at the end of the\nrequest.,,If you have database connection code that looks like this:,,@app,.,after_request,,def,,after_request,(,response,):,,g,.,db,.,close,(),,return,,response,,,,You are now encouraged to use this instead:,,@app,.,teardown_request,,def,,after_request,(,exception,):,,if,,hasattr,(,g,,,,'db',):,,g,.,db,.,close,(),,,,On the upside this change greatly improves the internal code flow and\nmakes it easier to customize the dispatching and error handling.  This\nmakes it now a lot easier to write unit tests as you can prevent closing\ndown of database connections for a while.  You can take advantage of the\nfact that the teardown callbacks are called when the response context is\nremoved from the stack so a test can query the database after request\nhandling:,,with,,app,.,test_client,(),,as,,client,:,,resp,,=,,client,.,get,(,'/',),,# g.db is still bound if there is such a thing,,# and here it's gone,,,,,,Manual Error Handler Attaching,\u00b6,,While it is still possible to attach error handlers to,Flask.error_handlers,it\u2019s discouraged to do so and in fact\ndeprecated.  In general we no longer recommend custom error handler\nattaching via assignments to the underlying dictionary due to the more\ncomplex internal handling to support arbitrary exception classes and\nblueprints.  See,Flask.errorhandler(),for more information.,,The proper upgrade is to change this:,,app,.,error_handlers,[,403,],,=,,handle_error,,,,Into this:,,app,.,register_error_handler,(,403,,,,handle_error,),,,,Alternatively you should just attach the function with a decorator:,,@app,.,errorhandler,(,403,),,def,,handle_error,(,e,):,,...,,,,(Note that,register_error_handler(),is new in Flask 0.7),,,,Blueprint Support,\u00b6,,Blueprints replace the previous concept of \u201cModules\u201d in Flask.  They\nprovide better semantics for various features and work better with large\napplications.  The update script provided should be able to upgrade your\napplications automatically, but there might be some cases where it fails\nto upgrade.  What changed?,,,Blueprints need explicit names.  Modules had an automatic name\nguessing scheme where the shortname for the module was taken from the\nlast part of the import module.  The upgrade script tries to guess\nthat name but it might fail as this information could change at\nruntime.,,Blueprints have an inverse behavior for,url_for(),.  Previously,.foo,told,url_for(),that it should look for the endpoint,foo,on the application.  Now it means \u201crelative to current module\u201d.\nThe script will inverse all calls to,url_for(),automatically for\nyou.  It will do this in a very eager way so you might end up with\nsome unnecessary leading dots in your code if you\u2019re not using\nmodules.,,Blueprints do not automatically provide static folders.  They will\nalso no longer automatically export templates from a folder called,templates,next to their location however but it can be enabled from\nthe constructor.  Same with static files: if you want to continue\nserving static files you need to tell the constructor explicitly the\npath to the static folder (which can be relative to the blueprint\u2019s\nmodule path).,,Rendering templates was simplified.  Now the blueprints can provide\ntemplate folders which are added to a general template searchpath.\nThis means that you need to add another subfolder with the blueprint\u2019s\nname into that folder if you want,blueprintname/template.html,as\nthe template name.,,,If you continue to use the,Module,object which is deprecated, Flask will\nrestore the previous behavior as good as possible.  However we strongly\nrecommend upgrading to the new blueprints as they provide a lot of useful\nimprovement such as the ability to attach a blueprint multiple times,\nblueprint specific error handlers and a lot more.,,,,,Version 0.6,\u00b6,,Flask 0.6 comes with a backwards incompatible change which affects the\norder of after-request handlers.  Previously they were called in the order\nof the registration, now they are called in reverse order.  This change\nwas made so that Flask behaves more like people expected it to work and\nhow other systems handle request pre- and post-processing.  If you\ndepend on the order of execution of post-request functions, be sure to\nchange the order.,,Another change that breaks backwards compatibility is that context\nprocessors will no longer override values passed directly to the template\nrendering function.  If for example,request,is as variable passed\ndirectly to the template, the default context processor will not override\nit with the current request object.  This makes it easier to extend\ncontext processors later to inject additional variables without breaking\nexisting template not expecting them.,,,,Version 0.5,\u00b6,,Flask 0.5 is the first release that comes as a Python package instead of a\nsingle module.  There were a couple of internal refactoring so if you\ndepend on undocumented internal details you probably have to adapt the\nimports.,,The following changes may be relevant to your application:,,,autoescaping no longer happens for all templates.  Instead it is\nconfigured to only happen on files ending with,.html,,,.htm,,,.xml,and,.xhtml,.  If you have templates with different\nextensions you should override the,select_jinja_autoescape(),method.,,Flask no longer supports zipped applications in this release.  This\nfunctionality might come back in future releases if there is demand\nfor this feature.  Removing support for this makes the Flask internal\ncode easier to understand and fixes a couple of small issues that make\ndebugging harder than necessary.,,The,create_jinja_loader,function is gone.  If you want to customize\nthe Jinja loader now, use the,create_jinja_environment(),method instead.,,,,,Version 0.4,\u00b6,,For application developers there are no changes that require changes in\nyour code.  In case you are developing on a Flask extension however, and\nthat extension has a unittest-mode you might want to link the activation\nof that mode to the new,TESTING,flag.,,,,Version 0.3,\u00b6,,Flask 0.3 introduces configuration support and logging as well as\ncategories for flashing messages.  All these are features that are 100%\nbackwards compatible but you might want to take advantage of them.,,,Configuration Support,\u00b6,,The configuration support makes it easier to write any kind of application\nthat requires some sort of configuration.  (Which most likely is the case\nfor any application out there).,,If you previously had code like this:,,app,.,debug,,=,,DEBUG,,app,.,secret_key,,=,,SECRET_KEY,,,,You no longer have to do that, instead you can just load a configuration\ninto the config object.  How this works is outlined in,Configuration Handling,.,,,,Logging Integration,\u00b6,,Flask now configures a logger for you with some basic and useful defaults.\nIf you run your application in production and want to profit from\nautomatic error logging, you might be interested in attaching a proper log\nhandler.  Also you can start logging warnings and errors into the logger\nwhen appropriately.  For more information on that, read,Application Errors,.,,,,Categories for Flash Messages,\u00b6,,Flash messages can now have categories attached.  This makes it possible\nto render errors, warnings or regular messages differently for example.\nThis is an opt-in feature because it requires some rethinking in the code.,,Read all about that in the,Message Flashing,pattern.,,,,,,,,,,,,,,Contents,,,Upgrading to Newer Releases,,Version 0.12,,Changes to send_file,,,,Version 0.11,,Debugging,,Error handling,,Templating,,Extension imports,,,,Version 0.10,,Version 0.9,,Version 0.8,,Version 0.7,,Bug in Request Locals,,Upgrading to new Teardown Handling,,Manual Error Handler Attaching,,Blueprint Support,,,,Version 0.6,,Version 0.5,,Version 0.4,,Version 0.3,,Configuration Support,,Logging Integration,,Categories for Flash Messages,,,,,,,Navigation,,,Overview,,,Previous:,Python 3 Support,,Next:,Flask Changelog,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Python 3 Support", "url": "http://flask.pocoo.org/docs/0.12/python3/", "content": ",,,,,Python 3 Support \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,Python 3 Support,\u00b6,,Flask, its dependencies, and most Flask extensions support Python 3.\nYou should start using Python 3 for your next project,\nbut there are a few things to be aware of.,,You need to use Python 3.3 or higher.  3.2 and older are,not,supported.,,You should use the latest versions of all Flask-related packages.\nFlask 0.10 and Werkzeug 0.9 were the first versions to introduce Python 3 support.,,Python 3 changed how unicode and bytes are handled, which complicates how low\nlevel code handles HTTP data.  This mainly affects WSGI middleware interacting\nwith the WSGI,environ,data.  Werkzeug wraps that information in high-level\nhelpers, so encoding issues should not affect you.,,The majority of the upgrade work is in the lower-level libraries like\nFlask and Werkzeug, not the high-level application code.\nFor example, all of the examples in the Flask repository work on both Python 2 and 3\nand did not require a single line of code changed.,,,,,,,,,,,Navigation,,,Overview,,,Previous:,Pocoo Styleguide,,Next:,Upgrading to Newer Releases,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Pocoo Styleguide", "url": "http://flask.pocoo.org/docs/0.12/styleguide/", "content": ",,,,,Pocoo Styleguide \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,Pocoo Styleguide,\u00b6,,The Pocoo styleguide is the styleguide for all Pocoo Projects, including\nFlask.  This styleguide is a requirement for Patches to Flask and a\nrecommendation for Flask extensions.,,In general the Pocoo Styleguide closely follows,PEP 8,with some small\ndifferences and extensions.,,,General Layout,\u00b6,,,Indentation:,,4 real spaces.  No tabs, no exceptions.,,Maximum line length:,,79 characters with a soft limit for 84 if absolutely necessary.  Try\nto avoid too nested code by cleverly placing,break,,,continue,and,return,statements.,,Continuing long statements:,,To continue a statement you can use backslashes in which case you should\nalign the next line with the last dot or equal sign, or indent four\nspaces:,,this_is_a_very_long,(,function_call,,,,'with many parameters',),\\,.,that_returns_an_object_with_an_attribute,,MyModel,.,query,.,filter,(,MyModel,.,scalar,,>,,120,),\\,.,order_by,(,MyModel,.,name,.,desc,()),\\,.,limit,(,10,),,,,If you break in a statement with parentheses or braces, align to the\nbraces:,,this_is_a_very_long,(,function_call,,,,'with many parameters',,,,23,,,,42,,,,'and even more',),,,,For lists or tuples with many items, break immediately after the\nopening brace:,,items,,=,,[,,'this is the first',,,,'set of items',,,,'with more items',,,,'to come in this line',,,,'like this',,],,,,,Blank lines:,,Top level functions and classes are separated by two lines, everything\nelse by one.  Do not use too many blank lines to separate logical\nsegments in code.  Example:,,def,,hello,(,name,):,,print,,'Hello,%s,!',,%,,name,,def,,goodbye,(,name,):,,print,,'See you,%s,.',,%,,name,,class,,MyClass,(,object,):,,\"\"\"This is a simple docstring\"\"\",,def,,__init__,(,self,,,,name,):,,self,.,name,,=,,name,,def,,get_annoying_name,(,self,):,,return,,self,.,name,.,upper,(),,+,,'!!!!111',,,,,,,,Expressions and Statements,\u00b6,,,General whitespace rules:,,,No whitespace for unary operators that are not words\n(e.g.:,-,,,~,etc.) as well on the inner side of parentheses.,,Whitespace is placed between binary operators.,,,Good:,,exp,,=,,-,1.05,,value,,=,,(,item_value,,/,,item_count,),,*,,offset,,/,,exp,,value,,=,,my_list,[,index,],,value,,=,,my_dict,[,'key',],,,,Bad:,,exp,,=,,-,,1.05,,value,,=,,(,,item_value,,/,,item_count,,),,*,,offset,,/,,exp,,value,,=,,(,item_value,/,item_count,),*,offset,/,exp,,value,=,(,,item_value,/,item_count,,),,*,,offset,/,exp,,value,,=,,my_list,[,,index,,],,value,,=,,my_dict,,[,'key',],,,,,Yoda statements are a no-go:,,Never compare constant with variable, always variable with constant:,,Good:,,if,,method,,==,,'md5',:,,pass,,,,Bad:,,if,,'md5',,==,,method,:,,pass,,,,,Comparisons:,,,against arbitrary types:,==,and,!=,,against singletons with,is,and,is,,not,(eg:,foo,,is,,not,,None,),,never compare something with,True,or,False,(for example never\ndo,foo,,==,,False,, do,not,,foo,instead),,,,Negated containment checks:,,use,foo,,not,,in,,bar,instead of,not,,foo,,in,,bar,,Instance checks:,,isinstance(a,,,C),instead of,type(A),,is,,C,, but try to avoid\ninstance checks in general.  Check for features.,,,,,Naming Conventions,\u00b6,,,Class names:,CamelCase,, with acronyms kept uppercase (,HTTPWriter,and not,HttpWriter,),,Variable names:,lowercase_with_underscores,,Method and function names:,lowercase_with_underscores,,Constants:,UPPERCASE_WITH_UNDERSCORES,,precompiled regular expressions:,name_re,,,Protected members are prefixed with a single underscore.  Double\nunderscores are reserved for mixin classes.,,On classes with keywords, trailing underscores are appended.  Clashes with\nbuiltins are allowed and,must not,be resolved by appending an\nunderline to the variable name.  If the function needs to access a\nshadowed builtin, rebind the builtin to a different name instead.,,,Function and method arguments:,,,class methods:,cls,as first parameter,,instance methods:,self,as first parameter,,lambdas for properties might have the first parameter replaced\nwith,x,like in,display_name,,=,,property(lambda,,x:,,x.real_name,,or,,x.username),,,,,,,Docstrings,\u00b6,,,Docstring conventions:,,All docstrings are formatted with reStructuredText as understood by\nSphinx.  Depending on the number of lines in the docstring, they are\nlaid out differently.  If it\u2019s just one line, the closing triple\nquote is on the same line as the opening, otherwise the text is on\nthe same line as the opening quote and the triple quote that closes\nthe string on its own line:,,def,,foo,():,,\"\"\"This is a simple docstring\"\"\",,def,,bar,():,,\"\"\"This is a longer docstring with so much information in there,,that it spans three lines.  In this case the closing triple quote,,is on its own line.,,\"\"\",,,,,Module header:,,The module header consists of an utf-8 encoding declaration (if non\nASCII letters are used, but it is recommended all the time) and a\nstandard docstring:,,# -*- coding: utf-8 -*-,,\"\"\",,package.module,,~~~~~~~~~~~~~~,,A brief description goes here.,,:copyright: (c) YEAR by AUTHOR.,,:license: LICENSE_NAME, see LICENSE_FILE for more details.,,\"\"\",,,,Please keep in mind that proper copyrights and license files are a\nrequirement for approved Flask extensions.,,,,,,Comments,\u00b6,,Rules for comments are similar to docstrings.  Both are formatted with\nreStructuredText.  If a comment is used to document an attribute, put a\ncolon after the opening pound sign (,#,):,,class,,User,(,object,):,,#: the name of the user as unicode string,,name,,=,,Column,(,String,),,#: the sha1 hash of the password + inline salt,,pw_hash,,=,,Column,(,String,),,,,,,,,,,,,,,,Contents,,,Pocoo Styleguide,,General Layout,,Expressions and Statements,,Naming Conventions,,Docstrings,,Comments,,,,,Navigation,,,Overview,,,Previous:,Flask Extension Development,,Next:,Python 3 Support,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Flask Extension Development", "url": "http://flask.pocoo.org/docs/0.12/extensiondev/", "content": ",,,,,Flask Extension Development \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,Flask Extension Development,\u00b6,,Flask, being a microframework, often requires some repetitive steps to get\na third party library working.  Because very often these steps could be\nabstracted to support multiple projects the,Flask Extension Registry,was created.,,If you want to create your own Flask extension for something that does not\nexist yet, this guide to extension development will help you get your\nextension running in no time and to feel like users would expect your\nextension to behave.,,,Anatomy of an Extension,\u00b6,,Extensions are all located in a package called,flask_something,where \u201csomething\u201d is the name of the library you want to bridge.  So for\nexample if you plan to add support for a library named,simplexml,to\nFlask, you would name your extension\u2019s package,flask_simplexml,.,,The name of the actual extension (the human readable name) however would\nbe something like \u201cFlask-SimpleXML\u201d.  Make sure to include the name\n\u201cFlask\u201d somewhere in that name and that you check the capitalization.\nThis is how users can then register dependencies to your extension in\ntheir,setup.py,files.,,Flask sets up a redirect package called,flask.ext,where users\nshould import the extensions from.  If you for instance have a package\ncalled,flask_something,users would import it as,flask.ext.something,.  This is done to transition from the old\nnamespace packages.  See,Extension Import Transition,for more details.,,But what do extensions look like themselves?  An extension has to ensure\nthat it works with multiple Flask application instances at once.  This is\na requirement because many people will use patterns like the,Application Factories,pattern to create their application as needed to aid\nunittests and to support multiple configurations.  Because of that it is\ncrucial that your application supports that kind of behavior.,,Most importantly the extension must be shipped with a,setup.py,file and\nregistered on PyPI.  Also the development checkout link should work so\nthat people can easily install the development version into their\nvirtualenv without having to download the library by hand.,,Flask extensions must be licensed under a BSD, MIT or more liberal license\nto be able to be enlisted in the Flask Extension Registry.  Keep in mind\nthat the Flask Extension Registry is a moderated place and libraries will\nbe reviewed upfront if they behave as required.,,,,\u201cHello Flaskext!\u201d,\u00b6,,So let\u2019s get started with creating such a Flask extension.  The extension\nwe want to create here will provide very basic support for SQLite3.,,First we create the following folder structure:,,flask,-,sqlite3,/,,flask_sqlite3,.,py,,LICENSE,,README,,,,Here\u2019s the contents of the most important files:,,,setup.py,\u00b6,,The next file that is absolutely required is the,setup.py,file which is\nused to install your Flask extension.  The following contents are\nsomething you can work with:,,\"\"\",,Flask-SQLite3,,-------------,,This is the description for that library,,\"\"\",,from,,setuptools,,import,,setup,,setup,(,,name,=,'Flask-SQLite3',,,,version,=,'1.0',,,,url,=,'http://example.com/flask-sqlite3/',,,,license,=,'BSD',,,,author,=,'Your Name',,,,author_email,=,'your-email@example.com',,,,description,=,'Very short description',,,,long_description,=,__doc__,,,,py_modules,=,[,'flask_sqlite3',],,,# if you would be using a package instead use packages instead,,# of py_modules:,,# packages=['flask_sqlite3'],,,zip_safe,=,False,,,,include_package_data,=,True,,,,platforms,=,'any',,,,install_requires,=,[,,'Flask',,],,,classifiers,=,[,,'Environment :: Web Environment',,,,'Intended Audience :: Developers',,,,'License :: OSI Approved :: BSD License',,,,'Operating System :: OS Independent',,,,'Programming Language :: Python',,,,'Topic :: Internet :: WWW/HTTP :: Dynamic Content',,,,'Topic :: Software Development :: Libraries :: Python Modules',,],,),,,,That\u2019s a lot of code but you can really just copy/paste that from existing\nextensions and adapt.,,,,flask_sqlite3.py,\u00b6,,Now this is where your extension code goes.  But how exactly should such\nan extension look like?  What are the best practices?  Continue reading\nfor some insight.,,,,,Initializing Extensions,\u00b6,,Many extensions will need some kind of initialization step.  For example,\nconsider an application that\u2019s currently connecting to SQLite like the\ndocumentation suggests (,Using SQLite 3 with Flask,).  So how does the extension\nknow the name of the application object?,,Quite simple: you pass it to it.,,There are two recommended ways for an extension to initialize:,,initialization functions:,,,If your extension is called,helloworld,you might have a function\ncalled,init_helloworld(app[,,,extra_args]),that initializes the\nextension for that application.  It could attach before / after\nhandlers etc.,,classes:,,,Classes work mostly like initialization functions but can later be\nused to further change the behavior.  For an example look at how the,OAuth extension,works: there is an,OAuth,object that provides\nsome helper functions like,OAuth.remote_app,to create a reference to\na remote application that uses OAuth.,,What to use depends on what you have in mind.  For the SQLite 3 extension\nwe will use the class-based approach because it will provide users with an\nobject that handles opening and closing database connections.,,What\u2019s important about classes is that they encourage to be shared around\non module level.  In that case, the object itself must not under any\ncircumstances store any application specific state and must be shareable\nbetween different application.,,,,The Extension Code,\u00b6,,Here\u2019s the contents of the,flask_sqlite3.py,for copy/paste:,,import,,sqlite3,,from,,flask,,import,,current_app,,# Find the stack on which we want to store the database connection.,,# Starting with Flask 0.9, the _app_ctx_stack is the correct one,,,# before that we need to use the _request_ctx_stack.,,try,:,,from,,flask,,import,,_app_ctx_stack,,as,,stack,,except,,ImportError,:,,from,,flask,,import,,_request_ctx_stack,,as,,stack,,class,,SQLite3,(,object,):,,def,,__init__,(,self,,,,app,=,None,):,,self,.,app,,=,,app,,if,,app,,is,,not,,None,:,,self,.,init_app,(,app,),,def,,init_app,(,self,,,,app,):,,app,.,config,.,setdefault,(,'SQLITE3_DATABASE',,,,':memory:',),,# Use the newstyle teardown_appcontext if it's available,,,# otherwise fall back to the request context,,if,,hasattr,(,app,,,,'teardown_appcontext',):,,app,.,teardown_appcontext,(,self,.,teardown,),,else,:,,app,.,teardown_request,(,self,.,teardown,),,def,,connect,(,self,):,,return,,sqlite3,.,connect,(,current_app,.,config,[,'SQLITE3_DATABASE',]),,def,,teardown,(,self,,,,exception,):,,ctx,,=,,stack,.,top,,if,,hasattr,(,ctx,,,,'sqlite3_db',):,,ctx,.,sqlite3_db,.,close,(),,@property,,def,,connection,(,self,):,,ctx,,=,,stack,.,top,,if,,ctx,,is,,not,,None,:,,if,,not,,hasattr,(,ctx,,,,'sqlite3_db',):,,ctx,.,sqlite3_db,,=,,self,.,connect,(),,return,,ctx,.,sqlite3_db,,,,So here\u2019s what these lines of code do:,,,The,__init__,method takes an optional app object and, if supplied, will\ncall,init_app,.,,,The,init_app,method exists so that the,SQLite3,object can be\ninstantiated without requiring an app object.  This method supports the\nfactory pattern for creating applications.  The,init_app,will set the\nconfiguration for the database, defaulting to an in memory database if\nno configuration is supplied.  In addition, the,init_app,method attaches\nthe,teardown,handler.  It will try to use the newstyle app context\nhandler and if it does not exist, falls back to the request context\none.,,,Next, we define a,connect,method that opens a database connection.,,,Finally, we add a,connection,property that on first access opens\nthe database connection and stores it on the context.  This is also\nthe recommended way to handling resources: fetch resources lazily the\nfirst time they are used.,,Note here that we\u2019re attaching our database connection to the top\napplication context via,_app_ctx_stack.top,. Extensions should use\nthe top context for storing their own information with a sufficiently\ncomplex name.  Note that we\u2019re falling back to the,_request_ctx_stack.top,if the application is using an older\nversion of Flask that does not support it.,,,,So why did we decide on a class-based approach here?  Because using our\nextension looks something like this:,,from,,flask,,import,,Flask,,from,,flask_sqlite3,,import,,SQLite3,,app,,=,,Flask,(,__name__,),,app,.,config,.,from_pyfile,(,'the-config.cfg',),,db,,=,,SQLite3,(,app,),,,,You can then use the database from views like this:,,@app,.,route,(,'/',),,def,,show_all,():,,cur,,=,,db,.,connection,.,cursor,(),,cur,.,execute,(,...,),,,,Likewise if you are outside of a request but you are using Flask 0.9 or\nlater with the app context support, you can use the database in the same\nway:,,with,,app,.,app_context,():,,cur,,=,,db,.,connection,.,cursor,(),,cur,.,execute,(,...,),,,,At the end of the,with,block the teardown handles will be executed\nautomatically.,,Additionally, the,init_app,method is used to support the factory pattern\nfor creating apps:,,db,,=,,Sqlite3,(),,# Then later on.,,app,,=,,create_app,(,'the-config.cfg',),,db,.,init_app,(,app,),,,,Keep in mind that supporting this factory pattern for creating apps is required\nfor approved flask extensions (described below).,,,Note on,init_app,,As you noticed,,init_app,does not assign,app,to,self,.  This\nis intentional!  Class based Flask extensions must only store the\napplication on the object when the application was passed to the\nconstructor.  This tells the extension: I am not interested in using\nmultiple applications.,,When the extension needs to find the current application and it does\nnot have a reference to it, it must either use the,current_app,context local or change the API in a way\nthat you can pass the application explicitly.,,,,,Using _app_ctx_stack,\u00b6,,In the example above, before every request, a,sqlite3_db,variable is\nassigned to,_app_ctx_stack.top,.  In a view function, this variable is\naccessible using the,connection,property of,SQLite3,.  During the\nteardown of a request, the,sqlite3_db,connection is closed.  By using\nthis pattern, the,same,connection to the sqlite3 database is accessible\nto anything that needs it for the duration of the request.,,If the,_app_ctx_stack,does not exist because the user uses\nan old version of Flask, it is recommended to fall back to,_request_ctx_stack,which is bound to a request.,,,,Teardown Behavior,\u00b6,,This is only relevant if you want to support Flask 0.6 and older,,Due to the change in Flask 0.7 regarding functions that are run at the end\nof the request your extension will have to be extra careful there if it\nwants to continue to support older versions of Flask.  The following\npattern is a good way to support both:,,def,,close_connection,(,response,):,,ctx,,=,,_request_ctx_stack,.,top,,ctx,.,sqlite3_db,.,close,(),,return,,response,,if,,hasattr,(,app,,,,'teardown_request',):,,app,.,teardown_request,(,close_connection,),,else,:,,app,.,after_request,(,close_connection,),,,,Strictly speaking the above code is wrong, because teardown functions are\npassed the exception and typically don\u2019t return anything.  However because\nthe return value is discarded this will just work assuming that the code\nin between does not touch the passed parameter.,,,,Learn from Others,\u00b6,,This documentation only touches the bare minimum for extension\ndevelopment.  If you want to learn more, it\u2019s a very good idea to check\nout existing extensions on the,Flask Extension Registry,.  If you feel\nlost there is still the,mailinglist,and the,IRC channel,to get some\nideas for nice looking APIs.  Especially if you do something nobody before\nyou did, it might be a very good idea to get some more input.  This not\nonly to get an idea about what people might want to have from an\nextension, but also to avoid having multiple developers working on pretty\nmuch the same side by side.,,Remember: good API design is hard, so introduce your project on the\nmailinglist, and let other developers give you a helping hand with\ndesigning the API.,,The best Flask extensions are extensions that share common idioms for the\nAPI.  And this can only work if collaboration happens early.,,,,Approved Extensions,\u00b6,,Flask also has the concept of approved extensions.  Approved extensions\nare tested as part of Flask itself to ensure extensions do not break on\nnew releases.  These approved extensions are listed on the,Flask\nExtension Registry,and marked appropriately.  If you want your own\nextension to be approved you have to follow these guidelines:,,,An approved Flask extension requires a maintainer. In the event an\nextension author would like to move beyond the project, the project should\nfind a new maintainer including full source hosting transition and PyPI\naccess.  If no maintainer is available, give access to the Flask core team.,,An approved Flask extension must provide exactly one package or module\nnamed,flask_extensionname,.,,It must ship a testing suite that can either be invoked with,make,,test,or,python,,setup.py,,test,.  For test suites invoked with,make,,test,the extension has to ensure that all dependencies for the test\nare installed automatically.  If tests are invoked with,python,,setup.py,,test,, test dependencies can be specified in the,setup.py,file.  The\ntest suite also has to be part of the distribution.,,APIs of approved extensions will be checked for the following\ncharacteristics:,,an approved extension has to support multiple applications\nrunning in the same Python process.,,it must be possible to use the factory pattern for creating\napplications.,,,,The license must be BSD/MIT/WTFPL licensed.,,The naming scheme for official extensions is,Flask-ExtensionName,or,ExtensionName-Flask,.,,Approved extensions must define all their dependencies in the,setup.py,file unless a dependency cannot be met because it is not\navailable on PyPI.,,The extension must have documentation that uses one of the two Flask\nthemes for Sphinx documentation.,,The setup.py description (and thus the PyPI description) has to\nlink to the documentation, website (if there is one) and there\nmust be a link to automatically install the development version\n(,PackageName==dev,).,,The,zip_safe,flag in the setup script must be set to,False,,\neven if the extension would be safe for zipping.,,An extension currently has to support Python 2.6 as well as\nPython 2.7,,,,,Extension Import Transition,\u00b6,,In early versions of Flask we recommended using namespace packages for Flask\nextensions, of the form,flaskext.foo,. This turned out to be problematic in\npractice because it meant that multiple,flaskext,packages coexist.\nConsequently we have recommended to name extensions,flask_foo,over,flaskext.foo,for a long time.,,Flask 0.8 introduced a redirect import system as a compatibility aid for app\ndevelopers: Importing,flask.ext.foo,would try,flask_foo,and,flaskext.foo,in that order.,,As of Flask 0.11, most Flask extensions have transitioned to the new naming\nschema. The,flask.ext.foo,compatibility alias is still in Flask 0.11 but is\nnow deprecated \u2013 you should use,flask_foo,.,,,,,,,,,,,,,Contents,,,Flask Extension Development,,Anatomy of an Extension,,\u201cHello Flaskext!\u201d,,setup.py,,flask_sqlite3.py,,,,Initializing Extensions,,The Extension Code,,Using _app_ctx_stack,,Teardown Behavior,,Learn from Others,,Approved Extensions,,Extension Import Transition,,,,,Navigation,,,Overview,,,Previous:,Unicode in Flask,,Next:,Pocoo Styleguide,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Unicode in Flask", "url": "http://flask.pocoo.org/docs/0.12/unicode/", "content": ",,,,,Unicode in Flask \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,Unicode in Flask,\u00b6,,Flask, like Jinja2 and Werkzeug, is totally Unicode based when it comes to\ntext.  Not only these libraries, also the majority of web related Python\nlibraries that deal with text.  If you don\u2019t know Unicode so far, you\nshould probably read,The Absolute Minimum Every Software Developer\nAbsolutely, Positively Must Know About Unicode and Character Sets,.  This part of the\ndocumentation just tries to cover the very basics so that you have a\npleasant experience with Unicode related things.,,,Automatic Conversion,\u00b6,,Flask has a few assumptions about your application (which you can change\nof course) that give you basic and painless Unicode support:,,,the encoding for text on your website is UTF-8,,internally you will always use Unicode exclusively for text except\nfor literal strings with only ASCII character points.,,encoding and decoding happens whenever you are talking over a protocol\nthat requires bytes to be transmitted.,,,So what does this mean to you?,,HTTP is based on bytes.  Not only the protocol, also the system used to\naddress documents on servers (so called URIs or URLs).  However HTML which\nis usually transmitted on top of HTTP supports a large variety of\ncharacter sets and which ones are used, are transmitted in an HTTP header.\nTo not make this too complex Flask just assumes that if you are sending\nUnicode out you want it to be UTF-8 encoded.  Flask will do the encoding\nand setting of the appropriate headers for you.,,The same is true if you are talking to databases with the help of\nSQLAlchemy or a similar ORM system.  Some databases have a protocol that\nalready transmits Unicode and if they do not, SQLAlchemy or your other ORM\nshould take care of that.,,,,The Golden Rule,\u00b6,,So the rule of thumb: if you are not dealing with binary data, work with\nUnicode.  What does working with Unicode in Python 2.x mean?,,,as long as you are using ASCII charpoints only (basically numbers,\nsome special characters of latin letters without umlauts or anything\nfancy) you can use regular string literals (,'Hello,,World',).,,if you need anything else than ASCII in a string you have to mark\nthis string as Unicode string by prefixing it with a lowercase,u,.\n(like,u'H\u00e4nsel,,und,,Gretel',),,if you are using non-Unicode characters in your Python files you have\nto tell Python which encoding your file uses.  Again, I recommend\nUTF-8 for this purpose.  To tell the interpreter your encoding you can\nput the,#,,-*-,,coding:,,utf-8,,-*-,into the first or second line of\nyour Python source file.,,Jinja is configured to decode the template files from UTF-8.  So make\nsure to tell your editor to save the file as UTF-8 there as well.,,,,,Encoding and Decoding Yourself,\u00b6,,If you are talking with a filesystem or something that is not really based\non Unicode you will have to ensure that you decode properly when working\nwith Unicode interface.  So for example if you want to load a file on the\nfilesystem and embed it into a Jinja2 template you will have to decode it\nfrom the encoding of that file.  Here the old problem that text files do\nnot specify their encoding comes into play.  So do yourself a favour and\nlimit yourself to UTF-8 for text files as well.,,Anyways.  To load such a file with Unicode you can use the built-in,str.decode(),method:,,def,,read_file,(,filename,,,,charset,=,'utf-8',):,,with,,open,(,filename,,,,'r',),,as,,f,:,,return,,f,.,read,(),.,decode,(,charset,),,,,To go from Unicode into a specific charset such as UTF-8 you can use the,unicode.encode(),method:,,def,,write_file,(,filename,,,,contents,,,,charset,=,'utf-8',):,,with,,open,(,filename,,,,'w',),,as,,f,:,,f,.,write,(,contents,.,encode,(,charset,)),,,,,,Configuring Editors,\u00b6,,Most editors save as UTF-8 by default nowadays but in case your editor is\nnot configured to do this you have to change it.  Here some common ways to\nset your editor to store as UTF-8:,,,Vim: put,set,,enc=utf-8,to your,.vimrc,file.,,,Emacs: either use an encoding cookie or put this into your,.emacs,file:,,(,prefer,-,coding,-,system,,'utf-8),,(,setq,,default,-,buffer,-,file,-,coding,-,system,,'utf-8),,,,,Notepad++:,,,Go to,Settings -> Preferences \u2026,,Select the \u201cNew Document/Default Directory\u201d tab,,Select \u201cUTF-8 without BOM\u201d as encoding,,,It is also recommended to use the Unix newline format, you can select\nit in the same panel but this is not a requirement.,,,,,,,,,,,,,,,Contents,,,Unicode in Flask,,Automatic Conversion,,The Golden Rule,,Encoding and Decoding Yourself,,Configuring Editors,,,,,Navigation,,,Overview,,,Previous:,Security Considerations,,Next:,Flask Extension Development,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Security Considerations", "url": "http://flask.pocoo.org/docs/0.12/security/", "content": ",,,,,Security Considerations \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,Security Considerations,\u00b6,,Web applications usually face all kinds of security problems and it\u2019s very\nhard to get everything right.  Flask tries to solve a few of these things\nfor you, but there are a couple more you have to take care of yourself.,,,Cross-Site Scripting (XSS),\u00b6,,Cross site scripting is the concept of injecting arbitrary HTML (and with\nit JavaScript) into the context of a website.  To remedy this, developers\nhave to properly escape text so that it cannot include arbitrary HTML\ntags.  For more information on that have a look at the Wikipedia article\non,Cross-Site Scripting,.,,Flask configures Jinja2 to automatically escape all values unless\nexplicitly told otherwise.  This should rule out all XSS problems caused\nin templates, but there are still other places where you have to be\ncareful:,,,generating HTML without the help of Jinja2,,calling,Markup,on data submitted by users,,sending out HTML from uploaded files, never do that, use the,Content-Disposition:,,attachment,header to prevent that problem.,,sending out textfiles from uploaded files.  Some browsers are using\ncontent-type guessing based on the first few bytes so users could\ntrick a browser to execute HTML.,,,Another thing that is very important are unquoted attributes.  While\nJinja2 can protect you from XSS issues by escaping HTML, there is one\nthing it cannot protect you from: XSS by attribute injection.  To counter\nthis possible attack vector, be sure to always quote your attributes with\neither double or single quotes when using Jinja expressions in them:,,<,a,,href,=,\",{{,,href,,}},\",>,the text,</,a,>,,,,Why is this necessary?  Because if you would not be doing that, an\nattacker could easily inject custom JavaScript handlers.  For example an\nattacker could inject this piece of HTML+JavaScript:,,onmouseover=alert(document.cookie),,,When the user would then move with the mouse over the link, the cookie\nwould be presented to the user in an alert window.  But instead of showing\nthe cookie to the user, a good attacker might also execute any other\nJavaScript code.  In combination with CSS injections the attacker might\neven make the element fill out the entire page so that the user would\njust have to have the mouse anywhere on the page to trigger the attack.,,,,Cross-Site Request Forgery (CSRF),\u00b6,,Another big problem is CSRF.  This is a very complex topic and I won\u2019t\noutline it here in detail just mention what it is and how to theoretically\nprevent it.,,If your authentication information is stored in cookies, you have implicit\nstate management.  The state of \u201cbeing logged in\u201d is controlled by a\ncookie, and that cookie is sent with each request to a page.\nUnfortunately that includes requests triggered by 3rd party sites.  If you\ndon\u2019t keep that in mind, some people might be able to trick your\napplication\u2019s users with social engineering to do stupid things without\nthem knowing.,,Say you have a specific URL that, when you sent,POST,requests to will\ndelete a user\u2019s profile (say,http://example.com/user/delete,).  If an\nattacker now creates a page that sends a post request to that page with\nsome JavaScript they just have to trick some users to load that page and\ntheir profiles will end up being deleted.,,Imagine you were to run Facebook with millions of concurrent users and\nsomeone would send out links to images of little kittens.  When users\nwould go to that page, their profiles would get deleted while they are\nlooking at images of fluffy cats.,,How can you prevent that?  Basically for each request that modifies\ncontent on the server you would have to either use a one-time token and\nstore that in the cookie,and,also transmit it with the form data.\nAfter receiving the data on the server again, you would then have to\ncompare the two tokens and ensure they are equal.,,Why does Flask not do that for you?  The ideal place for this to happen is\nthe form validation framework, which does not exist in Flask.,,,,JSON Security,\u00b6,,In Flask 0.10 and lower,,jsonify(),did not serialize top-level\narrays to JSON. This was because of a security vulnerability in ECMAScript 4.,,ECMAScript 5 closed this vulnerability, so only extremely old browsers are\nstill vulnerable. All of these browsers have,other more serious\nvulnerabilities,, so\nthis behavior was changed and,jsonify(),now supports serializing\narrays.,,,,,,,,,,,,,Contents,,,Security Considerations,,Cross-Site Scripting (XSS),,Cross-Site Request Forgery (CSRF),,JSON Security,,,,,Navigation,,,Overview,,,Previous:,HTML/XHTML FAQ,,Next:,Unicode in Flask,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "License", "url": "http://flask.pocoo.org/docs/0.12/license/", "content": ",,,,,License \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,License,\u00b6,,Flask is licensed under a three clause BSD License.  It basically means:\ndo whatever you want with it as long as the copyright in Flask sticks\naround, the conditions are not modified and the disclaimer is present.\nFurthermore you must not use the names of the authors to promote derivatives\nof the software without written consent.,,The full license text can be found below (,Flask License,).  For the\ndocumentation and artwork different licenses apply.,,,Authors,\u00b6,,Flask is written and maintained by Armin Ronacher and\nvarious contributors:,,,Development Lead,\u00b6,,,Armin Ronacher <,armin,.,ronacher,@,active-4,.,com,>,,,,,Patches and Suggestions,\u00b6,,,Adam Zapletal,,Ali Afshar,,Chris Edgemon,,Chris Grindstaff,,Christopher Grebs,,Daniel Neuh\u00e4user,,Dan Sully,,David Lord @davidism,,Edmond Burnett,,Florent Xicluna,,Georg Brandl,,Jeff Widman @jeffwidman,,Justin Quick,,Kenneth Reitz,,Keyan Pishdadian,,Marian Sigler,,Martijn Pieters,,Matt Campell,,Matthew Frazier,,Michael van Tellingen,,Ron DuPlain,,Sebastien Estienne,,Simon Sapin,,Stephane Wirtel,,Thomas Schranz,,Zhao Xiaohong,,,,,,General License Definitions,\u00b6,,The following section contains the full license texts for Flask and the\ndocumentation.,,,\u201cAUTHORS\u201d hereby refers to all the authors listed in the,Authors,section.,,The \u201c,Flask License,\u201d applies to all the source code shipped as\npart of Flask (Flask itself as well as the examples and the unittests)\nas well as documentation.,,The \u201c,Flask Artwork License,\u201d applies to the project\u2019s Horn-Logo.,,,,,Flask License,\u00b6,,Copyright (c) 2015 by Armin Ronacher and contributors.  See AUTHORS\nfor more details.,,Some rights reserved.,,Redistribution and use in source and binary forms of the software as well\nas documentation, with or without modification, are permitted provided\nthat the following conditions are met:,,,Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.,,Redistributions in binary form must reproduce the above\ncopyright notice, this list of conditions and the following\ndisclaimer in the documentation and/or other materials provided\nwith the distribution.,,The names of the contributors may not be used to endorse or\npromote products derived from this software without specific\nprior written permission.,,,THIS SOFTWARE AND DOCUMENTATION IS PROVIDED BY THE COPYRIGHT HOLDERS AND\nCONTRIBUTORS \u201cAS IS\u201d AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT\nNOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER\nOR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\nEXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\nPROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\nLIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE AND DOCUMENTATION, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH\nDAMAGE.,,,,Flask Artwork License,\u00b6,,Copyright (c) 2010 by Armin Ronacher.,,Some rights reserved.,,This logo or a modified version may be used by anyone to refer to the\nFlask project, but does not indicate endorsement by the project.,,Redistribution and use in source (the SVG file) and binary forms (rendered\nPNG files etc.) of the image, with or without modification, are permitted\nprovided that the following conditions are met:,,,Redistributions of source code must retain the above copyright\nnotice and this list of conditions.,,The names of the contributors to the Flask software (see AUTHORS) may\nnot be used to endorse or promote products derived from this software\nwithout specific prior written permission.,,,Note: we would appreciate that you make the image a link to,http://flask.pocoo.org/,if you use it on a web page.,,,,,,,,,,,,,Contents,,,License,,Authors,,Development Lead,,Patches and Suggestions,,,,General License Definitions,,Flask License,,Flask Artwork License,,,,,Navigation,,,Overview,,,Previous:,Flask Changelog,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Flask Changelog", "url": "http://flask.pocoo.org/docs/0.12/changelog/", "content": ",,,,,Flask Changelog \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,Flask Changelog,\u00b6,,,Version 0.12.4,\u00b6,,Released on April 29 2018,,,Repackage 0.12.3 to fix package layout issue. (,#2728,),,,,,Version 0.12.3,\u00b6,,Released on April 26th 2018,,,Request.get_json(),no longer accepts arbitrary encodings.\nIncoming JSON should be encoded using UTF-8 per,RFC 8259,, but\nFlask will autodetect UTF-8, -16, or -32. (,#2692,),,Fix a Python warning about imports when using,python,,-m,,flask,.\n(,#2666,),,Fix a,ValueError,caused by invalid,Range,requests in some\ncases.,,,,,Version 0.12.2,\u00b6,,Released on May 16 2017,,,Fix a bug in,safe_join,on Windows.,,,,,Version 0.12.1,\u00b6,,Bugfix release, released on March 31st 2017,,,Prevent,flask run,from showing a NoAppException when an ImportError occurs\nwithin the imported application module.,,Fix encoding behavior of,app.config.from_pyfile,for Python 3. Fix,#2118,.,,Call,ctx.auto_pop,with the exception object instead of,None,, in the\nevent that a,BaseException,such as,KeyboardInterrupt,is raised in a\nrequest handler.,,,,,Version 0.12,\u00b6,,Released on December 21st 2016, codename Punsch.,,,the cli command now responds to,\u2013version,.,,Mimetype guessing and ETag generation for file-like objects in,send_file,has been removed, as per issue,#104,.  See pull request,#1849,.,,Mimetype guessing in,send_file,now fails loudly and doesn\u2019t fall back to,application/octet-stream,. See pull request,#1988,.,,Make,flask.safe_join,able to join multiple paths like,os.path.join,(pull request,#1730,).,,Revert a behavior change that made the dev server crash instead of returning\na Internal Server Error (pull request,#2006,).,,Correctly invoke response handlers for both regular request dispatching as\nwell as error handlers.,,Disable logger propagation by default for the app logger.,,Add support for range requests in,send_file,.,,app.test_client,includes preset default environment, which can now be\ndirectly set, instead of per,client.get,.,,,,,Version 0.11.2,\u00b6,,Bugfix release, unreleased,,,Fix crash when running under PyPy3, see pull request,#1814,.,,,,,Version 0.11.1,\u00b6,,Bugfix release, released on June 7th 2016.,,,Fixed a bug that prevented,FLASK_APP=foobar/__init__.py,from working. See\npull request,#1872,.,,,,,Version 0.11,\u00b6,,Released on May 29th 2016, codename Absinthe.,,,Added support to serializing top-level arrays to,flask.jsonify(),. This\nintroduces a security risk in ancient browsers. See,JSON Security,for details.,,Added before_render_template signal.,,Added,**kwargs,to,flask.Test.test_client(),to support passing\nadditional keyword arguments to the constructor of,flask.Flask.test_client_class,.,,Added,SESSION_REFRESH_EACH_REQUEST,config key that controls the\nset-cookie behavior.  If set to,True,a permanent session will be\nrefreshed each request and get their lifetime extended, if set to,False,it will only be modified if the session actually modifies.\nNon permanent sessions are not affected by this and will always\nexpire if the browser window closes.,,Made Flask support custom JSON mimetypes for incoming data.,,Added support for returning tuples in the form,(response,,,headers),from a view function.,,Added,flask.Config.from_json(),.,,Added,flask.Flask.config_class,.,,Added,flask.Config.get_namespace(),.,,Templates are no longer automatically reloaded outside of debug mode. This\ncan be configured with the new,TEMPLATES_AUTO_RELOAD,config key.,,Added a workaround for a limitation in Python 3.3\u2019s namespace loader.,,Added support for explicit root paths when using Python 3.3\u2019s namespace\npackages.,,Added,flask,and the,flask.cli,module to start the local\ndebug server through the click CLI system.  This is recommended over the old,flask.run(),method as it works faster and more reliable due to a\ndifferent design and also replaces,Flask-Script,.,,Error handlers that match specific classes are now checked first,\nthereby allowing catching exceptions that are subclasses of HTTP\nexceptions (in,werkzeug.exceptions,).  This makes it possible\nfor an extension author to create exceptions that will by default\nresult in the HTTP error of their choosing, but may be caught with\na custom error handler if desired.,,Added,flask.Config.from_mapping(),.,,Flask will now log by default even if debug is disabled.  The log format is\nnow hardcoded but the default log handling can be disabled through the,LOGGER_HANDLER_POLICY,configuration key.,,Removed deprecated module functionality.,,Added the,EXPLAIN_TEMPLATE_LOADING,config flag which when enabled will\ninstruct Flask to explain how it locates templates.  This should help\nusers debug when the wrong templates are loaded.,,Enforce blueprint handling in the order they were registered for template\nloading.,,Ported test suite to py.test.,,Deprecated,request.json,in favour of,request.get_json(),.,,Add \u201cpretty\u201d and \u201ccompressed\u201d separators definitions in jsonify() method.\nReduces JSON response size when JSONIFY_PRETTYPRINT_REGULAR=False by removing\nunnecessary white space included by default after separators.,,JSON responses are now terminated with a newline character, because it is a\nconvention that UNIX text files end with a newline and some clients don\u2019t\ndeal well when this newline is missing. See,https://github.com/pallets/flask/pull/1262,\u2013 this came up originally as a\npart of,https://github.com/kennethreitz/httpbin/issues/168,,The automatically provided,OPTIONS,method is now correctly disabled if\nthe user registered an overriding rule with the lowercase-version,options,(issue,#1288,).,,flask.json.jsonify,now supports the,datetime.date,type (pull request,#1326,).,,Don\u2019t leak exception info of already catched exceptions to context teardown\nhandlers (pull request,#1393,).,,Allow custom Jinja environment subclasses (pull request,#1422,).,,flask.g,now has,pop(),and,setdefault,methods.,,Turn on autoescape for,flask.templating.render_template_string,by default\n(pull request,#1515,).,,flask.ext,is now deprecated (pull request,#1484,).,,send_from_directory,now raises BadRequest if the filename is invalid on\nthe server OS (pull request,#1763,).,,Added the,JSONIFY_MIMETYPE,configuration variable (pull request,#1728,).,,Exceptions during teardown handling will no longer leave bad application\ncontexts lingering around.,,,,,Version 0.10.2,\u00b6,,(bugfix release, release date to be announced),,,Fixed broken,test_appcontext_signals(),test case.,,Raise an,AttributeError,in,flask.helpers.find_package(),with a\nuseful message explaining why it is raised when a PEP 302 import hook is used\nwithout an,is_package(),method.,,Fixed an issue causing exceptions raised before entering a request or app\ncontext to be passed to teardown handlers.,,Fixed an issue with query parameters getting removed from requests in\nthe test client when absolute URLs were requested.,,Made,@before_first_request,into a decorator as intended.,,Fixed an etags bug when sending a file streams with a name.,,Fixed,send_from_directory,not expanding to the application root path\ncorrectly.,,Changed logic of before first request handlers to flip the flag after\ninvoking.  This will allow some uses that are potentially dangerous but\nshould probably be permitted.,,Fixed Python 3 bug when a handler from,app.url_build_error_handlers,reraises the,BuildError,.,,,,,Version 0.10.1,\u00b6,,(bugfix release, released on June 14th 2013),,,Fixed an issue where,|tojson,was not quoting single quotes which\nmade the filter not work properly in HTML attributes.  Now it\u2019s\npossible to use that filter in single quoted attributes.  This should\nmake using that filter with angular.js easier.,,Added support for byte strings back to the session system.  This broke\ncompatibility with the common case of people putting binary data for\ntoken verification into the session.,,Fixed an issue where registering the same method twice for the same endpoint\nwould trigger an exception incorrectly.,,,,,Version 0.10,\u00b6,,Released on June 13th 2013, codename Limoncello.,,,Changed default cookie serialization format from pickle to JSON to\nlimit the impact an attacker can do if the secret key leaks.  See,Version 0.10,for more information.,,Added,template_test,methods in addition to the already existing,template_filter,method family.,,Added,template_global,methods in addition to the already existing,template_filter,method family.,,Set the content-length header for x-sendfile.,,tojson,filter now does not escape script blocks in HTML5 parsers.,,tojson,used in templates is now safe by default due.  This was\nallowed due to the different escaping behavior.,,Flask will now raise an error if you attempt to register a new function\non an already used endpoint.,,Added wrapper module around simplejson and added default serialization\nof datetime objects.  This allows much easier customization of how\nJSON is handled by Flask or any Flask extension.,,Removed deprecated internal,flask.session,module alias.  Use,flask.sessions,instead to get the session module.  This is not to\nbe confused with,flask.session,the session proxy.,,Templates can now be rendered without request context.  The behavior is\nslightly different as the,request,,,session,and,g,objects\nwill not be available and blueprint\u2019s context processors are not\ncalled.,,The config object is now available to the template as a real global and\nnot through a context processor which makes it available even in imported\ntemplates by default.,,Added an option to generate non-ascii encoded JSON which should result\nin less bytes being transmitted over the network.  It\u2019s disabled by\ndefault to not cause confusion with existing libraries that might expect,flask.json.dumps,to return bytestrings by default.,,flask.g,is now stored on the app context instead of the request\ncontext.,,flask.g,now gained a,get(),method for not erroring out on non\nexisting items.,,flask.g,now can be used with the,in,operator to see what\u2019s defined\nand it now is iterable and will yield all attributes stored.,,flask.Flask.request_globals_class,got renamed to,flask.Flask.app_ctx_globals_class,which is a better name to what it\ndoes since 0.10.,,request,,,session,and,g,are now also added as proxies to the template\ncontext which makes them available in imported templates.  One has to be\nvery careful with those though because usage outside of macros might\ncause caching.,,Flask will no longer invoke the wrong error handlers if a proxy\nexception is passed through.,,Added a workaround for chrome\u2019s cookies in localhost not working\nas intended with domain names.,,Changed logic for picking defaults for cookie values from sessions\nto work better with Google Chrome.,,Added,message_flashed,signal that simplifies flashing testing.,,Added support for copying of request contexts for better working with\ngreenlets.,,Removed custom JSON HTTP exception subclasses.  If you were relying on them\nyou can reintroduce them again yourself trivially.  Using them however is\nstrongly discouraged as the interface was flawed.,,Python requirements changed: requiring Python 2.6 or 2.7 now to prepare\nfor Python 3.3 port.,,Changed how the teardown system is informed about exceptions.  This is now\nmore reliable in case something handles an exception halfway through\nthe error handling process.,,Request context preservation in debug mode now keeps the exception\ninformation around which means that teardown handlers are able to\ndistinguish error from success cases.,,Added the,JSONIFY_PRETTYPRINT_REGULAR,configuration variable.,,Flask now orders JSON keys by default to not trash HTTP caches due to\ndifferent hash seeds between different workers.,,Added,appcontext_pushed,and,appcontext_popped,signals.,,The builtin run method now takes the,SERVER_NAME,into account when\npicking the default port to run on.,,Added,flask.request.get_json(),as a replacement for the old,flask.request.json,property.,,,,,Version 0.9,\u00b6,,Released on July 1st 2012, codename Campari.,,,The,flask.Request.on_json_loading_failed(),now returns a JSON formatted\nresponse by default.,,The,flask.url_for(),function now can generate anchors to the\ngenerated links.,,The,flask.url_for(),function now can also explicitly generate\nURL rules specific to a given HTTP method.,,Logger now only returns the debug log setting if it was not set\nexplicitly.,,Unregister a circular dependency between the WSGI environment and\nthe request object when shutting down the request.  This means that\nenviron,werkzeug.request,will be,None,after the response was\nreturned to the WSGI server but has the advantage that the garbage\ncollector is not needed on CPython to tear down the request unless\nthe user created circular dependencies themselves.,,Session is now stored after callbacks so that if the session payload\nis stored in the session you can still modify it in an after\nrequest callback.,,The,flask.Flask,class will avoid importing the provided import name\nif it can (the required first parameter), to benefit tools which build Flask\ninstances programmatically.  The Flask class will fall back to using import\non systems with custom module hooks, e.g. Google App Engine, or when the\nimport name is inside a zip archive (usually a .egg) prior to Python 2.7.,,Blueprints now have a decorator to add custom template filters application\nwide,,flask.Blueprint.app_template_filter(),.,,The Flask and Blueprint classes now have a non-decorator method for adding\ncustom template filters application wide,,flask.Flask.add_template_filter(),and,flask.Blueprint.add_app_template_filter(),.,,The,flask.get_flashed_messages(),function now allows rendering flashed\nmessage categories in separate blocks, through a,category_filter,argument.,,The,flask.Flask.run(),method now accepts,None,for,host,and,port,arguments, using default values when,None,.  This allows for calling run\nusing configuration values, e.g.,app.run(app.config.get('MYHOST'),,,app.config.get('MYPORT')),, with proper behavior whether or not a config\nfile is provided.,,The,flask.render_template(),method now accepts a either an iterable of\ntemplate names or a single template name.  Previously, it only accepted a\nsingle template name.  On an iterable, the first template found is rendered.,,Added,flask.Flask.app_context(),which works very similar to the\nrequest context but only provides access to the current application.  This\nalso adds support for URL generation without an active request context.,,View functions can now return a tuple with the first instance being an\ninstance of,flask.Response,.  This allows for returning,jsonify(error=\"error,,msg\"),,,400,from a view function.,,Flask,and,Blueprint,now provide a,get_send_file_max_age(),hook for subclasses to override\nbehavior of serving static files from Flask when using,flask.Flask.send_static_file(),(used for the default static file\nhandler) and,send_file(),.  This hook is provided a\nfilename, which for example allows changing cache controls by file extension.\nThe default max-age for,send_file,and static files can be configured\nthrough a new,SEND_FILE_MAX_AGE_DEFAULT,configuration variable, which is\nused in the default,get_send_file_max_age,implementation.,,Fixed an assumption in sessions implementation which could break message\nflashing on sessions implementations which use external storage.,,Changed the behavior of tuple return values from functions.  They are no\nlonger arguments to the response object, they now have a defined meaning.,,Added,flask.Flask.request_globals_class,to allow a specific class to\nbe used on creation of the,g,instance of each request.,,Added,required_methods,attribute to view functions to force-add methods\non registration.,,Added,flask.after_this_request(),.,,Added,flask.stream_with_context(),and the ability to push contexts\nmultiple times without producing unexpected behavior.,,,,,Version 0.8.1,\u00b6,,Bugfix release, released on July 1st 2012,,,Fixed an issue with the undocumented,flask.session,module to not\nwork properly on Python 2.5.  It should not be used but did cause\nsome problems for package managers.,,,,,Version 0.8,\u00b6,,Released on September 29th 2011, codename Rakija,,,Refactored session support into a session interface so that\nthe implementation of the sessions can be changed without\nhaving to override the Flask class.,,Empty session cookies are now deleted properly automatically.,,View functions can now opt out of getting the automatic\nOPTIONS implementation.,,HTTP exceptions and Bad Request errors can now be trapped so that they\nshow up normally in the traceback.,,Flask in debug mode is now detecting some common problems and tries to\nwarn you about them.,,Flask in debug mode will now complain with an assertion error if a view\nwas attached after the first request was handled.  This gives earlier\nfeedback when users forget to import view code ahead of time.,,Added the ability to register callbacks that are only triggered once at\nthe beginning of the first request. (,Flask.before_first_request(),),,Malformed JSON data will now trigger a bad request HTTP exception instead\nof a value error which usually would result in a 500 internal server\nerror if not handled.  This is a backwards incompatible change.,,Applications now not only have a root path where the resources and modules\nare located but also an instance path which is the designated place to\ndrop files that are modified at runtime (uploads etc.).  Also this is\nconceptually only instance depending and outside version control so it\u2019s\nthe perfect place to put configuration files etc.  For more information\nsee,Instance Folders,.,,Added the,APPLICATION_ROOT,configuration variable.,,Implemented,session_transaction(),to\neasily modify sessions from the test environment.,,Refactored test client internally.  The,APPLICATION_ROOT,configuration\nvariable as well as,SERVER_NAME,are now properly used by the test client\nas defaults.,,Added,flask.views.View.decorators,to support simpler decorating of\npluggable (class-based) views.,,Fixed an issue where the test client if used with the \u201cwith\u201d statement did not\ntrigger the execution of the teardown handlers.,,Added finer control over the session cookie parameters.,,HEAD requests to a method view now automatically dispatch to the,get,method if no handler was implemented.,,Implemented the virtual,flask.ext,package to import extensions from.,,The context preservation on exceptions is now an integral component of\nFlask itself and no longer of the test client.  This cleaned up some\ninternal logic and lowers the odds of runaway request contexts in unittests.,,,,,Version 0.7.3,\u00b6,,Bugfix release, release date to be decided,,,Fixed the Jinja2 environment\u2019s list_templates method not returning the\ncorrect names when blueprints or modules were involved.,,,,,Version 0.7.2,\u00b6,,Bugfix release, released on July 6th 2011,,,Fixed an issue with URL processors not properly working on\nblueprints.,,,,,Version 0.7.1,\u00b6,,Bugfix release, released on June 29th 2011,,,Added missing future import that broke 2.5 compatibility.,,Fixed an infinite redirect issue with blueprints.,,,,,Version 0.7,\u00b6,,Released on June 28th 2011, codename Grappa,,,Added,make_default_options_response(),which can be used by subclasses to alter the default\nbehavior for,OPTIONS,responses.,,Unbound locals now raise a proper,RuntimeError,instead\nof an,AttributeError,.,,Mimetype guessing and etag support based on file objects is now\ndeprecated for,flask.send_file(),because it was unreliable.\nPass filenames instead or attach your own etags and provide a\nproper mimetype by hand.,,Static file handling for modules now requires the name of the\nstatic folder to be supplied explicitly.  The previous autodetection\nwas not reliable and caused issues on Google\u2019s App Engine.  Until\n1.0 the old behavior will continue to work but issue dependency\nwarnings.,,fixed a problem for Flask to run on jython.,,added a,PROPAGATE_EXCEPTIONS,configuration variable that can be\nused to flip the setting of exception propagation which previously\nwas linked to,DEBUG,alone and is now linked to either,DEBUG,or,TESTING,.,,Flask no longer internally depends on rules being added through the,add_url_rule,function and can now also accept regular werkzeug\nrules added to the url map.,,Added an,endpoint,method to the flask application object which\nallows one to register a callback to an arbitrary endpoint with\na decorator.,,Use Last-Modified for static file sending instead of Date which\nwas incorrectly introduced in 0.6.,,Added,create_jinja_loader,to override the loader creation process.,,Implemented a silent flag for,config.from_pyfile,.,,Added,teardown_request,decorator, for functions that should run at the end\nof a request regardless of whether an exception occurred.  Also the behavior\nfor,after_request,was changed.  It\u2019s now no longer executed when an exception\nis raised.  See,Upgrading to new Teardown Handling,,Implemented,flask.has_request_context(),,Deprecated,init_jinja_globals,.  Override the,create_jinja_environment(),method instead to\nachieve the same functionality.,,Added,flask.safe_join(),,The automatic JSON request data unpacking now looks at the charset\nmimetype parameter.,,Don\u2019t modify the session on,flask.get_flashed_messages(),if there\nare no messages in the session.,,before_request,handlers are now able to abort requests with errors.,,it is not possible to define user exception handlers.  That way you can\nprovide custom error messages from a central hub for certain errors that\nmight occur during request processing (for instance database connection\nerrors, timeouts from remote resources etc.).,,Blueprints can provide blueprint specific error handlers.,,Implemented generic,Pluggable Views,(class-based views).,,,,,Version 0.6.1,\u00b6,,Bugfix release, released on December 31st 2010,,,Fixed an issue where the default,OPTIONS,response was\nnot exposing all valid methods in the,Allow,header.,,Jinja2 template loading syntax now allows \u201c./\u201d in front of\na template load path.  Previously this caused issues with\nmodule setups.,,Fixed an issue where the subdomain setting for modules was\nignored for the static folder.,,Fixed a security problem that allowed clients to download arbitrary files\nif the host server was a windows based operating system and the client\nuses backslashes to escape the directory the files where exposed from.,,,,,Version 0.6,\u00b6,,Released on July 27th 2010, codename Whisky,,,after request functions are now called in reverse order of\nregistration.,,OPTIONS is now automatically implemented by Flask unless the\napplication explicitly adds \u2018OPTIONS\u2019 as method to the URL rule.\nIn this case no automatic OPTIONS handling kicks in.,,static rules are now even in place if there is no static folder\nfor the module.  This was implemented to aid GAE which will\nremove the static folder if it\u2019s part of a mapping in the .yml\nfile.,,the,config,is now available in the templates\nas,config,.,,context processors will no longer override values passed directly\nto the render function.,,added the ability to limit the incoming request data with the\nnew,MAX_CONTENT_LENGTH,configuration value.,,the endpoint for the,flask.Module.add_url_rule(),method\nis now optional to be consistent with the function of the\nsame name on the application object.,,added a,flask.make_response(),function that simplifies\ncreating response object instances in views.,,added signalling support based on blinker.  This feature is currently\noptional and supposed to be used by extensions and applications.  If\nyou want to use it, make sure to have,blinker,installed.,,refactored the way URL adapters are created.  This process is now\nfully customizable with the,create_url_adapter(),method.,,modules can now register for a subdomain instead of just an URL\nprefix.  This makes it possible to bind a whole module to a\nconfigurable subdomain.,,,,,Version 0.5.2,\u00b6,,Bugfix Release, released on July 15th 2010,,,fixed another issue with loading templates from directories when\nmodules were used.,,,,,Version 0.5.1,\u00b6,,Bugfix Release, released on July 6th 2010,,,fixes an issue with template loading from directories when modules\nwhere used.,,,,,Version 0.5,\u00b6,,Released on July 6th 2010, codename Calvados,,,fixed a bug with subdomains that was caused by the inability to\nspecify the server name.  The server name can now be set with\nthe,SERVER_NAME,config key.  This key is now also used to set\nthe session cookie cross-subdomain wide.,,autoescaping is no longer active for all templates.  Instead it\nis only active for,.html,,,.htm,,,.xml,and,.xhtml,.\nInside templates this behavior can be changed with the,autoescape,tag.,,refactored Flask internally.  It now consists of more than a\nsingle file.,,flask.send_file(),now emits etags and has the ability to\ndo conditional responses builtin.,,(temporarily) dropped support for zipped applications.  This was a\nrarely used feature and led to some confusing behavior.,,added support for per-package template and static-file directories.,,removed support for,create_jinja_loader,which is no longer used\nin 0.5 due to the improved module support.,,added a helper function to expose files from any directory.,,,,,Version 0.4,\u00b6,,Released on June 18th 2010, codename Rakia,,,added the ability to register application wide error handlers\nfrom modules.,,after_request(),handlers are now also invoked\nif the request dies with an exception and an error handling page\nkicks in.,,test client has not the ability to preserve the request context\nfor a little longer.  This can also be used to trigger custom\nrequests that do not pop the request stack for testing.,,because the Python standard library caches loggers, the name of\nthe logger is configurable now to better support unittests.,,added,TESTING,switch that can activate unittesting helpers.,,the logger switches to,DEBUG,mode now if debug is enabled.,,,,,Version 0.3.1,\u00b6,,Bugfix release, released on May 28th 2010,,,fixed a error reporting bug with,flask.Config.from_envvar(),,removed some unused code from flask,,release does no longer include development leftover files (.git\nfolder for themes, built documentation in zip and pdf file and\nsome .pyc files),,,,,Version 0.3,\u00b6,,Released on May 28th 2010, codename Schnaps,,,added support for categories for flashed messages.,,the application now configures a,logging.Handler,and will\nlog request handling exceptions to that logger when not in debug\nmode.  This makes it possible to receive mails on server errors\nfor example.,,added support for context binding that does not require the use of\nthe with statement for playing in the console.,,the request context is now available within the with statement making\nit possible to further push the request context or pop it.,,added support for configurations.,,,,,Version 0.2,\u00b6,,Released on May 12th 2010, codename J\u00e4germeister,,,various bugfixes,,integrated JSON support,,added,get_template_attribute(),helper function.,,add_url_rule(),can now also register a\nview function.,,refactored internal request dispatching.,,server listens on 127.0.0.1 by default now to fix issues with chrome.,,added external URL support.,,added support for,send_file(),,module support and internal request handling refactoring\nto better support pluggable applications.,,sessions can be set to be permanent now on a per-session basis.,,better error reporting on missing secret keys.,,added support for Google Appengine.,,,,,Version 0.1,\u00b6,,First public preview release.,,,,,,,,,,,,,Contents,,,Flask Changelog,,Version 0.12.4,,Version 0.12.3,,Version 0.12.2,,Version 0.12.1,,Version 0.12,,Version 0.11.2,,Version 0.11.1,,Version 0.11,,Version 0.10.2,,Version 0.10.1,,Version 0.10,,Version 0.9,,Version 0.8.1,,Version 0.8,,Version 0.7.3,,Version 0.7.2,,Version 0.7.1,,Version 0.7,,Version 0.6.1,,Version 0.6,,Version 0.5.2,,Version 0.5.1,,Version 0.5,,Version 0.4,,Version 0.3.1,,Version 0.3,,Version 0.2,,Version 0.1,,,,,Navigation,,,Overview,,,Previous:,Upgrading to Newer Releases,,Next:,License,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "HTML/XHTML FAQ", "url": "http://flask.pocoo.org/docs/0.12/htmlfaq/", "content": ",,,,,HTML/XHTML FAQ \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,HTML/XHTML FAQ,\u00b6,,The Flask documentation and example applications are using HTML5.  You\nmay notice that in many situations, when end tags are optional they are\nnot used, so that the HTML is cleaner and faster to load.  Because there\nis much confusion about HTML and XHTML among developers, this document tries\nto answer some of the major questions.,,,History of XHTML,\u00b6,,For a while, it appeared that HTML was about to be replaced by XHTML.\nHowever, barely any websites on the Internet are actual XHTML (which is\nHTML processed using XML rules).  There are a couple of major reasons\nwhy this is the case.  One of them is Internet Explorer\u2019s lack of proper\nXHTML support. The XHTML spec states that XHTML must be served with the MIME\ntype,application/xhtml+xml,, but Internet Explorer refuses to read files\nwith that MIME type.\nWhile it is relatively easy to configure Web servers to serve XHTML properly,\nfew people do.  This is likely because properly using XHTML can be quite\npainful.,,One of the most important causes of pain is XML\u2019s draconian (strict and\nruthless) error handling.  When an XML parsing error is encountered,\nthe browser is supposed to show the user an ugly error message, instead\nof attempting to recover from the error and display what it can.  Most of\nthe (X)HTML generation on the web is based on non-XML template engines\n(such as Jinja, the one used in Flask) which do not protect you from\naccidentally creating invalid XHTML.  There are XML based template engines,\nsuch as Kid and the popular Genshi, but they often come with a larger\nruntime overhead and are not as straightforward to use because they have\nto obey XML rules.,,The majority of users, however, assumed they were properly using XHTML.\nThey wrote an XHTML doctype at the top of the document and self-closed all\nthe necessary tags (,<br>,becomes,<br/>,or,<br></br>,in XHTML).\nHowever, even if the document properly validates as XHTML, what really\ndetermines XHTML/HTML processing in browsers is the MIME type, which as\nsaid before is often not set properly. So the valid XHTML was being treated\nas invalid HTML.,,XHTML also changed the way JavaScript is used. To properly work with XHTML,\nprogrammers have to use the namespaced DOM interface with the XHTML\nnamespace to query for HTML elements.,,,,History of HTML5,\u00b6,,Development of the HTML5 specification was started in 2004 under the name\n\u201cWeb Applications 1.0\u201d by the Web Hypertext Application Technology Working\nGroup, or WHATWG (which was formed by the major browser vendors Apple,\nMozilla, and Opera) with the goal of writing a new and improved HTML\nspecification, based on existing browser behavior instead of unrealistic\nand backwards-incompatible specifications.,,For example, in HTML4,<title/Hello/,theoretically parses exactly the\nsame as,<title>Hello</title>,.  However, since people were using\nXHTML-like tags along the lines of,<link,,/>,, browser vendors implemented\nthe XHTML syntax over the syntax defined by the specification.,,In 2007, the specification was adopted as the basis of a new HTML\nspecification under the umbrella of the W3C, known as HTML5.  Currently,\nit appears that XHTML is losing traction, as the XHTML 2 working group has\nbeen disbanded and HTML5 is being implemented by all major browser vendors.,,,,HTML versus XHTML,\u00b6,,The following table gives you a quick overview of features available in\nHTML 4.01, XHTML 1.1 and HTML5. (XHTML 1.0 is not included, as it was\nsuperseded by XHTML 1.1 and the barely-used XHTML5.),,,,,,,,,,,,HTML4.01,,XHTML1.1,,HTML5,,,,,<tag/value/,==,<tag>value</tag>,,,[1],,,,,<br/>,supported,,,,,[2],,,<script/>,supported,,,,,,should be served as,text/html,,,,[3],,,,should be served as,application/xhtml+xml,,,,,,strict error handling,,,,,,inline SVG,,,,,,inline MathML,,,,,,<video>,tag,,,,,,<audio>,tag,,,,,,New semantic tags like,<article>,,,,,,,,,,,[1],This is an obscure feature inherited from SGML. It is usually not\nsupported by browsers, for reasons detailed above.,,,,,,,[2],This is for compatibility with server code that generates XHTML for\ntags such as,<br>,.  It should not be used in new code.,,,,,,,[3],XHTML 1.0 is the last XHTML standard that allows to be served\nas,text/html,for backwards compatibility reasons.,,,,,,What does \u201cstrict\u201d mean?,\u00b6,,HTML5 has strictly defined parsing rules, but it also specifies exactly\nhow a browser should react to parsing errors - unlike XHTML, which simply\nstates parsing should abort. Some people are confused by apparently\ninvalid syntax that still generates the expected results (for example,\nmissing end tags or unquoted attribute values).,,Some of these work because of the lenient error handling most browsers use\nwhen they encounter a markup error, others are actually specified.  The\nfollowing constructs are optional in HTML5 by standard, but have to be\nsupported by browsers:,,,Wrapping the document in an,<html>,tag,,Wrapping header elements in,<head>,or the body elements in,<body>,,Closing the,<p>,,,<li>,,,<dt>,,,<dd>,,,<tr>,,,<td>,,,<th>,,,<tbody>,,,<thead>,, or,<tfoot>,tags.,,Quoting attributes, so long as they contain no whitespace or\nspecial characters (like,<,,,>,,,',, or,\",).,,Requiring boolean attributes to have a value.,,,This means the following page in HTML5 is perfectly valid:,,<!doctype html>,,<,title,>,Hello HTML5,</,title,>,,<,div,,class,=,header,>,,<,h1,>,Hello HTML5,</,h1,>,,<,p,,class,=,tagline,>,HTML5 is awesome,</,div,>,,<,ul,,class,=,nav,>,,<,li,><,a,,href,=,/index,>,Index,</,a,>,,<,li,><,a,,href,=,/downloads,>,Downloads,</,a,>,,<,li,><,a,,href,=,/about,>,About,</,a,>,,</,ul,>,,<,div,,class,=,body,>,,<,h2,>,HTML5 is probably the future,</,h2,>,,<,p,>,There might be some other things around but in terms of\n    browser vendor support, HTML5 is hard to beat.,<,dl,>,,<,dt,>,Key 1,<,dd,>,Value 1,<,dt,>,Key 2,<,dd,>,Value 2,</,dl,>,,</,div,>,,,,,,New technologies in HTML5,\u00b6,,HTML5 adds many new features that make Web applications easier to write\nand to use.,,,The,<audio>,and,<video>,tags provide a way to embed audio and\nvideo without complicated add-ons like QuickTime or Flash.,,Semantic elements like,<article>,,,<header>,,,<nav>,, and,<time>,that make content easier to understand.,,The,<canvas>,tag, which supports a powerful drawing API, reducing\nthe need for server-generated images to present data graphically.,,New form control types like,<input,,type=\"date\">,that allow user\nagents to make entering and validating values easier.,,Advanced JavaScript APIs like Web Storage, Web Workers, Web Sockets,\ngeolocation, and offline applications.,,,Many other features have been added, as well. A good guide to new features\nin HTML5 is Mark Pilgrim\u2019s soon-to-be-published book,,Dive Into HTML5,.\nNot all of them are supported in browsers yet, however, so use caution.,,,,What should be used?,\u00b6,,Currently, the answer is HTML5.  There are very few reasons to use XHTML\nconsidering the latest developments in Web browsers.  To summarize the\nreasons given above:,,,Internet Explorer (which, sadly, currently leads in market share)\nhas poor support for XHTML.,,Many JavaScript libraries also do not support XHTML, due to the more\ncomplicated namespacing API it requires.,,HTML5 adds several new features, including semantic tags and the\nlong-awaited,<audio>,and,<video>,tags.,,It has the support of most browser vendors behind it.,,It is much easier to write, and more compact.,,,For most applications, it is undoubtedly better to use HTML5 than XHTML.,,,,,,,,,,,,,Contents,,,HTML/XHTML FAQ,,History of XHTML,,History of HTML5,,HTML versus XHTML,,What does \u201cstrict\u201d mean?,,New technologies in HTML5,,What should be used?,,,,,Navigation,,,Overview,,,Previous:,Design Decisions in Flask,,Next:,Security Considerations,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Design Decisions in Flask", "url": "http://flask.pocoo.org/docs/0.12/design/", "content": ",,,,,Design Decisions in Flask \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,Design Decisions in Flask,\u00b6,,If you are curious why Flask does certain things the way it does and not\ndifferently, this section is for you.  This should give you an idea about\nsome of the design decisions that may appear arbitrary and surprising at\nfirst, especially in direct comparison with other frameworks.,,,The Explicit Application Object,\u00b6,,A Python web application based on WSGI has to have one central callable\nobject that implements the actual application.  In Flask this is an\ninstance of the,Flask,class.  Each Flask application has\nto create an instance of this class itself and pass it the name of the\nmodule, but why can\u2019t Flask do that itself?,,Without such an explicit application object the following code:,,from,,flask,,import,,Flask,,app,,=,,Flask,(,__name__,),,@app,.,route,(,'/',),,def,,index,():,,return,,'Hello World!',,,,Would look like this instead:,,from,,hypothetical_flask,,import,,route,,@route,(,'/',),,def,,index,():,,return,,'Hello World!',,,,There are three major reasons for this.  The most important one is that\nimplicit application objects require that there may only be one instance at\nthe time.  There are ways to fake multiple applications with a single\napplication object, like maintaining a stack of applications, but this\ncauses some problems I won\u2019t outline here in detail.  Now the question is:\nwhen does a microframework need more than one application at the same\ntime?  A good example for this is unittesting.  When you want to test\nsomething it can be very helpful to create a minimal application to test\nspecific behavior.  When the application object is deleted everything it\nallocated will be freed again.,,Another thing that becomes possible when you have an explicit object lying\naround in your code is that you can subclass the base class\n(,Flask,) to alter specific behavior.  This would not be\npossible without hacks if the object were created ahead of time for you\nbased on a class that is not exposed to you.,,But there is another very important reason why Flask depends on an\nexplicit instantiation of that class: the package name.  Whenever you\ncreate a Flask instance you usually pass it,__name__,as package name.\nFlask depends on that information to properly load resources relative\nto your module.  With Python\u2019s outstanding support for reflection it can\nthen access the package to figure out where the templates and static files\nare stored (see,open_resource(),).  Now obviously there\nare frameworks around that do not need any configuration and will still be\nable to load templates relative to your application module.  But they have\nto use the current working directory for that, which is a very unreliable\nway to determine where the application is.  The current working directory\nis process-wide and if you are running multiple applications in one\nprocess (which could happen in a webserver without you knowing) the paths\nwill be off.  Worse: many webservers do not set the working directory to\nthe directory of your application but to the document root which does not\nhave to be the same folder.,,The third reason is \u201cexplicit is better than implicit\u201d.  That object is\nyour WSGI application, you don\u2019t have to remember anything else.  If you\nwant to apply a WSGI middleware, just wrap it and you\u2019re done (though\nthere are better ways to do that so that you do not lose the reference\nto the application object,wsgi_app(),).,,Furthermore this design makes it possible to use a factory function to\ncreate the application which is very helpful for unittesting and similar\nthings (,Application Factories,).,,,,The Routing System,\u00b6,,Flask uses the Werkzeug routing system which was designed to\nautomatically order routes by complexity.  This means that you can declare\nroutes in arbitrary order and they will still work as expected.  This is a\nrequirement if you want to properly implement decorator based routing\nsince decorators could be fired in undefined order when the application is\nsplit into multiple modules.,,Another design decision with the Werkzeug routing system is that routes\nin Werkzeug try to ensure that URLs are unique.  Werkzeug will go quite far\nwith that in that it will automatically redirect to a canonical URL if a route\nis ambiguous.,,,,One Template Engine,\u00b6,,Flask decides on one template engine: Jinja2.  Why doesn\u2019t Flask have a\npluggable template engine interface?  You can obviously use a different\ntemplate engine, but Flask will still configure Jinja2 for you.  While\nthat limitation that Jinja2 is,always,configured will probably go away,\nthe decision to bundle one template engine and use that will not.,,Template engines are like programming languages and each of those engines\nhas a certain understanding about how things work.  On the surface they\nall work the same: you tell the engine to evaluate a template with a set\nof variables and take the return value as string.,,But that\u2019s about where similarities end.  Jinja2 for example has an\nextensive filter system, a certain way to do template inheritance, support\nfor reusable blocks (macros) that can be used from inside templates and\nalso from Python code, uses Unicode for all operations, supports\niterative template rendering, configurable syntax and more.  On the other\nhand an engine like Genshi is based on XML stream evaluation, template\ninheritance by taking the availability of XPath into account and more.\nMako on the other hand treats templates similar to Python modules.,,When it comes to connecting a template engine with an application or\nframework there is more than just rendering templates.  For instance,\nFlask uses Jinja2\u2019s extensive autoescaping support.  Also it provides\nways to access macros from Jinja2 templates.,,A template abstraction layer that would not take the unique features of\nthe template engines away is a science on its own and a too large\nundertaking for a microframework like Flask.,,Furthermore extensions can then easily depend on one template language\nbeing present.  You can easily use your own templating language, but an\nextension could still depend on Jinja itself.,,,,Micro with Dependencies,\u00b6,,Why does Flask call itself a microframework and yet it depends on two\nlibraries (namely Werkzeug and Jinja2).  Why shouldn\u2019t it?  If we look\nover to the Ruby side of web development there we have a protocol very\nsimilar to WSGI.  Just that it\u2019s called Rack there, but besides that it\nlooks very much like a WSGI rendition for Ruby.  But nearly all\napplications in Ruby land do not work with Rack directly, but on top of a\nlibrary with the same name.  This Rack library has two equivalents in\nPython: WebOb (formerly Paste) and Werkzeug.  Paste is still around but\nfrom my understanding it\u2019s sort of deprecated in favour of WebOb.  The\ndevelopment of WebOb and Werkzeug started side by side with similar ideas\nin mind: be a good implementation of WSGI for other applications to take\nadvantage.,,Flask is a framework that takes advantage of the work already done by\nWerkzeug to properly interface WSGI (which can be a complex task at\ntimes).  Thanks to recent developments in the Python package\ninfrastructure, packages with dependencies are no longer an issue and\nthere are very few reasons against having libraries that depend on others.,,,,Thread Locals,\u00b6,,Flask uses thread local objects (context local objects in fact, they\nsupport greenlet contexts as well) for request, session and an extra\nobject you can put your own things on (,g,).  Why is that and\nisn\u2019t that a bad idea?,,Yes it is usually not such a bright idea to use thread locals.  They cause\ntroubles for servers that are not based on the concept of threads and make\nlarge applications harder to maintain.  However Flask is just not designed\nfor large applications or asynchronous servers.  Flask wants to make it\nquick and easy to write a traditional web application.,,Also see the,Becoming Big,section of the documentation for some\ninspiration for larger applications based on Flask.,,,,What Flask is, What Flask is Not,\u00b6,,Flask will never have a database layer.  It will not have a form library\nor anything else in that direction.  Flask itself just bridges to Werkzeug\nto implement a proper WSGI application and to Jinja2 to handle templating.\nIt also binds to a few common standard library packages such as logging.\nEverything else is up for extensions.,,Why is this the case?  Because people have different preferences and\nrequirements and Flask could not meet those if it would force any of this\ninto the core.  The majority of web applications will need a template\nengine in some sort.  However not every application needs a SQL database.,,The idea of Flask is to build a good foundation for all applications.\nEverything else is up to you or extensions.,,,,,,,,,,,,,Contents,,,Design Decisions in Flask,,The Explicit Application Object,,The Routing System,,One Template Engine,,Micro with Dependencies,,Thread Locals,,What Flask is, What Flask is Not,,,,,Navigation,,,Overview,,,Previous:,API,,Next:,HTML/XHTML FAQ,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Index", "url": "http://flask.pocoo.org/docs/1.0/genindex/", "content": ",,,,,Index \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,Flask 1.0.2 documentation,\u00bb,,,,,,,,Index,,,_,|,A,|,B,|,C,|,D,|,E,|,F,|,G,|,H,|,I,|,J,|,K,|,L,|,M,|,N,|,O,|,P,|,Q,|,R,|,S,|,T,|,U,|,V,|,W,|,Y,,,_,,,,_app_ctx_stack (in module flask),,,,,_AppCtxGlobals (class in flask.ctx),,,_request_ctx_stack (in module flask),,,,,A,,,,abort() (in module flask),,,accept_charsets (flask.Request attribute),,,accept_encodings (flask.Request attribute),,,accept_languages (flask.Request attribute),,,accept_mimetypes (flask.Request attribute),,,access_route (flask.Request attribute),,,accessed (flask.sessions.SecureCookieSession attribute),,,(flask.sessions.SessionMixin attribute),,,,add_app_template_filter() (flask.Blueprint method),,,add_app_template_global() (flask.Blueprint method),,,add_app_template_test() (flask.Blueprint method),,,add_template_filter() (flask.Flask method),,,add_template_global() (flask.Flask method),,,add_template_test() (flask.Flask method),,,add_url_rule() (flask.Blueprint method),,,(flask.Flask method),,,(flask.blueprints.BlueprintSetupState method),,,,after_app_request() (flask.Blueprint method),,,after_request() (flask.Blueprint method),,,(flask.Flask method),,,,after_request_funcs (flask.Flask attribute),,,after_this_request() (in module flask),,,,,app (flask.blueprints.BlueprintSetupState attribute),,,app_context() (flask.Flask method),,,app_context_processor() (flask.Blueprint method),,,app_ctx_globals_class (flask.Flask attribute),,,app_errorhandler() (flask.Blueprint method),,,app_import_path (flask.cli.ScriptInfo attribute),,,app_template_filter() (flask.Blueprint method),,,app_template_global() (flask.Blueprint method),,,app_template_test() (flask.Blueprint method),,,app_url_defaults() (flask.Blueprint method),,,app_url_value_preprocessor() (flask.Blueprint method),,,AppContext (class in flask.ctx),,,appcontext_popped (in module flask),,,appcontext_pushed (in module flask),,,appcontext_tearing_down (in module flask),,,AppGroup (class in flask.cli),,,application() (flask.Request class method),,,APPLICATION_ROOT (built-in variable),,,args (flask.Request attribute),,,as_view() (flask.views.View class method),,,authorization (flask.Request attribute),,,auto_find_instance_path() (flask.Flask method),,,,,B,,,,base_url (flask.Request attribute),,,[1],,,before_app_first_request() (flask.Blueprint method),,,before_app_request() (flask.Blueprint method),,,before_first_request() (flask.Flask method),,,before_first_request_funcs (flask.Flask attribute),,,before_request() (flask.Blueprint method),,,(flask.Flask method),,,,,,before_request_funcs (flask.Flask attribute),,,Blueprint (class in flask),,,blueprint (flask.blueprints.BlueprintSetupState attribute),,,(flask.Request attribute),,,,blueprints (flask.Flask attribute),,,BlueprintSetupState (class in flask.blueprints),,,,,C,,,,cache_control (flask.Request attribute),,,check() (flask.json.tag.JSONTag method),,,cli (flask.Flask attribute),,,close() (flask.Request method),,,command() (flask.cli.AppGroup method),,,Config (class in flask),,,config (flask.Flask attribute),,,config_class (flask.Flask attribute),,,content_encoding (flask.Request attribute),,,content_length (flask.Request attribute),,,content_md5 (flask.Request attribute),,,,,content_type (flask.Request attribute),,,context_processor() (flask.Blueprint method),,,(flask.Flask method),,,,cookies (flask.Request attribute),,,copy() (flask.ctx.RequestContext method),,,copy_current_request_context() (in module flask),,,create_app (flask.cli.ScriptInfo attribute),,,create_global_jinja_loader() (flask.Flask method),,,create_jinja_environment() (flask.Flask method),,,create_url_adapter() (flask.Flask method),,,current_app (in module flask),,,,,D,,,,data (flask.cli.ScriptInfo attribute),,,(flask.Request attribute),,,(flask.Response attribute),,,,date (flask.Request attribute),,,DEBUG (built-in variable),,,debug (flask.Flask attribute),,,decorators (flask.views.View attribute),,,default() (flask.json.JSONEncoder method),,,default_config (flask.Flask attribute),,,default_tags (flask.json.tag.TaggedJSONSerializer attribute),,,,,dict_storage_class (flask.Request attribute),,,digest_method() (flask.sessions.SecureCookieSessionInterface static method),,,dispatch_request() (flask.Flask method),,,(flask.views.MethodView method),,,(flask.views.View method),,,,do_teardown_appcontext() (flask.Flask method),,,do_teardown_request() (flask.Flask method),,,dump() (in module flask.json),,,dumps() (flask.json.tag.TaggedJSONSerializer method),,,(in module flask.json),,,,,,E,,,,endpoint (flask.Request attribute),,,endpoint() (flask.Blueprint method),,,(flask.Flask method),,,,ENV (built-in variable),,,env (flask.Flask attribute),,,environ (flask.Request attribute),,,environment variable,,FLASK_DEBUG,,,[1],,,[2],,,FLASK_ENV,,,[1],,,[2],,,[3],,,[4],,,[5],,,[6],,,[7],,,[8],,,[9],,,[10],,,YOURAPPLICATION_SETTINGS,,,,,,error_handler_spec (flask.Flask attribute),,,errorhandler() (flask.Blueprint method),,,(flask.Flask method),,,,escape() (flask.Markup class method),,,(in module flask),,,,EXPLAIN_TEMPLATE_LOADING (built-in variable),,,extensions (flask.Flask attribute),,,,,F,,,,files (flask.Request attribute),,,first_registration (flask.blueprints.BlueprintSetupState attribute),,,flash() (in module flask),,,Flask (class in flask),,,flask (module),,,flask.json (module),,,flask.json.tag (module),,,FLASK_DEBUG,,,[1],,,[2],,,FLASK_ENV,,,[1],,,[2],,,[3],,,[4],,,[5],,,[6],,,[7],,,[8],,,[9],,,[10],,,FlaskClient (class in flask.testing),,,FlaskCliRunner (class in flask.testing),,,,,FlaskGroup (class in flask.cli),,,form (flask.Request attribute),,,form_data_parser_class (flask.Request attribute),,,from_envvar() (flask.Config method),,,from_json() (flask.Config method),,,from_mapping() (flask.Config method),,,from_object() (flask.Config method),,,from_pyfile() (flask.Config method),,,from_values() (flask.Request class method),,,full_dispatch_request() (flask.Flask method),,,full_path (flask.Request attribute),,,[1],,,,,G,,,,g (in module flask),,,get() (flask.ctx._AppCtxGlobals method),,,(flask.sessions.SecureCookieSession method),,,,get_command() (flask.cli.FlaskGroup method),,,get_cookie_domain() (flask.sessions.SessionInterface method),,,get_cookie_httponly() (flask.sessions.SessionInterface method),,,get_cookie_path() (flask.sessions.SessionInterface method),,,get_cookie_samesite() (flask.sessions.SessionInterface method),,,get_cookie_secure() (flask.sessions.SessionInterface method),,,get_data() (flask.Request method),,,,,get_expiration_time() (flask.sessions.SessionInterface method),,,get_flashed_messages() (in module flask),,,get_json() (flask.Request method),,,(flask.Response method),,,,get_namespace() (flask.Config method),,,get_send_file_max_age() (flask.Blueprint method),,,(flask.Flask method),,,,get_template_attribute() (in module flask),,,got_first_request (flask.Flask attribute),,,got_request_exception (in module flask),,,group() (flask.cli.AppGroup method),,,,,H,,,,handle_exception() (flask.Flask method),,,handle_http_exception() (flask.Flask method),,,handle_url_build_error() (flask.Flask method),,,handle_user_exception() (flask.Flask method),,,has_app_context() (in module flask),,,has_request_context() (in module flask),,,,,has_static_folder (flask.Blueprint attribute),,,(flask.Flask attribute),,,,headers (flask.Request attribute),,,(flask.Response attribute),,,,host (flask.Request attribute),,,host_url (flask.Request attribute),,,,,I,,,,if_match (flask.Request attribute),,,if_modified_since (flask.Request attribute),,,if_none_match (flask.Request attribute),,,if_range (flask.Request attribute),,,if_unmodified_since (flask.Request attribute),,,import_name (flask.Blueprint attribute),,,(flask.Flask attribute),,,,inject_url_defaults() (flask.Flask method),,,instance_path (flask.Flask attribute),,,,,invoke() (flask.testing.FlaskCliRunner method),,,is_json (flask.Request attribute),,,(flask.Response attribute),,,,is_multiprocess (flask.Request attribute),,,is_multithread (flask.Request attribute),,,is_null_session() (flask.sessions.SessionInterface method),,,is_run_once (flask.Request attribute),,,is_secure (flask.Request attribute),,,is_xhr (flask.Request attribute),,,iter_blueprints() (flask.Flask method),,,,,J,,,,jinja_env (flask.Flask attribute),,,jinja_environment (flask.Flask attribute),,,jinja_loader (flask.Blueprint attribute),,,(flask.Flask attribute),,,,jinja_options (flask.Flask attribute),,,json (flask.Request attribute),,,JSON_AS_ASCII (built-in variable),,,json_decoder (flask.Blueprint attribute),,,(flask.Flask attribute),,,,,,json_encoder (flask.Blueprint attribute),,,(flask.Flask attribute),,,,JSON_SORT_KEYS (built-in variable),,,JSONDecoder (class in flask.json),,,JSONEncoder (class in flask.json),,,jsonify() (in module flask.json),,,JSONIFY_MIMETYPE (built-in variable),,,JSONIFY_PRETTYPRINT_REGULAR (built-in variable),,,JSONTag (class in flask.json.tag),,,,,K,,,,key (flask.json.tag.JSONTag attribute),,,,,key_derivation (flask.sessions.SecureCookieSessionInterface attribute),,,,,L,,,,list_commands() (flask.cli.FlaskGroup method),,,list_storage_class (flask.Request attribute),,,load() (in module flask.json),,,load_app() (flask.cli.ScriptInfo method),,,,,load_dotenv() (in module flask.cli),,,loads() (flask.json.tag.TaggedJSONSerializer method),,,(in module flask.json),,,,log_exception() (flask.Flask method),,,logger (flask.Flask attribute),,,,,M,,,,main() (flask.cli.FlaskGroup method),,,make_config() (flask.Flask method),,,make_default_options_response() (flask.Flask method),,,make_form_data_parser() (flask.Request method),,,make_null_session() (flask.Flask method),,,(flask.sessions.SessionInterface method),,,,make_response() (flask.Flask method),,,(in module flask),,,,make_setup_state() (flask.Blueprint method),,,make_shell_context() (flask.Flask method),,,Markup (class in flask),,,match_request() (flask.ctx.RequestContext method),,,MAX_CONTENT_LENGTH (built-in variable),,,,,max_content_length (flask.Request attribute),,,MAX_COOKIE_SIZE (built-in variable),,,max_cookie_size (flask.Response attribute),,,max_forwards (flask.Request attribute),,,message_flashed (in module flask),,,method (flask.Request attribute),,,methods (flask.views.View attribute),,,MethodView (class in flask.views),,,mimetype (flask.Request attribute),,,(flask.Response attribute),,,,mimetype_params (flask.Request attribute),,,modified (flask.session attribute),,,(flask.sessions.SecureCookieSession attribute),,,(flask.sessions.SessionMixin attribute),,,,,,N,,,,name (flask.Flask attribute),,,new (flask.session attribute),,,,,null_session_class (flask.sessions.SessionInterface attribute),,,NullSession (class in flask.sessions),,,,,O,,,,on_json_loading_failed() (flask.Request method),,,open() (flask.testing.FlaskClient method),,,open_instance_resource() (flask.Flask method),,,open_resource() (flask.Blueprint method),,,(flask.Flask method),,,,,,open_session() (flask.Flask method),,,(flask.sessions.SecureCookieSessionInterface method),,,(flask.sessions.SessionInterface method),,,,options (flask.blueprints.BlueprintSetupState attribute),,,,,P,,,,parameter_storage_class (flask.Request attribute),,,pass_script_info() (in module flask.cli),,,path (flask.Request attribute),,,[1],,,permanent (flask.session attribute),,,(flask.sessions.SessionMixin attribute),,,,PERMANENT_SESSION_LIFETIME (built-in variable),,,permanent_session_lifetime (flask.Flask attribute),,,pickle_based (flask.sessions.SessionInterface attribute),,,pop() (flask.ctx._AppCtxGlobals method),,,(flask.ctx.AppContext method),,,(flask.ctx.RequestContext method),,,,pragma (flask.Request attribute),,,,,PREFERRED_URL_SCHEME (built-in variable),,,preprocess_request() (flask.Flask method),,,PRESERVE_CONTEXT_ON_EXCEPTION (built-in variable),,,preserve_context_on_exception (flask.Flask attribute),,,process_response() (flask.Flask method),,,PROPAGATE_EXCEPTIONS (built-in variable),,,propagate_exceptions (flask.Flask attribute),,,provide_automatic_options (flask.views.View attribute),,,push() (flask.ctx.AppContext method),,,(flask.ctx.RequestContext method),,,,Python Enhancement Proposals,,PEP 8,,,,,,Q,,,,query_string (flask.Request attribute),,,,,R,,,,range (flask.Request attribute),,,record() (flask.Blueprint method),,,record_once() (flask.Blueprint method),,,redirect() (in module flask),,,referrer (flask.Request attribute),,,register() (flask.Blueprint method),,,(flask.json.tag.TaggedJSONSerializer method),,,,register_blueprint() (flask.Flask method),,,register_error_handler() (flask.Blueprint method),,,(flask.Flask method),,,,remote_addr (flask.Request attribute),,,remote_user (flask.Request attribute),,,render_template() (in module flask),,,render_template_string() (in module flask),,,Request (class in flask),,,request (in module flask),,,request_class (flask.Flask attribute),,,,,request_context() (flask.Flask method),,,request_finished (in module flask),,,request_started (in module flask),,,request_tearing_down (in module flask),,,RequestContext (class in flask.ctx),,,Response (class in flask),,,response_class (flask.Flask attribute),,,RFC,,RFC 822,,,RFC 8259,,,[1],,,,root_path (flask.Blueprint attribute),,,(flask.Flask attribute),,,,route() (flask.Blueprint method),,,(flask.Flask method),,,,routing_exception (flask.Request attribute),,,run() (flask.Flask method),,,run_command (in module flask.cli),,,,,S,,,,safe_join() (in module flask),,,salt (flask.sessions.SecureCookieSessionInterface attribute),,,save_session() (flask.Flask method),,,(flask.sessions.SecureCookieSessionInterface method),,,(flask.sessions.SessionInterface method),,,,scheme (flask.Request attribute),,,script_root (flask.Request attribute),,,[1],,,ScriptInfo (class in flask.cli),,,SECRET_KEY (built-in variable),,,secret_key (flask.Flask attribute),,,SecureCookieSession (class in flask.sessions),,,SecureCookieSessionInterface (class in flask.sessions),,,select_jinja_autoescape() (flask.Flask method),,,send_file() (in module flask),,,SEND_FILE_MAX_AGE_DEFAULT (built-in variable),,,send_file_max_age_default (flask.Flask attribute),,,send_from_directory() (in module flask),,,send_static_file() (flask.Blueprint method),,,(flask.Flask method),,,,serializer (flask.sessions.SecureCookieSessionInterface attribute),,,SERVER_NAME (built-in variable),,,session (class in flask),,,session_class (flask.sessions.SecureCookieSessionInterface attribute),,,SESSION_COOKIE_DOMAIN (built-in variable),,,SESSION_COOKIE_HTTPONLY (built-in variable),,,SESSION_COOKIE_NAME (built-in variable),,,session_cookie_name (flask.Flask attribute),,,SESSION_COOKIE_PATH (built-in variable),,,,,SESSION_COOKIE_SAMESITE (built-in variable),,,SESSION_COOKIE_SECURE (built-in variable),,,session_interface (flask.Flask attribute),,,SESSION_REFRESH_EACH_REQUEST (built-in variable),,,session_transaction() (flask.testing.FlaskClient method),,,SessionInterface (class in flask.sessions),,,SessionMixin (class in flask.sessions),,,set_cookie() (flask.Response method),,,setdefault() (flask.ctx._AppCtxGlobals method),,,(flask.sessions.SecureCookieSession method),,,,shell_command (in module flask.cli),,,shell_context_processor() (flask.Flask method),,,shell_context_processors (flask.Flask attribute),,,should_ignore_error() (flask.Flask method),,,should_set_cookie() (flask.sessions.SessionInterface method),,,signal() (flask.signals.Namespace method),,,signals.Namespace (class in flask),,,signals.signals_available (in module flask),,,static_folder (flask.Blueprint attribute),,,(flask.Flask attribute),,,,static_url_path (flask.Blueprint attribute),,,(flask.Flask attribute),,,,status (flask.Response attribute),,,status_code (flask.Response attribute),,,stream (flask.Request attribute),,,stream_with_context() (in module flask),,,striptags() (flask.Markup method),,,subdomain (flask.blueprints.BlueprintSetupState attribute),,,,,T,,,,tag() (flask.json.tag.JSONTag method),,,(flask.json.tag.TaggedJSONSerializer method),,,,TaggedJSONSerializer (class in flask.json.tag),,,teardown_app_request() (flask.Blueprint method),,,teardown_appcontext() (flask.Flask method),,,teardown_appcontext_funcs (flask.Flask attribute),,,teardown_request() (flask.Blueprint method),,,(flask.Flask method),,,,teardown_request_funcs (flask.Flask attribute),,,template_context_processors (flask.Flask attribute),,,template_filter() (flask.Flask method),,,template_folder (flask.Blueprint attribute),,,(flask.Flask attribute),,,,template_global() (flask.Flask method),,,template_rendered (in module flask),,,,,template_test() (flask.Flask method),,,TEMPLATES_AUTO_RELOAD (built-in variable),,,templates_auto_reload (flask.Flask attribute),,,test_cli_runner() (flask.Flask method),,,test_cli_runner_class (flask.Flask attribute),,,test_client() (flask.Flask method),,,test_client_class (flask.Flask attribute),,,test_request_context() (flask.Flask method),,,TESTING (built-in variable),,,testing (flask.Flask attribute),,,to_json() (flask.json.tag.JSONTag method),,,to_python() (flask.json.tag.JSONTag method),,,TRAP_BAD_REQUEST_ERRORS (built-in variable),,,trap_http_exception() (flask.Flask method),,,TRAP_HTTP_EXCEPTIONS (built-in variable),,,,,U,,,,unescape() (flask.Markup method),,,untag() (flask.json.tag.TaggedJSONSerializer method),,,update_template_context() (flask.Flask method),,,url (flask.Request attribute),,,[1],,,url_build_error_handlers (flask.Flask attribute),,,url_charset (flask.Request attribute),,,url_default_functions (flask.Flask attribute),,,url_defaults (flask.blueprints.BlueprintSetupState attribute),,,url_defaults() (flask.Blueprint method),,,(flask.Flask method),,,,url_for() (in module flask),,,,,url_map (flask.Flask attribute),,,url_prefix (flask.blueprints.BlueprintSetupState attribute),,,url_root (flask.Request attribute),,,[1],,,url_rule (flask.Request attribute),,,url_rule_class (flask.Flask attribute),,,url_value_preprocessor() (flask.Blueprint method),,,(flask.Flask method),,,,url_value_preprocessors (flask.Flask attribute),,,USE_X_SENDFILE (built-in variable),,,use_x_sendfile (flask.Flask attribute),,,user_agent (flask.Request attribute),,,,,V,,,,values (flask.Request attribute),,,View (class in flask.views),,,,,view_args (flask.Request attribute),,,view_functions (flask.Flask attribute),,,,,W,,,,want_form_data_parsed (flask.Request attribute),,,,,with_appcontext() (in module flask.cli),,,wsgi_app() (flask.Flask method),,,,,Y,,,,YOURAPPLICATION_SETTINGS,,,,,,,,,,,,,Navigation,,,Overview,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Becoming Big", "url": "http://flask.pocoo.org/docs/0.12/becomingbig/", "content": ",,,,,Becoming Big \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,Becoming Big,\u00b6,,Here are your options when growing your codebase or scaling your application.,,,Read the Source.,\u00b6,,Flask started in part to demonstrate how to build your own framework on top of\nexisting well-used tools Werkzeug (WSGI) and Jinja (templating), and as it\ndeveloped, it became useful to a wide audience.  As you grow your codebase,\ndon\u2019t just use Flask \u2013 understand it.  Read the source.  Flask\u2019s code is\nwritten to be read; its documentation is published so you can use its internal\nAPIs.  Flask sticks to documented APIs in upstream libraries, and documents its\ninternal utilities so that you can find the hook points needed for your\nproject.,,,,Hook. Extend.,\u00b6,,The,API,docs are full of available overrides, hook points, and,Signals,. You can provide custom classes for things like the request and\nresponse objects.  Dig deeper on the APIs you use, and look for the\ncustomizations which are available out of the box in a Flask release.  Look for\nways in which your project can be refactored into a collection of utilities and\nFlask extensions.  Explore the many,extensions,in the community, and look for patterns to\nbuild your own extensions if you do not find the tools you need.,,,,Subclass.,\u00b6,,The,Flask,class has many methods designed for subclassing. You\ncan quickly add or customize behavior by subclassing,Flask,(see\nthe linked method docs) and using that subclass wherever you instantiate an\napplication class. This works well with,Application Factories,. See,Subclassing Flask,for an example.,,,,Wrap with middleware.,\u00b6,,The,Application Dispatching,chapter shows in detail how to apply middleware. You\ncan introduce WSGI middleware to wrap your Flask instances and introduce fixes\nand changes at the layer between your Flask application and your HTTP\nserver. Werkzeug includes several,middlewares,.,,,,Fork.,\u00b6,,If none of the above options work, fork Flask.  The majority of code of Flask\nis within Werkzeug and Jinja2.  These libraries do the majority of the work.\nFlask is just the paste that glues those together.  For every project there is\nthe point where the underlying framework gets in the way (due to assumptions\nthe original developers had).  This is natural because if this would not be the\ncase, the framework would be a very complex system to begin with which causes a\nsteep learning curve and a lot of user frustration.,,This is not unique to Flask.  Many people use patched and modified\nversions of their framework to counter shortcomings.  This idea is also\nreflected in the license of Flask.  You don\u2019t have to contribute any\nchanges back if you decide to modify the framework.,,The downside of forking is of course that Flask extensions will most\nlikely break because the new framework has a different import name.\nFurthermore integrating upstream changes can be a complex process,\ndepending on the number of changes.  Because of that, forking should be\nthe very last resort.,,,,Scale like a pro.,\u00b6,,For many web applications the complexity of the code is less an issue than\nthe scaling for the number of users or data entries expected.  Flask by\nitself is only limited in terms of scaling by your application code, the\ndata store you want to use and the Python implementation and webserver you\nare running on.,,Scaling well means for example that if you double the amount of servers\nyou get about twice the performance.  Scaling bad means that if you add a\nnew server the application won\u2019t perform any better or would not even\nsupport a second server.,,There is only one limiting factor regarding scaling in Flask which are\nthe context local proxies.  They depend on context which in Flask is\ndefined as being either a thread, process or greenlet.  If your server\nuses some kind of concurrency that is not based on threads or greenlets,\nFlask will no longer be able to support these global proxies.  However the\nmajority of servers are using either threads, greenlets or separate\nprocesses to achieve concurrency which are all methods well supported by\nthe underlying Werkzeug library.,,,,Discuss with the community.,\u00b6,,The Flask developers keep the framework accessible to users with codebases big\nand small. If you find an obstacle in your way, caused by Flask, don\u2019t hesitate\nto contact the developers on the mailinglist or IRC channel.  The best way for\nthe Flask and Flask extension developers to improve the tools for larger\napplications is getting feedback from users.,,,,,,,,,,,,,Contents,,,Becoming Big,,Read the Source.,,Hook. Extend.,,Subclass.,,Wrap with middleware.,,Fork.,,Scale like a pro.,,Discuss with the community.,,,,,Navigation,,,Overview,,,Previous:,CGI,,Next:,API,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Deployment Options", "url": "http://flask.pocoo.org/docs/0.12/deploying/", "content": ",,,,,Deployment Options \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,Deployment Options,\u00b6,,While lightweight and easy to use,,Flask\u2019s built-in server is not suitable\nfor production,as it doesn\u2019t scale well and by default serves only one\nrequest at a time.  Some of the options available for properly running Flask in\nproduction are documented here.,,If you want to deploy your Flask application to a WSGI server not listed here,\nlook up the server documentation about how to use a WSGI app with it.  Just\nremember that your,Flask,application object is the actual WSGI\napplication.,,,Hosted options,\u00b6,,,Deploying Flask on Heroku,,Deploying Flask on OpenShift,,Deploying Flask on Webfaction,,Deploying Flask on Google App Engine,,Deploying Flask on AWS Elastic Beanstalk,,Sharing your Localhost Server with Localtunnel,,Deploying on Azure (IIS),,Deploying on PythonAnywhere,,,,,Self-hosted options,\u00b6,,,,mod_wsgi (Apache),,Installing,mod_wsgi,,Creating a,.wsgi,file,,Configuring Apache,,Troubleshooting,,Support for Automatic Reloading,,Working with Virtual Environments,,,,Standalone WSGI Containers,,Gunicorn,,Gevent,,Twisted Web,,Proxy Setups,,,,uWSGI,,Starting your app with uwsgi,,Configuring nginx,,,,FastCGI,,Creating a,.fcgi,file,,Configuring Apache,,Configuring lighttpd,,Configuring nginx,,Running FastCGI Processes,,Debugging,,,,CGI,,Creating a,.cgi,file,,Server Setup,,,,,,,,,,,,,,,,,Contents,,,Deployment Options,,Hosted options,,Self-hosted options,,,,,Navigation,,,Overview,,,Previous:,Subclassing Flask,,Next:,mod_wsgi (Apache),,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Subclassing Flask", "url": "http://flask.pocoo.org/docs/0.12/patterns/subclassing/", "content": ",,,,,Subclassing Flask \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,Subclassing Flask,\u00b6,,The,Flask,class is designed for subclassing.,,For example, you may want to override how request parameters are handled to preserve their order:,,from,,flask,,import,,Flask,,,,Request,,from,,werkzeug.datastructures,,import,,ImmutableOrderedMultiDict,,class,,MyRequest,(,Request,):,,\"\"\"Request subclass to override request parameter storage\"\"\",,parameter_storage_class,,=,,ImmutableOrderedMultiDict,,class,,MyFlask,(,Flask,):,,\"\"\"Flask subclass using the custom request class\"\"\",,request_class,,=,,MyRequest,,,,This is the recommended approach for overriding or augmenting Flask\u2019s internal functionality.,,,,,,,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,Celery Based Background Tasks,,Next:,Deployment Options,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Celery Based Background Tasks", "url": "http://flask.pocoo.org/docs/0.12/patterns/celery/", "content": ",,,,,Celery Based Background Tasks \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,Celery Based Background Tasks,\u00b6,,Celery is a task queue for Python with batteries included.  It used to\nhave a Flask integration but it became unnecessary after some\nrestructuring of the internals of Celery with Version 3.  This guide fills\nin the blanks in how to properly use Celery with Flask but assumes that\nyou generally already read the,First Steps with Celery,guide in the official Celery documentation.,,,Installing Celery,\u00b6,,Celery is on the Python Package Index (PyPI), so it can be installed with\nstandard Python tools like,pip,or,easy_install,:,,$ pip install celery,,,,,Configuring Celery,\u00b6,,The first thing you need is a Celery instance, this is called the celery\napplication.  It serves the same purpose as the,Flask,object in Flask, just for Celery.  Since this instance is used as the\nentry-point for everything you want to do in Celery, like creating tasks\nand managing workers, it must be possible for other modules to import it.,,For instance you can place this in a,tasks,module.  While you can use\nCelery without any reconfiguration with Flask, it becomes a bit nicer by\nsubclassing tasks and adding support for Flask\u2019s application contexts and\nhooking it up with the Flask configuration.,,This is all that is necessary to properly integrate Celery with Flask:,,from,,celery,,import,,Celery,,def,,make_celery,(,app,):,,celery,,=,,Celery,(,app,.,import_name,,,,backend,=,app,.,config,[,'CELERY_RESULT_BACKEND',],,,broker,=,app,.,config,[,'CELERY_BROKER_URL',]),,celery,.,conf,.,update,(,app,.,config,),,TaskBase,,=,,celery,.,Task,,class,,ContextTask,(,TaskBase,):,,abstract,,=,,True,,def,,__call__,(,self,,,,*,args,,,,**,kwargs,):,,with,,app,.,app_context,():,,return,,TaskBase,.,__call__,(,self,,,,*,args,,,,**,kwargs,),,celery,.,Task,,=,,ContextTask,,return,,celery,,,,The function creates a new Celery object, configures it with the broker\nfrom the application config, updates the rest of the Celery config from\nthe Flask config and then creates a subclass of the task that wraps the\ntask execution in an application context.,,,,Minimal Example,\u00b6,,With what we have above this is the minimal example of using Celery with\nFlask:,,from,,flask,,import,,Flask,,flask_app,,=,,Flask,(,__name__,),,flask_app,.,config,.,update,(,,CELERY_BROKER_URL,=,'redis://localhost:6379',,,,CELERY_RESULT_BACKEND,=,'redis://localhost:6379',,),,celery,,=,,make_celery,(,flask_app,),,@celery,.,task,(),,def,,add_together,(,a,,,,b,):,,return,,a,,+,,b,,,,This task can now be called in the background:,,>>>,result,,=,,add_together,.,delay,(,23,,,,42,),,>>>,result,.,wait,(),,65,,,,,,Running the Celery Worker,\u00b6,,Now if you jumped in and already executed the above code you will be\ndisappointed to learn that your,.wait(),will never actually return.\nThat\u2019s because you also need to run celery.  You can do that by running\ncelery as a worker:,,$ celery -A your_application.celery worker,,,The,your_application,string has to point to your application\u2019s package\nor module that creates the,celery,object.,,,,,,,,,,,,,Contents,,,Celery Based Background Tasks,,Installing Celery,,Configuring Celery,,Minimal Example,,Running the Celery Worker,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,Request Content Checksums,,Next:,Subclassing Flask,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Request Content Checksums", "url": "http://flask.pocoo.org/docs/0.12/patterns/requestchecksum/", "content": ",,,,,Request Content Checksums \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,Request Content Checksums,\u00b6,,Various pieces of code can consume the request data and preprocess it.\nFor instance JSON data ends up on the request object already read and\nprocessed, form data ends up there as well but goes through a different\ncode path.  This seems inconvenient when you want to calculate the\nchecksum of the incoming request data.  This is necessary sometimes for\nsome APIs.,,Fortunately this is however very simple to change by wrapping the input\nstream.,,The following example calculates the SHA1 checksum of the incoming data as\nit gets read and stores it in the WSGI environment:,,import,,hashlib,,class,,ChecksumCalcStream,(,object,):,,def,,__init__,(,self,,,,stream,):,,self,.,_stream,,=,,stream,,self,.,_hash,,=,,hashlib,.,sha1,(),,def,,read,(,self,,,,bytes,):,,rv,,=,,self,.,_stream,.,read,(,bytes,),,self,.,_hash,.,update,(,rv,),,return,,rv,,def,,readline,(,self,,,,size_hint,):,,rv,,=,,self,.,_stream,.,readline,(,size_hint,),,self,.,_hash,.,update,(,rv,),,return,,rv,,def,,generate_checksum,(,request,):,,env,,=,,request,.,environ,,stream,,=,,ChecksumCalcStream,(,env,[,'wsgi.input',]),,env,[,'wsgi.input',],,=,,stream,,return,,stream,.,_hash,,,,To use this, all you need to do is to hook the calculating stream in\nbefore the request starts consuming data.  (Eg: be careful accessing,request.form,or anything of that nature.,before_request_handlers,for instance should be careful not to access it).,,Example usage:,,@app,.,route,(,'/special-api',,,,methods,=,[,'POST',]),,def,,special_api,():,,hash,,=,,generate_checksum,(,request,),,# Accessing this parses the input stream,,files,,=,,request,.,files,,# At this point the hash is fully constructed.,,checksum,,=,,hash,.,hexdigest,(),,return,,'Hash was:,%s,',,%,,checksum,,,,,,,,,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,Adding HTTP Method Overrides,,Next:,Celery Based Background Tasks,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Bonus: Testing the Application", "url": "http://flask.pocoo.org/docs/dev/tutorial/testing/", "content": ",,,Bonus: Testing the Application \u2014 Flask Documentation (0.13-dev),,,,var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../../',\n        VERSION:     '0.13.dev',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };,,,,,,,,,,,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask Documentation (0.13-dev),\u00bb,,Tutorial,\u00bb,,,,,Warning:,This is the documentation for the development version of Flask,,,,,,Bonus: Testing the Application,\u00b6,,Now that you have finished the application and everything works as\nexpected, it\u2019s probably not a bad idea to add automated tests to simplify\nmodifications in the future.  The application above is used as a basic\nexample of how to perform unit testing in the,Testing Flask Applications,section of the\ndocumentation.  Go there to see how easy it is to test Flask applications.,,,Adding tests to flaskr,\u00b6,,Assuming you have seen the,Testing Flask Applications,section and have either written\nyour own tests for,flaskr,or have followed along with the examples\nprovided, you might be wondering about ways to organize the project.,,One possible and recommended project structure is:,,flaskr,/,,flaskr,/,,__init__,.,py,,static,/,,templates,/,,tests,/,,test_flaskr,.,py,,setup,.,py,,MANIFEST,.,in,,,,For now go ahead a create the,tests/,directory as well as the,test_flaskr.py,file.,,,,Running the tests,\u00b6,,At this point you can run the tests. Here,pytest,will be used.,,,Note,,Make sure that,pytest,is installed in the same virtualenv\nas flaskr. Otherwise,pytest,test will not be able to import the\nrequired components to test the application:,,pip,,install,,-,e,,.,,pip,,install,,pytest,,,,,Run and watch the tests pass, within the top-level,flaskr/,directory as:,,pytest,,,,,,Testing + setuptools,\u00b6,,One way to handle testing is to integrate it with,setuptools,. Here\nthat requires adding a couple of lines to the,setup.py,file and\ncreating a new file,setup.cfg,. One benefit of running the tests\nthis way is that you do not have to install,pytest,. Go ahead and\nupdate the,setup.py,file to contain:,,from,,setuptools,,import,,setup,,setup,(,,name,=,'flaskr',,,,packages,=,[,'flaskr',],,,include_package_data,=,True,,,,install_requires,=,[,,'flask',,,,],,,setup_requires,=,[,,'pytest-runner',,,,],,,tests_require,=,[,,'pytest',,,,],,,),,,,Now create,setup.cfg,in the project root (alongside,setup.py,):,,[,aliases,],,test,=,pytest,,,,Now you can run:,,python,,setup,.,py,,test,,,,This calls on the alias created in,setup.cfg,which in turn runs,pytest,via,pytest-runner,, as the,setup.py,script has\nbeen called. (Recall the,setup_requires,argument in,setup.py,)\nFollowing the standard rules of test-discovery your tests will be\nfound, run, and hopefully pass.,,This is one possible way to run and manage testing.  Here,pytest,is\nused, but there are other options such as,nose,.  Integrating testing\nwith,setuptools,is convenient because it is not necessary to actually\ndownload,pytest,or any other testing framework one might use.,,,,,,,,,,,Table Of Contents,,,Bonus: Testing the Application,,Adding tests to flaskr,,Running the tests,,Testing + setuptools,,,,,Versions,,,Development,,(unstable),,Flask 0.12.x,,(stable),,Flask 0.11.x,,Flask 0.10.x,,,,,Related Topics,,,Documentation overview,,Tutorial,,Previous:,Step 8: Adding Style,,Next:,Templates,,,,,,Quick search,,,,,,,,,,,\u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using,Sphinx,.,,"},
{"name": "Templates", "url": "http://flask.pocoo.org/docs/1.0/tutorial/templates/", "content": ",,,,,Templates \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,Tutorial,\u00bb,,,,,,,,,Templates,\u00b6,,You\u2019ve written the authentication views for your application, but if\nyou\u2019re running the server and try to go to any of the URLs, you\u2019ll see a,TemplateNotFound,error. That\u2019s because the views are calling,render_template(),, but you haven\u2019t written the templates yet.\nThe template files will be stored in the,templates,directory inside\nthe,flaskr,package.,,Templates are files that contain static data as well as placeholders\nfor dynamic data. A template is rendered with specific data to produce a\nfinal document. Flask uses the,Jinja,template library to render\ntemplates.,,In your application, you will use templates to render,HTML,which\nwill display in the user\u2019s browser. In Flask, Jinja is configured to,autoescape,any data that is rendered in HTML templates. This means\nthat it\u2019s safe to render user input; any characters they\u2019ve entered that\ncould mess with the HTML, such as,<,and,>,will be,escaped,with,safe,values that look the same in the browser but don\u2019t cause unwanted\neffects.,,Jinja looks and behaves mostly like Python. Special delimiters are used\nto distinguish Jinja syntax from the static data in the template.\nAnything between,{{,and,}},is an expression that will be output\nto the final document.,{%,and,%},denotes a control flow\nstatement like,if,and,for,. Unlike Python, blocks are denoted\nby start and end tags rather than indentation since static text within\na block could change indentation.,,,The Base Layout,\u00b6,,Each page in the application will have the same basic layout around a\ndifferent body. Instead of writing the entire HTML structure in each\ntemplate, each template will,extend,a base template and override\nspecific sections.,,,flaskr/templates/base.html,\u00b6,,<!doctype html>,,<,title,>,{%,,block,,title,,%}{%,,endblock,,%},- Flaskr,</,title,>,,<,link,,rel,=,\"stylesheet\",,href,=,\",{{,,url_for,(,'static',,,,filename,=,'style.css',),,}},\",>,,<,nav,>,,<,h1,>,Flaskr,</,h1,>,,<,ul,>,,{%,,if,,g.user,,%},,<,li,><,span,>,{{,,g.user,[,'username',],,}},</,span,>,,<,li,><,a,,href,=,\",{{,,url_for,(,'auth.logout',),,}},\",>,Log Out,</,a,>,,{%,,else,,%},,<,li,><,a,,href,=,\",{{,,url_for,(,'auth.register',),,}},\",>,Register,</,a,>,,<,li,><,a,,href,=,\",{{,,url_for,(,'auth.login',),,}},\",>,Log In,</,a,>,,{%,,endif,,%},,</,ul,>,,</,nav,>,,<,section,,class,=,\"content\",>,,<,header,>,,{%,,block,,header,,%}{%,,endblock,,%},,</,header,>,,{%,,for,,message,,in,,get_flashed_messages,(),,%},,<,div,,class,=,\"flash\",>,{{,,message,,}},</,div,>,,{%,,endfor,,%},,{%,,block,,content,,%}{%,,endblock,,%},,</,section,>,,,,,g,is automatically available in templates. Based on if,g.user,is set (from,load_logged_in_user,), either the username\nand a log out link are displayed, otherwise links to register and log in\nare displayed.,url_for(),is also automatically available, and is\nused to generate URLs to views instead of writing them out manually.,,After the page title, and before the content, the template loops over\neach message returned by,get_flashed_messages(),. You used,flash(),in the views to show error messages, and this is the code\nthat will display them.,,There are three blocks defined here that will be overridden in the other\ntemplates:,,,{%,,block,,title,,%},will change the title displayed in the\nbrowser\u2019s tab and window title.,,{%,,block,,header,,%},is similar to,title,but will change the\ntitle displayed on the page.,,{%,,block,,content,,%},is where the content of each page goes, such\nas the login form or a blog post.,,,The base template is directly in the,templates,directory. To keep\nthe others organized, the templates for a blueprint will be placed in a\ndirectory with the same name as the blueprint.,,,,Register,\u00b6,,,flaskr/templates/auth/register.html,\u00b6,,{%,,extends,,'base.html',,%},,{%,,block,,header,,%},,<,h1,>,{%,,block,,title,,%},Register,{%,,endblock,,%},</,h1,>,,{%,,endblock,,%},,{%,,block,,content,,%},,<,form,,method,=,\"post\",>,,<,label,,for,=,\"username\",>,Username,</,label,>,,<,input,,name,=,\"username\",,id,=,\"username\",,required,>,,<,label,,for,=,\"password\",>,Password,</,label,>,,<,input,,type,=,\"password\",,name,=,\"password\",,id,=,\"password\",,required,>,,<,input,,type,=,\"submit\",,value,=,\"Register\",>,,</,form,>,,{%,,endblock,,%},,,,,{%,,extends,,'base.html',,%},tells Jinja that this template should\nreplace the blocks from the base template. All the rendered content must\nappear inside,{%,,block,,%},tags that override blocks from the base\ntemplate.,,A useful pattern used here is to place,{%,,block,,title,,%},inside,{%,,block,,header,,%},. This will set the title block and then output\nthe value of it into the header block, so that both the window and page\nshare the same title without writing it twice.,,The,input,tags are using the,required,attribute here. This tells\nthe browser not to submit the form until those fields are filled in. If\nthe user is using an older browser that doesn\u2019t support that attribute,\nor if they are using something besides a browser to make requests, you\nstill want to validate the data in the Flask view. It\u2019s important to\nalways fully validate the data on the server, even if the client does\nsome validation as well.,,,,Log In,\u00b6,,This is identical to the register template except for the title and\nsubmit button.,,,flaskr/templates/auth/login.html,\u00b6,,{%,,extends,,'base.html',,%},,{%,,block,,header,,%},,<,h1,>,{%,,block,,title,,%},Log In,{%,,endblock,,%},</,h1,>,,{%,,endblock,,%},,{%,,block,,content,,%},,<,form,,method,=,\"post\",>,,<,label,,for,=,\"username\",>,Username,</,label,>,,<,input,,name,=,\"username\",,id,=,\"username\",,required,>,,<,label,,for,=,\"password\",>,Password,</,label,>,,<,input,,type,=,\"password\",,name,=,\"password\",,id,=,\"password\",,required,>,,<,input,,type,=,\"submit\",,value,=,\"Log In\",>,,</,form,>,,{%,,endblock,,%},,,,,,,Register A User,\u00b6,,Now that the authentication templates are written, you can register a\nuser. Make sure the server is still running (,flask,,run,if it\u2019s not),\nthen go to,http://127.0.0.1:5000/auth/register,.,,Try clicking the \u201cRegister\u201d button without filling out the form and see\nthat the browser shows an error message. Try removing the,required,attributes from the,register.html,template and click \u201cRegister\u201d\nagain. Instead of the browser showing an error, the page will reload and\nthe error from,flash(),in the view will be shown.,,Fill out a username and password and you\u2019ll be redirected to the login\npage. Try entering an incorrect username, or the correct username and\nincorrect password. If you log in you\u2019ll get an error because there\u2019s\nno,index,view to redirect to yet.,,Continue to,Static Files,.,,,,,,,,,,,,,Contents,,,Templates,,The Base Layout,,Register,,Log In,,Register A User,,,,,Navigation,,,Overview,,,Tutorial,,,Previous:,Blueprints and Views,,Next:,Static Files,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Step 8: Adding Style", "url": "http://flask.pocoo.org/docs/dev/tutorial/css/", "content": ",,,Step 8: Adding Style \u2014 Flask Documentation (0.13-dev),,,,var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../../',\n        VERSION:     '0.13.dev',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };,,,,,,,,,,,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask Documentation (0.13-dev),\u00bb,,Tutorial,\u00bb,,,,,Warning:,This is the documentation for the development version of Flask,,,,,,Step 8: Adding Style,\u00b6,,Now that everything else works, it\u2019s time to add some style to the\napplication.  Just create a stylesheet called,style.css,in the,static,folder:,,body,,{,,font-family,:,,sans-serif,;,,background,:,,#eee,;,,},,a,,,,h1,,,,h2,,{,,color,:,,#377ba8,;,,},,h1,,,,h2,,{,,font-family,:,,'Georgia',,,,serif,;,,margin,:,,0,;,,},,h1,,{,,border-bottom,:,,2,px,,solid,,#eee,;,,},,h2,,{,,font-size,:,,1.2,em,;,,},,.,page,,{,,margin,:,,2,em,,auto,;,,width,:,,35,em,;,,border,:,,5,px,,solid,,#ccc,;,,padding,:,,0.8,em,;,,background,:,,white,;,,},,.,entries,,{,,list-style,:,,none,;,,margin,:,,0,;,,padding,:,,0,;,,},,.,entries,,li,,{,,margin,:,,0.8,em,,1.2,em,;,,},,.,entries,,li,,h2,,{,,margin-left,:,,-1,em,;,,},,.,add-entry,,{,,font-size,:,,0.9,em,;,,border-bottom,:,,1,px,,solid,,#ccc,;,,},,.,add-entry,,dl,,{,,font-weight,:,,bold,;,,},,.,metanav,,{,,text-align,:,,right,;,,font-size,:,,0.8,em,;,,padding,:,,0.3,em,;,,margin-bottom,:,,1,em,;,,background,:,,#fafafa,;,,},,.,flash,,{,,background,:,,#cee5F5,;,,padding,:,,0.5,em,;,,border,:,,1,px,,solid,,#aacbe2,;,,},,.,error,,{,,background,:,,#f0d6d6,;,,padding,:,,0.5,em,;,,},,,,Continue with,Bonus: Testing the Application,.,,,,,,,,,Versions,,,Development,,(unstable),,Flask 0.12.x,,(stable),,Flask 0.11.x,,Flask 0.10.x,,,,,Related Topics,,,Documentation overview,,Tutorial,,Previous:,Step 7: The Templates,,Next:,Bonus: Testing the Application,,,,,,Quick search,,,,,,,,,,,\u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using,Sphinx,.,,"},
{"name": "Step 4: Database Connections", "url": "http://flask.pocoo.org/docs/dev/tutorial/dbcon/", "content": ",,,Step 4: Database Connections \u2014 Flask Documentation (0.13-dev),,,,var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../../',\n        VERSION:     '0.13.dev',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };,,,,,,,,,,,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask Documentation (0.13-dev),\u00bb,,Tutorial,\u00bb,,,,,Warning:,This is the documentation for the development version of Flask,,,,,,Step 4: Database Connections,\u00b6,,Let\u2019s continue building our code in the,flaskr.py,file.\n(Scroll to the end of the page for more about project layout.),,You currently have a function for establishing a database connection with,connect_db,, but by itself, it is not particularly useful.  Creating and\nclosing database connections all the time is very inefficient, so you will\nneed to keep it around for longer.  Because database connections\nencapsulate a transaction, you will need to make sure that only one\nrequest at a time uses the connection. An elegant way to do this is by\nutilizing the,application context,.,,Flask provides two contexts: the,application context,and the,request context,.  For the time being, all you have to know is that there\nare special variables that use these.  For instance, the,request,variable is the request object associated with\nthe current request, whereas,g,is a general purpose\nvariable associated with the current application context.  The tutorial\nwill cover some more details of this later on.,,For the time being, all you have to know is that you can store information\nsafely on the,g,object.,,So when do you put it on there?  To do that you can make a helper\nfunction.  The first time the function is called, it will create a database\nconnection for the current context, and successive calls will return the\nalready established connection:,,def,,get_db,():,,\"\"\"Opens a new database connection if there is none yet for the,,current application context.,,\"\"\",,if,,not,,hasattr,(,g,,,,'sqlite_db',):,,g,.,sqlite_db,,=,,connect_db,(),,return,,g,.,sqlite_db,,,,Now you know how to connect, but how can you properly disconnect?  For\nthat, Flask provides us with the,teardown_appcontext(),decorator.  It\u2019s executed every time the application context tears down:,,@app,.,teardown_appcontext,,def,,close_db,(,error,):,,\"\"\"Closes the database again at the end of the request.\"\"\",,if,,hasattr,(,g,,,,'sqlite_db',):,,g,.,sqlite_db,.,close,(),,,,Functions marked with,teardown_appcontext(),are called\nevery time the app context tears down.  What does this mean?\nEssentially, the app context is created before the request comes in and is\ndestroyed (torn down) whenever the request finishes.  A teardown can\nhappen because of two reasons: either everything went well (the error\nparameter will be,None,) or an exception happened, in which case the error\nis passed to the teardown function.,,Curious about what these contexts mean?  Have a look at the,The Application Context,documentation to learn more.,,Continue to,Step 5: Creating The Database,.,,,Hint,,Where do I put this code?,,If you\u2019ve been following along in this tutorial, you might be wondering\nwhere to put the code from this step and the next.  A logical place is to\ngroup these module-level functions together, and put your new,get_db,and,close_db,functions below your existing,connect_db,function (following the tutorial line-by-line).,,If you need a moment to find your bearings, take a look at how the,example\nsource,is organized.  In Flask, you can put all of your application code\ninto a single Python module.  You don\u2019t have to, and if your app,grows\nlarger,, it\u2019s a good idea not to.,,,,,,,,,,Versions,,,Development,,(unstable),,Flask 0.12.x,,(stable),,Flask 0.11.x,,Flask 0.10.x,,,,,Related Topics,,,Documentation overview,,Tutorial,,Previous:,Step 3: Installing flaskr as a Package,,Next:,Step 5: Creating The Database,,,,,,Quick search,,,,,,,,,,,\u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using,Sphinx,.,,"},
{"name": "Templates", "url": "http://flask.pocoo.org/docs/dev/tutorial/templates/", "content": ",,,,,Templates \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,Tutorial,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,Templates,\u00b6,,You\u2019ve written the authentication views for your application, but if\nyou\u2019re running the server and try to go to any of the URLs, you\u2019ll see a,TemplateNotFound,error. That\u2019s because the views are calling,render_template(),, but you haven\u2019t written the templates yet.\nThe template files will be stored in the,templates,directory inside\nthe,flaskr,package.,,Templates are files that contain static data as well as placeholders\nfor dynamic data. A template is rendered with specific data to produce a\nfinal document. Flask uses the,Jinja,template library to render\ntemplates.,,In your application, you will use templates to render,HTML,which\nwill display in the user\u2019s browser. In Flask, Jinja is configured to,autoescape,any data that is rendered in HTML templates. This means\nthat it\u2019s safe to render user input; any characters they\u2019ve entered that\ncould mess with the HTML, such as,<,and,>,will be,escaped,with,safe,values that look the same in the browser but don\u2019t cause unwanted\neffects.,,Jinja looks and behaves mostly like Python. Special delimiters are used\nto distinguish Jinja syntax from the static data in the template.\nAnything between,{{,and,}},is an expression that will be output\nto the final document.,{%,and,%},denotes a control flow\nstatement like,if,and,for,. Unlike Python, blocks are denoted\nby start and end tags rather than indentation since static text within\na block could change indentation.,,,The Base Layout,\u00b6,,Each page in the application will have the same basic layout around a\ndifferent body. Instead of writing the entire HTML structure in each\ntemplate, each template will,extend,a base template and override\nspecific sections.,,,flaskr/templates/base.html,\u00b6,,<!doctype html>,,<,title,>,{%,,block,,title,,%}{%,,endblock,,%},- Flaskr,</,title,>,,<,link,,rel,=,\"stylesheet\",,href,=,\",{{,,url_for,(,'static',,,,filename,=,'style.css',),,}},\",>,,<,nav,>,,<,h1,>,Flaskr,</,h1,>,,<,ul,>,,{%,,if,,g.user,,%},,<,li,><,span,>,{{,,g.user,[,'username',],,}},</,span,>,,<,li,><,a,,href,=,\",{{,,url_for,(,'auth.logout',),,}},\",>,Log Out,</,a,>,,{%,,else,,%},,<,li,><,a,,href,=,\",{{,,url_for,(,'auth.register',),,}},\",>,Register,</,a,>,,<,li,><,a,,href,=,\",{{,,url_for,(,'auth.login',),,}},\",>,Log In,</,a,>,,{%,,endif,,%},,</,ul,>,,</,nav,>,,<,section,,class,=,\"content\",>,,<,header,>,,{%,,block,,header,,%}{%,,endblock,,%},,</,header,>,,{%,,for,,message,,in,,get_flashed_messages,(),,%},,<,div,,class,=,\"flash\",>,{{,,message,,}},</,div,>,,{%,,endfor,,%},,{%,,block,,content,,%}{%,,endblock,,%},,</,section,>,,,,,g,is automatically available in templates. Based on if,g.user,is set (from,load_logged_in_user,), either the username\nand a log out link are displayed, otherwise links to register and log in\nare displayed.,url_for(),is also automatically available, and is\nused to generate URLs to views instead of writing them out manually.,,After the page title, and before the content, the template loops over\neach message returned by,get_flashed_messages(),. You used,flash(),in the views to show error messages, and this is the code\nthat will display them.,,There are three blocks defined here that will be overridden in the other\ntemplates:,,,{%,,block,,title,,%},will change the title displayed in the\nbrowser\u2019s tab and window title.,,{%,,block,,header,,%},is similar to,title,but will change the\ntitle displayed on the page.,,{%,,block,,content,,%},is where the content of each page goes, such\nas the login form or a blog post.,,,The base template is directly in the,templates,directory. To keep\nthe others organized, the templates for a blueprint will be placed in a\ndirectory with the same name as the blueprint.,,,,Register,\u00b6,,,flaskr/templates/auth/register.html,\u00b6,,{%,,extends,,'base.html',,%},,{%,,block,,header,,%},,<,h1,>,{%,,block,,title,,%},Register,{%,,endblock,,%},</,h1,>,,{%,,endblock,,%},,{%,,block,,content,,%},,<,form,,method,=,\"post\",>,,<,label,,for,=,\"username\",>,Username,</,label,>,,<,input,,name,=,\"username\",,id,=,\"username\",,required,>,,<,label,,for,=,\"password\",>,Password,</,label,>,,<,input,,type,=,\"password\",,name,=,\"password\",,id,=,\"password\",,required,>,,<,input,,type,=,\"submit\",,value,=,\"Register\",>,,</,form,>,,{%,,endblock,,%},,,,,{%,,extends,,'base.html',,%},tells Jinja that this template should\nreplace the blocks from the base template. All the rendered content must\nappear inside,{%,,block,,%},tags that override blocks from the base\ntemplate.,,A useful pattern used here is to place,{%,,block,,title,,%},inside,{%,,block,,header,,%},. This will set the title block and then output\nthe value of it into the header block, so that both the window and page\nshare the same title without writing it twice.,,The,input,tags are using the,required,attribute here. This tells\nthe browser not to submit the form until those fields are filled in. If\nthe user is using an older browser that doesn\u2019t support that attribute,\nor if they are using something besides a browser to make requests, you\nstill want to validate the data in the Flask view. It\u2019s important to\nalways fully validate the data on the server, even if the client does\nsome validation as well.,,,,Log In,\u00b6,,This is identical to the register template except for the title and\nsubmit button.,,,flaskr/templates/auth/login.html,\u00b6,,{%,,extends,,'base.html',,%},,{%,,block,,header,,%},,<,h1,>,{%,,block,,title,,%},Log In,{%,,endblock,,%},</,h1,>,,{%,,endblock,,%},,{%,,block,,content,,%},,<,form,,method,=,\"post\",>,,<,label,,for,=,\"username\",>,Username,</,label,>,,<,input,,name,=,\"username\",,id,=,\"username\",,required,>,,<,label,,for,=,\"password\",>,Password,</,label,>,,<,input,,type,=,\"password\",,name,=,\"password\",,id,=,\"password\",,required,>,,<,input,,type,=,\"submit\",,value,=,\"Log In\",>,,</,form,>,,{%,,endblock,,%},,,,,,,Register A User,\u00b6,,Now that the authentication templates are written, you can register a\nuser. Make sure the server is still running (,flask,,run,if it\u2019s not),\nthen go to,http://127.0.0.1:5000/auth/register,.,,Try clicking the \u201cRegister\u201d button without filling out the form and see\nthat the browser shows an error message. Try removing the,required,attributes from the,register.html,template and click \u201cRegister\u201d\nagain. Instead of the browser showing an error, the page will reload and\nthe error from,flash(),in the view will be shown.,,Fill out a username and password and you\u2019ll be redirected to the login\npage. Try entering an incorrect username, or the correct username and\nincorrect password. If you log in you\u2019ll get an error because there\u2019s\nno,index,view to redirect to yet.,,Continue to,Static Files,.,,,,,,,,,,,,,Contents,,,Templates,,The Base Layout,,Register,,Log In,,Register A User,,,,,Navigation,,,Overview,,,Tutorial,,,Previous:,Blueprints and Views,,Next:,Static Files,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Index", "url": "http://flask.pocoo.org/docs/dev/genindex/", "content": ",,,,,Index \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,Flask 1.1.dev documentation,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,Index,,,_,|,A,|,B,|,C,|,D,|,E,|,F,|,G,|,H,|,I,|,J,|,K,|,L,|,M,|,N,|,O,|,P,|,Q,|,R,|,S,|,T,|,U,|,V,|,W,|,Y,,,_,,,,_app_ctx_stack (in module flask),,,,,_AppCtxGlobals (class in flask.ctx),,,_request_ctx_stack (in module flask),,,,,A,,,,abort() (in module flask),,,accept_charsets (flask.Request attribute),,,accept_encodings (flask.Request attribute),,,accept_languages (flask.Request attribute),,,accept_mimetypes (flask.Request attribute),,,access_route (flask.Request attribute),,,accessed (flask.sessions.SecureCookieSession attribute),,,(flask.sessions.SessionMixin attribute),,,,add_app_template_filter() (flask.Blueprint method),,,add_app_template_global() (flask.Blueprint method),,,add_app_template_test() (flask.Blueprint method),,,add_template_filter() (flask.Flask method),,,add_template_global() (flask.Flask method),,,add_template_test() (flask.Flask method),,,add_url_rule() (flask.Blueprint method),,,(flask.Flask method),,,(flask.blueprints.BlueprintSetupState method),,,,after_app_request() (flask.Blueprint method),,,after_request() (flask.Blueprint method),,,(flask.Flask method),,,,after_request_funcs (flask.Flask attribute),,,after_this_request() (in module flask),,,,,app (flask.blueprints.BlueprintSetupState attribute),,,app_context() (flask.Flask method),,,app_context_processor() (flask.Blueprint method),,,app_ctx_globals_class (flask.Flask attribute),,,app_errorhandler() (flask.Blueprint method),,,app_import_path (flask.cli.ScriptInfo attribute),,,app_template_filter() (flask.Blueprint method),,,app_template_global() (flask.Blueprint method),,,app_template_test() (flask.Blueprint method),,,app_url_defaults() (flask.Blueprint method),,,app_url_value_preprocessor() (flask.Blueprint method),,,AppContext (class in flask.ctx),,,appcontext_popped (in module flask),,,appcontext_pushed (in module flask),,,appcontext_tearing_down (in module flask),,,AppGroup (class in flask.cli),,,application() (flask.Request class method),,,APPLICATION_ROOT (built-in variable),,,args (flask.Request attribute),,,as_view() (flask.views.View class method),,,authorization (flask.Request attribute),,,auto_find_instance_path() (flask.Flask method),,,,,B,,,,base_url (flask.Request attribute),,,[1],,,before_app_first_request() (flask.Blueprint method),,,before_app_request() (flask.Blueprint method),,,before_first_request() (flask.Flask method),,,before_first_request_funcs (flask.Flask attribute),,,before_request() (flask.Blueprint method),,,(flask.Flask method),,,,,,before_request_funcs (flask.Flask attribute),,,Blueprint (class in flask),,,blueprint (flask.blueprints.BlueprintSetupState attribute),,,(flask.Request attribute),,,,blueprints (flask.Flask attribute),,,BlueprintSetupState (class in flask.blueprints),,,,,C,,,,cache_control (flask.Request attribute),,,check() (flask.json.tag.JSONTag method),,,cli (flask.Flask attribute),,,close() (flask.Request method),,,command() (flask.cli.AppGroup method),,,Config (class in flask),,,config (flask.Flask attribute),,,config_class (flask.Flask attribute),,,content_encoding (flask.Request attribute),,,content_length (flask.Request attribute),,,content_md5 (flask.Request attribute),,,,,content_type (flask.Request attribute),,,context_processor() (flask.Blueprint method),,,(flask.Flask method),,,,cookies (flask.Request attribute),,,copy() (flask.ctx.RequestContext method),,,copy_current_request_context() (in module flask),,,create_app (flask.cli.ScriptInfo attribute),,,create_global_jinja_loader() (flask.Flask method),,,create_jinja_environment() (flask.Flask method),,,create_url_adapter() (flask.Flask method),,,current_app (in module flask),,,,,D,,,,data (flask.cli.ScriptInfo attribute),,,(flask.Request attribute),,,(flask.Response attribute),,,,date (flask.Request attribute),,,DEBUG (built-in variable),,,debug (flask.Flask attribute),,,decorators (flask.views.View attribute),,,default() (flask.json.JSONEncoder method),,,default_config (flask.Flask attribute),,,default_tags (flask.json.tag.TaggedJSONSerializer attribute),,,,,dict_storage_class (flask.Request attribute),,,digest_method() (flask.sessions.SecureCookieSessionInterface static method),,,dispatch_request() (flask.Flask method),,,(flask.views.MethodView method),,,(flask.views.View method),,,,do_teardown_appcontext() (flask.Flask method),,,do_teardown_request() (flask.Flask method),,,dump() (in module flask.json),,,dumps() (flask.json.tag.TaggedJSONSerializer method),,,(in module flask.json),,,,,,E,,,,endpoint (flask.Request attribute),,,endpoint() (flask.Blueprint method),,,(flask.Flask method),,,,ENV (built-in variable),,,env (flask.Flask attribute),,,environ (flask.Request attribute),,,environment variable,,FLASK_DEBUG,,,[1],,,[2],,,FLASK_ENV,,,[1],,,[2],,,[3],,,[4],,,[5],,,[6],,,[7],,,[8],,,[9],,,[10],,,YOURAPPLICATION_SETTINGS,,,,,,error_handler_spec (flask.Flask attribute),,,errorhandler() (flask.Blueprint method),,,(flask.Flask method),,,,escape() (flask.Markup class method),,,(in module flask),,,,EXPLAIN_TEMPLATE_LOADING (built-in variable),,,extensions (flask.Flask attribute),,,,,F,,,,files (flask.Request attribute),,,first_registration (flask.blueprints.BlueprintSetupState attribute),,,flash() (in module flask),,,Flask (class in flask),,,flask (module),,,flask.json (module),,,flask.json.tag (module),,,FLASK_DEBUG,,,[1],,,[2],,,FLASK_ENV,,,[1],,,[2],,,[3],,,[4],,,[5],,,[6],,,[7],,,[8],,,[9],,,[10],,,FlaskClient (class in flask.testing),,,FlaskCliRunner (class in flask.testing),,,,,FlaskGroup (class in flask.cli),,,form (flask.Request attribute),,,form_data_parser_class (flask.Request attribute),,,from_envvar() (flask.Config method),,,from_json() (flask.Config method),,,from_mapping() (flask.Config method),,,from_object() (flask.Config method),,,from_pyfile() (flask.Config method),,,from_values() (flask.Request class method),,,full_dispatch_request() (flask.Flask method),,,full_path (flask.Request attribute),,,[1],,,,,G,,,,g (in module flask),,,get() (flask.ctx._AppCtxGlobals method),,,(flask.sessions.SecureCookieSession method),,,,get_command() (flask.cli.FlaskGroup method),,,get_cookie_domain() (flask.sessions.SessionInterface method),,,get_cookie_httponly() (flask.sessions.SessionInterface method),,,get_cookie_path() (flask.sessions.SessionInterface method),,,get_cookie_samesite() (flask.sessions.SessionInterface method),,,get_cookie_secure() (flask.sessions.SessionInterface method),,,get_data() (flask.Request method),,,,,get_expiration_time() (flask.sessions.SessionInterface method),,,get_flashed_messages() (in module flask),,,get_json() (flask.Request method),,,(flask.Response method),,,,get_namespace() (flask.Config method),,,get_send_file_max_age() (flask.Blueprint method),,,(flask.Flask method),,,,get_template_attribute() (in module flask),,,got_first_request (flask.Flask attribute),,,got_request_exception (in module flask),,,group() (flask.cli.AppGroup method),,,,,H,,,,handle_exception() (flask.Flask method),,,handle_http_exception() (flask.Flask method),,,handle_url_build_error() (flask.Flask method),,,handle_user_exception() (flask.Flask method),,,has_app_context() (in module flask),,,has_request_context() (in module flask),,,,,has_static_folder (flask.Blueprint attribute),,,(flask.Flask attribute),,,,headers (flask.Request attribute),,,(flask.Response attribute),,,,host (flask.Request attribute),,,host_url (flask.Request attribute),,,,,I,,,,if_match (flask.Request attribute),,,if_modified_since (flask.Request attribute),,,if_none_match (flask.Request attribute),,,if_range (flask.Request attribute),,,if_unmodified_since (flask.Request attribute),,,import_name (flask.Blueprint attribute),,,(flask.Flask attribute),,,,inject_url_defaults() (flask.Flask method),,,instance_path (flask.Flask attribute),,,,,invoke() (flask.testing.FlaskCliRunner method),,,is_json (flask.Request attribute),,,(flask.Response attribute),,,,is_multiprocess (flask.Request attribute),,,is_multithread (flask.Request attribute),,,is_null_session() (flask.sessions.SessionInterface method),,,is_run_once (flask.Request attribute),,,is_secure (flask.Request attribute),,,is_xhr (flask.Request attribute),,,iter_blueprints() (flask.Flask method),,,,,J,,,,jinja_env (flask.Flask attribute),,,jinja_environment (flask.Flask attribute),,,jinja_loader (flask.Blueprint attribute),,,(flask.Flask attribute),,,,jinja_options (flask.Flask attribute),,,json (flask.Request attribute),,,JSON_AS_ASCII (built-in variable),,,json_decoder (flask.Blueprint attribute),,,(flask.Flask attribute),,,,,,json_encoder (flask.Blueprint attribute),,,(flask.Flask attribute),,,,JSON_SORT_KEYS (built-in variable),,,JSONDecoder (class in flask.json),,,JSONEncoder (class in flask.json),,,jsonify() (in module flask.json),,,JSONIFY_MIMETYPE (built-in variable),,,JSONIFY_PRETTYPRINT_REGULAR (built-in variable),,,JSONTag (class in flask.json.tag),,,,,K,,,,key (flask.json.tag.JSONTag attribute),,,,,key_derivation (flask.sessions.SecureCookieSessionInterface attribute),,,,,L,,,,list_commands() (flask.cli.FlaskGroup method),,,list_storage_class (flask.Request attribute),,,load() (in module flask.json),,,load_app() (flask.cli.ScriptInfo method),,,,,load_dotenv() (in module flask.cli),,,loads() (flask.json.tag.TaggedJSONSerializer method),,,(in module flask.json),,,,log_exception() (flask.Flask method),,,logger (flask.Flask attribute),,,,,M,,,,main() (flask.cli.FlaskGroup method),,,make_config() (flask.Flask method),,,make_default_options_response() (flask.Flask method),,,make_form_data_parser() (flask.Request method),,,make_null_session() (flask.Flask method),,,(flask.sessions.SessionInterface method),,,,make_response() (flask.Flask method),,,(in module flask),,,,make_setup_state() (flask.Blueprint method),,,make_shell_context() (flask.Flask method),,,Markup (class in flask),,,match_request() (flask.ctx.RequestContext method),,,MAX_CONTENT_LENGTH (built-in variable),,,,,max_content_length (flask.Request attribute),,,MAX_COOKIE_SIZE (built-in variable),,,max_cookie_size (flask.Response attribute),,,max_forwards (flask.Request attribute),,,message_flashed (in module flask),,,method (flask.Request attribute),,,methods (flask.views.View attribute),,,MethodView (class in flask.views),,,mimetype (flask.Request attribute),,,(flask.Response attribute),,,,mimetype_params (flask.Request attribute),,,modified (flask.session attribute),,,(flask.sessions.SecureCookieSession attribute),,,(flask.sessions.SessionMixin attribute),,,,,,N,,,,name (flask.Flask attribute),,,new (flask.session attribute),,,,,null_session_class (flask.sessions.SessionInterface attribute),,,NullSession (class in flask.sessions),,,,,O,,,,on_json_loading_failed() (flask.Request method),,,open() (flask.testing.FlaskClient method),,,open_instance_resource() (flask.Flask method),,,open_resource() (flask.Blueprint method),,,(flask.Flask method),,,,,,open_session() (flask.Flask method),,,(flask.sessions.SecureCookieSessionInterface method),,,(flask.sessions.SessionInterface method),,,,options (flask.blueprints.BlueprintSetupState attribute),,,,,P,,,,parameter_storage_class (flask.Request attribute),,,pass_script_info() (in module flask.cli),,,path (flask.Request attribute),,,[1],,,permanent (flask.session attribute),,,(flask.sessions.SessionMixin attribute),,,,PERMANENT_SESSION_LIFETIME (built-in variable),,,permanent_session_lifetime (flask.Flask attribute),,,pickle_based (flask.sessions.SessionInterface attribute),,,pop() (flask.ctx._AppCtxGlobals method),,,(flask.ctx.AppContext method),,,(flask.ctx.RequestContext method),,,,pragma (flask.Request attribute),,,,,PREFERRED_URL_SCHEME (built-in variable),,,preprocess_request() (flask.Flask method),,,PRESERVE_CONTEXT_ON_EXCEPTION (built-in variable),,,preserve_context_on_exception (flask.Flask attribute),,,process_response() (flask.Flask method),,,PROPAGATE_EXCEPTIONS (built-in variable),,,propagate_exceptions (flask.Flask attribute),,,provide_automatic_options (flask.views.View attribute),,,push() (flask.ctx.AppContext method),,,(flask.ctx.RequestContext method),,,,Python Enhancement Proposals,,PEP 8,,,,,,Q,,,,query_string (flask.Request attribute),,,,,R,,,,range (flask.Request attribute),,,record() (flask.Blueprint method),,,record_once() (flask.Blueprint method),,,redirect() (in module flask),,,referrer (flask.Request attribute),,,register() (flask.Blueprint method),,,(flask.json.tag.TaggedJSONSerializer method),,,,register_blueprint() (flask.Flask method),,,register_error_handler() (flask.Blueprint method),,,(flask.Flask method),,,,remote_addr (flask.Request attribute),,,remote_user (flask.Request attribute),,,render_template() (in module flask),,,render_template_string() (in module flask),,,Request (class in flask),,,request (in module flask),,,request_class (flask.Flask attribute),,,,,request_context() (flask.Flask method),,,request_finished (in module flask),,,request_started (in module flask),,,request_tearing_down (in module flask),,,RequestContext (class in flask.ctx),,,Response (class in flask),,,response_class (flask.Flask attribute),,,RFC,,RFC 822,,,RFC 8259,,,[1],,,,root_path (flask.Blueprint attribute),,,(flask.Flask attribute),,,,route() (flask.Blueprint method),,,(flask.Flask method),,,,routing_exception (flask.Request attribute),,,run() (flask.Flask method),,,run_command (in module flask.cli),,,,,S,,,,safe_join() (in module flask),,,salt (flask.sessions.SecureCookieSessionInterface attribute),,,save_session() (flask.Flask method),,,(flask.sessions.SecureCookieSessionInterface method),,,(flask.sessions.SessionInterface method),,,,scheme (flask.Request attribute),,,script_root (flask.Request attribute),,,[1],,,ScriptInfo (class in flask.cli),,,SECRET_KEY (built-in variable),,,secret_key (flask.Flask attribute),,,SecureCookieSession (class in flask.sessions),,,SecureCookieSessionInterface (class in flask.sessions),,,select_jinja_autoescape() (flask.Flask method),,,send_file() (in module flask),,,SEND_FILE_MAX_AGE_DEFAULT (built-in variable),,,send_file_max_age_default (flask.Flask attribute),,,send_from_directory() (in module flask),,,send_static_file() (flask.Blueprint method),,,(flask.Flask method),,,,serializer (flask.sessions.SecureCookieSessionInterface attribute),,,SERVER_NAME (built-in variable),,,session (class in flask),,,session_class (flask.sessions.SecureCookieSessionInterface attribute),,,SESSION_COOKIE_DOMAIN (built-in variable),,,SESSION_COOKIE_HTTPONLY (built-in variable),,,SESSION_COOKIE_NAME (built-in variable),,,session_cookie_name (flask.Flask attribute),,,SESSION_COOKIE_PATH (built-in variable),,,,,SESSION_COOKIE_SAMESITE (built-in variable),,,SESSION_COOKIE_SECURE (built-in variable),,,session_interface (flask.Flask attribute),,,SESSION_REFRESH_EACH_REQUEST (built-in variable),,,session_transaction() (flask.testing.FlaskClient method),,,SessionInterface (class in flask.sessions),,,SessionMixin (class in flask.sessions),,,set_cookie() (flask.Response method),,,setdefault() (flask.ctx._AppCtxGlobals method),,,(flask.sessions.SecureCookieSession method),,,,shell_command (in module flask.cli),,,shell_context_processor() (flask.Flask method),,,shell_context_processors (flask.Flask attribute),,,should_ignore_error() (flask.Flask method),,,should_set_cookie() (flask.sessions.SessionInterface method),,,signal() (flask.signals.Namespace method),,,signals.Namespace (class in flask),,,signals.signals_available (in module flask),,,static_folder (flask.Blueprint attribute),,,(flask.Flask attribute),,,,static_url_path (flask.Blueprint attribute),,,(flask.Flask attribute),,,,status (flask.Response attribute),,,status_code (flask.Response attribute),,,stream (flask.Request attribute),,,stream_with_context() (in module flask),,,striptags() (flask.Markup method),,,subdomain (flask.blueprints.BlueprintSetupState attribute),,,,,T,,,,tag() (flask.json.tag.JSONTag method),,,(flask.json.tag.TaggedJSONSerializer method),,,,TaggedJSONSerializer (class in flask.json.tag),,,teardown_app_request() (flask.Blueprint method),,,teardown_appcontext() (flask.Flask method),,,teardown_appcontext_funcs (flask.Flask attribute),,,teardown_request() (flask.Blueprint method),,,(flask.Flask method),,,,teardown_request_funcs (flask.Flask attribute),,,template_context_processors (flask.Flask attribute),,,template_filter() (flask.Flask method),,,template_folder (flask.Blueprint attribute),,,(flask.Flask attribute),,,,template_global() (flask.Flask method),,,template_rendered (in module flask),,,,,template_test() (flask.Flask method),,,TEMPLATES_AUTO_RELOAD (built-in variable),,,templates_auto_reload (flask.Flask attribute),,,test_cli_runner() (flask.Flask method),,,test_cli_runner_class (flask.Flask attribute),,,test_client() (flask.Flask method),,,test_client_class (flask.Flask attribute),,,test_request_context() (flask.Flask method),,,TESTING (built-in variable),,,testing (flask.Flask attribute),,,to_json() (flask.json.tag.JSONTag method),,,to_python() (flask.json.tag.JSONTag method),,,TRAP_BAD_REQUEST_ERRORS (built-in variable),,,trap_http_exception() (flask.Flask method),,,TRAP_HTTP_EXCEPTIONS (built-in variable),,,,,U,,,,unescape() (flask.Markup method),,,untag() (flask.json.tag.TaggedJSONSerializer method),,,update_template_context() (flask.Flask method),,,url (flask.Request attribute),,,[1],,,url_build_error_handlers (flask.Flask attribute),,,url_charset (flask.Request attribute),,,url_default_functions (flask.Flask attribute),,,url_defaults (flask.blueprints.BlueprintSetupState attribute),,,url_defaults() (flask.Blueprint method),,,(flask.Flask method),,,,url_for() (in module flask),,,,,url_map (flask.Flask attribute),,,url_prefix (flask.blueprints.BlueprintSetupState attribute),,,url_root (flask.Request attribute),,,[1],,,url_rule (flask.Request attribute),,,url_rule_class (flask.Flask attribute),,,url_value_preprocessor() (flask.Blueprint method),,,(flask.Flask method),,,,url_value_preprocessors (flask.Flask attribute),,,USE_X_SENDFILE (built-in variable),,,use_x_sendfile (flask.Flask attribute),,,user_agent (flask.Request attribute),,,,,V,,,,values (flask.Request attribute),,,View (class in flask.views),,,,,view_args (flask.Request attribute),,,view_functions (flask.Flask attribute),,,,,W,,,,want_form_data_parsed (flask.Request attribute),,,,,with_appcontext() (in module flask.cli),,,wsgi_app() (flask.Flask method),,,,,Y,,,,YOURAPPLICATION_SETTINGS,,,,,,,,,,,,,Navigation,,,Overview,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Foreword for Experienced Programmers", "url": "http://flask.pocoo.org/docs/dev/advanced_foreword/", "content": ",,,,,Foreword for Experienced Programmers \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,Foreword for Experienced Programmers,\u00b6,,,Thread-Locals in Flask,\u00b6,,One of the design decisions in Flask was that simple tasks should be simple;\nthey should not take a lot of code and yet they should not limit you. Because\nof that, Flask has a few design choices that some people might find surprising or\nunorthodox. For example, Flask uses thread-local objects internally so that you\ndon\u2019t have to pass objects around from function to function within a request in\norder to stay threadsafe. This approach is convenient, but requires a valid\nrequest context for dependency injection or when attempting to reuse code which\nuses a value pegged to the request.  The Flask project is honest about\nthread-locals, does not hide them, and calls out in the code and documentation\nwhere they are used.,,,,Develop for the Web with Caution,\u00b6,,Always keep security in mind when building web applications.,,If you write a web application, you are probably allowing users to register\nand leave their data on your server.  The users are entrusting you with data.\nAnd even if you are the only user that might leave data in your application,\nyou still want that data to be stored securely.,,Unfortunately, there are many ways the security of a web application can be\ncompromised.  Flask protects you against one of the most common security\nproblems of modern web applications: cross-site scripting (XSS).  Unless you\ndeliberately mark insecure HTML as secure, Flask and the underlying Jinja2\ntemplate engine have you covered.  But there are many more ways to cause\nsecurity problems.,,The documentation will warn you about aspects of web development that require\nattention to security.  Some of these security concerns are far more complex\nthan one might think, and we all sometimes underestimate the likelihood that a\nvulnerability will be exploited - until a clever attacker figures out a way to\nexploit our applications.  And don\u2019t think that your application is not\nimportant enough to attract an attacker.  Depending on the kind of attack,\nchances are that automated bots are probing for ways to fill your database with\nspam, links to malicious software, and the like.,,Flask is no different from any other framework in that you the developer must\nbuild with caution, watching for exploits when building to your requirements.,,,,,,,,,,,,,Contents,,,Foreword for Experienced Programmers,,Thread-Locals in Flask,,Develop for the Web with Caution,,,,,Navigation,,,Overview,,,Previous:,Foreword,,Next:,Installation,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Foreword for Experienced Programmers", "url": "http://flask.pocoo.org/docs/1.0/advanced_foreword/", "content": ",,,,,Foreword for Experienced Programmers \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,,,,,,,,Foreword for Experienced Programmers,\u00b6,,,Thread-Locals in Flask,\u00b6,,One of the design decisions in Flask was that simple tasks should be simple;\nthey should not take a lot of code and yet they should not limit you. Because\nof that, Flask has a few design choices that some people might find surprising or\nunorthodox. For example, Flask uses thread-local objects internally so that you\ndon\u2019t have to pass objects around from function to function within a request in\norder to stay threadsafe. This approach is convenient, but requires a valid\nrequest context for dependency injection or when attempting to reuse code which\nuses a value pegged to the request.  The Flask project is honest about\nthread-locals, does not hide them, and calls out in the code and documentation\nwhere they are used.,,,,Develop for the Web with Caution,\u00b6,,Always keep security in mind when building web applications.,,If you write a web application, you are probably allowing users to register\nand leave their data on your server.  The users are entrusting you with data.\nAnd even if you are the only user that might leave data in your application,\nyou still want that data to be stored securely.,,Unfortunately, there are many ways the security of a web application can be\ncompromised.  Flask protects you against one of the most common security\nproblems of modern web applications: cross-site scripting (XSS).  Unless you\ndeliberately mark insecure HTML as secure, Flask and the underlying Jinja2\ntemplate engine have you covered.  But there are many more ways to cause\nsecurity problems.,,The documentation will warn you about aspects of web development that require\nattention to security.  Some of these security concerns are far more complex\nthan one might think, and we all sometimes underestimate the likelihood that a\nvulnerability will be exploited - until a clever attacker figures out a way to\nexploit our applications.  And don\u2019t think that your application is not\nimportant enough to attract an attacker.  Depending on the kind of attack,\nchances are that automated bots are probing for ways to fill your database with\nspam, links to malicious software, and the like.,,Flask is no different from any other framework in that you the developer must\nbuild with caution, watching for exploits when building to your requirements.,,,,,,,,,,,,,Contents,,,Foreword for Experienced Programmers,,Thread-Locals in Flask,,Develop for the Web with Caution,,,,,Navigation,,,Overview,,,Previous:,Foreword,,Next:,Installation,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Introducing Flaskr", "url": "http://flask.pocoo.org/docs/dev/tutorial/introduction/", "content": ",,,Introducing Flaskr \u2014 Flask Documentation (0.13-dev),,,,var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../../',\n        VERSION:     '0.13.dev',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };,,,,,,,,,,,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask Documentation (0.13-dev),\u00bb,,Tutorial,\u00bb,,,,,Warning:,This is the documentation for the development version of Flask,,,,,,Introducing Flaskr,\u00b6,,This tutorial will demonstrate a blogging application named Flaskr, but feel\nfree to choose your own less Web-2.0-ish name ;)  Essentially, it will do the\nfollowing things:,,,Let the user sign in and out with credentials specified in the\nconfiguration.  Only one user is supported.,,When the user is logged in, they can add new entries to the page\nconsisting of a text-only title and some HTML for the text.  This HTML\nis not sanitized because we trust the user here.,,The index page shows all entries so far in reverse chronological order\n(newest on top) and the user can add new ones from there if logged in.,,,SQLite3 will be used directly for this application because it\u2019s good enough\nfor an application of this size.  For larger applications, however,\nit makes a lot of sense to use,SQLAlchemy,, as it handles database\nconnections in a more intelligent way, allowing you to target different\nrelational databases at once and more.  You might also want to consider\none of the popular NoSQL databases if your data is more suited for those.,,,Warning,,If you\u2019re following the tutorial from a specific version of the docs, be\nsure to check out the same tag in the repository, otherwise the tutorial\nmay be different than the example.,,,Here is a screenshot of the final application:,,,Continue with,Step 0: Creating The Folders,.,,,,,,,,,Versions,,,Development,,(unstable),,Flask 0.12.x,,(stable),,Flask 0.11.x,,Flask 0.10.x,,,,,Related Topics,,,Documentation overview,,Tutorial,,Previous:,Tutorial,,Next:,Step 0: Creating The Folders,,,,,,Quick search,,,,,,,,,,,\u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using,Sphinx,.,,"},
{"name": "Step 1: Database Schema", "url": "http://flask.pocoo.org/docs/dev/tutorial/schema/", "content": ",,,Step 1: Database Schema \u2014 Flask Documentation (0.13-dev),,,,var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../../',\n        VERSION:     '0.13.dev',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };,,,,,,,,,,,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask Documentation (0.13-dev),\u00bb,,Tutorial,\u00bb,,,,,Warning:,This is the documentation for the development version of Flask,,,,,,Step 1: Database Schema,\u00b6,,In this step, you will create the database schema.  Only a single table is\nneeded for this application and it will only support SQLite.  All you need to do\nis put the following contents into a file named,schema.sql,in the,flaskr/flaskr,folder:,,drop,,table,,if,,exists,,entries,;,,create,,table,,entries,,(,,id,,integer,,primary,,key,,autoincrement,,,,title,,text,,not,,null,,,,'text',,text,,not,,null,,);,,,,This schema consists of a single table called,entries,.  Each row in\nthis table has an,id,, a,title,, and a,text,.  The,id,is an\nautomatically incrementing integer and a primary key, the other two are\nstrings that must not be null.,,Continue with,Step 2: Application Setup Code,.,,,,,,,,,Versions,,,Development,,(unstable),,Flask 0.12.x,,(stable),,Flask 0.11.x,,Flask 0.10.x,,,,,Related Topics,,,Documentation overview,,Tutorial,,Previous:,Step 0: Creating The Folders,,Next:,Step 2: Application Setup Code,,,,,,Quick search,,,,,,,,,,,\u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using,Sphinx,.,,"},
{"name": "License", "url": "http://flask.pocoo.org/docs/dev/license/", "content": ",,,,,License \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,License,\u00b6,,Flask is licensed under a three clause BSD License.  It basically means:\ndo whatever you want with it as long as the copyright in Flask sticks\naround, the conditions are not modified and the disclaimer is present.\nFurthermore you must not use the names of the authors to promote derivatives\nof the software without written consent.,,The full license text can be found below (,Flask License,).  For the\ndocumentation and artwork different licenses apply.,,,Authors,\u00b6,,Flask is developed and maintained by the Pallets team and community\ncontributors. It was created by Armin Ronacher. The core maintainers\nare:,,,David Lord (davidism),,Adrian M\u00f6nnich (ThiefMaster),,Armin Ronacher (mitsuhiko),,Marcus Unterwaditzer (untitaker),,,A full list of contributors is available from git with:,,git,,shortlog,,-,sne,,,,,,General License Definitions,\u00b6,,The following section contains the full license texts for Flask and the\ndocumentation.,,,\u201cAUTHORS\u201d hereby refers to all the authors listed in the,Authors,section.,,The \u201c,Flask License,\u201d applies to all the source code shipped as\npart of Flask (Flask itself as well as the examples and the unittests)\nas well as documentation.,,The \u201c,Flask Artwork License,\u201d applies to the project\u2019s Horn-Logo.,,,,,Flask License,\u00b6,,Copyright \u00a9 2010 by the Pallets team.,,Some rights reserved.,,Redistribution and use in source and binary forms of the software as\nwell as documentation, with or without modification, are permitted\nprovided that the following conditions are met:,,,Redistributions of source code must retain the above copyright notice,\nthis list of conditions and the following disclaimer.,,Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.,,Neither the name of the copyright holder nor the names of its\ncontributors may be used to endorse or promote products derived from\nthis software without specific prior written permission.,,,THIS SOFTWARE AND DOCUMENTATION IS PROVIDED BY THE COPYRIGHT HOLDERS AND\nCONTRIBUTORS \u201cAS IS\u201d AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,\nBUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\nFITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\nCOPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\nINCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\nNOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\nUSE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHIS SOFTWARE AND DOCUMENTATION, EVEN IF ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGE.,,,,Flask Artwork License,\u00b6,,Copyright (c) 2010 by Armin Ronacher.,,Some rights reserved.,,This logo or a modified version may be used by anyone to refer to the\nFlask project, but does not indicate endorsement by the project.,,Redistribution and use in source (the SVG file) and binary forms (rendered\nPNG files etc.) of the image, with or without modification, are permitted\nprovided that the following conditions are met:,,,Redistributions of source code must retain the above copyright\nnotice and this list of conditions.,,The names of the contributors to the Flask software (see AUTHORS) may\nnot be used to endorse or promote products derived from this software\nwithout specific prior written permission.,,,Note: we would appreciate that you make the image a link to,http://flask.pocoo.org/,if you use it on a web page.,,,,,,,,,,,,,Contents,,,License,,Authors,,General License Definitions,,Flask License,,Flask Artwork License,,,,,Navigation,,,Overview,,,Previous:,Flask Changelog,,Next:,How to contribute to Flask,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Celery Background Tasks", "url": "http://flask.pocoo.org/docs/dev/patterns/celery/", "content": ",,,,,Celery Background Tasks \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,Celery Background Tasks,\u00b6,,If your application has a long running task, such as processing some uploaded\ndata or sending email, you don\u2019t want to wait for it to finish during a\nrequest. Instead, use a task queue to send the necessary data to another\nprocess that will run the task in the background while the request returns\nimmediately.,,Celery is a powerful task queue that can be used for simple background tasks\nas well as complex multi-stage programs and schedules. This guide will show you\nhow to configure Celery using Flask, but assumes you\u2019ve already read the,First Steps with Celery,guide in the Celery documentation.,,,Install,\u00b6,,Celery is a separate Python package. Install it from PyPI using pip:,,$ pip install celery,,,,,Configure,\u00b6,,The first thing you need is a Celery instance, this is called the celery\napplication.  It serves the same purpose as the,Flask,object in Flask, just for Celery.  Since this instance is used as the\nentry-point for everything you want to do in Celery, like creating tasks\nand managing workers, it must be possible for other modules to import it.,,For instance you can place this in a,tasks,module.  While you can use\nCelery without any reconfiguration with Flask, it becomes a bit nicer by\nsubclassing tasks and adding support for Flask\u2019s application contexts and\nhooking it up with the Flask configuration.,,This is all that is necessary to properly integrate Celery with Flask:,,from,,celery,,import,,Celery,,def,,make_celery,(,app,):,,celery,,=,,Celery,(,,app,.,import_name,,,,backend,=,app,.,config,[,'CELERY_RESULT_BACKEND',],,,broker,=,app,.,config,[,'CELERY_BROKER_URL',],,),,celery,.,conf,.,update,(,app,.,config,),,class,,ContextTask,(,celery,.,Task,):,,def,,__call__,(,self,,,,*,args,,,,**,kwargs,):,,with,,app,.,app_context,():,,return,,self,.,run,(,*,args,,,,**,kwargs,),,celery,.,Task,,=,,ContextTask,,return,,celery,,,,The function creates a new Celery object, configures it with the broker\nfrom the application config, updates the rest of the Celery config from\nthe Flask config and then creates a subclass of the task that wraps the\ntask execution in an application context.,,,,An example task,\u00b6,,Let\u2019s write a task that adds two numbers together and returns the result. We\nconfigure Celery\u2019s broker and backend to use Redis, create a,celery,application using the factor from above, and then use it to define the task.,,from,,flask,,import,,Flask,,flask_app,,=,,Flask,(,__name__,),,flask_app,.,config,.,update,(,,CELERY_BROKER_URL,=,'redis://localhost:6379',,,,CELERY_RESULT_BACKEND,=,'redis://localhost:6379',,),,celery,,=,,make_celery,(,flask_app,),,@celery,.,task,(),,def,,add_together,(,a,,,,b,):,,return,,a,,+,,b,,,,This task can now be called in the background:,,result,,=,,add_together,.,delay,(,23,,,,42,),,result,.,wait,(),,# 65,,,,,,Run a worker,\u00b6,,If you jumped in and already executed the above code you will be\ndisappointed to learn that,.wait(),will never actually return.\nThat\u2019s because you also need to run a Celery worker to receive and execute the\ntask.,,$ celery -A your_application.celery worker,,,The,your_application,string has to point to your application\u2019s package\nor module that creates the,celery,object.,,Now that the worker is running,,wait,will return the result once the task\nis finished.,,,,,,,,,,,,,Contents,,,Celery Background Tasks,,Install,,Configure,,An example task,,Run a worker,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,Request Content Checksums,,Next:,Subclassing Flask,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Subclassing Flask", "url": "http://flask.pocoo.org/docs/dev/patterns/subclassing/", "content": ",,,,,Subclassing Flask \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,Subclassing Flask,\u00b6,,The,Flask,class is designed for subclassing.,,For example, you may want to override how request parameters are handled to preserve their order:,,from,,flask,,import,,Flask,,,,Request,,from,,werkzeug.datastructures,,import,,ImmutableOrderedMultiDict,,class,,MyRequest,(,Request,):,,\"\"\"Request subclass to override request parameter storage\"\"\",,parameter_storage_class,,=,,ImmutableOrderedMultiDict,,class,,MyFlask,(,Flask,):,,\"\"\"Flask subclass using the custom request class\"\"\",,request_class,,=,,MyRequest,,,,This is the recommended approach for overriding or augmenting Flask\u2019s internal functionality.,,,,,,,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,Celery Background Tasks,,Next:,Deployment Options,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Celery Background Tasks", "url": "http://flask.pocoo.org/docs/1.0/patterns/celery/", "content": ",,,,,Celery Background Tasks \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,,,,,Celery Background Tasks,\u00b6,,If your application has a long running task, such as processing some uploaded\ndata or sending email, you don\u2019t want to wait for it to finish during a\nrequest. Instead, use a task queue to send the necessary data to another\nprocess that will run the task in the background while the request returns\nimmediately.,,Celery is a powerful task queue that can be used for simple background tasks\nas well as complex multi-stage programs and schedules. This guide will show you\nhow to configure Celery using Flask, but assumes you\u2019ve already read the,First Steps with Celery,guide in the Celery documentation.,,,Install,\u00b6,,Celery is a separate Python package. Install it from PyPI using pip:,,$ pip install celery,,,,,Configure,\u00b6,,The first thing you need is a Celery instance, this is called the celery\napplication.  It serves the same purpose as the,Flask,object in Flask, just for Celery.  Since this instance is used as the\nentry-point for everything you want to do in Celery, like creating tasks\nand managing workers, it must be possible for other modules to import it.,,For instance you can place this in a,tasks,module.  While you can use\nCelery without any reconfiguration with Flask, it becomes a bit nicer by\nsubclassing tasks and adding support for Flask\u2019s application contexts and\nhooking it up with the Flask configuration.,,This is all that is necessary to properly integrate Celery with Flask:,,from,,celery,,import,,Celery,,def,,make_celery,(,app,):,,celery,,=,,Celery,(,,app,.,import_name,,,,backend,=,app,.,config,[,'CELERY_RESULT_BACKEND',],,,broker,=,app,.,config,[,'CELERY_BROKER_URL',],,),,celery,.,conf,.,update,(,app,.,config,),,class,,ContextTask,(,celery,.,Task,):,,def,,__call__,(,self,,,,*,args,,,,**,kwargs,):,,with,,app,.,app_context,():,,return,,self,.,run,(,*,args,,,,**,kwargs,),,celery,.,Task,,=,,ContextTask,,return,,celery,,,,The function creates a new Celery object, configures it with the broker\nfrom the application config, updates the rest of the Celery config from\nthe Flask config and then creates a subclass of the task that wraps the\ntask execution in an application context.,,,,An example task,\u00b6,,Let\u2019s write a task that adds two numbers together and returns the result. We\nconfigure Celery\u2019s broker and backend to use Redis, create a,celery,application using the factor from above, and then use it to define the task.,,from,,flask,,import,,Flask,,flask_app,,=,,Flask,(,__name__,),,flask_app,.,config,.,update,(,,CELERY_BROKER_URL,=,'redis://localhost:6379',,,,CELERY_RESULT_BACKEND,=,'redis://localhost:6379',,),,celery,,=,,make_celery,(,flask_app,),,@celery,.,task,(),,def,,add_together,(,a,,,,b,):,,return,,a,,+,,b,,,,This task can now be called in the background:,,result,,=,,add_together,.,delay,(,23,,,,42,),,result,.,wait,(),,# 65,,,,,,Run a worker,\u00b6,,If you jumped in and already executed the above code you will be\ndisappointed to learn that,.wait(),will never actually return.\nThat\u2019s because you also need to run a Celery worker to receive and execute the\ntask.,,$ celery -A your_application.celery worker,,,The,your_application,string has to point to your application\u2019s package\nor module that creates the,celery,object.,,Now that the worker is running,,wait,will return the result once the task\nis finished.,,,,,,,,,,,,,Contents,,,Celery Background Tasks,,Install,,Configure,,An example task,,Run a worker,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,Request Content Checksums,,Next:,Subclassing Flask,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Subclassing Flask", "url": "http://flask.pocoo.org/docs/1.0/patterns/subclassing/", "content": ",,,,,Subclassing Flask \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,,,,,Subclassing Flask,\u00b6,,The,Flask,class is designed for subclassing.,,For example, you may want to override how request parameters are handled to preserve their order:,,from,,flask,,import,,Flask,,,,Request,,from,,werkzeug.datastructures,,import,,ImmutableOrderedMultiDict,,class,,MyRequest,(,Request,):,,\"\"\"Request subclass to override request parameter storage\"\"\",,parameter_storage_class,,=,,ImmutableOrderedMultiDict,,class,,MyFlask,(,Flask,):,,\"\"\"Flask subclass using the custom request class\"\"\",,request_class,,=,,MyRequest,,,,This is the recommended approach for overriding or augmenting Flask\u2019s internal functionality.,,,,,,,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,Celery Background Tasks,,Next:,Deployment Options,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Deployment Options", "url": "http://flask.pocoo.org/docs/1.0/deploying/", "content": ",,,,,Deployment Options \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,,,,,,,,Deployment Options,\u00b6,,While lightweight and easy to use,,Flask\u2019s built-in server is not suitable\nfor production,as it doesn\u2019t scale well.  Some of the options available for\nproperly running Flask in production are documented here.,,If you want to deploy your Flask application to a WSGI server not listed here,\nlook up the server documentation about how to use a WSGI app with it.  Just\nremember that your,Flask,application object is the actual WSGI\napplication.,,,Hosted options,\u00b6,,,Deploying Flask on Heroku,,Deploying Flask on OpenShift,,Deploying Flask on Webfaction,,Deploying Flask on Google App Engine,,Deploying Flask on AWS Elastic Beanstalk,,Sharing your Localhost Server with Localtunnel,,Deploying on Azure (IIS),,Deploying on PythonAnywhere,,,,,Self-hosted options,\u00b6,,,,Standalone WSGI Containers,,Gunicorn,,uWSGI,,Gevent,,Twisted Web,,Proxy Setups,,,,uWSGI,,Starting your app with uwsgi,,Configuring nginx,,,,mod_wsgi (Apache),,Installing,mod_wsgi,,Creating a,.wsgi,file,,Configuring Apache,,Troubleshooting,,Support for Automatic Reloading,,Working with Virtual Environments,,,,FastCGI,,Creating a,.fcgi,file,,Configuring Apache,,Configuring lighttpd,,Configuring nginx,,Running FastCGI Processes,,Debugging,,,,CGI,,Creating a,.cgi,file,,Server Setup,,,,,,,,,,,,,,,,,Contents,,,Deployment Options,,Hosted options,,Self-hosted options,,,,,Navigation,,,Overview,,,Previous:,Subclassing Flask,,Next:,Standalone WSGI Containers,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/89/", "content": "Share your Local Server with a Friend  | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Share your Local Server with a Friend,,Posted by Kevin Burke\n    on 2012-03-12 @ 06:14\n    and filed in,Utilities,,Localtunnel,is a neat tool you can use to quickly share your local Flask server with a friend.,,To install Localtunnel, open a terminal and run the following command:,,sudo gem install localtunnel,,Then, with Flask running at,http://localhost:5000,, open a new Terminal window\nand type,,localtunnel 5000\n    Port 5000 is now publicly accessible from http://54xy.localtunnel.com ...,,(Get a,,gem: command not found,,error? Download RubyGems,,here,.),,If you load the URL given in the localtunnel output in your browser, you\nshould see your Flask app. It's actually being loaded from your own computer!,,This snippet by Kevin Burke can be used freely for\n    anything you like. Consider it public domain.,,,Comments,,,,Advantage over port forwarding on router?\n          by Alex Kelley\n          on 2013-04-01 @ 17:09,Hello Kevin,,,One advantage over enabling port forwarding on a router I see with using Localtunnel would be that you could run multiple web servers behind a single router (I don't think this is possible with port forwarding).  I'm interested in other advantages you see with the Localtunnel option.  Any security advantages?,,Thanks for your feedback!,,,,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/65/", "content": "Deploying a Flask app on Webfaction | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Deploying a Flask app on Webfaction,,Posted by esaurito\n    on 2011-08-11 @ 09:08\n    and filed in,Deployment,,Webfaction is a Python friendly hosting with affordable pricing and tons of useful features.,,To deploy a Flask application on Webfaction you should follow these steps:,,Create an application in Webfaction control panel choosing \"mod_wsgi 3.2/Python 2.6\" or another one of the available Python version.,The system will automagically create some folder under the webapps directory in your home folder,,webapps/yourapplication/\n|-- apache2\n|   |-- bin\n|   |-- conf\n|   |-- lib\n|   |-- logs\n|   `-- modules\n`-- htdocs,,Install Flask and all the extensions you need using,easy_install,:,,foo@bar:~$ easy_install-2.6 Flask,,Note that Webfaction gives you different easy_install executables: use the one that meets the Python version you choose when the application was created.,,Open,webapps/yourapp/index.py,delete the content and add the following line:,,from,,yourapp,,import,,app,,as,,application,,,Modify your,webapps/yourapp/apache2/conf/httpd.conf,. At the bottom of the file add the following lines changing,yourapp,and,yourusername,according to your setup:,,WSGIPythonPath,,/home/yourusername/webapps/yourapp/htdocs/,,#If you do not specify the following directive the app *will* work but you will,,#see index.py in the path of all URLs,,WSGIScriptAlias,/,/home/yourusername/webapps/yourapp/htdocs/index.py,,<Directory,,/home/yourusername/webapps/yourapp/htdocs/,>,,AddHandler,wsgi-script .py,RewriteEngine,,on,,RewriteBase,/,WSGIScriptReloading,,On,,</Directory>,,,If you have choosed,/,as the mout point for your application you are done.\nIf you mounted the application somewhere else (i.e. /blog) there is some additional work to do.,,You need to write a WSGI middleware that prefixes SCRIPT_NAME with that prefix otherwise the,url_for,function will not be able to create the correct URLs for you (the following snippets is kindly provided by Armin himself).,,class,,WebFactionMiddleware,(,object,):,,def,,__init__,(,self,,,,app,):,,self,.,app,,=,,app,,def,,__call__,(,self,,,,environ,,,,start_response,):,,environ,[,'SCRIPT_NAME',],,=,,'/yourapp',,return,,self,.,app,(,environ,,,,start_response,),,app,.,wsgi_app,,=,,WebFactionMiddleware,(,app,.,wsgi_app,),,,You can put this snippet in the application's,__init__.py,.,,Happy Flasking!,,This snippet by esaurito can be used freely for\n    anything you like. Consider it public domain.,,,Comments,,,,Inconsistent\n          by dAnjou\n          on 2012-07-01 @ 20:04,I don't use webfaction but I tried to help someone setting up his app and I noticed that the author used \"yourapplication\" and \"yourapp\" in several paths. Is that supposed to be the same? If yes, where is \"index.py\" in the directory tree?,,,,Wrong location of index.py\n          by codecool\n          on 2012-07-10 @ 12:17,index.py is located inside /webapps/youapplication/htdocs.,,,,Comment\n          by Nick\n          on 2013-01-19 @ 23:51,Thank you, your writeup was a great help.,,Webfaction seem to be using the WSGIDaemonProcess directive now, so the WSGIPythonPath line was not needed for me. However, I DID need WSGIScriptAlias for the url rewrite to work. I also omitted the WSGIScriptReloading line, since it seems to be On by default.,,,,flask is lowercase for easy_install\n          by CS777\n          on 2013-02-17 @ 00:20,foo@bar:$ easy_install-2.6 flask,,,,Updated install guide\n          by Ryan Sanden\n          on 2013-03-13 @ 03:25,An updated WebFaction install guide for Flask is now available here:,,http://community.webfaction.com/questions/12718/installing-flask,,This also automates most of the process into copy-paste commands.,,,,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "Request Content Checksums", "url": "http://flask.pocoo.org/docs/1.0/patterns/requestchecksum/", "content": ",,,,,Request Content Checksums \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,,,,,Request Content Checksums,\u00b6,,Various pieces of code can consume the request data and preprocess it.\nFor instance JSON data ends up on the request object already read and\nprocessed, form data ends up there as well but goes through a different\ncode path.  This seems inconvenient when you want to calculate the\nchecksum of the incoming request data.  This is necessary sometimes for\nsome APIs.,,Fortunately this is however very simple to change by wrapping the input\nstream.,,The following example calculates the SHA1 checksum of the incoming data as\nit gets read and stores it in the WSGI environment:,,import,,hashlib,,class,,ChecksumCalcStream,(,object,):,,def,,__init__,(,self,,,,stream,):,,self,.,_stream,,=,,stream,,self,.,_hash,,=,,hashlib,.,sha1,(),,def,,read,(,self,,,,bytes,):,,rv,,=,,self,.,_stream,.,read,(,bytes,),,self,.,_hash,.,update,(,rv,),,return,,rv,,def,,readline,(,self,,,,size_hint,):,,rv,,=,,self,.,_stream,.,readline,(,size_hint,),,self,.,_hash,.,update,(,rv,),,return,,rv,,def,,generate_checksum,(,request,):,,env,,=,,request,.,environ,,stream,,=,,ChecksumCalcStream,(,env,[,'wsgi.input',]),,env,[,'wsgi.input',],,=,,stream,,return,,stream,.,_hash,,,,To use this, all you need to do is to hook the calculating stream in\nbefore the request starts consuming data.  (Eg: be careful accessing,request.form,or anything of that nature.,before_request_handlers,for instance should be careful not to access it).,,Example usage:,,@app,.,route,(,'/special-api',,,,methods,=,[,'POST',]),,def,,special_api,():,,hash,,=,,generate_checksum,(,request,),,# Accessing this parses the input stream,,files,,=,,request,.,files,,# At this point the hash is fully constructed.,,checksum,,=,,hash,.,hexdigest,(),,return,,'Hash was:,%s,',,%,,checksum,,,,,,,,,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,Adding HTTP Method Overrides,,Next:,Celery Background Tasks,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Development Server", "url": "http://flask.pocoo.org/docs/1.0/server/", "content": ",,,,,Development Server \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,,,,,,,,Development Server,\u00b6,,Starting with Flask 0.11 there are multiple built-in ways to run a\ndevelopment server.  The best one is the,flask,command line utility\nbut you can also continue using the,Flask.run(),method.,,,Command Line,\u00b6,,The,flask,command line script (,Command Line Interface,) is strongly\nrecommended for development because it provides a superior reload\nexperience due to how it loads the application.  The basic usage is like\nthis:,,$ export FLASK_APP=my_application\n$ export FLASK_ENV=development\n$ flask run,,,This enables the development environment, including the interactive\ndebugger and reloader, and then starts the server on,http://localhost:5000/,.,,The individual features of the server can be controlled by passing more\narguments to the,run,option. For instance the reloader can be\ndisabled:,,$ flask run --no-reload,,,,Note,,Prior to Flask 1.0 the,FLASK_ENV,environment variable was\nnot supported and you needed to enable debug mode by exporting,FLASK_DEBUG=1,. This can still be used to control debug mode, but\nyou should prefer setting the development environment as shown\nabove.,,,,,In Code,\u00b6,,The alternative way to start the application is through the,Flask.run(),method.  This will immediately launch a local server\nexactly the same way the,flask,script does.,,Example:,,if,,__name__,,==,,'__main__',:,,app,.,run,(),,,,This works well for the common case but it does not work well for\ndevelopment which is why from Flask 0.11 onwards the,flask,method is recommended.  The reason for this is that due to how the reload\nmechanism works there are some bizarre side-effects (like executing\ncertain code twice, sometimes crashing without message or dying when a\nsyntax or import error happens).,,It is however still a perfectly valid method for invoking a non automatic\nreloading application.,,,,,,,,,,,,,Contents,,,Development Server,,Command Line,,In Code,,,,,Navigation,,,Overview,,,Previous:,Command Line Interface,,Next:,Working with the Shell,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Command Line Interface", "url": "http://flask.pocoo.org/docs/1.0/cli/", "content": ",,,,,Command Line Interface \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,,,,,,,,Command Line Interface,\u00b6,,Installing Flask installs the,flask,script, a,Click,command line\ninterface, in your virtualenv. Executed from the terminal, this script gives\naccess to built-in, extension, and application-defined commands. The,--help,option will give more information about any commands and options.,,,Application Discovery,\u00b6,,The,flask,command is installed by Flask, not your application; it must be\ntold where to find your application in order to use it. The,FLASK_APP,environment variable is used to specify how to load the application.,,Unix Bash (Linux, Mac, etc.):,,$ export FLASK_APP=hello\n$ flask run,,,Windows CMD:,,>,,set,,FLASK_APP,=,hello,,>,,flask,,run,,,,Windows PowerShell:,,> $env:FLASK_APP = \"hello\"\n> flask run,,,While,FLASK_APP,supports a variety of options for specifying your\napplication, most use cases should be simple. Here are the typical values:,,,(nothing),,The file,wsgi.py,is imported, automatically detecting an app\n(,app,). This provides an easy way to create an app from a factory with\nextra arguments.,,FLASK_APP=hello,,The name is imported, automatically detecting an app (,app,) or factory\n(,create_app,).,,,,FLASK_APP,has three parts: an optional path that sets the current working\ndirectory, a Python file or dotted import path, and an optional variable\nname of the instance or factory. If the name is a factory, it can optionally\nbe followed by arguments in parentheses. The following values demonstrate these\nparts:,,,FLASK_APP=src/hello,,Sets the current working directory to,src,then imports,hello,.,,FLASK_APP=hello.web,,Imports the path,hello.web,.,,FLASK_APP=hello:app2,,Uses the,app2,Flask instance in,hello,.,,FLASK_APP=\"hello:create_app('dev')\",,The,create_app,factory in,hello,is called with the string,'dev',as the argument.,,,If,FLASK_APP,is not set, the command will look for a file called,wsgi.py,or,app.py,and try to detect an application instance or\nfactory.,,Within the given import, the command looks for an application instance named,app,or,application,, then any application instance. If no instance is\nfound, the command looks for a factory function named,create_app,or,make_app,that returns an instance.,,When calling an application factory, if the factory takes an argument named,info,, then the,ScriptInfo,instance is passed as a keyword\nargument. If parentheses follow the factory name, their contents are parsed\nas Python literals and passes as arguments to the function. This means that\nstrings must still be in quotes.,,,,Run the Development Server,\u00b6,,The,run,command will start the development server. It\nreplaces the,Flask.run(),method in most cases.,,$ flask run\n * Serving Flask app \"hello\"\n * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit),,,,Warning,,Do not use this command to run your application in production.\nOnly use the development server during development. The development server\nis provided for convenience, but is not designed to be particularly secure,\nstable, or efficient. See,Deployment Options,for how to run in production.,,,,,Open a Shell,\u00b6,,To explore the data in your application, you can start an interactive Python\nshell with the,shell,command. An application\ncontext will be active, and the app instance will be imported.,,$ flask shell\nPython 3.6.2 (default, Jul 20 2017, 03:52:27)\n[GCC 7.1.1 20170630] on linux\nApp: example\nInstance: /home/user/Projects/hello/instance\n>>>,,,Use,shell_context_processor(),to add other automatic imports.,,,,Environments,\u00b6,,,New in version 1.0.,,,,Changelog,The environment in which the Flask app runs is set by the,FLASK_ENV,environment variable. If not set it defaults to,production,. The other recognized environment is,development,.\nFlask and extensions may choose to enable behaviors based on the\nenvironment.,,If the env is set to,development,, the,flask,command will enable\ndebug mode and,flask,,run,will enable the interactive debugger and\nreloader.,,$ FLASK_ENV=development flask run\n * Serving Flask app \"hello\"\n * Environment: development\n * Debug mode: on\n * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n * Restarting with inotify reloader\n * Debugger is active!\n * Debugger PIN: 223-456-919,,,,,Debug Mode,\u00b6,,Debug mode will be enabled when,FLASK_ENV,is,development,,\nas described above. If you want to control debug mode separately, use,FLASK_DEBUG,. The value,1,enables it,,0,disables it.,,,,Environment Variables From dotenv,\u00b6,,Rather than setting,FLASK_APP,each time you open a new terminal, you can\nuse Flask\u2019s dotenv support to set environment variables automatically.,,If,python-dotenv,is installed, running the,flask,command will set\nenvironment variables defined in the files,.env,and,.flaskenv,.\nThis can be used to avoid having to set,FLASK_APP,manually every time you\nopen a new terminal, and to set configuration using environment variables\nsimilar to how some deployment services work.,,Variables set on the command line are used over those set in,.env,,\nwhich are used over those set in,.flaskenv,.,.flaskenv,should be\nused for public variables, such as,FLASK_APP,, while,.env,should not\nbe committed to your repository so that it can set private variables.,,Directories are scanned upwards from the directory you call,flask,from to locate the files. The current working directory will be set to the\nlocation of the file, with the assumption that that is the top level project\ndirectory.,,The files are only loaded by the,flask,command or calling,run(),. If you would like to load these files when running in\nproduction, you should call,load_dotenv(),manually.,,,Setting Command Options,\u00b6,,Click is configured to load default values for command options from\nenvironment variables. The variables use the pattern,FLASK_COMMAND_OPTION,. For example, to set the port for the run\ncommand, instead of,flask,,run,,--port,,8000,:,,export FLASK_RUN_PORT=8000\nflask run\n * Running on http://127.0.0.1:8000/,,,These can be added to the,.flaskenv,file just like,FLASK_APP,to\ncontrol default command options.,,,,Disable dotenv,\u00b6,,The,flask,command will show a message if it detects dotenv files but\npython-dotenv is not installed.,,flask run\n * Tip: There are .env files present. Do \"pip install python-dotenv\" to use them.,,,You can tell Flask not to load dotenv files even when python-dotenv is\ninstalled by setting the,FLASK_SKIP_DOTENV,environment variable.\nThis can be useful if you want to load them manually, or if you\u2019re using\na project runner that loads them already. Keep in mind that the\nenvironment variables must be set before the app loads or it won\u2019t\nconfigure as expected.,,export FLASK_SKIP_DOTENV=1\nflask run,,,,,,Environment Variables From virtualenv,\u00b6,,If you do not want to install dotenv support, you can still set environment\nvariables by adding them to the end of the virtualenv\u2019s,activate,script. Activating the virtualenv will set the variables.,,Unix Bash,,venv/bin/activate,:,,export,,FLASK_APP,=,hello,,,,Windows CMD,,venv\\Scripts\\activate.bat,:,,set,,FLASK_APP,=,hello,,,,It is preferred to use dotenv support over this, since,.flaskenv,can be\ncommitted to the repository so that it works automatically wherever the project\nis checked out.,,,,Custom Commands,\u00b6,,The,flask,command is implemented using,Click,. See that project\u2019s\ndocumentation for full information about writing commands.,,This example adds the command,create_user,that takes the argument,name,.,,import,,click,,from,,flask,,import,,Flask,,app,,=,,Flask,(,__name__,),,@app,.,cli,.,command,(),,@click,.,argument,(,'name',),,def,,create_user,(,name,):,,...,,,,flask,,create_user,,admin,,,,This example adds the same command, but as,user,,create,, a command in a\ngroup. This is useful if you want to organize multiple related commands.,,import,,click,,from,,flask,,import,,Flask,,from,,flask.cli,,import,,AppGroup,,app,,=,,Flask,(,__name__,),,user_cli,,=,,AppGroup,(,'user',),,@user_cli,.,command,(,'create',),,@click,.,argument,(,'name',),,def,,create_user,(,name,):,,...,,app,.,cli,.,add_command,(,user_cli,),,,,flask,,user,,create,,demo,,,,See,Testing CLI Commands,for an overview of how to test your custom\ncommands.,,,Application Context,\u00b6,,Commands added using the Flask app\u2019s,cli,,command(),decorator will be executed with an application\ncontext pushed, so your command and extensions have access to the app and its\nconfiguration. If you create a command using the Click,command(),decorator instead of the Flask decorator, you can use,with_appcontext(),to get the same behavior.,,import,,click,,from,,flask.cli,,import,,with_appcontext,,@click,.,command,,@with_appcontext,,def,,do_work,():,,...,,app,.,cli,.,add_command,(,do_work,),,,,If you\u2019re sure a command doesn\u2019t need the context, you can disable it:,,@app,.,cli,.,command,(,with_appcontext,=,False,),,def,,do_work,():,,...,,,,,,,Plugins,\u00b6,,Flask will automatically load commands specified in the,flask.commands,,entry point,. This is useful for extensions that want to add commands when\nthey are installed. Entry points are specified in,setup.py,,from,,setuptools,,import,,setup,,setup,(,,name,=,'flask-my-extension',,,,...,,,,entry_points,=,{,,'flask.commands',:,,[,,'my-command=flask_my_extension.commands:cli',,],,,},,,),,,,Inside,flask_my_extension/commands.py,you can then export a Click\nobject:,,import,,click,,@click,.,command,(),,def,,cli,():,,...,,,,Once that package is installed in the same virtualenv as your Flask project,\nyou can run,flask,,my-command,to invoke the command.,,,,Custom Scripts,\u00b6,,When you are using the app factory pattern, it may be more convenient to define\nyour own Click script. Instead of using,FLASK_APP,and letting Flask load\nyour application, you can create your own Click object and export it as a,console script,entry point.,,Create an instance of,FlaskGroup,and pass it the factory:,,import,,click,,from,,flask,,import,,Flask,,from,,flask.cli,,import,,FlaskGroup,,def,,create_app,():,,app,,=,,Flask,(,'wiki',),,# other setup,,return,,app,,@click,.,group,(,cls,=,FlaskGroup,,,,create_app,=,create_app,),,def,,cli,():,,\"\"\"Management script for the Wiki application.\"\"\",,,,Define the entry point in,setup.py,:,,from,,setuptools,,import,,setup,,setup,(,,name,=,'flask-my-extension',,,,...,,,,entry_points,=,{,,'console_scripts',:,,[,,'wiki=wiki:cli',,],,,},,,),,,,Install the application in the virtualenv in editable mode and the custom\nscript is available. Note that you don\u2019t need to set,FLASK_APP,.,,$ pip install -e .\n$ wiki run,,,,Errors in Custom Scripts,,When using a custom script, if you introduce an error in your\nmodule-level code, the reloader will fail because it can no longer\nload the entry point.,,The,flask,command, being separate from your code, does not have\nthis issue and is recommended in most cases.,,,,,PyCharm Integration,\u00b6,,Prior to PyCharm 2018.1, the Flask CLI features weren\u2019t yet fully\nintegrated into PyCharm. We have to do a few tweaks to get them working\nsmoothly. These instructions should be similar for any other IDE you\nmight want to use.,,In PyCharm, with your project open, click on,Run,from the menu bar and\ngo to,Edit Configurations,. You\u2019ll be greeted by a screen similar to\nthis:,,,There\u2019s quite a few options to change, but once we\u2019ve done it for one\ncommand, we can easily copy the entire configuration and make a single\ntweak to give us access to other commands, including any custom ones you\nmay implement yourself.,,Click the + (,Add New Configuration,) button and select,Python,. Give\nthe configuration a good descriptive name such as \u201cRun Flask Server\u201d.\nFor the,flask,,run,command, check \u201cSingle instance only\u201d since you\ncan\u2019t run the server more than once at the same time.,,Select,Module name,from the dropdown (,A,) then input,flask,.,,The,Parameters,field (,B,) is set to the CLI command to execute\n(with any arguments). In this example we use,run,, which will run\nthe development server.,,You can skip this next step if you\u2019re using,Environment Variables From dotenv,. We need to\nadd an environment variable (,C,) to identify our application. Click\non the browse button and add an entry with,FLASK_APP,on the left and\nthe Python import or file on the right (,hello,for example).,,Next we need to set the working directory (,D,) to be the folder where\nour application resides.,,If you have installed your project as a package in your virtualenv, you\nmay untick the,PYTHONPATH,options (,E,). This will more accurately\nmatch how you deploy the app later.,,Click,Apply,to save the configuration, or,OK,to save and close the\nwindow. Select the configuration in the main PyCharm window and click\nthe play button next to it to run the server.,,Now that we have a configuration which runs,flask,,run,from within\nPyCharm, we can copy that configuration and alter the,Script,argument\nto run a different CLI command, e.g.,flask,,shell,.,,,,,,,,,,,,,Contents,,,Command Line Interface,,Application Discovery,,Run the Development Server,,Open a Shell,,Environments,,Debug Mode,,Environment Variables From dotenv,,Setting Command Options,,Disable dotenv,,,,Environment Variables From virtualenv,,Custom Commands,,Application Context,,,,Plugins,,Custom Scripts,,PyCharm Integration,,,,,Navigation,,,Overview,,,Previous:,Extensions,,Next:,Development Server,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Static Files", "url": "http://flask.pocoo.org/docs/1.0/tutorial/static/", "content": ",,,,,Static Files \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,Tutorial,\u00bb,,,,,,,,,Static Files,\u00b6,,The authentication views and templates work, but they look very plain\nright now. Some,CSS,can be added to add style to the HTML layout you\nconstructed. The style won\u2019t change, so it\u2019s a,static,file rather than\na template.,,Flask automatically adds a,static,view that takes a path relative\nto the,flaskr/static,directory and serves it. The,base.html,template already has a link to the,style.css,file:,,{{,,url_for,(,'static',,,,filename,=,'style.css',),,}},,,,Besides CSS, other types of static files might be files with JavaScript\nfunctions, or a logo image. They are all placed under the,flaskr/static,directory and referenced with,url_for('static',,,filename='...'),.,,This tutorial isn\u2019t focused on how to write CSS, so you can just copy\nthe following into the,flaskr/static/style.css,file:,,,flaskr/static/style.css,\u00b6,,html,,{,,font-family,:,,sans-serif,;,,background,:,,#eee,;,,padding,:,,1,rem,;,,},,body,,{,,max-width,:,,960,px,;,,margin,:,,0,,auto,;,,background,:,,white,;,,},,h1,,{,,font-family,:,,serif,;,,color,:,,#377ba8,;,,margin,:,,1,rem,,0,;,,},,a,,{,,color,:,,#377ba8,;,,},,hr,,{,,border,:,,none,;,,border-top,:,,1,px,,solid,,lightgray,;,,},,nav,,{,,background,:,,lightgray,;,,display,:,,flex,;,,align-items,:,,center,;,,padding,:,,0,,0.5,rem,;,,},,nav,,h1,,{,,flex,:,,auto,;,,margin,:,,0,;,,},,nav,,h1,,a,,{,,text-decoration,:,,none,;,,padding,:,,0.25,rem,,0.5,rem,;,,},,nav,,ul,,{,,display,:,,flex,;,,list-style,:,,none,;,,margin,:,,0,;,,padding,:,,0,;,,},,nav,,ul,,li,,a,,,,nav,,ul,,li,,span,,,,header,,.,action,,{,,display,:,,block,;,,padding,:,,0.5,rem,;,,},,.,content,,{,,padding,:,,0,,1,rem,,1,rem,;,,},,.,content,,>,,header,,{,,border-bottom,:,,1,px,,solid,,lightgray,;,,display,:,,flex,;,,align-items,:,,flex-end,;,,},,.,content,,>,,header,,h1,,{,,flex,:,,auto,;,,margin,:,,1,rem,,0,,0.25,rem,,0,;,,},,.,flash,,{,,margin,:,,1,em,,0,;,,padding,:,,1,em,;,,background,:,,#cae6f6,;,,border,:,,1,px,,solid,,#377ba8,;,,},,.,post,,>,,header,,{,,display,:,,flex,;,,align-items,:,,flex-end,;,,font-size,:,,0.85,em,;,,},,.,post,,>,,header,,>,,div,:,first-of-type,,{,,flex,:,,auto,;,,},,.,post,,>,,header,,h1,,{,,font-size,:,,1.5,em,;,,margin-bottom,:,,0,;,,},,.,post,,.,about,,{,,color,:,,slategray,;,,font-style,:,,italic,;,,},,.,post,,.,body,,{,,white-space,:,,pre-line,;,,},,.,content,:,last-child,,{,,margin-bottom,:,,0,;,,},,.,content,,form,,{,,margin,:,,1,em,,0,;,,display,:,,flex,;,,flex-direction,:,,column,;,,},,.,content,,label,,{,,font-weight,:,,bold,;,,margin-bottom,:,,0.5,em,;,,},,.,content,,input,,,,.,content,,textarea,,{,,margin-bottom,:,,1,em,;,,},,.,content,,textarea,,{,,min-height,:,,12,em,;,,resize,:,,vertical,;,,},,input,.,danger,,{,,color,:,,#cc2f2e,;,,},,input,[,type,=,submit,],,{,,align-self,:,,start,;,,min-width,:,,10,em,;,,},,,,,You can find a less compact version of,style.css,in the,example code,.,,Go to,http://127.0.0.1:5000/auth/login,and the page should look like the\nscreenshot below.,,,You can read more about CSS from,Mozilla\u2019s documentation,. If\nyou change a static file, refresh the browser page. If the change\ndoesn\u2019t show up, try clearing your browser\u2019s cache.,,Continue to,Blog Blueprint,.,,,,,,,,,,,Navigation,,,Overview,,,Tutorial,,,Previous:,Templates,,Next:,Blog Blueprint,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Configuration Handling", "url": "http://flask.pocoo.org/docs/1.0/config/", "content": ",,,,,Configuration Handling \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,,,,,,,,Configuration Handling,\u00b6,,Applications need some kind of configuration.  There are different settings\nyou might want to change depending on the application environment like\ntoggling the debug mode, setting the secret key, and other such\nenvironment-specific things.,,The way Flask is designed usually requires the configuration to be\navailable when the application starts up.  You can hardcode the\nconfiguration in the code, which for many small applications is not\nactually that bad, but there are better ways.,,Independent of how you load your config, there is a config object\navailable which holds the loaded configuration values:\nThe,config,attribute of the,Flask,object.  This is the place where Flask itself puts certain configuration\nvalues and also where extensions can put their configuration values.  But\nthis is also where you can have your own configuration.,,,Configuration Basics,\u00b6,,The,config,is actually a subclass of a dictionary and\ncan be modified just like any dictionary:,,app,,=,,Flask,(,__name__,),,app,.,config,[,'TESTING',],,=,,True,,,,Certain configuration values are also forwarded to the,Flask,object so you can read and write them from there:,,app,.,testing,,=,,True,,,,To update multiple keys at once you can use the,dict.update(),method:,,app,.,config,.,update,(,,TESTING,=,True,,,,SECRET_KEY,=,b,'_5#y2L\"F4Q8z,\\n\\xec,]/',,),,,,,,Environment and Debug Features,\u00b6,,The,ENV,and,DEBUG,config values are special because they\nmay behave inconsistently if changed after the app has begun setting up.\nIn order to set the environment and debug mode reliably, Flask uses\nenvironment variables.,,The environment is used to indicate to Flask, extensions, and other\nprograms, like Sentry, what context Flask is running in. It is\ncontrolled with the,FLASK_ENV,environment variable and\ndefaults to,production,.,,Setting,FLASK_ENV,to,development,will enable debug mode.,flask,,run,will use the interactive debugger and reloader by default\nin debug mode. To control this separately from the environment, use the,FLASK_DEBUG,flag.,,,Changed in version 1.0:,Added,FLASK_ENV,to control the environment separately\nfrom debug mode. The development environment enables debug mode.,,,,Changelog,To switch Flask to the development environment and enable debug mode,\nset,FLASK_ENV,:,,$ export FLASK_ENV=development\n$ flask run,,,(On Windows, use,set,instead of,export,.),,Using the environment variables as described above is recommended. While\nit is possible to set,ENV,and,DEBUG,in your config or\ncode, this is strongly discouraged. They can\u2019t be read early by the,flask,command, and some systems or extensions may have already\nconfigured themselves based on a previous value.,,,,Builtin Configuration Values,\u00b6,,The following configuration values are used internally by Flask:,,,,ENV,\u00b6,,What environment the app is running in. Flask and extensions may\nenable behaviors based on the environment, such as enabling debug\nmode. The,env,attribute maps to this config\nkey. This is set by the,FLASK_ENV,environment variable and\nmay not behave as expected if set in code.,,Do not enable development when deploying in production.,,Default:,'production',,,New in version 1.0.,,,,Changelog,,,,DEBUG,\u00b6,,Whether debug mode is enabled. When using,flask,,run,to start the\ndevelopment server, an interactive debugger will be shown for\nunhandled exceptions, and the server will be reloaded when code\nchanges. The,debug,attribute maps to this\nconfig key. This is enabled when,ENV,is,'development',and is overridden by the,FLASK_DEBUG,environment variable. It\nmay not behave as expected if set in code.,,Do not enable debug mode when deploying in production.,,Default:,True,if,ENV,is,'development',, or,False,otherwise.,,,,,TESTING,\u00b6,,Enable testing mode. Exceptions are propagated rather than handled by the\nthe app\u2019s error handlers. Extensions may also change their behavior to\nfacilitate easier testing. You should enable this in your own tests.,,Default:,False,,,,,PROPAGATE_EXCEPTIONS,\u00b6,,Exceptions are re-raised rather than being handled by the app\u2019s error\nhandlers. If not set, this is implicitly true if,TESTING,or,DEBUG,is enabled.,,Default:,None,,,,,PRESERVE_CONTEXT_ON_EXCEPTION,\u00b6,,Don\u2019t pop the request context when an exception occurs. If not set, this\nis true if,DEBUG,is true. This allows debuggers to introspect the\nrequest data on errors, and should normally not need to be set directly.,,Default:,None,,,,,TRAP_HTTP_EXCEPTIONS,\u00b6,,If there is no handler for an,HTTPException,-type exception, re-raise it\nto be handled by the interactive debugger instead of returning it as a\nsimple error response.,,Default:,False,,,,,TRAP_BAD_REQUEST_ERRORS,\u00b6,,Trying to access a key that doesn\u2019t exist from request dicts like,args,and,form,will return a 400 Bad Request error page. Enable this to treat\nthe error as an unhandled exception instead so that you get the interactive\ndebugger. This is a more specific version of,TRAP_HTTP_EXCEPTIONS,. If\nunset, it is enabled in debug mode.,,Default:,None,,,,,SECRET_KEY,\u00b6,,A secret key that will be used for securely signing the session cookie\nand can be used for any other security related needs by extensions or your\napplication. It should be a long random string of bytes, although unicode\nis accepted too. For example, copy the output of this to your config:,,python,,-,c,,'import os; print(os.urandom(16))',,b,'_5#y2L\"F4Q8z,\\n\\xec,]/',,,,Do not reveal the secret key when posting questions or committing code.,,Default:,None,,,,,SESSION_COOKIE_NAME,\u00b6,,The name of the session cookie. Can be changed in case you already have a\ncookie with the same name.,,Default:,'session',,,,,SESSION_COOKIE_DOMAIN,\u00b6,,The domain match rule that the session cookie will be valid for. If not\nset, the cookie will be valid for all subdomains of,SERVER_NAME,.\nIf,False,, the cookie\u2019s domain will not be set.,,Default:,None,,,,,SESSION_COOKIE_PATH,\u00b6,,The path that the session cookie will be valid for. If not set, the cookie\nwill be valid underneath,APPLICATION_ROOT,or,/,if that is not set.,,Default:,None,,,,,SESSION_COOKIE_HTTPONLY,\u00b6,,Browsers will not allow JavaScript access to cookies marked as \u201cHTTP only\u201d\nfor security.,,Default:,True,,,,,SESSION_COOKIE_SECURE,\u00b6,,Browsers will only send cookies with requests over HTTPS if the cookie is\nmarked \u201csecure\u201d. The application must be served over HTTPS for this to make\nsense.,,Default:,False,,,,,SESSION_COOKIE_SAMESITE,\u00b6,,Restrict how cookies are sent with requests from external sites. Can\nbe set to,'Lax',(recommended) or,'Strict',.\nSee,Set-Cookie options,.,,Default:,None,,,New in version 1.0.,,,,Changelog,,,,PERMANENT_SESSION_LIFETIME,\u00b6,,If,session.permanent,is true, the cookie\u2019s expiration will be set this\nnumber of seconds in the future. Can either be a,datetime.timedelta,or an,int,.,,Flask\u2019s default cookie implementation validates that the cryptographic\nsignature is not older than this value.,,Default:,timedelta(days=31),(,2678400,seconds),,,,,SESSION_REFRESH_EACH_REQUEST,\u00b6,,Control whether the cookie is sent with every response when,session.permanent,is true. Sending the cookie every time (the default)\ncan more reliably keep the session from expiring, but uses more bandwidth.\nNon-permanent sessions are not affected.,,Default:,True,,,,,USE_X_SENDFILE,\u00b6,,When serving files, set the,X-Sendfile,header instead of serving the\ndata with Flask. Some web servers, such as Apache, recognize this and serve\nthe data more efficiently. This only makes sense when using such a server.,,Default:,False,,,,,SEND_FILE_MAX_AGE_DEFAULT,\u00b6,,When serving files, set the cache control max age to this number of\nseconds.  Can either be a,datetime.timedelta,or an,int,.\nOverride this value on a per-file basis using,get_send_file_max_age(),on the application or blueprint.,,Default:,timedelta(hours=12),(,43200,seconds),,,,,SERVER_NAME,\u00b6,,Inform the application what host and port it is bound to. Required\nfor subdomain route matching support.,,If set, will be used for the session cookie domain if,SESSION_COOKIE_DOMAIN,is not set. Modern web browsers will\nnot allow setting cookies for domains without a dot. To use a domain\nlocally, add any names that should route to the app to your,hosts,file.,,127.0,.,0.1,,localhost,.,dev,,,,If set,,url_for,can generate external URLs with only an application\ncontext instead of a request context.,,Default:,None,,,,,APPLICATION_ROOT,\u00b6,,Inform the application what path it is mounted under by the application /\nweb server.,,Will be used for the session cookie path if,SESSION_COOKIE_PATH,is not\nset.,,Default:,'/',,,,,PREFERRED_URL_SCHEME,\u00b6,,Use this scheme for generating external URLs when not in a request context.,,Default:,'http',,,,,MAX_CONTENT_LENGTH,\u00b6,,Don\u2019t read more than this many bytes from the incoming request data. If not\nset and the request does not specify a,CONTENT_LENGTH,, no data will be\nread for security.,,Default:,None,,,,,JSON_AS_ASCII,\u00b6,,Serialize objects to ASCII-encoded JSON. If this is disabled, the JSON\nwill be returned as a Unicode string, or encoded as,UTF-8,by,jsonify,. This has security implications when rendering the JSON in\nto JavaScript in templates, and should typically remain enabled.,,Default:,True,,,,,JSON_SORT_KEYS,\u00b6,,Sort the keys of JSON objects alphabetically. This is useful for caching\nbecause it ensures the data is serialized the same way no matter what\nPython\u2019s hash seed is. While not recommended, you can disable this for a\npossible performance improvement at the cost of caching.,,Default:,True,,,,,JSONIFY_PRETTYPRINT_REGULAR,\u00b6,,jsonify,responses will be output with newlines, spaces, and indentation\nfor easier reading by humans. Always enabled in debug mode.,,Default:,False,,,,,JSONIFY_MIMETYPE,\u00b6,,The mimetype of,jsonify,responses.,,Default:,'application/json',,,,,TEMPLATES_AUTO_RELOAD,\u00b6,,Reload templates when they are changed. If not set, it will be enabled in\ndebug mode.,,Default:,None,,,,,EXPLAIN_TEMPLATE_LOADING,\u00b6,,Log debugging information tracing how a template file was loaded. This can\nbe useful to figure out why a template was not loaded or the wrong file\nappears to be loaded.,,Default:,False,,,,,MAX_COOKIE_SIZE,\u00b6,,Warn if cookie headers are larger than this many bytes. Defaults to,4093,. Larger cookies may be silently ignored by browsers. Set to,0,to disable the warning.,,,,Changed in version 1.0:,LOGGER_NAME,and,LOGGER_HANDLER_POLICY,were removed. See,Logging,for information about configuration.,,Added,ENV,to reflect the,FLASK_ENV,environment\nvariable.,,Added,SESSION_COOKIE_SAMESITE,to control the session\ncookie\u2019s,SameSite,option.,,Added,MAX_COOKIE_SIZE,to control a warning from Werkzeug.,,,,Changelog,,New in version 0.11:,SESSION_REFRESH_EACH_REQUEST,,,TEMPLATES_AUTO_RELOAD,,,LOGGER_HANDLER_POLICY,,,EXPLAIN_TEMPLATE_LOADING,,,,New in version 0.10:,JSON_AS_ASCII,,,JSON_SORT_KEYS,,,JSONIFY_PRETTYPRINT_REGULAR,,,,New in version 0.9:,PREFERRED_URL_SCHEME,,,,New in version 0.8:,TRAP_BAD_REQUEST_ERRORS,,,TRAP_HTTP_EXCEPTIONS,,,APPLICATION_ROOT,,,SESSION_COOKIE_DOMAIN,,,SESSION_COOKIE_PATH,,,SESSION_COOKIE_HTTPONLY,,,SESSION_COOKIE_SECURE,,,,New in version 0.7:,PROPAGATE_EXCEPTIONS,,,PRESERVE_CONTEXT_ON_EXCEPTION,,,,New in version 0.6:,MAX_CONTENT_LENGTH,,,,New in version 0.5:,SERVER_NAME,,,,New in version 0.4:,LOGGER_NAME,,,,,Configuring from Files,\u00b6,,Configuration becomes more useful if you can store it in a separate file,\nideally located outside the actual application package. This makes\npackaging and distributing your application possible via various package\nhandling tools (,Deploying with Setuptools,) and finally modifying the\nconfiguration file afterwards.,,So a common pattern is this:,,app,,=,,Flask,(,__name__,),,app,.,config,.,from_object,(,'yourapplication.default_settings',),,app,.,config,.,from_envvar,(,'YOURAPPLICATION_SETTINGS',),,,,This first loads the configuration from the,yourapplication.default_settings,module and then overrides the values\nwith the contents of the file the,YOURAPPLICATION_SETTINGS,environment variable points to.  This environment variable can be set on\nLinux or OS X with the export command in the shell before starting the\nserver:,,$ export YOURAPPLICATION_SETTINGS=/path/to/settings.cfg\n$ python run-app.py\n * Running on http://127.0.0.1:5000/\n * Restarting with reloader...,,,On Windows systems use the,set,builtin instead:,,>,set,,YOURAPPLICATION_SETTINGS,=,\\,path,\\,to,\\,settings,.,cfg,,,,The configuration files themselves are actual Python files.  Only values\nin uppercase are actually stored in the config object later on.  So make\nsure to use uppercase letters for your config keys.,,Here is an example of a configuration file:,,# Example configuration,,DEBUG,,=,,False,,SECRET_KEY,,=,,b,'_5#y2L\"F4Q8z,\\n\\xec,]/',,,,Make sure to load the configuration very early on, so that extensions have\nthe ability to access the configuration when starting up.  There are other\nmethods on the config object as well to load from individual files.  For a\ncomplete reference, read the,Config,object\u2019s\ndocumentation.,,,,Configuring from Environment Variables,\u00b6,,In addition to pointing to configuration files using environment variables, you\nmay find it useful (or necessary) to control your configuration values directly\nfrom the environment.,,Environment variables can be set on Linux or OS X with the export command in\nthe shell before starting the server:,,$ export SECRET_KEY='5f352379324c22463451387a0aec5d2f'\n$ export DEBUG=False\n$ python run-app.py\n * Running on http://127.0.0.1:5000/\n * Restarting with reloader...,,,On Windows systems use the,set,builtin instead:,,>,set,,SECRET_KEY,=,'5f352379324c22463451387a0aec5d2f',,>,set,,DEBUG,=,False,,,,While this approach is straightforward to use, it is important to remember that\nenvironment variables are strings \u2013 they are not automatically deserialized\ninto Python types.,,Here is an example of a configuration file that uses environment variables:,,# Example configuration,,import,,os,,ENVIRONMENT_DEBUG,,=,,os,.,environ,.,get,(,\"DEBUG\",,,,default,=,False,),,if,,ENVIRONMENT_DEBUG,.,lower,(),,in,,(,\"f\",,,,\"false\",):,,ENVIRONMENT_DEBUG,,=,,False,,DEBUG,,=,,ENVIRONMENT_DEBUG,,SECRET_KEY,,=,,os,.,environ,.,get,(,\"SECRET_KEY\",,,,default,=,None,),,if,,not,,SECRET_KEY,:,,raise,,ValueError,(,\"No secret key set for Flask application\",),,,,Notice that any value besides an empty string will be interpreted as a boolean,True,value in Python, which requires care if an environment explicitly sets\nvalues intended to be,False,.,,Make sure to load the configuration very early on, so that extensions have the\nability to access the configuration when starting up.  There are other methods\non the config object as well to load from individual files.  For a complete\nreference, read the,Config,class documentation.,,,,Configuration Best Practices,\u00b6,,The downside with the approach mentioned earlier is that it makes testing\na little harder.  There is no single 100% solution for this problem in\ngeneral, but there are a couple of things you can keep in mind to improve\nthat experience:,,,Create your application in a function and register blueprints on it.\nThat way you can create multiple instances of your application with\ndifferent configurations attached which makes unittesting a lot\neasier.  You can use this to pass in configuration as needed.,,Do not write code that needs the configuration at import time.  If you\nlimit yourself to request-only accesses to the configuration you can\nreconfigure the object later on as needed.,,,,,Development / Production,\u00b6,,Most applications need more than one configuration.  There should be at\nleast separate configurations for the production server and the one used\nduring development.  The easiest way to handle this is to use a default\nconfiguration that is always loaded and part of the version control, and a\nseparate configuration that overrides the values as necessary as mentioned\nin the example above:,,app,,=,,Flask,(,__name__,),,app,.,config,.,from_object,(,'yourapplication.default_settings',),,app,.,config,.,from_envvar,(,'YOURAPPLICATION_SETTINGS',),,,,Then you just have to add a separate,config.py,file and export,YOURAPPLICATION_SETTINGS=/path/to/config.py,and you are done.  However\nthere are alternative ways as well.  For example you could use imports or\nsubclassing.,,What is very popular in the Django world is to make the import explicit in\nthe config file by adding,from,,yourapplication.default_settings,,import,,*,to the top of the file and then overriding the changes by hand.\nYou could also inspect an environment variable like,YOURAPPLICATION_MODE,and set that to,production,,,development,etc\nand import different hardcoded files based on that.,,An interesting pattern is also to use classes and inheritance for\nconfiguration:,,class,,Config,(,object,):,,DEBUG,,=,,False,,TESTING,,=,,False,,DATABASE_URI,,=,,'sqlite:///:memory:',,class,,ProductionConfig,(,Config,):,,DATABASE_URI,,=,,'mysql://user@localhost/foo',,class,,DevelopmentConfig,(,Config,):,,DEBUG,,=,,True,,class,,TestingConfig,(,Config,):,,TESTING,,=,,True,,,,To enable such a config you just have to call into,from_object(),:,,app,.,config,.,from_object,(,'configmodule.ProductionConfig',),,,,There are many different ways and it\u2019s up to you how you want to manage\nyour configuration files.  However here a list of good recommendations:,,,Keep a default configuration in version control.  Either populate the\nconfig with this default configuration or import it in your own\nconfiguration files before overriding values.,,Use an environment variable to switch between the configurations.\nThis can be done from outside the Python interpreter and makes\ndevelopment and deployment much easier because you can quickly and\neasily switch between different configs without having to touch the\ncode at all.  If you are working often on different projects you can\neven create your own script for sourcing that activates a virtualenv\nand exports the development configuration for you.,,Use a tool like,fabric,in production to push code and\nconfigurations separately to the production server(s).  For some\ndetails about how to do that, head over to the,Deploying with Fabric,pattern.,,,,,Instance Folders,\u00b6,,,Changelog,,New in version 0.8.,,,Flask 0.8 introduces instance folders.  Flask for a long time made it\npossible to refer to paths relative to the application\u2019s folder directly\n(via,Flask.root_path,).  This was also how many developers loaded\nconfigurations stored next to the application.  Unfortunately however this\nonly works well if applications are not packages in which case the root\npath refers to the contents of the package.,,With Flask 0.8 a new attribute was introduced:,Flask.instance_path,.  It refers to a new concept called the\n\u201cinstance folder\u201d.  The instance folder is designed to not be under\nversion control and be deployment specific.  It\u2019s the perfect place to\ndrop things that either change at runtime or configuration files.,,You can either explicitly provide the path of the instance folder when\ncreating the Flask application or you can let Flask autodetect the\ninstance folder.  For explicit configuration use the,instance_path,parameter:,,app,,=,,Flask,(,__name__,,,,instance_path,=,'/path/to/instance/folder',),,,,Please keep in mind that this path,must,be absolute when provided.,,If the,instance_path,parameter is not provided the following default\nlocations are used:,,,Uninstalled module:,,/,myapp,.,py,,/,instance,,,,,Uninstalled package:,,/,myapp,,/,__init__,.,py,,/,instance,,,,,Installed module or package:,,$PREFIX/lib/python2.X/site-packages/myapp\n$PREFIX/var/myapp-instance,,,$PREFIX,is the prefix of your Python installation.  This can be,/usr,or the path to your virtualenv.  You can print the value of,sys.prefix,to see what the prefix is set to.,,,,Since the config object provided loading of configuration files from\nrelative filenames we made it possible to change the loading via filenames\nto be relative to the instance path if wanted.  The behavior of relative\npaths in config files can be flipped between \u201crelative to the application\nroot\u201d (the default) to \u201crelative to instance folder\u201d via the,instance_relative_config,switch to the application constructor:,,app,,=,,Flask,(,__name__,,,,instance_relative_config,=,True,),,,,Here is a full example of how to configure Flask to preload the config\nfrom a module and then override the config from a file in the config\nfolder if it exists:,,app,,=,,Flask,(,__name__,,,,instance_relative_config,=,True,),,app,.,config,.,from_object,(,'yourapplication.default_settings',),,app,.,config,.,from_pyfile,(,'application.cfg',,,,silent,=,True,),,,,The path to the instance folder can be found via the,Flask.instance_path,.  Flask also provides a shortcut to open a\nfile from the instance folder with,Flask.open_instance_resource(),.,,Example usage for both:,,filename,,=,,os,.,path,.,join,(,app,.,instance_path,,,,'application.cfg',),,with,,open,(,filename,),,as,,f,:,,config,,=,,f,.,read,(),,# or via open_instance_resource:,,with,,app,.,open_instance_resource,(,'application.cfg',),,as,,f,:,,config,,=,,f,.,read,(),,,,,,,,,,,,,,,Contents,,,Configuration Handling,,Configuration Basics,,Environment and Debug Features,,Builtin Configuration Values,,Configuring from Files,,Configuring from Environment Variables,,Configuration Best Practices,,Development / Production,,Instance Folders,,,,,Navigation,,,Overview,,,Previous:,Logging,,Next:,Signals,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "How to contribute to Flask", "url": "http://flask.pocoo.org/docs/dev/contributing/", "content": ",,,,,How to contribute to Flask \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,How to contribute to Flask,\u00b6,,Thank you for considering contributing to Flask!,,,Support questions,\u00b6,,Please, don\u2019t use the issue tracker for this. Use one of the following\nresources for questions about your own code:,,,The IRC channel,#pocoo,on FreeNode.,,The IRC channel,#python,on FreeNode for more general questions.,,The mailing list,flask,@,python,.,org,for long term discussion or larger issues.,,Ask on,Stack Overflow,. Search with Google first using:,site:stackoverflow.com,,flask,,{search,,term,,,exception,,message,,,etc.},,,,,Reporting issues,\u00b6,,,Describe what you expected to happen.,,If possible, include a,minimal, complete, and verifiable example,to help\nus identify the issue. This also helps check that the issue is not with your\nown code.,,Describe what actually happened. Include the full traceback if there was an\nexception.,,List your Python, Flask, and Werkzeug versions. If possible, check if this\nissue is already fixed in the repository.,,,,,Submitting patches,\u00b6,,,Include tests if your patch is supposed to solve a bug, and explain\nclearly under which circumstances the bug happens. Make sure the test fails\nwithout your patch.,,Try to follow,PEP8,, but you may ignore the line length limit if following\nit would make the code uglier.,,,,First time setup,\u00b6,,,Download and install the,latest version of git,.,,,Configure git with your,username,and,email,:,,git,,config,,--,global,,user,.,name,,'your name',,git,,config,,--,global,,user,.,email,,'your email',,,,,Make sure you have a,GitHub account,.,,,Fork Flask to your GitHub account by clicking the,Fork,button.,,,Clone,your GitHub fork locally:,,git,,clone,,https,:,//,github,.,com,/,{,username,},/,flask,,cd,,flask,,,,,Add the main repository as a remote to update later:,,git,,remote,,add,,pallets,,https,:,//,github,.,com,/,pallets,/,flask,,git,,fetch,,pallets,,,,,Create a virtualenv:,,python3,,-,m,,venv,,env,,.,,env,/,bin,/,activate,,# or \"env\\Scripts\\activate\" on Windows,,,,,Install Flask in editable mode with development dependencies:,,pip,,install,,-,e,,\".[dev]\",,,,,,,,Start coding,\u00b6,,,Create a branch to identify the issue you would like to work on (e.g.,2287-dry-test-suite,),,Using your favorite editor, make your changes,,committing as you go,.,,Try to follow,PEP8,, but you may ignore the line length limit if following\nit would make the code uglier.,,Include tests that cover any code changes you make. Make sure the test fails\nwithout your patch.,Run the tests.,.,,Push your commits to GitHub and,create a pull request,.,,Celebrate \ud83c\udf89,,,,,Running the tests,\u00b6,,Run the basic test suite with:,,pytest,,,,This only runs the tests for the current environment. Whether this is relevant\ndepends on which part of Flask you\u2019re working on. Travis-CI will run the full\nsuite when you submit your pull request.,,The full test suite takes a long time to run because it tests multiple\ncombinations of Python and dependencies. You need to have Python 2.7, 3.4,\n3.5 3.6, and PyPy 2.7 installed to run all of the environments. Then run:,,tox,,,,,,Running test coverage,\u00b6,,Generating a report of lines that do not have test coverage can indicate\nwhere to start contributing. Run,pytest,using,coverage,and generate a\nreport on the terminal and as an interactive HTML document:,,coverage,,run,,-,m,,pytest,,coverage,,report,,coverage,,html,,# then open htmlcov/index.html,,,,Read more about,coverage,.,,Running the full test suite with,tox,will combine the coverage reports\nfrom all runs.,,,,Building the docs,\u00b6,,Build the docs in the,docs,directory using Sphinx:,,cd,,docs,,make,,html,,,,Open,_build/html/index.html,in your browser to view the docs.,,Read more about,Sphinx,.,,,,make targets,\u00b6,,Flask provides a,Makefile,with various shortcuts. They will ensure that\nall dependencies are installed.,,,make,,test,runs the basic test suite with,pytest,,make,,cov,runs the basic test suite with,coverage,,make,,test-all,runs the full test suite with,tox,,make,,docs,builds the HTML documentation,,,,,,Caution: zero-padded file modes,\u00b6,,This repository contains several zero-padded file modes that may cause issues\nwhen pushing this repository to git hosts other than GitHub. Fixing this is\ndestructive to the commit history, so we suggest ignoring these warnings. If it\nfails to push and you\u2019re using a self-hosted git service like GitLab, you can\nturn off repository checks in the admin panel.,,These files can also cause issues while cloning. If you have,,[,fetch,],,fsckobjects,,=,,true,,,,or,,[,receive,],,fsckObjects,,=,,true,,,,set in your git configuration file, cloning this repository will fail. The only\nsolution is to set both of the above settings to false while cloning, and then\nsetting them back to true after the cloning is finished.,,,,,,,,,,,,,Contents,,,How to contribute to Flask,,Support questions,,Reporting issues,,Submitting patches,,First time setup,,Start coding,,Running the tests,,Running test coverage,,Building the docs,,make targets,,,,Caution: zero-padded file modes,,,,,Navigation,,,Overview,,,Previous:,License,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Tutorial", "url": "http://flask.pocoo.org/docs/1.0/tutorial/", "content": ",,,,,Tutorial \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,,,,,,,,Tutorial,\u00b6,,,Contents:,,,Project Layout,,Application Setup,,Define and Access the Database,,Blueprints and Views,,Templates,,Static Files,,Blog Blueprint,,Make the Project Installable,,Test Coverage,,Deploy to Production,,Keep Developing!,,,,This tutorial will walk you through creating a basic blog application\ncalled Flaskr. Users will be able to register, log in, create posts,\nand edit or delete their own posts. You will be able to package and\ninstall the application on other computers.,,,It\u2019s assumed that you\u2019re already familiar with Python. The,official\ntutorial,in the Python docs is a great way to learn or review first.,,While it\u2019s designed to give a good starting point, the tutorial doesn\u2019t\ncover all of Flask\u2019s features. Check out the,Quickstart,for an\noverview of what Flask can do, then dive into the docs to find out more.\nThe tutorial only uses what\u2019s provided by Flask and Python. In another\nproject, you might decide to use,Extensions,or other libraries to\nmake some tasks simpler.,,,Flask is flexible. It doesn\u2019t require you to use any particular project\nor code layout. However, when first starting, it\u2019s helpful to use a more\nstructured approach. This means that the tutorial will require a bit of\nboilerplate up front, but it\u2019s done to avoid many common pitfalls that\nnew developers encounter, and it creates a project that\u2019s easy to expand\non. Once you become more comfortable with Flask, you can step out of\nthis structure and take full advantage of Flask\u2019s flexibility.,,,The tutorial project is available as an example in the Flask\nrepository,, if you want to compare your project\nwith the final product as you follow the tutorial.,,Continue to,Project Layout,.,,,,,,,,,,,Navigation,,,Overview,,,Previous:,Quickstart,,Next:,Project Layout,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Flask Changelog", "url": "http://flask.pocoo.org/docs/dev/changelog/", "content": ",,,,,Flask Changelog \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,Flask Changelog,\u00b6,,,Version 1.1,\u00b6,,Unreleased,,,,Version 1.0.3,\u00b6,,Unreleased,,,,Version 1.0.2,\u00b6,,Released on May 2nd 2018,,,Fix more backwards compatibility issues with merging slashes between\na blueprint prefix and route. (,#2748,),,Fix error with,flask,,routes,command when there are no routes.\n(,#2751,),,,,,Version 1.0.1,\u00b6,,Released on April 29th 2018,,,Fix registering partials (with no,__name__,) as view functions.\n(,#2730,),,Don\u2019t treat lists returned from view functions the same as tuples.\nOnly tuples are interpreted as response data. (,#2736,),,Extra slashes between a blueprint\u2019s,url_prefix,and a route URL\nare merged. This fixes some backwards compatibility issues with the\nchange in 1.0. (,#2731,,,#2742,),,Only trap,BadRequestKeyError,errors in debug mode, not all,BadRequest,errors. This allows,abort(400),to continue\nworking as expected. (,#2735,),,The,FLASK_SKIP_DOTENV,environment variable can be set to,1,to skip automatically loading dotenv files. (,#2722,),,,,,Version 1.0,\u00b6,,Released on April 26th 2018,,,Python 2.6 and 3.3 are no longer supported.,(,pallets/meta#24,),,Bump minimum dependency versions to the latest stable versions:\nWerkzeug >= 0.14, Jinja >= 2.10, itsdangerous >= 0.24, Click >= 5.1.\n(,#2586,),,Skip,app.run,when a Flask application is run\nfrom the command line. This avoids some behavior that was confusing\nto debug.,,Change the default for,JSONIFY_PRETTYPRINT_REGULAR,to,False,.,jsonify(),returns a compact format by\ndefault, and an indented format in debug mode. (,#2193,),,Flask.__init__,accepts the,host_matching,argument and sets it on,url_map,. (,#1559,),,Flask.__init__,accepts the,static_host,argument\nand passes it as the,host,argument when defining the static\nroute. (,#1559,),,send_file(),supports Unicode in,attachment_filename,.\n(,#2223,),,Pass,_scheme,argument from,url_for(),to,handle_url_build_error(),. (,#2017,),,add_url_rule(),accepts the,provide_automatic_options,argument to disable adding the,OPTIONS,method. (,#1489,),,MethodView,subclasses inherit method handlers from\nbase classes. (,#1936,),,Errors caused while opening the session at the beginning of the\nrequest are handled by the app\u2019s error handlers. (,#2254,),,Blueprints gained,json_encoder,and,json_decoder,attributes to override the app\u2019s\nencoder and decoder. (,#1898,),,Flask.make_response(),raises,TypeError,instead of,ValueError,for bad response types. The error messages have been\nimproved to describe why the type is invalid. (,#2256,),,Add,routes,CLI command to output routes registered on the\napplication. (,#2259,),,Show warning when session cookie domain is a bare hostname or an IP\naddress, as these may not behave properly in some browsers, such as\nChrome. (,#2282,),,Allow IP address as exact session cookie domain. (,#2282,),,SESSION_COOKIE_DOMAIN,is set if it is detected through,SERVER_NAME,. (,#2282,),,Auto-detect zero-argument app factory called,create_app,or,make_app,from,FLASK_APP,. (,#2297,),,Factory functions are not required to take a,script_info,parameter to work with the,flask,command. If they take a single\nparameter or a parameter named,script_info,, the,ScriptInfo,object will be passed. (,#2319,),,FLASK_APP,can be set to an app factory, with arguments if\nneeded, for example,FLASK_APP=myproject.app:create_app('dev'),.\n(,#2326,),,FLASK_APP,can point to local packages that are not installed in\neditable mode, although,pip,,install,,-e,is still preferred.\n(,#2414,),,The,View,class attribute,provide_automatic_options,is set in,as_view(),, to be detected by,add_url_rule(),. (,#2316,),,Error handling will try handlers registered for,blueprint,,,code,,,app,,,code,,,blueprint,,,exception,,,app,,,exception,.\n(,#2314,),,Cookie,is added to the response\u2019s,Vary,header if the session\nis accessed at all during the request (and not deleted). (,#2288,),,test_request_context(),accepts,subdomain,and,url_scheme,arguments for use when building the base URL.\n(,#1621,),,Set,APPLICATION_ROOT,to,'/',by default. This was already\nthe implicit default when it was set to,None,.,,TRAP_BAD_REQUEST_ERRORS,is enabled by default in debug mode.,BadRequestKeyError,has a message with the bad key in debug mode\ninstead of the generic bad request message. (,#2348,),,Allow registering new tags with,TaggedJSONSerializer,to support storing other\ntypes in the session cookie. (,#2352,),,Only open the session if the request has not been pushed onto the\ncontext stack yet. This allows,stream_with_context(),generators to access the same session that the containing view uses.\n(,#2354,),,Add,json,keyword argument for the test client request methods.\nThis will dump the given object as JSON and set the appropriate\ncontent type. (,#2358,),,Extract JSON handling to a mixin applied to both the,Request,and,Response,classes. This adds the,is_json(),and,get_json(),methods to\nthe response to make testing JSON response much easier. (,#2358,),,Removed error handler caching because it caused unexpected results\nfor some exception inheritance hierarchies. Register handlers\nexplicitly for each exception if you want to avoid traversing the\nMRO. (,#2362,),,Fix incorrect JSON encoding of aware, non-UTC datetimes. (,#2374,),,Template auto reloading will honor debug mode even even if,jinja_env,was already accessed. (,#2373,),,The following old deprecated code was removed. (,#2385,),,flask.ext,- import extensions directly by their name instead\nof through the,flask.ext,namespace. For example,,import,,flask.ext.sqlalchemy,becomes,import,,flask_sqlalchemy,.,,Flask.init_jinja_globals,- extend,Flask.create_jinja_environment(),instead.,,Flask.error_handlers,- tracked by,Flask.error_handler_spec,, use,Flask.errorhandler(),to register handlers.,,Flask.request_globals_class,- use,Flask.app_ctx_globals_class,instead.,,Flask.static_path,- use,Flask.static_url_path,instead.,,Request.module,- use,Request.blueprint,instead.,,,,The,Request.json,property is no longer deprecated.\n(,#1421,),,Support passing a,EnvironBuilder,or,dict,to,test_client.open,.\n(,#2412,),,The,flask,command and,Flask.run(),will load environment\nvariables from,.env,and,.flaskenv,files if python-dotenv is\ninstalled. (,#2416,),,When passing a full URL to the test client, the scheme in the URL is\nused instead of,PREFERRED_URL_SCHEME,. (,#2430,),,Flask.logger,has been simplified.,LOGGER_NAME,and,LOGGER_HANDLER_POLICY,config was removed. The logger is always\nnamed,flask.app,. The level is only set on first access, it\ndoesn\u2019t check,Flask.debug,each time. Only one format is\nused, not different ones depending on,Flask.debug,. No\nhandlers are removed, and a handler is only added if no handlers are\nalready configured. (,#2436,),,Blueprint view function names may not contain dots. (,#2450,),,Fix a,ValueError,caused by invalid,Range,requests in some\ncases. (,#2526,),,The development server uses threads by default. (,#2529,),,Loading config files with,silent=True,will ignore,ENOTDIR,errors. (,#2581,),,Pass,--cert,and,--key,options to,flask,,run,to run the\ndevelopment server over HTTPS. (,#2606,),,Added,SESSION_COOKIE_SAMESITE,to control the,SameSite,attribute on the session cookie. (,#2607,),,Added,test_cli_runner(),to create a Click runner\nthat can invoke Flask CLI commands for testing. (,#2636,),,Subdomain matching is disabled by default and setting,SERVER_NAME,does not implicitly enable it. It can be enabled\nby passing,subdomain_matching=True,to the,Flask,constructor.\n(,#2635,),,A single trailing slash is stripped from the blueprint,url_prefix,when it is registered with the app. (,#2629,),,Request.get_json(),doesn\u2019t cache the\nresult if parsing fails when,silent,is true. (,#2651,),,Request.get_json(),no longer accepts arbitrary encodings.\nIncoming JSON should be encoded using UTF-8 per,RFC 8259,, but\nFlask will autodetect UTF-8, -16, or -32. (,#2691,),,Added,MAX_COOKIE_SIZE,and,Response.max_cookie_size,to control when Werkzeug warns about large cookies that browsers may\nignore. (,#2693,),,Updated documentation theme to make docs look better in small\nwindows. (,#2709,),,Rewrote the tutorial docs and example project to take a more\nstructured approach to help new users avoid common pitfalls.\n(,#2676,),,,,,Version 0.12.4,\u00b6,,Released on April 29 2018,,,Repackage 0.12.3 to fix package layout issue. (,#2728,),,,,,Version 0.12.3,\u00b6,,Released on April 26th 2018,,,Request.get_json(),no longer accepts arbitrary encodings.\nIncoming JSON should be encoded using UTF-8 per,RFC 8259,, but\nFlask will autodetect UTF-8, -16, or -32. (,#2692,),,Fix a Python warning about imports when using,python,,-m,,flask,.\n(,#2666,),,Fix a,ValueError,caused by invalid,Range,requests in some\ncases.,,,,,Version 0.12.2,\u00b6,,Released on May 16 2017,,,Fix a bug in,safe_join,on Windows.,,,,,Version 0.12.1,\u00b6,,Bugfix release, released on March 31st 2017,,,Prevent,flask run,from showing a NoAppException when an ImportError occurs\nwithin the imported application module.,,Fix encoding behavior of,app.config.from_pyfile,for Python 3. Fix,#2118,.,,Use the,SERVER_NAME,config if it is present as default values for,app.run,.,#2109,,,#2152,,Call,ctx.auto_pop,with the exception object instead of,None,, in the\nevent that a,BaseException,such as,KeyboardInterrupt,is raised in a\nrequest handler.,,,,,Version 0.12,\u00b6,,Released on December 21st 2016, codename Punsch.,,,the cli command now responds to,\u2013version,.,,Mimetype guessing and ETag generation for file-like objects in,send_file,has been removed, as per issue,#104,.  See pull request,#1849,.,,Mimetype guessing in,send_file,now fails loudly and doesn\u2019t fall back to,application/octet-stream,. See pull request,#1988,.,,Make,flask.safe_join,able to join multiple paths like,os.path.join,(pull request,#1730,).,,Revert a behavior change that made the dev server crash instead of returning\nan Internal Server Error (pull request,#2006,).,,Correctly invoke response handlers for both regular request dispatching as\nwell as error handlers.,,Disable logger propagation by default for the app logger.,,Add support for range requests in,send_file,.,,app.test_client,includes preset default environment, which can now be\ndirectly set, instead of per,client.get,.,,,,,Version 0.11.2,\u00b6,,Bugfix release, unreleased,,,Fix crash when running under PyPy3, see pull request,#1814,.,,,,,Version 0.11.1,\u00b6,,Bugfix release, released on June 7th 2016.,,,Fixed a bug that prevented,FLASK_APP=foobar/__init__.py,from working. See\npull request,#1872,.,,,,,Version 0.11,\u00b6,,Released on May 29th 2016, codename Absinthe.,,,Added support to serializing top-level arrays to,flask.jsonify(),. This\nintroduces a security risk in ancient browsers. See,JSON Security,for details.,,Added before_render_template signal.,,Added,**kwargs,to,flask.Test.test_client(),to support passing\nadditional keyword arguments to the constructor of,flask.Flask.test_client_class,.,,Added,SESSION_REFRESH_EACH_REQUEST,config key that controls the\nset-cookie behavior.  If set to,True,a permanent session will be\nrefreshed each request and get their lifetime extended, if set to,False,it will only be modified if the session actually modifies.\nNon permanent sessions are not affected by this and will always\nexpire if the browser window closes.,,Made Flask support custom JSON mimetypes for incoming data.,,Added support for returning tuples in the form,(response,,,headers),from a view function.,,Added,flask.Config.from_json(),.,,Added,flask.Flask.config_class,.,,Added,flask.Config.get_namespace(),.,,Templates are no longer automatically reloaded outside of debug mode. This\ncan be configured with the new,TEMPLATES_AUTO_RELOAD,config key.,,Added a workaround for a limitation in Python 3.3\u2019s namespace loader.,,Added support for explicit root paths when using Python 3.3\u2019s namespace\npackages.,,Added,flask,and the,flask.cli,module to start the local\ndebug server through the click CLI system.  This is recommended over the old,flask.run(),method as it works faster and more reliable due to a\ndifferent design and also replaces,Flask-Script,.,,Error handlers that match specific classes are now checked first,\nthereby allowing catching exceptions that are subclasses of HTTP\nexceptions (in,werkzeug.exceptions,).  This makes it possible\nfor an extension author to create exceptions that will by default\nresult in the HTTP error of their choosing, but may be caught with\na custom error handler if desired.,,Added,flask.Config.from_mapping(),.,,Flask will now log by default even if debug is disabled.  The log format is\nnow hardcoded but the default log handling can be disabled through the,LOGGER_HANDLER_POLICY,configuration key.,,Removed deprecated module functionality.,,Added the,EXPLAIN_TEMPLATE_LOADING,config flag which when enabled will\ninstruct Flask to explain how it locates templates.  This should help\nusers debug when the wrong templates are loaded.,,Enforce blueprint handling in the order they were registered for template\nloading.,,Ported test suite to py.test.,,Deprecated,request.json,in favour of,request.get_json(),.,,Add \u201cpretty\u201d and \u201ccompressed\u201d separators definitions in jsonify() method.\nReduces JSON response size when JSONIFY_PRETTYPRINT_REGULAR=False by removing\nunnecessary white space included by default after separators.,,JSON responses are now terminated with a newline character, because it is a\nconvention that UNIX text files end with a newline and some clients don\u2019t\ndeal well when this newline is missing. See,https://github.com/pallets/flask/pull/1262,\u2013 this came up originally as a\npart of,https://github.com/kennethreitz/httpbin/issues/168,,The automatically provided,OPTIONS,method is now correctly disabled if\nthe user registered an overriding rule with the lowercase-version,options,(issue,#1288,).,,flask.json.jsonify,now supports the,datetime.date,type (pull request,#1326,).,,Don\u2019t leak exception info of already catched exceptions to context teardown\nhandlers (pull request,#1393,).,,Allow custom Jinja environment subclasses (pull request,#1422,).,,Updated extension dev guidelines.,,flask.g,now has,pop(),and,setdefault,methods.,,Turn on autoescape for,flask.templating.render_template_string,by default\n(pull request,#1515,).,,flask.ext,is now deprecated (pull request,#1484,).,,send_from_directory,now raises BadRequest if the filename is invalid on\nthe server OS (pull request,#1763,).,,Added the,JSONIFY_MIMETYPE,configuration variable (pull request,#1728,).,,Exceptions during teardown handling will no longer leave bad application\ncontexts lingering around.,,,,,Version 0.10.2,\u00b6,,(bugfix release, release date to be announced),,,Fixed broken,test_appcontext_signals(),test case.,,Raise an,AttributeError,in,flask.helpers.find_package(),with a\nuseful message explaining why it is raised when a PEP 302 import hook is used\nwithout an,is_package(),method.,,Fixed an issue causing exceptions raised before entering a request or app\ncontext to be passed to teardown handlers.,,Fixed an issue with query parameters getting removed from requests in\nthe test client when absolute URLs were requested.,,Made,@before_first_request,into a decorator as intended.,,Fixed an etags bug when sending a file streams with a name.,,Fixed,send_from_directory,not expanding to the application root path\ncorrectly.,,Changed logic of before first request handlers to flip the flag after\ninvoking.  This will allow some uses that are potentially dangerous but\nshould probably be permitted.,,Fixed Python 3 bug when a handler from,app.url_build_error_handlers,reraises the,BuildError,.,,,,,Version 0.10.1,\u00b6,,(bugfix release, released on June 14th 2013),,,Fixed an issue where,|tojson,was not quoting single quotes which\nmade the filter not work properly in HTML attributes.  Now it\u2019s\npossible to use that filter in single quoted attributes.  This should\nmake using that filter with angular.js easier.,,Added support for byte strings back to the session system.  This broke\ncompatibility with the common case of people putting binary data for\ntoken verification into the session.,,Fixed an issue where registering the same method twice for the same endpoint\nwould trigger an exception incorrectly.,,,,,Version 0.10,\u00b6,,Released on June 13th 2013, codename Limoncello.,,,Changed default cookie serialization format from pickle to JSON to\nlimit the impact an attacker can do if the secret key leaks.  See,Version 0.10,for more information.,,Added,template_test,methods in addition to the already existing,template_filter,method family.,,Added,template_global,methods in addition to the already existing,template_filter,method family.,,Set the content-length header for x-sendfile.,,tojson,filter now does not escape script blocks in HTML5 parsers.,,tojson,used in templates is now safe by default due.  This was\nallowed due to the different escaping behavior.,,Flask will now raise an error if you attempt to register a new function\non an already used endpoint.,,Added wrapper module around simplejson and added default serialization\nof datetime objects.  This allows much easier customization of how\nJSON is handled by Flask or any Flask extension.,,Removed deprecated internal,flask.session,module alias.  Use,flask.sessions,instead to get the session module.  This is not to\nbe confused with,flask.session,the session proxy.,,Templates can now be rendered without request context.  The behavior is\nslightly different as the,request,,,session,and,g,objects\nwill not be available and blueprint\u2019s context processors are not\ncalled.,,The config object is now available to the template as a real global and\nnot through a context processor which makes it available even in imported\ntemplates by default.,,Added an option to generate non-ascii encoded JSON which should result\nin less bytes being transmitted over the network.  It\u2019s disabled by\ndefault to not cause confusion with existing libraries that might expect,flask.json.dumps,to return bytestrings by default.,,flask.g,is now stored on the app context instead of the request\ncontext.,,flask.g,now gained a,get(),method for not erroring out on non\nexisting items.,,flask.g,now can be used with the,in,operator to see what\u2019s defined\nand it now is iterable and will yield all attributes stored.,,flask.Flask.request_globals_class,got renamed to,flask.Flask.app_ctx_globals_class,which is a better name to what it\ndoes since 0.10.,,request,,,session,and,g,are now also added as proxies to the template\ncontext which makes them available in imported templates.  One has to be\nvery careful with those though because usage outside of macros might\ncause caching.,,Flask will no longer invoke the wrong error handlers if a proxy\nexception is passed through.,,Added a workaround for chrome\u2019s cookies in localhost not working\nas intended with domain names.,,Changed logic for picking defaults for cookie values from sessions\nto work better with Google Chrome.,,Added,message_flashed,signal that simplifies flashing testing.,,Added support for copying of request contexts for better working with\ngreenlets.,,Removed custom JSON HTTP exception subclasses.  If you were relying on them\nyou can reintroduce them again yourself trivially.  Using them however is\nstrongly discouraged as the interface was flawed.,,Python requirements changed: requiring Python 2.6 or 2.7 now to prepare\nfor Python 3.3 port.,,Changed how the teardown system is informed about exceptions.  This is now\nmore reliable in case something handles an exception halfway through\nthe error handling process.,,Request context preservation in debug mode now keeps the exception\ninformation around which means that teardown handlers are able to\ndistinguish error from success cases.,,Added the,JSONIFY_PRETTYPRINT_REGULAR,configuration variable.,,Flask now orders JSON keys by default to not trash HTTP caches due to\ndifferent hash seeds between different workers.,,Added,appcontext_pushed,and,appcontext_popped,signals.,,The builtin run method now takes the,SERVER_NAME,into account when\npicking the default port to run on.,,Added,flask.request.get_json(),as a replacement for the old,flask.request.json,property.,,,,,Version 0.9,\u00b6,,Released on July 1st 2012, codename Campari.,,,The,flask.Request.on_json_loading_failed(),now returns a JSON formatted\nresponse by default.,,The,flask.url_for(),function now can generate anchors to the\ngenerated links.,,The,flask.url_for(),function now can also explicitly generate\nURL rules specific to a given HTTP method.,,Logger now only returns the debug log setting if it was not set\nexplicitly.,,Unregister a circular dependency between the WSGI environment and\nthe request object when shutting down the request.  This means that\nenviron,werkzeug.request,will be,None,after the response was\nreturned to the WSGI server but has the advantage that the garbage\ncollector is not needed on CPython to tear down the request unless\nthe user created circular dependencies themselves.,,Session is now stored after callbacks so that if the session payload\nis stored in the session you can still modify it in an after\nrequest callback.,,The,flask.Flask,class will avoid importing the provided import name\nif it can (the required first parameter), to benefit tools which build Flask\ninstances programmatically.  The Flask class will fall back to using import\non systems with custom module hooks, e.g. Google App Engine, or when the\nimport name is inside a zip archive (usually a .egg) prior to Python 2.7.,,Blueprints now have a decorator to add custom template filters application\nwide,,flask.Blueprint.app_template_filter(),.,,The Flask and Blueprint classes now have a non-decorator method for adding\ncustom template filters application wide,,flask.Flask.add_template_filter(),and,flask.Blueprint.add_app_template_filter(),.,,The,flask.get_flashed_messages(),function now allows rendering flashed\nmessage categories in separate blocks, through a,category_filter,argument.,,The,flask.Flask.run(),method now accepts,None,for,host,and,port,arguments, using default values when,None,.  This allows for calling run\nusing configuration values, e.g.,app.run(app.config.get('MYHOST'),,,app.config.get('MYPORT')),, with proper behavior whether or not a config\nfile is provided.,,The,flask.render_template(),method now accepts a either an iterable of\ntemplate names or a single template name.  Previously, it only accepted a\nsingle template name.  On an iterable, the first template found is rendered.,,Added,flask.Flask.app_context(),which works very similar to the\nrequest context but only provides access to the current application.  This\nalso adds support for URL generation without an active request context.,,View functions can now return a tuple with the first instance being an\ninstance of,flask.Response,.  This allows for returning,jsonify(error=\"error,,msg\"),,,400,from a view function.,,Flask,and,Blueprint,now provide a,get_send_file_max_age(),hook for subclasses to override\nbehavior of serving static files from Flask when using,flask.Flask.send_static_file(),(used for the default static file\nhandler) and,send_file(),.  This hook is provided a\nfilename, which for example allows changing cache controls by file extension.\nThe default max-age for,send_file,and static files can be configured\nthrough a new,SEND_FILE_MAX_AGE_DEFAULT,configuration variable, which is\nused in the default,get_send_file_max_age,implementation.,,Fixed an assumption in sessions implementation which could break message\nflashing on sessions implementations which use external storage.,,Changed the behavior of tuple return values from functions.  They are no\nlonger arguments to the response object, they now have a defined meaning.,,Added,flask.Flask.request_globals_class,to allow a specific class to\nbe used on creation of the,g,instance of each request.,,Added,required_methods,attribute to view functions to force-add methods\non registration.,,Added,flask.after_this_request(),.,,Added,flask.stream_with_context(),and the ability to push contexts\nmultiple times without producing unexpected behavior.,,,,,Version 0.8.1,\u00b6,,Bugfix release, released on July 1st 2012,,,Fixed an issue with the undocumented,flask.session,module to not\nwork properly on Python 2.5.  It should not be used but did cause\nsome problems for package managers.,,,,,Version 0.8,\u00b6,,Released on September 29th 2011, codename Rakija,,,Refactored session support into a session interface so that\nthe implementation of the sessions can be changed without\nhaving to override the Flask class.,,Empty session cookies are now deleted properly automatically.,,View functions can now opt out of getting the automatic\nOPTIONS implementation.,,HTTP exceptions and Bad Request errors can now be trapped so that they\nshow up normally in the traceback.,,Flask in debug mode is now detecting some common problems and tries to\nwarn you about them.,,Flask in debug mode will now complain with an assertion error if a view\nwas attached after the first request was handled.  This gives earlier\nfeedback when users forget to import view code ahead of time.,,Added the ability to register callbacks that are only triggered once at\nthe beginning of the first request. (,Flask.before_first_request(),),,Malformed JSON data will now trigger a bad request HTTP exception instead\nof a value error which usually would result in a 500 internal server\nerror if not handled.  This is a backwards incompatible change.,,Applications now not only have a root path where the resources and modules\nare located but also an instance path which is the designated place to\ndrop files that are modified at runtime (uploads etc.).  Also this is\nconceptually only instance depending and outside version control so it\u2019s\nthe perfect place to put configuration files etc.  For more information\nsee,Instance Folders,.,,Added the,APPLICATION_ROOT,configuration variable.,,Implemented,session_transaction(),to\neasily modify sessions from the test environment.,,Refactored test client internally.  The,APPLICATION_ROOT,configuration\nvariable as well as,SERVER_NAME,are now properly used by the test client\nas defaults.,,Added,flask.views.View.decorators,to support simpler decorating of\npluggable (class-based) views.,,Fixed an issue where the test client if used with the \u201cwith\u201d statement did not\ntrigger the execution of the teardown handlers.,,Added finer control over the session cookie parameters.,,HEAD requests to a method view now automatically dispatch to the,get,method if no handler was implemented.,,Implemented the virtual,flask.ext,package to import extensions from.,,The context preservation on exceptions is now an integral component of\nFlask itself and no longer of the test client.  This cleaned up some\ninternal logic and lowers the odds of runaway request contexts in unittests.,,,,,Version 0.7.3,\u00b6,,Bugfix release, release date to be decided,,,Fixed the Jinja2 environment\u2019s list_templates method not returning the\ncorrect names when blueprints or modules were involved.,,,,,Version 0.7.2,\u00b6,,Bugfix release, released on July 6th 2011,,,Fixed an issue with URL processors not properly working on\nblueprints.,,,,,Version 0.7.1,\u00b6,,Bugfix release, released on June 29th 2011,,,Added missing future import that broke 2.5 compatibility.,,Fixed an infinite redirect issue with blueprints.,,,,,Version 0.7,\u00b6,,Released on June 28th 2011, codename Grappa,,,Added,make_default_options_response(),which can be used by subclasses to alter the default\nbehavior for,OPTIONS,responses.,,Unbound locals now raise a proper,RuntimeError,instead\nof an,AttributeError,.,,Mimetype guessing and etag support based on file objects is now\ndeprecated for,flask.send_file(),because it was unreliable.\nPass filenames instead or attach your own etags and provide a\nproper mimetype by hand.,,Static file handling for modules now requires the name of the\nstatic folder to be supplied explicitly.  The previous autodetection\nwas not reliable and caused issues on Google\u2019s App Engine.  Until\n1.0 the old behavior will continue to work but issue dependency\nwarnings.,,fixed a problem for Flask to run on jython.,,added a,PROPAGATE_EXCEPTIONS,configuration variable that can be\nused to flip the setting of exception propagation which previously\nwas linked to,DEBUG,alone and is now linked to either,DEBUG,or,TESTING,.,,Flask no longer internally depends on rules being added through the,add_url_rule,function and can now also accept regular werkzeug\nrules added to the url map.,,Added an,endpoint,method to the flask application object which\nallows one to register a callback to an arbitrary endpoint with\na decorator.,,Use Last-Modified for static file sending instead of Date which\nwas incorrectly introduced in 0.6.,,Added,create_jinja_loader,to override the loader creation process.,,Implemented a silent flag for,config.from_pyfile,.,,Added,teardown_request,decorator, for functions that should run at the end\nof a request regardless of whether an exception occurred.  Also the behavior\nfor,after_request,was changed.  It\u2019s now no longer executed when an exception\nis raised.  See,Upgrading to new Teardown Handling,,Implemented,flask.has_request_context(),,Deprecated,init_jinja_globals,.  Override the,create_jinja_environment(),method instead to\nachieve the same functionality.,,Added,flask.safe_join(),,The automatic JSON request data unpacking now looks at the charset\nmimetype parameter.,,Don\u2019t modify the session on,flask.get_flashed_messages(),if there\nare no messages in the session.,,before_request,handlers are now able to abort requests with errors.,,it is not possible to define user exception handlers.  That way you can\nprovide custom error messages from a central hub for certain errors that\nmight occur during request processing (for instance database connection\nerrors, timeouts from remote resources etc.).,,Blueprints can provide blueprint specific error handlers.,,Implemented generic,Pluggable Views,(class-based views).,,,,,Version 0.6.1,\u00b6,,Bugfix release, released on December 31st 2010,,,Fixed an issue where the default,OPTIONS,response was\nnot exposing all valid methods in the,Allow,header.,,Jinja2 template loading syntax now allows \u201c./\u201d in front of\na template load path.  Previously this caused issues with\nmodule setups.,,Fixed an issue where the subdomain setting for modules was\nignored for the static folder.,,Fixed a security problem that allowed clients to download arbitrary files\nif the host server was a windows based operating system and the client\nuses backslashes to escape the directory the files where exposed from.,,,,,Version 0.6,\u00b6,,Released on July 27th 2010, codename Whisky,,,after request functions are now called in reverse order of\nregistration.,,OPTIONS is now automatically implemented by Flask unless the\napplication explicitly adds \u2018OPTIONS\u2019 as method to the URL rule.\nIn this case no automatic OPTIONS handling kicks in.,,static rules are now even in place if there is no static folder\nfor the module.  This was implemented to aid GAE which will\nremove the static folder if it\u2019s part of a mapping in the .yml\nfile.,,the,config,is now available in the templates\nas,config,.,,context processors will no longer override values passed directly\nto the render function.,,added the ability to limit the incoming request data with the\nnew,MAX_CONTENT_LENGTH,configuration value.,,the endpoint for the,flask.Module.add_url_rule(),method\nis now optional to be consistent with the function of the\nsame name on the application object.,,added a,flask.make_response(),function that simplifies\ncreating response object instances in views.,,added signalling support based on blinker.  This feature is currently\noptional and supposed to be used by extensions and applications.  If\nyou want to use it, make sure to have,blinker,installed.,,refactored the way URL adapters are created.  This process is now\nfully customizable with the,create_url_adapter(),method.,,modules can now register for a subdomain instead of just an URL\nprefix.  This makes it possible to bind a whole module to a\nconfigurable subdomain.,,,,,Version 0.5.2,\u00b6,,Bugfix Release, released on July 15th 2010,,,fixed another issue with loading templates from directories when\nmodules were used.,,,,,Version 0.5.1,\u00b6,,Bugfix Release, released on July 6th 2010,,,fixes an issue with template loading from directories when modules\nwhere used.,,,,,Version 0.5,\u00b6,,Released on July 6th 2010, codename Calvados,,,fixed a bug with subdomains that was caused by the inability to\nspecify the server name.  The server name can now be set with\nthe,SERVER_NAME,config key.  This key is now also used to set\nthe session cookie cross-subdomain wide.,,autoescaping is no longer active for all templates.  Instead it\nis only active for,.html,,,.htm,,,.xml,and,.xhtml,.\nInside templates this behavior can be changed with the,autoescape,tag.,,refactored Flask internally.  It now consists of more than a\nsingle file.,,flask.send_file(),now emits etags and has the ability to\ndo conditional responses builtin.,,(temporarily) dropped support for zipped applications.  This was a\nrarely used feature and led to some confusing behavior.,,added support for per-package template and static-file directories.,,removed support for,create_jinja_loader,which is no longer used\nin 0.5 due to the improved module support.,,added a helper function to expose files from any directory.,,,,,Version 0.4,\u00b6,,Released on June 18th 2010, codename Rakia,,,added the ability to register application wide error handlers\nfrom modules.,,after_request(),handlers are now also invoked\nif the request dies with an exception and an error handling page\nkicks in.,,test client has the ability to preserve the request context\nfor a little longer.  This can also be used to trigger custom\nrequests that do not pop the request stack for testing.,,because the Python standard library caches loggers, the name of\nthe logger is configurable now to better support unittests.,,added,TESTING,switch that can activate unittesting helpers.,,the logger switches to,DEBUG,mode now if debug is enabled.,,,,,Version 0.3.1,\u00b6,,Bugfix release, released on May 28th 2010,,,fixed a error reporting bug with,flask.Config.from_envvar(),,removed some unused code from flask,,release does no longer include development leftover files (.git\nfolder for themes, built documentation in zip and pdf file and\nsome .pyc files),,,,,Version 0.3,\u00b6,,Released on May 28th 2010, codename Schnaps,,,added support for categories for flashed messages.,,the application now configures a,logging.Handler,and will\nlog request handling exceptions to that logger when not in debug\nmode.  This makes it possible to receive mails on server errors\nfor example.,,added support for context binding that does not require the use of\nthe with statement for playing in the console.,,the request context is now available within the with statement making\nit possible to further push the request context or pop it.,,added support for configurations.,,,,,Version 0.2,\u00b6,,Released on May 12th 2010, codename J\u00e4germeister,,,various bugfixes,,integrated JSON support,,added,get_template_attribute(),helper function.,,add_url_rule(),can now also register a\nview function.,,refactored internal request dispatching.,,server listens on 127.0.0.1 by default now to fix issues with chrome.,,added external URL support.,,added support for,send_file(),,module support and internal request handling refactoring\nto better support pluggable applications.,,sessions can be set to be permanent now on a per-session basis.,,better error reporting on missing secret keys.,,added support for Google Appengine.,,,,,Version 0.1,\u00b6,,First public preview release.,,,,,,,,,,,,,Contents,,,Flask Changelog,,Version 1.1,,Version 1.0.3,,Version 1.0.2,,Version 1.0.1,,Version 1.0,,Version 0.12.4,,Version 0.12.3,,Version 0.12.2,,Version 0.12.1,,Version 0.12,,Version 0.11.2,,Version 0.11.1,,Version 0.11,,Version 0.10.2,,Version 0.10.1,,Version 0.10,,Version 0.9,,Version 0.8.1,,Version 0.8,,Version 0.7.3,,Version 0.7.2,,Version 0.7.1,,Version 0.7,,Version 0.6.1,,Version 0.6,,Version 0.5.2,,Version 0.5.1,,Version 0.5,,Version 0.4,,Version 0.3.1,,Version 0.3,,Version 0.2,,Version 0.1,,,,,Navigation,,,Overview,,,Previous:,Upgrading to Newer Releases,,Next:,License,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Installation", "url": "http://flask.pocoo.org/docs/1.0/installation/", "content": ",,,,,Installation \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,,,,,,,,Installation,\u00b6,,,Python Version,\u00b6,,We recommend using the latest version of Python 3. Flask supports Python 3.4\nand newer, Python 2.7, and PyPy.,,,,Dependencies,\u00b6,,These distributions will be installed automatically when installing Flask.,,,Werkzeug,implements WSGI, the standard Python interface between\napplications and servers.,,Jinja,is a template language that renders the pages your application\nserves.,,MarkupSafe,comes with Jinja. It escapes untrusted input when rendering\ntemplates to avoid injection attacks.,,ItsDangerous,securely signs data to ensure its integrity. This is used\nto protect Flask\u2019s session cookie.,,Click,is a framework for writing command line applications. It provides\nthe,flask,command and allows adding custom management commands.,,,,Optional dependencies,\u00b6,,These distributions will not be installed automatically. Flask will detect and\nuse them if you install them.,,,Blinker,provides support for,Signals,.,,SimpleJSON,is a fast JSON implementation that is compatible with\nPython\u2019s,json,module. It is preferred for JSON operations if it is\ninstalled.,,python-dotenv,enables support for,Environment Variables From dotenv,when running,flask,commands.,,Watchdog,provides a faster, more efficient reloader for the development\nserver.,,,,,,Virtual environments,\u00b6,,Use a virtual environment to manage the dependencies for your project, both in\ndevelopment and in production.,,What problem does a virtual environment solve? The more Python projects you\nhave, the more likely it is that you need to work with different versions of\nPython libraries, or even Python itself. Newer versions of libraries for one\nproject can break compatibility in another project.,,Virtual environments are independent groups of Python libraries, one for each\nproject. Packages installed for one project will not affect other projects or\nthe operating system\u2019s packages.,,Python 3 comes bundled with the,venv,module to create virtual\nenvironments. If you\u2019re using a modern version of Python, you can continue on\nto the next section.,,If you\u2019re using Python 2, see,Install virtualenv,first.,,,Create an environment,\u00b6,,Create a project folder and a,venv,folder within:,,mkdir myproject,cd,myproject\npython3 -m venv venv,,,On Windows:,,py -3 -m venv venv,,,If you needed to install virtualenv because you are on an older version of\nPython, use the following command instead:,,virtualenv venv,,,On Windows:,,\\Python27\\Scripts\\virtualenv.exe venv,,,,,Activate the environment,\u00b6,,Before you work on your project, activate the corresponding environment:,,. venv/bin/activate,,,On Windows:,,venv\\Scripts\\activate,,,Your shell prompt will change to show the name of the activated environment.,,,,,Install Flask,\u00b6,,Within the activated environment, use the following command to install Flask:,,pip install Flask,,,Flask is now installed. Check out the,Quickstart,or go to the,Documentation Overview,.,,,Living on the edge,\u00b6,,If you want to work with the latest Flask code before it\u2019s released, install or\nupdate the code from the master branch:,,pip install -U https://github.com/pallets/flask/archive/master.tar.gz,,,,,,Install virtualenv,\u00b6,,If you are using Python 2, the venv module is not available. Instead,\ninstall,virtualenv,.,,On Linux, virtualenv is provided by your package manager:,,# Debian, Ubuntu,sudo apt-get install python-virtualenv,# CentOS, Fedora,sudo yum install python-virtualenv,# Arch,sudo pacman -S python-virtualenv,,,If you are on Mac OS X or Windows, download,get-pip.py,, then:,,sudo python2 Downloads/get-pip.py\nsudo python2 -m pip install virtualenv,,,On Windows, as an administrator:,,\\Python27\\python.exe Downloads\\get-pip.py\n\\Python27\\python.exe -m pip install virtualenv,,,Now you can return above and,Create an environment,.,,,,,,,,,,,,,Contents,,,Installation,,Python Version,,Dependencies,,Optional dependencies,,,,Virtual environments,,Create an environment,,Activate the environment,,,,Install Flask,,Living on the edge,,,,Install virtualenv,,,,,Navigation,,,Overview,,,Previous:,Foreword for Experienced Programmers,,Next:,Quickstart,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Foreword", "url": "http://flask.pocoo.org/docs/1.0/foreword/", "content": ",,,,,Foreword \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,,,,,,,,Foreword,\u00b6,,Read this before you get started with Flask.  This hopefully answers some\nquestions about the purpose and goals of the project, and when you\nshould or should not be using it.,,,What does \u201cmicro\u201d mean?,\u00b6,,\u201cMicro\u201d does not mean that your whole web application has to fit into a single\nPython file (although it certainly can), nor does it mean that Flask is lacking\nin functionality. The \u201cmicro\u201d in microframework means Flask aims to keep the\ncore simple but extensible. Flask won\u2019t make many decisions for you, such as\nwhat database to use. Those decisions that it does make, such as what\ntemplating engine to use, are easy to change.  Everything else is up to you, so\nthat Flask can be everything you need and nothing you don\u2019t.,,By default, Flask does not include a database abstraction layer, form\nvalidation or anything else where different libraries already exist that can\nhandle that. Instead, Flask supports extensions to add such functionality to\nyour application as if it was implemented in Flask itself. Numerous extensions\nprovide database integration, form validation, upload handling, various open\nauthentication technologies, and more. Flask may be \u201cmicro\u201d, but it\u2019s ready for\nproduction use on a variety of needs.,,,,Configuration and Conventions,\u00b6,,Flask has many configuration values, with sensible defaults, and a few\nconventions when getting started.  By convention, templates and static files are\nstored in subdirectories within the application\u2019s Python source tree, with the\nnames,templates,and,static,respectively. While this can be changed, you\nusually don\u2019t have to, especially when getting started.,,,,Growing with Flask,\u00b6,,Once you have Flask up and running, you\u2019ll find a variety of extensions\navailable in the community to integrate your project for production. The Flask\ncore team reviews extensions and ensures approved extensions do not break with\nfuture releases.,,As your codebase grows, you are free to make the design decisions appropriate\nfor your project.  Flask will continue to provide a very simple glue layer to\nthe best that Python has to offer.  You can implement advanced patterns in\nSQLAlchemy or another database tool, introduce non-relational data persistence\nas appropriate, and take advantage of framework-agnostic tools built for WSGI,\nthe Python web interface.,,Flask includes many hooks to customize its behavior. Should you need more\ncustomization, the Flask class is built for subclassing. If you are interested\nin that, check out the,Becoming Big,chapter.  If you are curious about\nthe Flask design principles, head over to the section about,Design Decisions in Flask,.,,Continue to,Installation,, the,Quickstart,, or the,Foreword for Experienced Programmers,.,,,,,,,,,,,,,Contents,,,Foreword,,What does \u201cmicro\u201d mean?,,Configuration and Conventions,,Growing with Flask,,,,,Navigation,,,Overview,,,Previous:,Welcome to Flask,,Next:,Foreword for Experienced Programmers,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "API", "url": "http://flask.pocoo.org/docs/1.0/api/", "content": ",,,,,API \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,,,,,,,,API,\u00b6,,This part of the documentation covers all the interfaces of Flask.  For\nparts where Flask depends on external libraries, we document the most\nimportant right here and provide links to the canonical documentation.,,,Application Object,\u00b6,,,,class,flask.,Flask,(,import_name,,,static_url_path=None,,,static_folder='static',,,static_host=None,,,host_matching=False,,,subdomain_matching=False,,,template_folder='templates',,,instance_path=None,,,instance_relative_config=False,,,root_path=None,),\u00b6,,The flask object implements a WSGI application and acts as the central\nobject.  It is passed the name of the module or package of the\napplication.  Once it is created it will act as a central registry for\nthe view functions, the URL rules, template configuration and much more.,,The name of the package is used to resolve resources from inside the\npackage or the folder the module is contained in depending on if the\npackage parameter resolves to an actual python package (a folder with\nan,__init__.py,file inside) or a standard module (just a,.py,file).,,For more information about resource loading, see,open_resource(),.,,Usually you create a,Flask,instance in your main module or\nin the,__init__.py,file of your package like this:,,from,,flask,,import,,Flask,,app,,=,,Flask,(,__name__,),,,,,About the First Parameter,,The idea of the first parameter is to give Flask an idea of what\nbelongs to your application.  This name is used to find resources\non the filesystem, can be used by extensions to improve debugging\ninformation and a lot more.,,So it\u2019s important what you provide there.  If you are using a single\nmodule,,__name__,is always the correct value.  If you however are\nusing a package, it\u2019s usually recommended to hardcode the name of\nyour package there.,,For example if your application is defined in,yourapplication/app.py,you should create it with one of the two versions below:,,app,,=,,Flask,(,'yourapplication',),,app,,=,,Flask,(,__name__,.,split,(,'.',)[,0,]),,,,Why is that?  The application will work even with,__name__,, thanks\nto how resources are looked up.  However it will make debugging more\npainful.  Certain extensions can make assumptions based on the\nimport name of your application.  For example the Flask-SQLAlchemy\nextension will look for the code in your application that triggered\nan SQL query in debug mode.  If the import name is not properly set\nup, that debugging information is lost.  (For example it would only\npick up SQL queries in,yourapplication.app,and not,yourapplication.views.frontend,),,,,New in version 1.0:,The,host_matching,and,static_host,parameters were added.,,,,New in version 1.0:,The,subdomain_matching,parameter was added. Subdomain\nmatching needs to be enabled manually now. Setting,SERVER_NAME,does not implicitly enable it.,,,,Changelog,,New in version 0.11:,The,root_path,parameter was added.,,,,New in version 0.8:,The,instance_path,and,instance_relative_config,parameters were\nadded.,,,,New in version 0.7:,The,static_url_path,,,static_folder,, and,template_folder,parameters were added.,,,,,,,Parameters:,,import_name,\u2013 the name of the application package,,static_url_path,\u2013 can be used to specify a different path for the\nstatic files on the web.  Defaults to the name\nof the,static_folder,folder.,,static_folder,\u2013 the folder with static files that should be served\nat,static_url_path,.  Defaults to the,'static',folder in the root path of the application.,,static_host,\u2013 the host to use when adding the static route.\nDefaults to None. Required when using,host_matching=True,with a,static_folder,configured.,,host_matching,\u2013 set,url_map.host_matching,attribute.\nDefaults to False.,,subdomain_matching,\u2013 consider the subdomain relative to,SERVER_NAME,when matching routes. Defaults to False.,,template_folder,\u2013 the folder that contains the templates that should\nbe used by the application.  Defaults to,'templates',folder in the root path of the\napplication.,,instance_path,\u2013 An alternative instance path for the application.\nBy default the folder,'instance',next to the\npackage or module is assumed to be the instance\npath.,,instance_relative_config,\u2013 if set to,True,relative filenames\nfor loading the config are assumed to\nbe relative to the instance path instead\nof the application root.,,root_path,\u2013 Flask by default will automatically calculate the path\nto the root of the application.  In certain situations\nthis cannot be achieved (for instance if the package\nis a Python 3 namespace package) and needs to be\nmanually defined.,,,,,,,,,add_template_filter,(,f,,,name=None,),\u00b6,,Register a custom template filter.  Works exactly like the,template_filter(),decorator.,,,,,,Parameters:,name,\u2013 the optional name of the filter, otherwise the\nfunction name will be used.,,,,,,,,add_template_global,(,f,,,name=None,),\u00b6,,Register a custom template global function. Works exactly like the,template_global(),decorator.,,,Changelog,,New in version 0.10.,,,,,,,Parameters:,name,\u2013 the optional name of the global function, otherwise the\nfunction name will be used.,,,,,,,,add_template_test,(,f,,,name=None,),\u00b6,,Register a custom template test.  Works exactly like the,template_test(),decorator.,,,Changelog,,New in version 0.10.,,,,,,,Parameters:,name,\u2013 the optional name of the test, otherwise the\nfunction name will be used.,,,,,,,,add_url_rule,(,rule,,,endpoint=None,,,view_func=None,,,provide_automatic_options=None,,,**options,),\u00b6,,Connects a URL rule.  Works exactly like the,route(),decorator.  If a view_func is provided it will be registered with the\nendpoint.,,Basically this example:,,@app,.,route,(,'/',),,def,,index,():,,pass,,,,Is equivalent to the following:,,def,,index,():,,pass,,app,.,add_url_rule,(,'/',,,,'index',,,,index,),,,,If the view_func is not provided you will need to connect the endpoint\nto a view function like so:,,app,.,view_functions,[,'index',],,=,,index,,,,Internally,route(),invokes,add_url_rule(),so if you want\nto customize the behavior via subclassing you only need to change\nthis method.,,For more information refer to,URL Route Registrations,.,,,Changelog,,Changed in version 0.6:,OPTIONS,is added automatically as method.,,,,Changed in version 0.2:,view_func,parameter added.,,,,,,,Parameters:,,rule,\u2013 the URL rule as string,,endpoint,\u2013 the endpoint for the registered URL rule.  Flask\nitself assumes the name of the view function as\nendpoint,,view_func,\u2013 the function to call when serving a request to the\nprovided endpoint,,provide_automatic_options,\u2013 controls whether the,OPTIONS,method should be added automatically. This can also be controlled\nby setting the,view_func.provide_automatic_options,,=,,False,before adding the rule.,,options,\u2013 the options to be forwarded to the underlying,Rule,object.  A change\nto Werkzeug is handling of method options.  methods\nis a list of methods this rule should be limited\nto (,GET,,,POST,etc.).  By default a rule\njust listens for,GET,(and implicitly,HEAD,).\nStarting with Flask 0.6,,OPTIONS,is implicitly\nadded and handled by the standard request handling.,,,,,,,,,,after_request,(,f,),\u00b6,,Register a function to be run after each request.,,Your function must take one parameter, an instance of,response_class,and return a new response object or the\nsame (see,process_response(),).,,As of Flask 0.7 this function might not be executed at the end of the\nrequest in case an unhandled exception occurred.,,,,,after_request_funcs,= None,\u00b6,,A dictionary with lists of functions that should be called after\neach request.  The key of the dictionary is the name of the blueprint\nthis function is active for,,None,for all requests.  This can for\nexample be used to close database connections. To register a function\nhere, use the,after_request(),decorator.,,,,,app_context,(,),\u00b6,,Create an,AppContext,. Use as a,with,block to push the context, which will make,current_app,point at this application.,,An application context is automatically pushed by,RequestContext.push(),when handling a request, and when running a CLI command. Use\nthis to manually create a context outside of these situations.,,with,,app,.,app_context,():,,init_db,(),,,,See,The Application Context,.,,,Changelog,,New in version 0.9.,,,,,,app_ctx_globals_class,\u00b6,,alias of,flask.ctx._AppCtxGlobals,,,,,auto_find_instance_path,(,),\u00b6,,Tries to locate the instance path if it was not provided to the\nconstructor of the application class.  It will basically calculate\nthe path to a folder named,instance,next to your main file or\nthe package.,,,Changelog,,New in version 0.8.,,,,,,before_first_request,(,f,),\u00b6,,Registers a function to be run before the first request to this\ninstance of the application.,,The function will be called without any arguments and its return\nvalue is ignored.,,,Changelog,,New in version 0.8.,,,,,,before_first_request_funcs,= None,\u00b6,,A list of functions that will be called at the beginning of the\nfirst request to this instance. To register a function, use the,before_first_request(),decorator.,,,Changelog,,New in version 0.8.,,,,,,before_request,(,f,),\u00b6,,Registers a function to run before each request.,,For example, this can be used to open a database connection, or to load\nthe logged in user from the session.,,The function will be called without any arguments. If it returns a\nnon-None value, the value is handled as if it was the return value from\nthe view, and further request handling is stopped.,,,,,before_request_funcs,= None,\u00b6,,A dictionary with lists of functions that will be called at the\nbeginning of each request. The key of the dictionary is the name of\nthe blueprint this function is active for, or,None,for all\nrequests. To register a function, use the,before_request(),decorator.,,,,,blueprints,= None,\u00b6,,all the attached blueprints in a dictionary by name.  Blueprints\ncan be attached multiple times so this dictionary does not tell\nyou how often they got attached.,,,Changelog,,New in version 0.7.,,,,,,cli,= None,\u00b6,,The click command line context for this application.  Commands\nregistered here show up in the,flask,command once the\napplication has been discovered.  The default commands are\nprovided by Flask itself and can be overridden.,,This is an instance of a,click.Group,object.,,,,,config,= None,\u00b6,,The configuration dictionary as,Config,.  This behaves\nexactly like a regular dictionary but supports additional methods\nto load a config from files.,,,,,config_class,\u00b6,,alias of,flask.config.Config,,,,,context_processor,(,f,),\u00b6,,Registers a template context processor function.,,,,,create_global_jinja_loader,(,),\u00b6,,Creates the loader for the Jinja2 environment.  Can be used to\noverride just the loader and keeping the rest unchanged.  It\u2019s\ndiscouraged to override this function.  Instead one should override\nthe,jinja_loader(),function instead.,,The global loader dispatches between the loaders of the application\nand the individual blueprints.,,,Changelog,,New in version 0.7.,,,,,,create_jinja_environment,(,),\u00b6,,Creates the Jinja2 environment based on,jinja_options,and,select_jinja_autoescape(),.  Since 0.7 this also adds\nthe Jinja2 globals and filters after initialization.  Override\nthis function to customize the behavior.,,,Changelog,,Changed in version 0.11:,Environment.auto_reload,set in accordance with,TEMPLATES_AUTO_RELOAD,configuration option.,,,,New in version 0.5.,,,,,,create_url_adapter,(,request,),\u00b6,,Creates a URL adapter for the given request. The URL adapter\nis created at a point where the request context is not yet set\nup so the request is passed explicitly.,,,Changed in version 1.0:,SERVER_NAME,no longer implicitly enables subdomain\nmatching. Use,subdomain_matching,instead.,,,,Changelog,,Changed in version 0.9:,This can now also be called without a request object when the\nURL adapter is created for the application context.,,,,New in version 0.6.,,,,,,debug,\u00b6,,Whether debug mode is enabled. When using,flask,,run,to start\nthe development server, an interactive debugger will be shown for\nunhandled exceptions, and the server will be reloaded when code\nchanges. This maps to the,DEBUG,config key. This is\nenabled when,env,is,'development',and is overridden\nby the,FLASK_DEBUG,environment variable. It may not behave as\nexpected if set in code.,,Do not enable debug mode when deploying in production.,,Default:,True,if,env,is,'development',, or,False,otherwise.,,,,,default_config,= {'APPLICATION_ROOT': '/', 'DEBUG': None, 'ENV': None, 'EXPLAIN_TEMPLATE_LOADING': False, 'JSONIFY_MIMETYPE': 'application/json', 'JSONIFY_PRETTYPRINT_REGULAR': False, 'JSON_AS_ASCII': True, 'JSON_SORT_KEYS': True, 'MAX_CONTENT_LENGTH': None, 'MAX_COOKIE_SIZE': 4093, 'PERMANENT_SESSION_LIFETIME': datetime.timedelta(31), 'PREFERRED_URL_SCHEME': 'http', 'PRESERVE_CONTEXT_ON_EXCEPTION': None, 'PROPAGATE_EXCEPTIONS': None, 'SECRET_KEY': None, 'SEND_FILE_MAX_AGE_DEFAULT': datetime.timedelta(0, 43200), 'SERVER_NAME': None, 'SESSION_COOKIE_DOMAIN': None, 'SESSION_COOKIE_HTTPONLY': True, 'SESSION_COOKIE_NAME': 'session', 'SESSION_COOKIE_PATH': None, 'SESSION_COOKIE_SAMESITE': None, 'SESSION_COOKIE_SECURE': False, 'SESSION_REFRESH_EACH_REQUEST': True, 'TEMPLATES_AUTO_RELOAD': None, 'TESTING': False, 'TRAP_BAD_REQUEST_ERRORS': None, 'TRAP_HTTP_EXCEPTIONS': False, 'USE_X_SENDFILE': False},\u00b6,,Default configuration parameters.,,,,,dispatch_request,(,),\u00b6,,Does the request dispatching.  Matches the URL and returns the\nreturn value of the view or error handler.  This does not have to\nbe a response object.  In order to convert the return value to a\nproper response object, call,make_response(),.,,,Changelog,,Changed in version 0.7:,This no longer does the exception handling, this code was\nmoved to the new,full_dispatch_request(),.,,,,,,do_teardown_appcontext,(,exc=<object object>,),\u00b6,,Called right before the application context is popped.,,When handling a request, the application context is popped\nafter the request context. See,do_teardown_request(),.,,This calls all functions decorated with,teardown_appcontext(),. Then the,appcontext_tearing_down,signal is sent.,,This is called by,AppContext.pop(),.,,,Changelog,,New in version 0.9.,,,,,,do_teardown_request,(,exc=<object object>,),\u00b6,,Called after the request is dispatched and the response is\nreturned, right before the request context is popped.,,This calls all functions decorated with,teardown_request(),, and,Blueprint.teardown_request(),if a blueprint handled the request. Finally, the,request_tearing_down,signal is sent.,,This is called by,RequestContext.pop(),,\nwhich may be delayed during testing to maintain access to\nresources.,,,,,,Parameters:,exc,\u2013 An unhandled exception raised while dispatching the\nrequest. Detected from the current exception information if\nnot passed. Passed to each teardown function.,,,,,,Changelog,,Changed in version 0.9:,Added the,exc,argument.,,,,,,endpoint,(,endpoint,),\u00b6,,A decorator to register a function as an endpoint.\nExample:,,@app,.,endpoint,(,'example.endpoint',),,def,,example,():,,return,,\"example\",,,,,,,,Parameters:,endpoint,\u2013 the name of the endpoint,,,,,,,,env,\u00b6,,What environment the app is running in. Flask and extensions may\nenable behaviors based on the environment, such as enabling debug\nmode. This maps to the,ENV,config key. This is set by the,FLASK_ENV,environment variable and may not behave as\nexpected if set in code.,,Do not enable development when deploying in production.,,Default:,'production',,,,,error_handler_spec,= None,\u00b6,,A dictionary of all registered error handlers.  The key is,None,for error handlers active on the application, otherwise the key is\nthe name of the blueprint.  Each key points to another dictionary\nwhere the key is the status code of the http exception.  The\nspecial key,None,points to a list of tuples where the first item\nis the class for the instance check and the second the error handler\nfunction.,,To register an error handler, use the,errorhandler(),decorator.,,,,,errorhandler,(,code_or_exception,),\u00b6,,Register a function to handle errors by code or exception class.,,A decorator that is used to register a function given an\nerror code.  Example:,,@app,.,errorhandler,(,404,),,def,,page_not_found,(,error,):,,return,,'This page does not exist',,,,404,,,,You can also register handlers for arbitrary exceptions:,,@app,.,errorhandler,(,DatabaseError,),,def,,special_exception_handler,(,error,):,,return,,'Database connection failed',,,,500,,,,,Changelog,,New in version 0.7:,Use,register_error_handler(),instead of modifying,error_handler_spec,directly, for application wide error\nhandlers.,,,,New in version 0.7:,One can now additionally also register custom exception types\nthat do not necessarily have to be a subclass of the,HTTPException,class.,,,,,,,Parameters:,code_or_exception,\u2013 the code as integer for the handler, or\nan arbitrary exception,,,,,,,,extensions,= None,\u00b6,,a place where extensions can store application specific state.  For\nexample this is where an extension could store database engines and\nsimilar things.  For backwards compatibility extensions should register\nthemselves like this:,,if,,not,,hasattr,(,app,,,,'extensions',):,,app,.,extensions,,=,,{},,app,.,extensions,[,'extensionname',],,=,,SomeObject,(),,,,The key must match the name of the extension module. For example in\ncase of a \u201cFlask-Foo\u201d extension in,flask_foo,, the key would be,'foo',.,,,Changelog,,New in version 0.7.,,,,,,full_dispatch_request,(,),\u00b6,,Dispatches the request and on top of that performs request\npre and postprocessing as well as HTTP exception catching and\nerror handling.,,,Changelog,,New in version 0.7.,,,,,,get_send_file_max_age,(,filename,),\u00b6,,Provides default cache_timeout for the,send_file(),functions.,,By default, this function returns,SEND_FILE_MAX_AGE_DEFAULT,from\nthe configuration of,current_app,.,,Static file functions such as,send_from_directory(),use this\nfunction, and,send_file(),calls this function on,current_app,when the given cache_timeout is,None,. If a\ncache_timeout is given in,send_file(),, that timeout is used;\notherwise, this method is called.,,This allows subclasses to change the behavior when sending files based\non the filename.  For example, to set the cache timeout for .js files\nto 60 seconds:,,class,,MyFlask,(,flask,.,Flask,):,,def,,get_send_file_max_age,(,self,,,,name,):,,if,,name,.,lower,(),.,endswith,(,'.js',):,,return,,60,,return,,flask,.,Flask,.,get_send_file_max_age,(,self,,,,name,),,,,,Changelog,,New in version 0.9.,,,,,,got_first_request,\u00b6,,This attribute is set to,True,if the application started\nhandling the first request.,,,Changelog,,New in version 0.8.,,,,,,handle_exception,(,e,),\u00b6,,Default exception handling that kicks in when an exception\noccurs that is not caught.  In debug mode the exception will\nbe re-raised immediately, otherwise it is logged and the handler\nfor a 500 internal server error is used.  If no such handler\nexists, a default 500 internal server error message is displayed.,,,Changelog,,New in version 0.3.,,,,,,handle_http_exception,(,e,),\u00b6,,Handles an HTTP exception.  By default this will invoke the\nregistered error handlers and fall back to returning the\nexception as response.,,,Changelog,,New in version 0.3.,,,,,,handle_url_build_error,(,error,,,endpoint,,,values,),\u00b6,,Handle,BuildError,on,url_for(),.,,,,,handle_user_exception,(,e,),\u00b6,,This method is called whenever an exception occurs that should be\nhandled.  A special case are,HTTPException,s which are forwarded by\nthis function to the,handle_http_exception(),method.  This\nfunction will either return a response value or reraise the\nexception with the same traceback.,,,Changed in version 1.0:,Key errors raised from request data like,form,show the the bad\nkey in debug mode rather than a generic bad request message.,,,,Changelog,,New in version 0.7.,,,,,,has_static_folder,\u00b6,,This is,True,if the package bound object\u2019s container has a\nfolder for static files.,,,Changelog,,New in version 0.5.,,,,,,import_name,= None,\u00b6,,The name of the package or module that this app belongs to. Do not\nchange this once it is set by the constructor.,,,,,inject_url_defaults,(,endpoint,,,values,),\u00b6,,Injects the URL defaults for the given endpoint directly into\nthe values dictionary passed.  This is used internally and\nautomatically called on URL building.,,,Changelog,,New in version 0.7.,,,,,,instance_path,= None,\u00b6,,Holds the path to the instance folder.,,,Changelog,,New in version 0.8.,,,,,,iter_blueprints,(,),\u00b6,,Iterates over all blueprints by the order they were registered.,,,Changelog,,New in version 0.11.,,,,,,jinja_env,\u00b6,,The Jinja2 environment used to load templates.,,,,,jinja_environment,\u00b6,,alias of,flask.templating.Environment,,,,,jinja_loader,\u00b6,,The Jinja loader for this package bound object.,,,Changelog,,New in version 0.5.,,,,,,jinja_options,= {'extensions': ['jinja2.ext.autoescape', 'jinja2.ext.with_']},\u00b6,,Options that are passed directly to the Jinja2 environment.,,,,,json_decoder,\u00b6,,alias of,flask.json.JSONDecoder,,,,,json_encoder,\u00b6,,alias of,flask.json.JSONEncoder,,,,,log_exception,(,exc_info,),\u00b6,,Logs an exception.  This is called by,handle_exception(),if debugging is disabled and right before the handler is called.\nThe default implementation logs the exception as error on the,logger,.,,,Changelog,,New in version 0.8.,,,,,,logger,\u00b6,,The,'flask.app',logger, a standard Python,Logger,.,,In debug mode, the logger\u2019s,level,will be set\nto,DEBUG,.,,If there are no handlers configured, a default handler will be added.\nSee,Logging,for more information.,,,Changed in version 1.0:,Behavior was simplified. The logger is always named,flask.app,. The level is only set during configuration, it\ndoesn\u2019t check,app.debug,each time. Only one format is used,\nnot different ones depending on,app.debug,. No handlers are\nremoved, and a handler is only added if no handlers are already\nconfigured.,,,,Changelog,,New in version 0.3.,,,,,,make_config,(,instance_relative=False,),\u00b6,,Used to create the config attribute by the Flask constructor.\nThe,instance_relative,parameter is passed in from the constructor\nof Flask (there named,instance_relative_config,) and indicates if\nthe config should be relative to the instance path or the root path\nof the application.,,,Changelog,,New in version 0.8.,,,,,,make_default_options_response,(,),\u00b6,,This method is called to create the default,OPTIONS,response.\nThis can be changed through subclassing to change the default\nbehavior of,OPTIONS,responses.,,,Changelog,,New in version 0.7.,,,,,,make_null_session,(,),\u00b6,,Creates a new instance of a missing session.  Instead of overriding\nthis method we recommend replacing the,session_interface,.,,,Changelog,,New in version 0.7.,,,,,,make_response,(,rv,),\u00b6,,Convert the return value from a view function to an instance of,response_class,.,,,,,,Parameters:,rv,\u2013,the return value from the view function. The view function\nmust return a response. Returning,None,, or the view ending\nwithout returning, is not allowed. The following types are allowed\nfor,view_rv,:,,,str,(,unicode,in Python 2),,A response object is created with the string encoded to UTF-8\nas the body.,,bytes,(,str,in Python 2),,A response object is created with the bytes as the body.,,tuple,,Either,(body,,,status,,,headers),,,(body,,,status),, or,(body,,,headers),, where,body,is any of the other types\nallowed here,,status,is a string or an integer, and,headers,is a dictionary or a list of,(key,,,value),tuples. If,body,is a,response_class,instance,,status,overwrites the exiting value and,headers,are\nextended.,,response_class,,The object is returned unchanged.,,other,Response,class,,The object is coerced to,response_class,.,,callable(),,The function is called as a WSGI application. The result is\nused to create a response object.,,,,,,,,Changelog,,Changed in version 0.9:,Previously a tuple was interpreted as the arguments for the\nresponse object.,,,,,,make_shell_context,(,),\u00b6,,Returns the shell context for an interactive shell for this\napplication.  This runs all the registered shell context\nprocessors.,,,Changelog,,New in version 0.11.,,,,,,name,\u00b6,,The name of the application.  This is usually the import name\nwith the difference that it\u2019s guessed from the run file if the\nimport name is main.  This name is used as a display name when\nFlask needs the name of the application.  It can be set and overridden\nto change the value.,,,Changelog,,New in version 0.8.,,,,,,open_instance_resource,(,resource,,,mode='rb',),\u00b6,,Opens a resource from the application\u2019s instance folder\n(,instance_path,).  Otherwise works like,open_resource(),.  Instance resources can also be opened for\nwriting.,,,,,,Parameters:,,resource,\u2013 the name of the resource.  To access resources within\nsubfolders use forward slashes as separator.,,mode,\u2013 resource file opening mode, default is \u2018rb\u2019.,,,,,,,,,,open_resource,(,resource,,,mode='rb',),\u00b6,,Opens a resource from the application\u2019s resource folder.  To see\nhow this works, consider the following folder structure:,,/,myapplication,.,py,,/,schema,.,sql,,/,static,,/,style,.,css,,/,templates,,/,layout,.,html,,/,index,.,html,,,,If you want to open the,schema.sql,file you would do the\nfollowing:,,with,,app,.,open_resource,(,'schema.sql',),,as,,f,:,,contents,,=,,f,.,read,(),,do_something_with,(,contents,),,,,,,,,Parameters:,,resource,\u2013 the name of the resource.  To access resources within\nsubfolders use forward slashes as separator.,,mode,\u2013 resource file opening mode, default is \u2018rb\u2019.,,,,,,,,,,open_session,(,request,),\u00b6,,Creates or opens a new session.  Default implementation stores all\nsession data in a signed cookie.  This requires that the,secret_key,is set.  Instead of overriding this method\nwe recommend replacing the,session_interface,.,,,,,,Parameters:,request,\u2013 an instance of,request_class,.,,,,,,,,permanent_session_lifetime,\u00b6,,A,timedelta,which is used to set the expiration\ndate of a permanent session.  The default is 31 days which makes a\npermanent session survive for roughly one month.,,This attribute can also be configured from the config with the,PERMANENT_SESSION_LIFETIME,configuration key.  Defaults to,timedelta(days=31),,,,,preprocess_request,(,),\u00b6,,Called before the request is dispatched. Calls,url_value_preprocessors,registered with the app and the\ncurrent blueprint (if any). Then calls,before_request_funcs,registered with the app and the blueprint.,,If any,before_request(),handler returns a non-None value, the\nvalue is handled as if it was the return value from the view, and\nfurther request handling is stopped.,,,,,preserve_context_on_exception,\u00b6,,Returns the value of the,PRESERVE_CONTEXT_ON_EXCEPTION,configuration value in case it\u2019s set, otherwise a sensible default\nis returned.,,,Changelog,,New in version 0.7.,,,,,,process_response,(,response,),\u00b6,,Can be overridden in order to modify the response object\nbefore it\u2019s sent to the WSGI server.  By default this will\ncall all the,after_request(),decorated functions.,,,Changelog,,Changed in version 0.5:,As of Flask 0.5 the functions registered for after request\nexecution are called in reverse order of registration.,,,,,,,Parameters:,response,\u2013 a,response_class,object.,,,Returns:,a new response object or the same, has to be an\ninstance of,response_class,.,,,,,,,,propagate_exceptions,\u00b6,,Returns the value of the,PROPAGATE_EXCEPTIONS,configuration\nvalue in case it\u2019s set, otherwise a sensible default is returned.,,,Changelog,,New in version 0.7.,,,,,,register_blueprint,(,blueprint,,,**options,),\u00b6,,Register a,Blueprint,on the application. Keyword\narguments passed to this method will override the defaults set on the\nblueprint.,,Calls the blueprint\u2019s,register(),method after\nrecording the blueprint in the application\u2019s,blueprints,.,,,,,,Parameters:,,blueprint,\u2013 The blueprint to register.,,url_prefix,\u2013 Blueprint routes will be prefixed with this.,,subdomain,\u2013 Blueprint routes will match on this subdomain.,,url_defaults,\u2013 Blueprint routes will use these default values for\nview arguments.,,options,\u2013 Additional keyword arguments are passed to,BlueprintSetupState,. They can be\naccessed in,record(),callbacks.,,,,,,,,Changelog,,New in version 0.7.,,,,,,register_error_handler,(,code_or_exception,,,f,),\u00b6,,Alternative error attach function to the,errorhandler(),decorator that is more straightforward to use for non decorator\nusage.,,,Changelog,,New in version 0.7.,,,,,,request_class,\u00b6,,alias of,flask.wrappers.Request,,,,,request_context,(,environ,),\u00b6,,Create a,RequestContext,representing a\nWSGI environment. Use a,with,block to push the context,\nwhich will make,request,point at this request.,,See,The Request Context,.,,Typically you should not call this from your own code. A request\ncontext is automatically pushed by the,wsgi_app(),when\nhandling a request. Use,test_request_context(),to create\nan environment and context instead of this method.,,,,,,Parameters:,environ,\u2013 a WSGI environment,,,,,,,,response_class,\u00b6,,alias of,flask.wrappers.Response,,,,,root_path,= None,\u00b6,,Absolute path to the package on the filesystem. Used to look up\nresources contained in the package.,,,,,route,(,rule,,,**options,),\u00b6,,A decorator that is used to register a view function for a\ngiven URL rule.  This does the same thing as,add_url_rule(),but is intended for decorator usage:,,@app,.,route,(,'/',),,def,,index,():,,return,,'Hello World',,,,For more information refer to,URL Route Registrations,.,,,,,,Parameters:,,rule,\u2013 the URL rule as string,,endpoint,\u2013 the endpoint for the registered URL rule.  Flask\nitself assumes the name of the view function as\nendpoint,,options,\u2013 the options to be forwarded to the underlying,Rule,object.  A change\nto Werkzeug is handling of method options.  methods\nis a list of methods this rule should be limited\nto (,GET,,,POST,etc.).  By default a rule\njust listens for,GET,(and implicitly,HEAD,).\nStarting with Flask 0.6,,OPTIONS,is implicitly\nadded and handled by the standard request handling.,,,,,,,,,,run,(,host=None,,,port=None,,,debug=None,,,load_dotenv=True,,,**options,),\u00b6,,Runs the application on a local development server.,,Do not use,run(),in a production setting. It is not intended to\nmeet security and performance requirements for a production server.\nInstead, see,Deployment Options,for WSGI server recommendations.,,If the,debug,flag is set the server will automatically reload\nfor code changes and show a debugger in case an exception happened.,,If you want to run the application in debug mode, but disable the\ncode execution on the interactive debugger, you can pass,use_evalex=False,as parameter.  This will keep the debugger\u2019s\ntraceback screen active, but disable code execution.,,It is not recommended to use this function for development with\nautomatic reloading as this is badly supported.  Instead you should\nbe using the,flask,command line script\u2019s,run,support.,,,Keep in Mind,,Flask will suppress any server error with a generic error page\nunless it is in debug mode.  As such to enable just the\ninteractive debugger without the code reloading, you have to\ninvoke,run(),with,debug=True,and,use_reloader=False,.\nSetting,use_debugger,to,True,without being in debug mode\nwon\u2019t catch any exceptions because there won\u2019t be any to\ncatch.,,,,,,,Parameters:,,host,\u2013 the hostname to listen on. Set this to,'0.0.0.0',to\nhave the server available externally as well. Defaults to,'127.0.0.1',or the host in the,SERVER_NAME,config variable\nif present.,,port,\u2013 the port of the webserver. Defaults to,5000,or the\nport defined in the,SERVER_NAME,config variable if present.,,debug,\u2013 if given, enable or disable debug mode. See,debug,.,,load_dotenv,\u2013 Load the nearest,.env,and,.flaskenv,files to set environment variables. Will also change the working\ndirectory to the directory containing the first file found.,,options,\u2013 the options to be forwarded to the underlying Werkzeug\nserver. See,werkzeug.serving.run_simple(),for more\ninformation.,,,,,,,,Changed in version 1.0:,If installed, python-dotenv will be used to load environment\nvariables from,.env,and,.flaskenv,files.,,If set, the,FLASK_ENV,and,FLASK_DEBUG,environment variables will override,env,and,debug,.,,Threaded mode is enabled by default.,,,,Changelog,,Changed in version 0.10:,The default port is now picked from the,SERVER_NAME,variable.,,,,,,save_session,(,session,,,response,),\u00b6,,Saves the session if it needs updates.  For the default\nimplementation, check,open_session(),.  Instead of overriding this\nmethod we recommend replacing the,session_interface,.,,,,,,Parameters:,,session,\u2013 the session to be saved (a,SecureCookie,object),,response,\u2013 an instance of,response_class,,,,,,,,,,secret_key,\u00b6,,If a secret key is set, cryptographic components can use this to\nsign cookies and other things. Set this to a complex random value\nwhen you want to use the secure cookie for instance.,,This attribute can also be configured from the config with the,SECRET_KEY,configuration key. Defaults to,None,.,,,,,select_jinja_autoescape,(,filename,),\u00b6,,Returns,True,if autoescaping should be active for the given\ntemplate name. If no template name is given, returns,True,.,,,Changelog,,New in version 0.5.,,,,,,send_file_max_age_default,\u00b6,,A,timedelta,which is used as default cache_timeout\nfor the,send_file(),functions. The default is 12 hours.,,This attribute can also be configured from the config with the,SEND_FILE_MAX_AGE_DEFAULT,configuration key. This configuration\nvariable can also be set with an integer value used as seconds.\nDefaults to,timedelta(hours=12),,,,,send_static_file,(,filename,),\u00b6,,Function used internally to send static files from the static\nfolder to the browser.,,,Changelog,,New in version 0.5.,,,,,,session_cookie_name,\u00b6,,The secure cookie uses this for the name of the session cookie.,,This attribute can also be configured from the config with the,SESSION_COOKIE_NAME,configuration key.  Defaults to,'session',,,,,session_interface,= <flask.sessions.SecureCookieSessionInterface object>,\u00b6,,the session interface to use.  By default an instance of,SecureCookieSessionInterface,is used here.,,,Changelog,,New in version 0.8.,,,,,,shell_context_processor,(,f,),\u00b6,,Registers a shell context processor function.,,,Changelog,,New in version 0.11.,,,,,,shell_context_processors,= None,\u00b6,,A list of shell context processor functions that should be run\nwhen a shell context is created.,,,Changelog,,New in version 0.11.,,,,,,should_ignore_error,(,error,),\u00b6,,This is called to figure out if an error should be ignored\nor not as far as the teardown system is concerned.  If this\nfunction returns,True,then the teardown handlers will not be\npassed the error.,,,Changelog,,New in version 0.10.,,,,,,static_folder,\u00b6,,The absolute path to the configured static folder.,,,,,static_url_path,\u00b6,,The URL prefix that the static route will be registered for.,,,,,teardown_appcontext,(,f,),\u00b6,,Registers a function to be called when the application context\nends.  These functions are typically also called when the request\ncontext is popped.,,Example:,,ctx,,=,,app,.,app_context,(),,ctx,.,push,(),,...,,ctx,.,pop,(),,,,When,ctx.pop(),is executed in the above example, the teardown\nfunctions are called just before the app context moves from the\nstack of active contexts.  This becomes relevant if you are using\nsuch constructs in tests.,,Since a request context typically also manages an application\ncontext it would also be called when you pop a request context.,,When a teardown function was called because of an unhandled exception\nit will be passed an error object. If an,errorhandler(),is\nregistered, it will handle the exception and the teardown will not\nreceive it.,,The return values of teardown functions are ignored.,,,Changelog,,New in version 0.9.,,,,,,teardown_appcontext_funcs,= None,\u00b6,,A list of functions that are called when the application context\nis destroyed.  Since the application context is also torn down\nif the request ends this is the place to store code that disconnects\nfrom databases.,,,Changelog,,New in version 0.9.,,,,,,teardown_request,(,f,),\u00b6,,Register a function to be run at the end of each request,\nregardless of whether there was an exception or not.  These functions\nare executed when the request context is popped, even if not an\nactual request was performed.,,Example:,,ctx,,=,,app,.,test_request_context,(),,ctx,.,push,(),,...,,ctx,.,pop,(),,,,When,ctx.pop(),is executed in the above example, the teardown\nfunctions are called just before the request context moves from the\nstack of active contexts.  This becomes relevant if you are using\nsuch constructs in tests.,,Generally teardown functions must take every necessary step to avoid\nthat they will fail.  If they do execute code that might fail they\nwill have to surround the execution of these code by try/except\nstatements and log occurring errors.,,When a teardown function was called because of an exception it will\nbe passed an error object.,,The return values of teardown functions are ignored.,,,Debug Note,,In debug mode Flask will not tear down a request on an exception\nimmediately.  Instead it will keep it alive so that the interactive\ndebugger can still access it.  This behavior can be controlled\nby the,PRESERVE_CONTEXT_ON_EXCEPTION,configuration variable.,,,,,,teardown_request_funcs,= None,\u00b6,,A dictionary with lists of functions that are called after\neach request, even if an exception has occurred. The key of the\ndictionary is the name of the blueprint this function is active for,,None,for all requests. These functions are not allowed to modify\nthe request, and their return values are ignored. If an exception\noccurred while processing the request, it gets passed to each\nteardown_request function. To register a function here, use the,teardown_request(),decorator.,,,Changelog,,New in version 0.7.,,,,,,template_context_processors,= None,\u00b6,,A dictionary with list of functions that are called without argument\nto populate the template context.  The key of the dictionary is the\nname of the blueprint this function is active for,,None,for all\nrequests.  Each returns a dictionary that the template context is\nupdated with.  To register a function here, use the,context_processor(),decorator.,,,,,template_filter,(,name=None,),\u00b6,,A decorator that is used to register custom template filter.\nYou can specify a name for the filter, otherwise the function\nname will be used. Example:,,@app,.,template_filter,(),,def,,reverse,(,s,):,,return,,s,[::,-,1,],,,,,,,,Parameters:,name,\u2013 the optional name of the filter, otherwise the\nfunction name will be used.,,,,,,,,template_folder,= None,\u00b6,,Location of the template files to be added to the template lookup.,None,if templates should not be added.,,,,,template_global,(,name=None,),\u00b6,,A decorator that is used to register a custom template global function.\nYou can specify a name for the global function, otherwise the function\nname will be used. Example:,,@app,.,template_global,(),,def,,double,(,n,):,,return,,2,,*,,n,,,,,Changelog,,New in version 0.10.,,,,,,,Parameters:,name,\u2013 the optional name of the global function, otherwise the\nfunction name will be used.,,,,,,,,template_test,(,name=None,),\u00b6,,A decorator that is used to register custom template test.\nYou can specify a name for the test, otherwise the function\nname will be used. Example:,,@app,.,template_test,(),,def,,is_prime,(,n,):,,if,,n,,==,,2,:,,return,,True,,for,,i,,in,,range,(,2,,,,int,(,math,.,ceil,(,math,.,sqrt,(,n,))),,+,,1,):,,if,,n,,%,,i,,==,,0,:,,return,,False,,return,,True,,,,,Changelog,,New in version 0.10.,,,,,,,Parameters:,name,\u2013 the optional name of the test, otherwise the\nfunction name will be used.,,,,,,,,templates_auto_reload,\u00b6,,Reload templates when they are changed. Used by,create_jinja_environment(),.,,This attribute can be configured with,TEMPLATES_AUTO_RELOAD,. If\nnot set, it will be enabled in debug mode.,,,New in version 1.0:,This property was added but the underlying config and behavior\nalready existed.,,,,Changelog,,,,test_cli_runner,(,**kwargs,),\u00b6,,Create a CLI runner for testing CLI commands.\nSee,Testing CLI Commands,.,,Returns an instance of,test_cli_runner_class,, by default,FlaskCliRunner,. The Flask app object is\npassed as the first argument.,,,New in version 1.0.,,,,Changelog,,,,test_cli_runner_class,= None,\u00b6,,The,CliRunner,subclass, by default,FlaskCliRunner,that is used by,test_cli_runner(),. Its,__init__,method should take a\nFlask app object as the first argument.,,,New in version 1.0.,,,,Changelog,,,,test_client,(,use_cookies=True,,,**kwargs,),\u00b6,,Creates a test client for this application.  For information\nabout unit testing head over to,Testing Flask Applications,.,,Note that if you are testing for assertions or exceptions in your\napplication code, you must set,app.testing,,=,,True,in order for the\nexceptions to propagate to the test client.  Otherwise, the exception\nwill be handled by the application (not visible to the test client) and\nthe only indication of an AssertionError or other exception will be a\n500 status code response to the test client.  See the,testing,attribute.  For example:,,app,.,testing,,=,,True,,client,,=,,app,.,test_client,(),,,,The test client can be used in a,with,block to defer the closing down\nof the context until the end of the,with,block.  This is useful if\nyou want to access the context locals for testing:,,with,,app,.,test_client,(),,as,,c,:,,rv,,=,,c,.,get,(,'/?vodka=42',),,assert,,request,.,args,[,'vodka',],,==,,'42',,,,Additionally, you may pass optional keyword arguments that will then\nbe passed to the application\u2019s,test_client_class,constructor.\nFor example:,,from,,flask.testing,,import,,FlaskClient,,class,,CustomClient,(,FlaskClient,):,,def,,__init__,(,self,,,,*,args,,,,**,kwargs,):,,self,.,_authentication,,=,,kwargs,.,pop,(,\"authentication\",),,super,(,CustomClient,,,self,),.,__init__,(,,*,args,,,,**,kwargs,),,app,.,test_client_class,,=,,CustomClient,,client,,=,,app,.,test_client,(,authentication,=,'Basic ....',),,,,See,FlaskClient,for more information.,,,Changelog,,Changed in version 0.11:,Added,**kwargs,to support passing additional keyword arguments to\nthe constructor of,test_client_class,.,,,,New in version 0.7:,The,use_cookies,parameter was added as well as the ability\nto override the client to be used by setting the,test_client_class,attribute.,,,,Changed in version 0.4:,added support for,with,block usage for the client.,,,,,,test_client_class,= None,\u00b6,,the test client that is used with when,test_client,is used.,,,Changelog,,New in version 0.7.,,,,,,test_request_context,(,*args,,,**kwargs,),\u00b6,,Create a,RequestContext,for a WSGI\nenvironment created from the given values. This is mostly useful\nduring testing, where you may want to run a function that uses\nrequest data without dispatching a full request.,,See,The Request Context,.,,Use a,with,block to push the context, which will make,request,point at the request for the created\nenvironment.,,with,,test_request_context,(,...,):,,generate_report,(),,,,When using the shell, it may be easier to push and pop the\ncontext manually to avoid indentation.,,ctx,,=,,app,.,test_request_context,(,...,),,ctx,.,push,(),,...,,ctx,.,pop,(),,,,Takes the same arguments as Werkzeug\u2019s,EnvironBuilder,, with some defaults from\nthe application. See the linked Werkzeug docs for most of the\navailable arguments. Flask-specific behavior is listed here.,,,,,,Parameters:,,path,\u2013 URL path being requested.,,base_url,\u2013 Base URL where the app is being served, which,path,is relative to. If not given, built from,PREFERRED_URL_SCHEME,,,subdomain,,,SERVER_NAME,, and,APPLICATION_ROOT,.,,subdomain,\u2013 Subdomain name to append to,SERVER_NAME,.,,url_scheme,\u2013 Scheme to use instead of,PREFERRED_URL_SCHEME,.,,data,\u2013 The request body, either as a string or a dict of\nform keys and values.,,json,\u2013 If given, this is serialized as JSON and passed as,data,. Also defaults,content_type,to,application/json,.,,args,\u2013 other positional arguments passed to,EnvironBuilder,.,,kwargs,\u2013 other keyword arguments passed to,EnvironBuilder,.,,,,,,,,,,testing,\u00b6,,The testing flag.  Set this to,True,to enable the test mode of\nFlask extensions (and in the future probably also Flask itself).\nFor example this might activate test helpers that have an\nadditional runtime cost which should not be enabled by default.,,If this is enabled and PROPAGATE_EXCEPTIONS is not changed from the\ndefault it\u2019s implicitly enabled.,,This attribute can also be configured from the config with the,TESTING,configuration key.  Defaults to,False,.,,,,,trap_http_exception,(,e,),\u00b6,,Checks if an HTTP exception should be trapped or not.  By default\nthis will return,False,for all exceptions except for a bad request\nkey error if,TRAP_BAD_REQUEST_ERRORS,is set to,True,.  It\nalso returns,True,if,TRAP_HTTP_EXCEPTIONS,is set to,True,.,,This is called for all HTTP exceptions raised by a view function.\nIf it returns,True,for any exception the error handler for this\nexception is not called and it shows up as regular exception in the\ntraceback.  This is helpful for debugging implicitly raised HTTP\nexceptions.,,,Changed in version 1.0:,Bad request errors are not trapped by default in debug mode.,,,,Changelog,,New in version 0.8.,,,,,,update_template_context,(,context,),\u00b6,,Update the template context with some commonly used variables.\nThis injects request, session, config and g into the template\ncontext as well as everything template context processors want\nto inject.  Note that the as of Flask 0.6, the original values\nin the context will not be overridden if a context processor\ndecides to return a value with the same key.,,,,,,Parameters:,context,\u2013 the context as a dictionary that is updated in place\nto add extra variables.,,,,,,,,url_build_error_handlers,= None,\u00b6,,A list of functions that are called when,url_for(),raises a,BuildError,.  Each function registered here\nis called with,error,,,endpoint,and,values,.  If a function\nreturns,None,or raises a,BuildError,the next function is\ntried.,,,Changelog,,New in version 0.9.,,,,,,url_default_functions,= None,\u00b6,,A dictionary with lists of functions that can be used as URL value\npreprocessors.  The key,None,here is used for application wide\ncallbacks, otherwise the key is the name of the blueprint.\nEach of these functions has the chance to modify the dictionary\nof URL values before they are used as the keyword arguments of the\nview function.  For each function registered this one should also\nprovide a,url_defaults(),function that adds the parameters\nautomatically again that were removed that way.,,,Changelog,,New in version 0.7.,,,,,,url_defaults,(,f,),\u00b6,,Callback function for URL defaults for all view functions of the\napplication.  It\u2019s called with the endpoint and values and should\nupdate the values passed in place.,,,,,url_map,= None,\u00b6,,The,Map,for this instance.  You can use\nthis to change the routing converters after the class was created\nbut before any routes are connected.  Example:,,from,,werkzeug.routing,,import,,BaseConverter,,class,,ListConverter,(,BaseConverter,):,,def,,to_python,(,self,,,,value,):,,return,,value,.,split,(,',',),,def,,to_url,(,self,,,,values,):,,return,,',',.,join,(,super,(,ListConverter,,,,self,),.,to_url,(,value,),,for,,value,,in,,values,),,app,,=,,Flask,(,__name__,),,app,.,url_map,.,converters,[,'list',],,=,,ListConverter,,,,,,,url_rule_class,\u00b6,,alias of,werkzeug.routing.Rule,,,,,url_value_preprocessor,(,f,),\u00b6,,Register a URL value preprocessor function for all view\nfunctions in the application. These functions will be called before the,before_request(),functions.,,The function can modify the values captured from the matched url before\nthey are passed to the view. For example, this can be used to pop a\ncommon language code value and place it in,g,rather than pass it to\nevery view.,,The function is passed the endpoint name and values dict. The return\nvalue is ignored.,,,,,url_value_preprocessors,= None,\u00b6,,A dictionary with lists of functions that are called before the,before_request_funcs,functions. The key of the dictionary is\nthe name of the blueprint this function is active for, or,None,for all requests. To register a function, use,url_value_preprocessor(),.,,,Changelog,,New in version 0.7.,,,,,,use_x_sendfile,\u00b6,,Enable this if you want to use the X-Sendfile feature.  Keep in\nmind that the server has to support this.  This only affects files\nsent with the,send_file(),method.,,,Changelog,,New in version 0.2.,,,This attribute can also be configured from the config with the,USE_X_SENDFILE,configuration key.  Defaults to,False,.,,,,,view_functions,= None,\u00b6,,A dictionary of all view functions registered.  The keys will\nbe function names which are also used to generate URLs and\nthe values are the function objects themselves.\nTo register a view function, use the,route(),decorator.,,,,,wsgi_app,(,environ,,,start_response,),\u00b6,,The actual WSGI application. This is not implemented in,__call__(),so that middlewares can be applied without\nlosing a reference to the app object. Instead of doing this:,,app,,=,,MyMiddleware,(,app,),,,,It\u2019s a better idea to do this instead:,,app,.,wsgi_app,,=,,MyMiddleware,(,app,.,wsgi_app,),,,,Then you still have the original application object around and\ncan continue to call methods on it.,,,Changelog,,Changed in version 0.7:,Teardown events for the request and app contexts are called\neven if an unhandled error occurs. Other events may not be\ncalled depending on when an error occurs during dispatch.\nSee,Callbacks and Errors,.,,,,,,,Parameters:,,environ,\u2013 A WSGI environment.,,start_response,\u2013 A callable accepting a status code,\na list of headers, and an optional exception context to\nstart the response.,,,,,,,,,,,Blueprint Objects,\u00b6,,,,class,flask.,Blueprint,(,name,,,import_name,,,static_folder=None,,,static_url_path=None,,,template_folder=None,,,url_prefix=None,,,subdomain=None,,,url_defaults=None,,,root_path=None,),\u00b6,,Represents a blueprint.  A blueprint is an object that records\nfunctions that will be called with the,BlueprintSetupState,later to register functions\nor other things on the main application.  See,Modular Applications with Blueprints,for more\ninformation.,,,Changelog,,New in version 0.7.,,,,,add_app_template_filter,(,f,,,name=None,),\u00b6,,Register a custom template filter, available application wide.  Like,Flask.add_template_filter(),but for a blueprint.  Works exactly\nlike the,app_template_filter(),decorator.,,,,,,Parameters:,name,\u2013 the optional name of the filter, otherwise the\nfunction name will be used.,,,,,,,,add_app_template_global,(,f,,,name=None,),\u00b6,,Register a custom template global, available application wide.  Like,Flask.add_template_global(),but for a blueprint.  Works exactly\nlike the,app_template_global(),decorator.,,,Changelog,,New in version 0.10.,,,,,,,Parameters:,name,\u2013 the optional name of the global, otherwise the\nfunction name will be used.,,,,,,,,add_app_template_test,(,f,,,name=None,),\u00b6,,Register a custom template test, available application wide.  Like,Flask.add_template_test(),but for a blueprint.  Works exactly\nlike the,app_template_test(),decorator.,,,Changelog,,New in version 0.10.,,,,,,,Parameters:,name,\u2013 the optional name of the test, otherwise the\nfunction name will be used.,,,,,,,,add_url_rule,(,rule,,,endpoint=None,,,view_func=None,,,**options,),\u00b6,,Like,Flask.add_url_rule(),but for a blueprint.  The endpoint for\nthe,url_for(),function is prefixed with the name of the blueprint.,,,,,after_app_request,(,f,),\u00b6,,Like,Flask.after_request(),but for a blueprint.  Such a function\nis executed after each request, even if outside of the blueprint.,,,,,after_request,(,f,),\u00b6,,Like,Flask.after_request(),but for a blueprint.  This function\nis only executed after each request that is handled by a function of\nthat blueprint.,,,,,app_context_processor,(,f,),\u00b6,,Like,Flask.context_processor(),but for a blueprint.  Such a\nfunction is executed each request, even if outside of the blueprint.,,,,,app_errorhandler,(,code,),\u00b6,,Like,Flask.errorhandler(),but for a blueprint.  This\nhandler is used for all requests, even if outside of the blueprint.,,,,,app_template_filter,(,name=None,),\u00b6,,Register a custom template filter, available application wide.  Like,Flask.template_filter(),but for a blueprint.,,,,,,Parameters:,name,\u2013 the optional name of the filter, otherwise the\nfunction name will be used.,,,,,,,,app_template_global,(,name=None,),\u00b6,,Register a custom template global, available application wide.  Like,Flask.template_global(),but for a blueprint.,,,Changelog,,New in version 0.10.,,,,,,,Parameters:,name,\u2013 the optional name of the global, otherwise the\nfunction name will be used.,,,,,,,,app_template_test,(,name=None,),\u00b6,,Register a custom template test, available application wide.  Like,Flask.template_test(),but for a blueprint.,,,Changelog,,New in version 0.10.,,,,,,,Parameters:,name,\u2013 the optional name of the test, otherwise the\nfunction name will be used.,,,,,,,,app_url_defaults,(,f,),\u00b6,,Same as,url_defaults(),but application wide.,,,,,app_url_value_preprocessor,(,f,),\u00b6,,Same as,url_value_preprocessor(),but application wide.,,,,,before_app_first_request,(,f,),\u00b6,,Like,Flask.before_first_request(),.  Such a function is\nexecuted before the first request to the application.,,,,,before_app_request,(,f,),\u00b6,,Like,Flask.before_request(),.  Such a function is executed\nbefore each request, even if outside of a blueprint.,,,,,before_request,(,f,),\u00b6,,Like,Flask.before_request(),but for a blueprint.  This function\nis only executed before each request that is handled by a function of\nthat blueprint.,,,,,context_processor,(,f,),\u00b6,,Like,Flask.context_processor(),but for a blueprint.  This\nfunction is only executed for requests handled by a blueprint.,,,,,endpoint,(,endpoint,),\u00b6,,Like,Flask.endpoint(),but for a blueprint.  This does not\nprefix the endpoint with the blueprint name, this has to be done\nexplicitly by the user of this method.  If the endpoint is prefixed\nwith a,.,it will be registered to the current blueprint, otherwise\nit\u2019s an application independent endpoint.,,,,,errorhandler,(,code_or_exception,),\u00b6,,Registers an error handler that becomes active for this blueprint\nonly.  Please be aware that routing does not happen local to a\nblueprint so an error handler for 404 usually is not handled by\na blueprint unless it is caused inside a view function.  Another\nspecial case is the 500 internal server error which is always looked\nup from the application.,,Otherwise works as the,errorhandler(),decorator\nof the,Flask,object.,,,,,get_send_file_max_age,(,filename,),\u00b6,,Provides default cache_timeout for the,send_file(),functions.,,By default, this function returns,SEND_FILE_MAX_AGE_DEFAULT,from\nthe configuration of,current_app,.,,Static file functions such as,send_from_directory(),use this\nfunction, and,send_file(),calls this function on,current_app,when the given cache_timeout is,None,. If a\ncache_timeout is given in,send_file(),, that timeout is used;\notherwise, this method is called.,,This allows subclasses to change the behavior when sending files based\non the filename.  For example, to set the cache timeout for .js files\nto 60 seconds:,,class,,MyFlask,(,flask,.,Flask,):,,def,,get_send_file_max_age,(,self,,,,name,):,,if,,name,.,lower,(),.,endswith,(,'.js',):,,return,,60,,return,,flask,.,Flask,.,get_send_file_max_age,(,self,,,,name,),,,,,Changelog,,New in version 0.9.,,,,,,has_static_folder,\u00b6,,This is,True,if the package bound object\u2019s container has a\nfolder for static files.,,,Changelog,,New in version 0.5.,,,,,,import_name,= None,\u00b6,,The name of the package or module that this app belongs to. Do not\nchange this once it is set by the constructor.,,,,,jinja_loader,\u00b6,,The Jinja loader for this package bound object.,,,Changelog,,New in version 0.5.,,,,,,json_decoder,= None,\u00b6,,Blueprint local JSON decoder class to use.\nSet to,None,to use the app\u2019s,json_decoder,.,,,,,json_encoder,= None,\u00b6,,Blueprint local JSON decoder class to use.\nSet to,None,to use the app\u2019s,json_encoder,.,,,,,make_setup_state,(,app,,,options,,,first_registration=False,),\u00b6,,Creates an instance of,BlueprintSetupState(),object that is later passed to the register callback functions.\nSubclasses can override this to return a subclass of the setup state.,,,,,open_resource,(,resource,,,mode='rb',),\u00b6,,Opens a resource from the application\u2019s resource folder.  To see\nhow this works, consider the following folder structure:,,/,myapplication,.,py,,/,schema,.,sql,,/,static,,/,style,.,css,,/,templates,,/,layout,.,html,,/,index,.,html,,,,If you want to open the,schema.sql,file you would do the\nfollowing:,,with,,app,.,open_resource,(,'schema.sql',),,as,,f,:,,contents,,=,,f,.,read,(),,do_something_with,(,contents,),,,,,,,,Parameters:,,resource,\u2013 the name of the resource.  To access resources within\nsubfolders use forward slashes as separator.,,mode,\u2013 resource file opening mode, default is \u2018rb\u2019.,,,,,,,,,,record,(,func,),\u00b6,,Registers a function that is called when the blueprint is\nregistered on the application.  This function is called with the\nstate as argument as returned by the,make_setup_state(),method.,,,,,record_once,(,func,),\u00b6,,Works like,record(),but wraps the function in another\nfunction that will ensure the function is only called once.  If the\nblueprint is registered a second time on the application, the\nfunction passed is not called.,,,,,register,(,app,,,options,,,first_registration=False,),\u00b6,,Called by,Flask.register_blueprint(),to register all views\nand callbacks registered on the blueprint with the application. Creates\na,BlueprintSetupState,and calls each,record(),callback\nwith it.,,,,,,Parameters:,,app,\u2013 The application this blueprint is being registered with.,,options,\u2013 Keyword arguments forwarded from,register_blueprint(),.,,first_registration,\u2013 Whether this is the first time this\nblueprint has been registered on the application.,,,,,,,,,,register_error_handler,(,code_or_exception,,,f,),\u00b6,,Non-decorator version of the,errorhandler(),error attach\nfunction, akin to the,register_error_handler(),application-wide function of the,Flask,object but\nfor error handlers limited to this blueprint.,,,Changelog,,New in version 0.11.,,,,,,root_path,= None,\u00b6,,Absolute path to the package on the filesystem. Used to look up\nresources contained in the package.,,,,,route,(,rule,,,**options,),\u00b6,,Like,Flask.route(),but for a blueprint.  The endpoint for the,url_for(),function is prefixed with the name of the blueprint.,,,,,send_static_file,(,filename,),\u00b6,,Function used internally to send static files from the static\nfolder to the browser.,,,Changelog,,New in version 0.5.,,,,,,static_folder,\u00b6,,The absolute path to the configured static folder.,,,,,static_url_path,\u00b6,,The URL prefix that the static route will be registered for.,,,,,teardown_app_request,(,f,),\u00b6,,Like,Flask.teardown_request(),but for a blueprint.  Such a\nfunction is executed when tearing down each request, even if outside of\nthe blueprint.,,,,,teardown_request,(,f,),\u00b6,,Like,Flask.teardown_request(),but for a blueprint.  This\nfunction is only executed when tearing down requests handled by a\nfunction of that blueprint.  Teardown request functions are executed\nwhen the request context is popped, even when no actual request was\nperformed.,,,,,template_folder,= None,\u00b6,,Location of the template files to be added to the template lookup.,None,if templates should not be added.,,,,,url_defaults,(,f,),\u00b6,,Callback function for URL defaults for this blueprint.  It\u2019s called\nwith the endpoint and values and should update the values passed\nin place.,,,,,url_value_preprocessor,(,f,),\u00b6,,Registers a function as URL value preprocessor for this\nblueprint.  It\u2019s called before the view functions are called and\ncan modify the url values provided.,,,,,,Incoming Request Data,\u00b6,,,,class,flask.,Request,(,environ,,,populate_request=True,,,shallow=False,),\u00b6,,The request object used by default in Flask.  Remembers the\nmatched endpoint and view arguments.,,It is what ends up as,request,.  If you want to replace\nthe request object used you can subclass this and set,request_class,to your subclass.,,The request object is a,Request,subclass and\nprovides all of the attributes Werkzeug defines plus a few Flask\nspecific ones.,,,,environ,\u00b6,,The underlying WSGI environment.,,,,,path,\u00b6,,,,,full_path,\u00b6,,,,,script_root,\u00b6,,,,,url,\u00b6,,,,,base_url,\u00b6,,,,,url_root,\u00b6,,Provides different ways to look at the current,IRI,.  Imagine your application is\nlistening on the following application root:,,http,:,//,www,.,example,.,com,/,myapplication,,,,And a user requests the following URI:,,http://www.example.com/myapplication/%CF%80/page.html?x=y,,,In this case the values of the above mentioned attributes would be\nthe following:,,,,,,,,path,,u'/\u03c0/page.html',,,full_path,,u'/\u03c0/page.html?x=y',,,script_root,,u'/myapplication',,,base_url,,u'http://www.example.com/myapplication/\u03c0/page.html',,,url,,u'http://www.example.com/myapplication/\u03c0/page.html?x=y',,,url_root,,u'http://www.example.com/myapplication/',,,,,,,,accept_charsets,\u00b6,,List of charsets this client supports as,CharsetAccept,object.,,,,,accept_encodings,\u00b6,,List of encodings this client accepts.  Encodings in a HTTP term\nare compression encodings such as gzip.  For charsets have a look at,accept_charset,.,,,,,accept_languages,\u00b6,,List of languages this client accepts as,LanguageAccept,object.,,,,,accept_mimetypes,\u00b6,,List of mimetypes this client supports as,MIMEAccept,object.,,,,,access_route,\u00b6,,If a forwarded header exists this is a list of all ip addresses\nfrom the client ip to the last proxy server.,,,,,classmethod,application,(,f,),\u00b6,,Decorate a function as responder that accepts the request as first\nargument.  This works like the,responder(),decorator but the\nfunction is passed the request object as first argument and the\nrequest object will be closed automatically:,,@Request,.,application,,def,,my_wsgi_app,(,request,):,,return,,Response,(,'Hello World!',),,,,As of Werkzeug 0.14 HTTP exceptions are automatically caught and\nconverted to responses instead of failing.,,,,,,Parameters:,f,\u2013 the WSGI callable to decorate,,,Returns:,a new WSGI callable,,,,,,,,args,\u00b6,,The parsed URL parameters (the part in the URL after the question\nmark).,,By default an,ImmutableMultiDict,is returned from this function.  This can be changed by setting,parameter_storage_class,to a different type.  This might\nbe necessary if the order of the form data is important.,,,,,authorization,\u00b6,,The,Authorization,object in parsed form.,,,,,base_url,,Like,url,but without the querystring\nSee also:,trusted_hosts,.,,,,,blueprint,\u00b6,,The name of the current blueprint,,,,,cache_control,\u00b6,,A,RequestCacheControl,object\nfor the incoming cache control headers.,,,,,close,(,),\u00b6,,Closes associated resources of this request object.  This\ncloses all file handles explicitly.  You can also use the request\nobject in a with statement which will automatically close it.,,,Changelog,,New in version 0.9.,,,,,,content_encoding,\u00b6,,The Content-Encoding entity-header field is used as a modifier to the\nmedia-type.  When present, its value indicates what additional content\ncodings have been applied to the entity-body, and thus what decoding\nmechanisms must be applied in order to obtain the media-type\nreferenced by the Content-Type header field.,,,Changelog,,New in version 0.9.,,,,,,content_length,\u00b6,,The Content-Length entity-header field indicates the size of the\nentity-body in bytes or, in the case of the HEAD method, the size of\nthe entity-body that would have been sent had the request been a\nGET.,,,,,content_md5,\u00b6,,,The Content-MD5 entity-header field, as defined in RFC 1864, is an\nMD5 digest of the entity-body for the purpose of providing an\nend-to-end message integrity check (MIC) of the entity-body.  (Note:\na MIC is good for detecting accidental modification of the\nentity-body in transit, but is not proof against malicious attacks.),,,Changelog,,New in version 0.9.,,,,,,content_type,\u00b6,,The Content-Type entity-header field indicates the media type of\nthe entity-body sent to the recipient or, in the case of the HEAD\nmethod, the media type that would have been sent had the request\nbeen a GET.,,,,,cookies,\u00b6,,A,dict,with the contents of all cookies transmitted with\nthe request.,,,,,data,\u00b6,,Contains the incoming request data as string in case it came with\na mimetype Werkzeug does not handle.,,,,,date,\u00b6,,The Date general-header field represents the date and time at which\nthe message was originated, having the same semantics as orig-date\nin RFC 822.,,,,,dict_storage_class,\u00b6,,alias of,werkzeug.datastructures.ImmutableTypeConversionDict,,,,,endpoint,\u00b6,,The endpoint that matched the request.  This in combination with,view_args,can be used to reconstruct the same or a\nmodified URL.  If an exception happened when matching, this will\nbe,None,.,,,,,files,\u00b6,,MultiDict,object containing\nall uploaded files.  Each key in,files,is the name from the,<input,,type=\"file\",,name=\"\">,.  Each value in,files,is a\nWerkzeug,FileStorage,object.,,It basically behaves like a standard file object you know from Python,\nwith the difference that it also has a,save(),function that can\nstore the file on the filesystem.,,Note that,files,will only contain data if the request method was\nPOST, PUT or PATCH and the,<form>,that posted to the request had,enctype=\"multipart/form-data\",.  It will be empty otherwise.,,See the,MultiDict,/,FileStorage,documentation for\nmore details about the used data structure.,,,,,form,\u00b6,,The form parameters.  By default an,ImmutableMultiDict,is returned from this function.  This can be changed by setting,parameter_storage_class,to a different type.  This might\nbe necessary if the order of the form data is important.,,Please keep in mind that file uploads will not end up here, but instead\nin the,files,attribute.,,,Changelog,,Changed in version 0.9:,Previous to Werkzeug 0.9 this would only contain form data for POST\nand PUT requests.,,,,,,form_data_parser_class,\u00b6,,alias of,werkzeug.formparser.FormDataParser,,,,,classmethod,from_values,(,*args,,,**kwargs,),\u00b6,,Create a new request object based on the values provided.  If\nenviron is given missing values are filled from there.  This method is\nuseful for small scripts when you need to simulate a request from an URL.\nDo not use this method for unittesting, there is a full featured client\nobject (,Client,) that allows to create multipart requests,\nsupport for cookies etc.,,This accepts the same options as the,EnvironBuilder,.,,,Changelog,,Changed in version 0.5:,This method now accepts the same arguments as,EnvironBuilder,.  Because of this the,environ,parameter is now called,environ_overrides,.,,,,,,,Returns:,request object,,,,,,,,full_path,,Requested path as unicode, including the query string.,,,,,get_data,(,cache=True,,,as_text=False,,,parse_form_data=False,),\u00b6,,This reads the buffered incoming data from the client into one\nbytestring.  By default this is cached but that behavior can be\nchanged by setting,cache,to,False,.,,Usually it\u2019s a bad idea to call this method without checking the\ncontent length first as a client could send dozens of megabytes or more\nto cause memory problems on the server.,,Note that if the form data was already parsed this method will not\nreturn anything as form data parsing does not cache the data like\nthis method does.  To implicitly invoke form data parsing function\nset,parse_form_data,to,True,.  When this is done the return value\nof this method will be an empty string if the form parser handles\nthe data.  This generally is not necessary as if the whole data is\ncached (which is the default) the form parser will used the cached\ndata to parse the form data.  Please be generally aware of checking\nthe content length first in any case before calling this method\nto avoid exhausting server memory.,,If,as_text,is set to,True,the return value will be a decoded\nunicode string.,,,Changelog,,New in version 0.9.,,,,,,get_json,(,force=False,,,silent=False,,,cache=True,),\u00b6,,Parse and return the data as JSON. If the mimetype does not\nindicate JSON (,application/json,, see,is_json(),), this returns,None,unless,force,is\ntrue. If parsing fails,,on_json_loading_failed(),is called\nand its return value is used as the return value.,,,,,,Parameters:,,force,\u2013 Ignore the mimetype and always try to parse JSON.,,silent,\u2013 Silence parsing errors and return,None,instead.,,cache,\u2013 Store the parsed JSON to return for subsequent\ncalls.,,,,,,,,,,headers,\u00b6,,The headers from the WSGI environ as immutable,EnvironHeaders,.,,,,,host,\u00b6,,Just the host including the port if available.\nSee also:,trusted_hosts,.,,,,,host_url,\u00b6,,Just the host with scheme as IRI.\nSee also:,trusted_hosts,.,,,,,if_match,\u00b6,,An object containing all the etags in the,If-Match,header.,,,,,,Return type:,ETags,,,,,,,,if_modified_since,\u00b6,,The parsed,If-Modified-Since,header as datetime object.,,,,,if_none_match,\u00b6,,An object containing all the etags in the,If-None-Match,header.,,,,,,Return type:,ETags,,,,,,,,if_range,\u00b6,,The parsed,If-Range,header.,,,Changelog,,New in version 0.7.,,,,,,,Return type:,IfRange,,,,,,,,if_unmodified_since,\u00b6,,The parsed,If-Unmodified-Since,header as datetime object.,,,,,is_json,\u00b6,,Check if the mimetype indicates JSON data, either,application/json,or,application/*+json,.,,,Changelog,,New in version 0.11.,,,,,,is_multiprocess,\u00b6,,boolean that is,True,if the application is served by\na WSGI server that spawns multiple processes.,,,,,is_multithread,\u00b6,,boolean that is,True,if the application is served by\na multithreaded WSGI server.,,,,,is_run_once,\u00b6,,boolean that is,True,if the application will be executed only\nonce in a process lifetime.  This is the case for CGI for example,\nbut it\u2019s not guaranteed that the execution only happens one time.,,,,,is_secure,\u00b6,,True,if the request is secure.,,,,,is_xhr,\u00b6,,True if the request was triggered via a JavaScript XMLHttpRequest.\nThis only works with libraries that support the,X-Requested-With,header and set it to \u201cXMLHttpRequest\u201d.  Libraries that do that are\nprototype, jQuery and Mochikit and probably some more.,,,Deprecated since version 0.13:,X-Requested-With,is not standard and is unreliable.,,,,Changelog,,,,json,\u00b6,,This will contain the parsed JSON data if the mimetype indicates\nJSON (,application/json,, see,is_json(),), otherwise it\nwill be,None,.,,,,,list_storage_class,\u00b6,,alias of,werkzeug.datastructures.ImmutableList,,,,,make_form_data_parser,(,),\u00b6,,Creates the form data parser. Instantiates the,form_data_parser_class,with some parameters.,,,Changelog,,New in version 0.8.,,,,,,max_content_length,\u00b6,,Read-only view of the,MAX_CONTENT_LENGTH,config key.,,,,,max_forwards,\u00b6,,The Max-Forwards request-header field provides a mechanism with the\nTRACE and OPTIONS methods to limit the number of proxies or gateways\nthat can forward the request to the next inbound server.,,,,,method,\u00b6,,The request method. (For example,'GET',or,'POST',).,,,,,mimetype,\u00b6,,Like,content_type,, but without parameters (eg, without\ncharset, type etc.) and always lowercase.  For example if the content\ntype is,text/HTML;,,charset=utf-8,the mimetype would be,'text/html',.,,,,,mimetype_params,\u00b6,,The mimetype parameters as dict.  For example if the content\ntype is,text/html;,,charset=utf-8,the params would be,{'charset':,,'utf-8'},.,,,,,on_json_loading_failed,(,e,),\u00b6,,Called if,get_json(),parsing fails and isn\u2019t silenced. If\nthis method returns a value, it is used as the return value for,get_json(),. The default implementation raises a,BadRequest,exception.,,,Changelog,,Changed in version 0.10:,Raise a,BadRequest,error instead of returning an error\nmessage as JSON. If you want that behavior you can add it by\nsubclassing.,,,,New in version 0.8.,,,,,,parameter_storage_class,\u00b6,,alias of,werkzeug.datastructures.ImmutableMultiDict,,,,,path,,Requested path as unicode.  This works a bit like the regular path\ninfo in the WSGI environment but will always include a leading slash,\neven if the URL root is accessed.,,,,,pragma,\u00b6,,The Pragma general-header field is used to include\nimplementation-specific directives that might apply to any recipient\nalong the request/response chain.  All pragma directives specify\noptional behavior from the viewpoint of the protocol; however, some\nsystems MAY require that behavior be consistent with the directives.,,,,,query_string,\u00b6,,The URL parameters as raw bytestring.,,,,,range,\u00b6,,The parsed,Range,header.,,,Changelog,,New in version 0.7.,,,,,,,Return type:,Range,,,,,,,,referrer,\u00b6,,The Referer[sic] request-header field allows the client to specify,\nfor the server\u2019s benefit, the address (URI) of the resource from which\nthe Request-URI was obtained (the \u201creferrer\u201d, although the header\nfield is misspelled).,,,,,remote_addr,\u00b6,,The remote address of the client.,,,,,remote_user,\u00b6,,If the server supports user authentication, and the script is\nprotected, this attribute contains the username the user has\nauthenticated as.,,,,,routing_exception,= None,\u00b6,,If matching the URL failed, this is the exception that will be\nraised / was raised as part of the request handling.  This is\nusually a,NotFound,exception or\nsomething similar.,,,,,scheme,\u00b6,,URL scheme (http or https).,,,Changelog,,New in version 0.7.,,,,,,script_root,,The root path of the script without the trailing slash.,,,,,stream,\u00b6,,If the incoming form data was not encoded with a known mimetype\nthe data is stored unmodified in this stream for consumption.  Most\nof the time it is a better idea to use,data,which will give\nyou that data as a string.  The stream only returns the data once.,,Unlike,input_stream,this stream is properly guarded that you\ncan\u2019t accidentally read past the length of the input.  Werkzeug will\ninternally always refer to this stream to read data which makes it\npossible to wrap this object with a stream that does filtering.,,,Changelog,,Changed in version 0.9:,This stream is now always available but might be consumed by the\nform parser later on.  Previously the stream was only set if no\nparsing happened.,,,,,,url,,The reconstructed current URL as IRI.\nSee also:,trusted_hosts,.,,,,,url_charset,\u00b6,,The charset that is assumed for URLs.  Defaults to the value\nof,charset,.,,,Changelog,,New in version 0.6.,,,,,,url_root,,The full URL root (with hostname), this is the application\nroot as IRI.\nSee also:,trusted_hosts,.,,,,,url_rule,= None,\u00b6,,The internal URL rule that matched the request.  This can be\nuseful to inspect which methods are allowed for the URL from\na before/after handler (,request.url_rule.methods,) etc.\nThough if the request\u2019s method was invalid for the URL rule,\nthe valid list is available in,routing_exception.valid_methods,instead (an attribute of the Werkzeug exception,MethodNotAllowed,)\nbecause the request was never internally bound.,,,Changelog,,New in version 0.6.,,,,,,user_agent,\u00b6,,The current user agent.,,,,,values,\u00b6,,A,werkzeug.datastructures.CombinedMultiDict,that combines,args,and,form,.,,,,,view_args,= None,\u00b6,,A dict of view arguments that matched the request.  If an exception\nhappened when matching, this will be,None,.,,,,,want_form_data_parsed,\u00b6,,Returns True if the request method carries content.  As of\nWerkzeug 0.9 this will be the case if a content type is transmitted.,,,Changelog,,New in version 0.8.,,,,,,,flask.,request,\u00b6,,To access incoming request data, you can use the global,request,object.  Flask parses incoming request data for you and gives you\naccess to it through that global object.  Internally Flask makes\nsure that you always get the correct data for the active thread if you\nare in a multithreaded environment.,,This is a proxy.  See,Notes On Proxies,for more information.,,The request object is an instance of a,Request,subclass and provides all of the attributes Werkzeug defines.  This\njust shows a quick overview of the most important ones.,,,,,Response Objects,\u00b6,,,,class,flask.,Response,(,response=None,,,status=None,,,headers=None,,,mimetype=None,,,content_type=None,,,direct_passthrough=False,),\u00b6,,The response object that is used by default in Flask.  Works like the\nresponse object from Werkzeug but is set to have an HTML mimetype by\ndefault.  Quite often you don\u2019t have to create this object yourself because,make_response(),will take care of that for you.,,If you want to replace the response object used you can subclass this and\nset,response_class,to your subclass.,,,Changed in version 1.0:,JSON support is added to the response, like the request. This is useful\nwhen testing to get the test client response data as JSON.,,,,Changed in version 1.0:,Added,max_cookie_size,.,,,,Changelog,,,headers,\u00b6,,A,Headers,object representing the response headers.,,,,,status,\u00b6,,A string with a response status.,,,,,status_code,\u00b6,,The response status as integer.,,,,,data,\u00b6,,A descriptor that calls,get_data(),and,set_data(),.  This\nshould not be used and will eventually get deprecated.,,,,,get_json,(,force=False,,,silent=False,,,cache=True,),\u00b6,,Parse and return the data as JSON. If the mimetype does not\nindicate JSON (,application/json,, see,is_json(),), this returns,None,unless,force,is\ntrue. If parsing fails,,on_json_loading_failed(),is called\nand its return value is used as the return value.,,,,,,Parameters:,,force,\u2013 Ignore the mimetype and always try to parse JSON.,,silent,\u2013 Silence parsing errors and return,None,instead.,,cache,\u2013 Store the parsed JSON to return for subsequent\ncalls.,,,,,,,,,,is_json,\u00b6,,Check if the mimetype indicates JSON data, either,application/json,or,application/*+json,.,,,Changelog,,New in version 0.11.,,,,,,max_cookie_size,\u00b6,,Read-only view of the,MAX_COOKIE_SIZE,config key.,,See,max_cookie_size,in\nWerkzeug\u2019s docs.,,,,,mimetype,\u00b6,,The mimetype (content type without charset etc.),,,,,set_cookie,(,key,,,value='',,,max_age=None,,,expires=None,,,path='/',,,domain=None,,,secure=False,,,httponly=False,,,samesite=None,),\u00b6,,Sets a cookie. The parameters are the same as in the cookie,Morsel,object in the Python standard library but it accepts unicode data, too.,,A warning is raised if the size of the cookie header exceeds,max_cookie_size,, but the header will still be set.,,,,,,Parameters:,,key,\u2013 the key (name) of the cookie to be set.,,value,\u2013 the value of the cookie.,,max_age,\u2013 should be a number of seconds, or,None,(default) if\nthe cookie should last only as long as the client\u2019s\nbrowser session.,,expires,\u2013 should be a,datetime,object or UNIX timestamp.,,path,\u2013 limits the cookie to a given path, per default it will\nspan the whole domain.,,domain,\u2013 if you want to set a cross-domain cookie.  For example,,domain=\".example.com\",will set a cookie that is\nreadable by the domain,www.example.com,,,foo.example.com,etc.  Otherwise, a cookie will only\nbe readable by the domain that set it.,,secure,\u2013 If,True,, the cookie will only be available via HTTPS,,httponly,\u2013 disallow JavaScript to access the cookie.  This is an\nextension to the cookie standard and probably not\nsupported by all browsers.,,samesite,\u2013 Limits the scope of the cookie such that it will only\nbe attached to requests if those requests are\n\u201csame-site\u201d.,,,,,,,,,,,Sessions,\u00b6,,If you have set,Flask.secret_key,(or configured it from,SECRET_KEY,) you can use sessions in Flask applications. A session makes\nit possible to remember information from one request to another. The way Flask\ndoes this is by using a signed cookie. The user can look at the session\ncontents, but can\u2019t modify it unless they know the secret key, so make sure to\nset that to something complex and unguessable.,,To access the current session you can use the,session,object:,,,,class,flask.,session,\u00b6,,The session object works pretty much like an ordinary dict, with the\ndifference that it keeps track on modifications.,,This is a proxy.  See,Notes On Proxies,for more information.,,The following attributes are interesting:,,,,new,\u00b6,,True,if the session is new,,False,otherwise.,,,,,modified,\u00b6,,True,if the session object detected a modification.  Be advised\nthat modifications on mutable structures are not picked up\nautomatically, in that situation you have to explicitly set the\nattribute to,True,yourself.  Here an example:,,# this change is not picked up because a mutable object (here,,# a list) is changed.,,session,[,'objects',],.,append,(,42,),,# so mark it as modified yourself,,session,.,modified,,=,,True,,,,,,,permanent,\u00b6,,If set to,True,the session lives for,permanent_session_lifetime,seconds.  The\ndefault is 31 days.  If set to,False,(which is the default) the\nsession will be deleted when the user closes the browser.,,,,,,Session Interface,\u00b6,,,Changelog,,New in version 0.8.,,,The session interface provides a simple way to replace the session\nimplementation that Flask is using.,,,,class,flask.sessions.,SessionInterface,\u00b6,,The basic interface you have to implement in order to replace the\ndefault session interface which uses werkzeug\u2019s securecookie\nimplementation.  The only methods you have to implement are,open_session(),and,save_session(),, the others have\nuseful defaults which you don\u2019t need to change.,,The session object returned by the,open_session(),method has to\nprovide a dictionary like interface plus the properties and methods\nfrom the,SessionMixin,.  We recommend just subclassing a dict\nand adding that mixin:,,class,,Session,(,dict,,,,SessionMixin,):,,pass,,,,If,open_session(),returns,None,Flask will call into,make_null_session(),to create a session that acts as replacement\nif the session support cannot work because some requirement is not\nfulfilled.  The default,NullSession,class that is created\nwill complain that the secret key was not set.,,To replace the session interface on an application all you have to do\nis to assign,flask.Flask.session_interface,:,,app,,=,,Flask,(,__name__,),,app,.,session_interface,,=,,MySessionInterface,(),,,,,Changelog,,New in version 0.8.,,,,,get_cookie_domain,(,app,),\u00b6,,Returns the domain that should be set for the session cookie.,,Uses,SESSION_COOKIE_DOMAIN,if it is configured, otherwise\nfalls back to detecting the domain based on,SERVER_NAME,.,,Once detected (or if not set at all),,SESSION_COOKIE_DOMAIN,is\nupdated to avoid re-running the logic.,,,,,get_cookie_httponly,(,app,),\u00b6,,Returns True if the session cookie should be httponly.  This\ncurrently just returns the value of the,SESSION_COOKIE_HTTPONLY,config var.,,,,,get_cookie_path,(,app,),\u00b6,,Returns the path for which the cookie should be valid.  The\ndefault implementation uses the value from the,SESSION_COOKIE_PATH,config var if it\u2019s set, and falls back to,APPLICATION_ROOT,or\nuses,/,if it\u2019s,None,.,,,,,get_cookie_samesite,(,app,),\u00b6,,Return,'Strict',or,'Lax',if the cookie should use the,SameSite,attribute. This currently just returns the value of\nthe,SESSION_COOKIE_SAMESITE,setting.,,,,,get_cookie_secure,(,app,),\u00b6,,Returns True if the cookie should be secure.  This currently\njust returns the value of the,SESSION_COOKIE_SECURE,setting.,,,,,get_expiration_time,(,app,,,session,),\u00b6,,A helper method that returns an expiration date for the session\nor,None,if the session is linked to the browser session.  The\ndefault implementation returns now + the permanent session\nlifetime configured on the application.,,,,,is_null_session,(,obj,),\u00b6,,Checks if a given object is a null session.  Null sessions are\nnot asked to be saved.,,This checks if the object is an instance of,null_session_class,by default.,,,,,make_null_session,(,app,),\u00b6,,Creates a null session which acts as a replacement object if the\nreal session support could not be loaded due to a configuration\nerror.  This mainly aids the user experience because the job of the\nnull session is to still support lookup without complaining but\nmodifications are answered with a helpful error message of what\nfailed.,,This creates an instance of,null_session_class,by default.,,,,,null_session_class,\u00b6,,make_null_session(),will look here for the class that should\nbe created when a null session is requested.  Likewise the,is_null_session(),method will perform a typecheck against\nthis type.,,alias of,NullSession,,,,,open_session,(,app,,,request,),\u00b6,,This method has to be implemented and must either return,None,in case the loading failed because of a configuration error or an\ninstance of a session object which implements a dictionary like\ninterface + the methods and attributes on,SessionMixin,.,,,,,pickle_based,= False,\u00b6,,A flag that indicates if the session interface is pickle based.\nThis can be used by Flask extensions to make a decision in regards\nto how to deal with the session object.,,,Changelog,,New in version 0.10.,,,,,,save_session,(,app,,,session,,,response,),\u00b6,,This is called for actual sessions returned by,open_session(),at the end of the request.  This is still called during a request\ncontext so if you absolutely need access to the request you can do\nthat.,,,,,should_set_cookie,(,app,,,session,),\u00b6,,Used by session backends to determine if a,Set-Cookie,header\nshould be set for this session cookie for this response. If the session\nhas been modified, the cookie is set. If the session is permanent and\nthe,SESSION_REFRESH_EACH_REQUEST,config is true, the cookie is\nalways set.,,This check is usually skipped if the session was deleted.,,,Changelog,,New in version 0.11.,,,,,,,class,flask.sessions.,SecureCookieSessionInterface,\u00b6,,The default session interface that stores sessions in signed cookies\nthrough the,itsdangerous,module.,,,,static,digest_method,(,),\u00b6,,the hash function to use for the signature.  The default is sha1,,,,,key_derivation,= 'hmac',\u00b6,,the name of the itsdangerous supported key derivation.  The default\nis hmac.,,,,,open_session,(,app,,,request,),\u00b6,,This method has to be implemented and must either return,None,in case the loading failed because of a configuration error or an\ninstance of a session object which implements a dictionary like\ninterface + the methods and attributes on,SessionMixin,.,,,,,salt,= 'cookie-session',\u00b6,,the salt that should be applied on top of the secret key for the\nsigning of cookie based sessions.,,,,,save_session,(,app,,,session,,,response,),\u00b6,,This is called for actual sessions returned by,open_session(),at the end of the request.  This is still called during a request\ncontext so if you absolutely need access to the request you can do\nthat.,,,,,serializer,= <flask.json.tag.TaggedJSONSerializer object>,\u00b6,,A python serializer for the payload.  The default is a compact\nJSON derived serializer with support for some extra Python types\nsuch as datetime objects or tuples.,,,,,session_class,\u00b6,,alias of,SecureCookieSession,,,,,,class,flask.sessions.,SecureCookieSession,(,initial=None,),\u00b6,,Base class for sessions based on signed cookies.,,This session backend will set the,modified,and,accessed,attributes. It cannot reliably track whether a\nsession is new (vs. empty), so,new,remains hard coded to,False,.,,,,accessed,= False,\u00b6,,header, which allows caching proxies to cache different pages for\ndifferent users.,,,,,get,(,k,[,,,d,],),\u2192 D[k] if k in D, else d.  d defaults to None.,\u00b6,,,,,modified,= False,\u00b6,,When data is changed, this is set to,True,. Only the session\ndictionary itself is tracked; if the session contains mutable\ndata (for example a nested dict) then this must be set to,True,manually when modifying that data. The session cookie\nwill only be written to the response if this is,True,.,,,,,setdefault,(,k,[,,,d,],),\u2192 D.get(k,d), also set D[k]=d if k not in D,\u00b6,,,,,,class,flask.sessions.,NullSession,(,initial=None,),\u00b6,,Class used to generate nicer error messages if sessions are not\navailable.  Will still allow read-only access to the empty session\nbut fail on setting.,,,,,class,flask.sessions.,SessionMixin,\u00b6,,Expands a basic dictionary with session attributes.,,,,accessed,= True,\u00b6,,Some implementations can detect when session data is read or\nwritten and set this when that happens. The mixin default is hard\ncoded to,True,.,,,,,modified,= True,\u00b6,,Some implementations can detect changes to the session and set\nthis when that happens. The mixin default is hard coded to,True,.,,,,,permanent,\u00b6,,This reflects the,'_permanent',key in the dict.,,,,,Notice,,The,PERMANENT_SESSION_LIFETIME,config key can also be an integer\nstarting with Flask 0.8.  Either catch this down yourself or use\nthe,permanent_session_lifetime,attribute on the\napp which converts the result to an integer automatically.,,,,,Test Client,\u00b6,,,,class,flask.testing.,FlaskClient,(,*args,,,**kwargs,),\u00b6,,Works like a regular Werkzeug test client but has some knowledge about\nhow Flask works to defer the cleanup of the request context stack to the\nend of a,with,body when used in a,with,statement.  For general\ninformation about how to use this class refer to,werkzeug.test.Client,.,,,Changelog,,Changed in version 0.12:,app.test_client(),includes preset default environment, which can be\nset after instantiation of the,app.test_client(),object in,client.environ_base,.,,,Basic usage is outlined in the,Testing Flask Applications,chapter.,,,,open,(,*args,,,**kwargs,),\u00b6,,Takes the same arguments as the,EnvironBuilder,class with\nsome additions:  You can provide a,EnvironBuilder,or a WSGI\nenvironment as only argument instead of the,EnvironBuilder,arguments and two optional keyword arguments (,as_tuple,,,buffered,)\nthat change the type of the return value or the way the application is\nexecuted.,,,Changelog,,Changed in version 0.5:,If a dict is provided as file in the dict for the,data,parameter\nthe content type has to be called,content_type,now instead of,mimetype,.  This change was made for consistency with,werkzeug.FileWrapper,.,,,The,follow_redirects,parameter was added to,open(),.,,,Additional parameters:,,,,,,Parameters:,,as_tuple,\u2013 Returns a tuple in the form,(environ,,,result),,buffered,\u2013 Set this to True to buffer the application run.\nThis will automatically close the application for\nyou as well.,,follow_redirects,\u2013 Set this to True if the,Client,should\nfollow HTTP redirects.,,,,,,,,,,session_transaction,(,*args,,,**kwargs,),\u00b6,,When used in combination with a,with,statement this opens a\nsession transaction.  This can be used to modify the session that\nthe test client uses.  Once the,with,block is left the session is\nstored back.,,with,,client,.,session_transaction,(),,as,,session,:,,session,[,'value',],,=,,42,,,,Internally this is implemented by going through a temporary test\nrequest context and since session handling could depend on\nrequest variables this function accepts the same arguments as,test_request_context(),which are directly\npassed through.,,,,,,Test CLI Runner,\u00b6,,,,class,flask.testing.,FlaskCliRunner,(,app,,,**kwargs,),\u00b6,,A,CliRunner,for testing a Flask app\u2019s\nCLI commands. Typically created using,test_cli_runner(),. See,Testing CLI Commands,.,,,,invoke,(,cli=None,,,args=None,,,**kwargs,),\u00b6,,Invokes a CLI command in an isolated environment. See,CliRunner.invoke,for\nfull method documentation. See,Testing CLI Commands,for examples.,,If the,obj,argument is not given, passes an instance of,ScriptInfo,that knows how to load the Flask\napp being tested.,,,,,,Parameters:,,cli,\u2013 Command object to invoke. Default is the app\u2019s,cli,group.,,args,\u2013 List of strings to invoke the command with.,,,,,Returns:,a,Result,object.,,,,,,,,,,Application Globals,\u00b6,,To share data that is valid for one request only from one function to\nanother, a global variable is not good enough because it would break in\nthreaded environments.  Flask provides you with a special object that\nensures it is only valid for the active request and that will return\ndifferent values for each request.  In a nutshell: it does the right\nthing, like it does for,request,and,session,.,,,,flask.,g,\u00b6,,A namespace object that can store data during an,application context,. This is an instance of,Flask.app_ctx_globals_class,, which defaults to,ctx._AppCtxGlobals,.,,This is a good place to store resources during a request. During\ntesting, you can use the,Faking Resources and Context,pattern to\npre-configure such resources.,,This is a proxy. See,Notes On Proxies,for more information.,,,Changelog,,Changed in version 0.10:,Bound to the application context instead of the request context.,,,,,,class,flask.ctx.,_AppCtxGlobals,\u00b6,,A plain object. Used as a namespace for storing data during an\napplication context.,,Creating an app context automatically creates this object, which is\nmade available as the,g,proxy.,,,,'key' in g,,Check whether an attribute is present.,,,Changelog,,New in version 0.10.,,,,,,iter(g),,Return an iterator over the attribute names.,,,Changelog,,New in version 0.10.,,,,,,get,(,name,,,default=None,),\u00b6,,Get an attribute by name, or a default value. Like,dict.get(),.,,,,,,Parameters:,,name,\u2013 Name of attribute to get.,,default,\u2013 Value to return if the attribute is not present.,,,,,,,,Changelog,,New in version 0.10.,,,,,,pop,(,name,,,default=<object object>,),\u00b6,,Get and remove an attribute by name. Like,dict.pop(),.,,,,,,Parameters:,,name,\u2013 Name of attribute to pop.,,default,\u2013 Value to return if the attribute is not present,\ninstead of raise a,KeyError,.,,,,,,,,Changelog,,New in version 0.11.,,,,,,setdefault,(,name,,,default=None,),\u00b6,,Get the value of an attribute if it is present, otherwise\nset and return a default value. Like,dict.setdefault(),.,,,,,,Parameters:,name,\u2013 Name of attribute to get.,,,Param:,default: Value to set and return if the attribute is not\npresent.,,,,,,Changelog,,New in version 0.11.,,,,,,,Useful Functions and Classes,\u00b6,,,,flask.,current_app,\u00b6,,A proxy to the application handling the current request. This is\nuseful to access the application without needing to import it, or if\nit can\u2019t be imported, such as when using the application factory\npattern or in blueprints and extensions.,,This is only available when an,application context,is pushed. This happens\nautomatically during requests and CLI commands. It can be controlled\nmanually with,app_context(),.,,This is a proxy. See,Notes On Proxies,for more information.,,,,,flask.,has_request_context,(,),\u00b6,,If you have code that wants to test if a request context is there or\nnot this function can be used.  For instance, you may want to take advantage\nof request information if the request object is available, but fail\nsilently if it is unavailable.,,class,,User,(,db,.,Model,):,,def,,__init__,(,self,,,,username,,,,remote_addr,=,None,):,,self,.,username,,=,,username,,if,,remote_addr,,is,,None,,and,,has_request_context,():,,remote_addr,,=,,request,.,remote_addr,,self,.,remote_addr,,=,,remote_addr,,,,Alternatively you can also just test any of the context bound objects\n(such as,request,or,g,for truthness):,,class,,User,(,db,.,Model,):,,def,,__init__,(,self,,,,username,,,,remote_addr,=,None,):,,self,.,username,,=,,username,,if,,remote_addr,,is,,None,,and,,request,:,,remote_addr,,=,,request,.,remote_addr,,self,.,remote_addr,,=,,remote_addr,,,,,Changelog,,New in version 0.7.,,,,,,flask.,copy_current_request_context,(,f,),\u00b6,,A helper function that decorates a function to retain the current\nrequest context.  This is useful when working with greenlets.  The moment\nthe function is decorated a copy of the request context is created and\nthen pushed when the function is called.,,Example:,,import,,gevent,,from,,flask,,import,,copy_current_request_context,,@app,.,route,(,'/',),,def,,index,():,,@copy_current_request_context,,def,,do_some_work,():,,# do some work here, it can access flask.request like you,,# would otherwise in the view function.,,...,,gevent,.,spawn,(,do_some_work,),,return,,'Regular response',,,,,Changelog,,New in version 0.10.,,,,,,flask.,has_app_context,(,),\u00b6,,Works like,has_request_context(),but for the application\ncontext.  You can also just do a boolean check on the,current_app,object instead.,,,Changelog,,New in version 0.9.,,,,,,flask.,url_for,(,endpoint,,,**values,),\u00b6,,Generates a URL to the given endpoint with the method provided.,,Variable arguments that are unknown to the target endpoint are appended\nto the generated URL as query arguments.  If the value of a query argument\nis,None,, the whole pair is skipped.  In case blueprints are active\nyou can shortcut references to the same blueprint by prefixing the\nlocal endpoint with a dot (,.,).,,This will reference the index function local to the current blueprint:,,url_for,(,'.index',),,,,For more information, head over to the,Quickstart,.,,To integrate applications,,Flask,has a hook to intercept URL build\nerrors through,Flask.url_build_error_handlers,.  The,url_for,function results in a,BuildError,when the current\napp does not have a URL for the given endpoint and values.  When it does, the,current_app,calls its,url_build_error_handlers,if\nit is not,None,, which can return a string to use as the result of,url_for,(instead of,url_for,\u2019s default to raise the,BuildError,exception) or re-raise the exception.\nAn example:,,def,,external_url_handler,(,error,,,,endpoint,,,,values,):,,\"Looks up an external URL when `url_for` cannot build a URL.\",,# This is an example of hooking the build_error_handler.,,# Here, lookup_url is some utility function you've built,,# which looks up the endpoint in some external URL registry.,,url,,=,,lookup_url,(,endpoint,,,,**,values,),,if,,url,,is,,None,:,,# External lookup did not have a URL.,,# Re-raise the BuildError, in context of original traceback.,,exc_type,,,,exc_value,,,,tb,,=,,sys,.,exc_info,(),,if,,exc_value,,is,,error,:,,raise,,exc_type,,,,exc_value,,,,tb,,else,:,,raise,,error,,# url_for will use this result, instead of raising BuildError.,,return,,url,,app,.,url_build_error_handlers,.,append,(,external_url_handler,),,,,Here,,error,is the instance of,BuildError,, and,endpoint,and,values,are the arguments passed into,url_for,.  Note\nthat this is for building URLs outside the current application, and not for\nhandling 404 NotFound errors.,,,Changelog,,New in version 0.10:,The,_scheme,parameter was added.,,,,New in version 0.9:,The,_anchor,and,_method,parameters were added.,,,,New in version 0.9:,Calls,Flask.handle_build_error(),on,BuildError,.,,,,,,,Parameters:,,endpoint,\u2013 the endpoint of the URL (name of the function),,values,\u2013 the variable arguments of the URL rule,,_external,\u2013 if set to,True,, an absolute URL is generated. Server\naddress can be changed via,SERVER_NAME,configuration variable which\ndefaults to,localhost,.,,_scheme,\u2013 a string specifying the desired URL scheme. The,_external,parameter must be set to,True,or a,ValueError,is raised. The default\nbehavior uses the same scheme as the current request, or,PREFERRED_URL_SCHEME,from the,app configuration,if no\nrequest context is available. As of Werkzeug 0.10, this also can be set\nto an empty string to build protocol-relative URLs.,,_anchor,\u2013 if provided this is added as anchor to the URL.,,_method,\u2013 if provided this explicitly specifies an HTTP method.,,,,,,,,,,flask.,abort,(,status,,,*args,,,**kwargs,),\u00b6,,Raises an,HTTPException,for the given status code or WSGI\napplication:,,abort,(,404,),,# 404 Not Found,,abort,(,Response,(,'Hello World',)),,,,Can be passed a WSGI application or a status code.  If a status code is\ngiven it\u2019s looked up in the list of exceptions and will raise that\nexception, if passed a WSGI application it will wrap it in a proxy WSGI\nexception and raise that:,,abort,(,404,),,abort,(,Response,(,'Hello World',)),,,,,,,flask.,redirect,(,location,,,code=302,,,Response=None,),\u00b6,,Returns a response object (a WSGI application) that, if called,\nredirects the client to the target location.  Supported codes are 301,\n302, 303, 305, and 307.  300 is not supported because it\u2019s not a real\nredirect and 304 because it\u2019s the answer for a request with a request\nwith defined If-Modified-Since headers.,,,Changelog,,New in version 0.10:,The class used for the Response object can now be passed in.,,,,New in version 0.6:,The location can now be a unicode string that is encoded using\nthe,iri_to_uri(),function.,,,,,,,Parameters:,,location,\u2013 the location the response should redirect to.,,code,\u2013 the redirect status code. defaults to 302.,,Response,(,class,) \u2013 a Response class to use when instantiating a\nresponse. The default is,werkzeug.wrappers.Response,if\nunspecified.,,,,,,,,,,flask.,make_response,(,*args,),\u00b6,,Sometimes it is necessary to set additional headers in a view.  Because\nviews do not have to return response objects but can return a value that\nis converted into a response object by Flask itself, it becomes tricky to\nadd headers to it.  This function can be called instead of using a return\nand you will get a response object which you can use to attach headers.,,If view looked like this and you want to add a new header:,,def,,index,():,,return,,render_template,(,'index.html',,,,foo,=,42,),,,,You can now do something like this:,,def,,index,():,,response,,=,,make_response,(,render_template,(,'index.html',,,,foo,=,42,)),,response,.,headers,[,'X-Parachutes',],,=,,'parachutes are cool',,return,,response,,,,This function accepts the very same arguments you can return from a\nview function.  This for example creates a response with a 404 error\ncode:,,response,,=,,make_response,(,render_template,(,'not_found.html',),,,404,),,,,The other use case of this function is to force the return value of a\nview function into a response which is helpful with view\ndecorators:,,response,,=,,make_response,(,view_function,()),,response,.,headers,[,'X-Parachutes',],,=,,'parachutes are cool',,,,Internally this function does the following things:,,,if no arguments are passed, it creates a new response argument,,if one argument is passed,,flask.Flask.make_response(),is invoked with it.,,if more than one argument is passed, the arguments are passed\nto the,flask.Flask.make_response(),function as tuple.,,,,Changelog,,New in version 0.6.,,,,,,flask.,after_this_request,(,f,),\u00b6,,Executes a function after this request.  This is useful to modify\nresponse objects.  The function is passed the response object and has\nto return the same or a new one.,,Example:,,@app,.,route,(,'/',),,def,,index,():,,@after_this_request,,def,,add_header,(,response,):,,response,.,headers,[,'X-Foo',],,=,,'Parachute',,return,,response,,return,,'Hello World!',,,,This is more useful if a function other than the view function wants to\nmodify a response.  For instance think of a decorator that wants to add\nsome headers without converting the return value into a response object.,,,Changelog,,New in version 0.9.,,,,,,flask.,send_file,(,filename_or_fp,,,mimetype=None,,,as_attachment=False,,,attachment_filename=None,,,add_etags=True,,,cache_timeout=None,,,conditional=False,,,last_modified=None,),\u00b6,,Sends the contents of a file to the client.  This will use the\nmost efficient method available and configured.  By default it will\ntry to use the WSGI server\u2019s file_wrapper support.  Alternatively\nyou can set the application\u2019s,use_x_sendfile,attribute\nto,True,to directly emit an,X-Sendfile,header.  This however\nrequires support of the underlying webserver for,X-Sendfile,.,,By default it will try to guess the mimetype for you, but you can\nalso explicitly provide one.  For extra security you probably want\nto send certain files as attachment (HTML for instance).  The mimetype\nguessing requires a,filename,or an,attachment_filename,to be\nprovided.,,ETags will also be attached automatically if a,filename,is provided. You\ncan turn this off by setting,add_etags=False,.,,If,conditional=True,and,filename,is provided, this method will try to\nupgrade the response stream to support range requests.  This will allow\nthe request to be answered with partial content response.,,Please never pass filenames to this function from user sources;\nyou should use,send_from_directory(),instead.,,,Changed in version 1.0:,UTF-8 filenames, as specified in,RFC 2231,, are supported.,,,,Changelog,,Changed in version 0.12:,The filename is no longer automatically inferred from file objects. If\nyou want to use automatic mimetype and etag support, pass a filepath via,filename_or_fp,or,attachment_filename,.,,,,Changed in version 0.12:,The,attachment_filename,is preferred over,filename,for MIME-type\ndetection.,,,,Changed in version 0.9:,cache_timeout pulls its default from application config, when None.,,,,Changed in version 0.7:,mimetype guessing and etag support for file objects was\ndeprecated because it was unreliable.  Pass a filename if you are\nable to, otherwise attach an etag yourself.  This functionality\nwill be removed in Flask 1.0,,,,New in version 0.5:,The,add_etags,,,cache_timeout,and,conditional,parameters were\nadded.  The default behavior is now to attach etags.,,,,New in version 0.2.,,,,,,,Parameters:,,filename_or_fp,\u2013 the filename of the file to send.\nThis is relative to the,root_path,if a relative path is specified.\nAlternatively a file object might be provided in\nwhich case,X-Sendfile,might not work and fall\nback to the traditional method.  Make sure that the\nfile pointer is positioned at the start of data to\nsend before calling,send_file(),.,,mimetype,\u2013 the mimetype of the file if provided. If a file path is\ngiven, auto detection happens as fallback, otherwise an\nerror will be raised.,,as_attachment,\u2013 set to,True,if you want to send this file with\na,Content-Disposition:,,attachment,header.,,attachment_filename,\u2013 the filename for the attachment if it\ndiffers from the file\u2019s filename.,,add_etags,\u2013 set to,False,to disable attaching of etags.,,conditional,\u2013 set to,True,to enable conditional responses.,,cache_timeout,\u2013 the timeout in seconds for the headers. When,None,(default), this value is set by,get_send_file_max_age(),of,current_app,.,,last_modified,\u2013 set the,Last-Modified,header to this value,\na,datetime,or timestamp.\nIf a file was passed, this overrides its mtime.,,,,,,,,,,flask.,send_from_directory,(,directory,,,filename,,,**options,),\u00b6,,Send a file from a given directory with,send_file(),.  This\nis a secure way to quickly expose static files from an upload folder\nor something similar.,,Example usage:,,@app,.,route,(,'/uploads/<path:filename>',),,def,,download_file,(,filename,):,,return,,send_from_directory,(,app,.,config,[,'UPLOAD_FOLDER',],,,filename,,,,as_attachment,=,True,),,,,,Sending files and Performance,,It is strongly recommended to activate either,X-Sendfile,support in\nyour webserver or (if no authentication happens) to tell the webserver\nto serve files for the given path on its own without calling into the\nweb application for improved performance.,,,,Changelog,,New in version 0.5.,,,,,,,Parameters:,,directory,\u2013 the directory where all the files are stored.,,filename,\u2013 the filename relative to that directory to\ndownload.,,options,\u2013 optional keyword arguments that are directly\nforwarded to,send_file(),.,,,,,,,,,,flask.,safe_join,(,directory,,,*pathnames,),\u00b6,,Safely join,directory,and zero or more untrusted,pathnames,components.,,Example usage:,,@app,.,route,(,'/wiki/<path:filename>',),,def,,wiki_page,(,filename,):,,filename,,=,,safe_join,(,app,.,config,[,'WIKI_FOLDER',],,,filename,),,with,,open,(,filename,,,,'rb',),,as,,fd,:,,content,,=,,fd,.,read,(),,# Read and process the file content...,,,,,,,,Parameters:,,directory,\u2013 the trusted base directory.,,pathnames,\u2013 the untrusted pathnames relative to that directory.,,,,,Raises:,NotFound,if one or more passed\npaths fall out of its boundaries.,,,,,,,,,flask.,escape,(,s,),\u2192 markup,\u00b6,,Convert the characters &, <, >, \u2018, and \u201d in string s to HTML-safe\nsequences.  Use this if you need to display text that might contain\nsuch characters in HTML.  Marks return value as markup string.,,,,,class,flask.,Markup,\u00b6,,Marks a string as being safe for inclusion in HTML/XML output without\nneeding to be escaped.  This implements the,__html__,interface a couple\nof frameworks and web applications use.,Markup,is a direct\nsubclass of,unicode,and provides all the methods of,unicode,just that\nit escapes arguments passed and always returns,Markup,.,,The,escape,function returns markup objects so that double escaping can\u2019t\nhappen.,,The constructor of the,Markup,class can be used for three\ndifferent things:  When passed an unicode object it\u2019s assumed to be safe,\nwhen passed an object with an HTML representation (has an,__html__,method) that representation is used, otherwise the object passed is\nconverted into a unicode string and then assumed to be safe:,,>>>,Markup,(,\"Hello <em>World</em>!\",),,Markup(u'Hello <em>World</em>!'),,>>>,class,,Foo,(,object,):,,...,,def,,__html__,(,self,):,,...,,return,,'<a href=\"#\">foo</a>',,...,,>>>,Markup,(,Foo,()),,Markup(u'<a href=\"#\">foo</a>'),,,,If you want object passed being always treated as unsafe you can use the,escape(),classmethod to create a,Markup,object:,,>>>,Markup,.,escape,(,\"Hello <em>World</em>!\",),,Markup(u'Hello &lt;em&gt;World&lt;/em&gt;!'),,,,Operations on a markup string are markup aware which means that all\narguments are passed through the,escape(),function:,,>>>,em,,=,,Markup,(,\"<em>,%s,</em>\",),,>>>,em,,%,,\"foo & bar\",,Markup(u'<em>foo &amp; bar</em>'),,>>>,strong,,=,,Markup,(,\"<strong>,%(text)s,</strong>\",),,>>>,strong,,%,,{,'text',:,,'<blink>hacker here</blink>',},,Markup(u'<strong>&lt;blink&gt;hacker here&lt;/blink&gt;</strong>'),,>>>,Markup,(,\"<em>Hello</em> \",),,+,,\"<foo>\",,Markup(u'<em>Hello</em> &lt;foo&gt;'),,,,,,classmethod,escape,(,s,),\u00b6,,Escape the string.  Works like,escape(),with the difference\nthat for subclasses of,Markup,this function would return the\ncorrect subclass.,,,,,striptags,(,),\u00b6,,Unescape markup into an text_type string and strip all tags.  This\nalso resolves known HTML4 and XHTML entities.  Whitespace is\nnormalized to one:,,>>>,Markup,(,\"Main &raquo;  <em>About</em>\",),.,striptags,(),,u'Main \\xbb About',,,,,,,unescape,(,),\u00b6,,Unescape markup again into an text_type string.  This also resolves\nknown HTML4 and XHTML entities:,,>>>,Markup,(,\"Main &raquo; <em>About</em>\",),.,unescape,(),,u'Main \\xbb <em>About</em>',,,,,,,,Message Flashing,\u00b6,,,,flask.,flash,(,message,,,category='message',),\u00b6,,Flashes a message to the next request.  In order to remove the\nflashed message from the session and to display it to the user,\nthe template has to call,get_flashed_messages(),.,,,Changelog,,Changed in version 0.3:,category,parameter added.,,,,,,,Parameters:,,message,\u2013 the message to be flashed.,,category,\u2013 the category for the message.  The following values\nare recommended:,'message',for any kind of message,,'error',for errors,,'info',for information\nmessages and,'warning',for warnings.  However any\nkind of string can be used as category.,,,,,,,,,,flask.,get_flashed_messages,(,with_categories=False,,,category_filter=[],),\u00b6,,Pulls all flashed messages from the session and returns them.\nFurther calls in the same request to the function will return\nthe same messages.  By default just the messages are returned,\nbut when,with_categories,is set to,True,, the return value will\nbe a list of tuples in the form,(category,,,message),instead.,,Filter the flashed messages to one or more categories by providing those\ncategories in,category_filter,.  This allows rendering categories in\nseparate html blocks.  The,with_categories,and,category_filter,arguments are distinct:,,,with_categories,controls whether categories are returned with message\ntext (,True,gives a tuple, where,False,gives just the message text).,,category_filter,filters the messages down to only those matching the\nprovided categories.,,,See,Message Flashing,for examples.,,,Changelog,,Changed in version 0.9:,category_filter,parameter added.,,,,Changed in version 0.3:,with_categories,parameter added.,,,,,,,Parameters:,,with_categories,\u2013 set to,True,to also receive categories.,,category_filter,\u2013 whitelist of categories to limit return values,,,,,,,,,,JSON Support,\u00b6,,Flask uses,simplejson,for the JSON implementation.  Since simplejson\nis provided by both the standard library as well as extension, Flask will\ntry simplejson first and then fall back to the stdlib json module.  On top\nof that it will delegate access to the current application\u2019s JSON encoders\nand decoders for easier customization.,,So for starters instead of doing:,,try,:,,import,,simplejson,,as,,json,,except,,ImportError,:,,import,,json,,,,You can instead just do this:,,from,,flask,,import,,json,,,,For usage examples, read the,json,documentation in the standard\nlibrary.  The following extensions are by default applied to the stdlib\u2019s\nJSON module:,,,datetime,objects are serialized as,RFC 822,strings.,,Any object with an,__html__,method (like,Markup,)\nwill have that method called and then the return value is serialized\nas string.,,,The,htmlsafe_dumps(),function of this json module is also available\nas filter called,|tojson,in Jinja2.  Note that inside,script,tags no escaping must take place, so make sure to disable escaping\nwith,|safe,if you intend to use it inside,script,tags unless\nyou are using Flask 0.10 which implies that:,,<,script,,type,=,text/javascript,>,,doSomethingWith,(,{{,,user.username,|,tojson,|,safe,,}},);,,</,script,>,,,,,Auto-Sort JSON Keys,,The configuration variable,JSON_SORT_KEYS,(,Configuration Handling,) can be\nset to false to stop Flask from auto-sorting keys.  By default sorting\nis enabled and outside of the app context sorting is turned on.,,Notice that disabling key sorting can cause issues when using content\nbased HTTP caches and Python\u2019s hash randomization feature.,,,,,flask.json.,jsonify,(,*args,,,**kwargs,),\u00b6,,This function wraps,dumps(),to add a few enhancements that make\nlife easier.  It turns the JSON output into a,Response,object with the,application/json,mimetype.  For convenience, it\nalso converts multiple arguments into an array or multiple keyword arguments\ninto a dict.  This means that both,jsonify(1,2,3),and,jsonify([1,2,3]),serialize to,[1,2,3],.,,For clarity, the JSON serialization behavior has the following differences\nfrom,dumps(),:,,,Single argument: Passed straight through to,dumps(),.,,Multiple arguments: Converted to an array before being passed to,dumps(),.,,Multiple keyword arguments: Converted to a dict before being passed to,dumps(),.,,Both args and kwargs: Behavior undefined and will throw an exception.,,,Example usage:,,from,,flask,,import,,jsonify,,@app,.,route,(,'/_get_current_user',),,def,,get_current_user,():,,return,,jsonify,(,username,=,g,.,user,.,username,,,,email,=,g,.,user,.,email,,,,id,=,g,.,user,.,id,),,,,This will send a JSON response like this to the browser:,,{,,\"username\",:,,\"admin\",,,,\"email\",:,,\"admin@localhost\",,,,\"id\",:,,42,,},,,,,Changelog,,Changed in version 0.11:,Added support for serializing top-level arrays. This introduces a\nsecurity risk in ancient browsers. See,JSON Security,for details.,,,This function\u2019s response will be pretty printed if the,JSONIFY_PRETTYPRINT_REGULAR,config parameter is set to True or the\nFlask app is running in debug mode. Compressed (not pretty) formatting\ncurrently means no indents and no spaces after separators.,,,Changelog,,New in version 0.2.,,,,,,flask.json.,dumps,(,obj,,,**kwargs,),\u00b6,,Serialize,obj,to a JSON formatted,str,by using the application\u2019s\nconfigured encoder (,json_encoder,) if there is an\napplication on the stack.,,This function can return,unicode,strings or ascii-only bytestrings by\ndefault which coerce into unicode strings automatically.  That behavior by\ndefault is controlled by the,JSON_AS_ASCII,configuration variable\nand can be overridden by the simplejson,ensure_ascii,parameter.,,,,,flask.json.,dump,(,obj,,,fp,,,**kwargs,),\u00b6,,Like,dumps(),but writes into a file object.,,,,,flask.json.,loads,(,s,,,**kwargs,),\u00b6,,Unserialize a JSON object from a string,s,by using the application\u2019s\nconfigured decoder (,json_decoder,) if there is an\napplication on the stack.,,,,,flask.json.,load,(,fp,,,**kwargs,),\u00b6,,Like,loads(),but reads from a file object.,,,,,class,flask.json.,JSONEncoder,(,*,,,skipkeys=False,,,ensure_ascii=True,,,check_circular=True,,,allow_nan=True,,,sort_keys=False,,,indent=None,,,separators=None,,,default=None,),\u00b6,,The default Flask JSON encoder.  This one extends the default simplejson\nencoder by also supporting,datetime,objects,,UUID,as well as,Markup,objects which are serialized as RFC 822 datetime strings (same\nas the HTTP date format).  In order to support more data types override the,default(),method.,,,,default,(,o,),\u00b6,,Implement this method in a subclass such that it returns a\nserializable object for,o,, or calls the base implementation (to\nraise a,TypeError,).,,For example, to support arbitrary iterators, you could implement\ndefault like this:,,def,,default,(,self,,,,o,):,,try,:,,iterable,,=,,iter,(,o,),,except,,TypeError,:,,pass,,else,:,,return,,list,(,iterable,),,return,,JSONEncoder,.,default,(,self,,,,o,),,,,,,,,class,flask.json.,JSONDecoder,(,*,,,object_hook=None,,,parse_float=None,,,parse_int=None,,,parse_constant=None,,,strict=True,,,object_pairs_hook=None,),\u00b6,,The default JSON decoder.  This one does not change the behavior from\nthe default simplejson decoder.  Consult the,json,documentation\nfor more information.  This decoder is not only used for the load\nfunctions of this module but also,Request,.,,,,Tagged JSON,\u00b6,,A compact representation for lossless serialization of non-standard JSON types.,SecureCookieSessionInterface,uses this to serialize\nthe session data, but it may be useful in other places. It can be extended to\nsupport other types.,,,,class,flask.json.tag.,TaggedJSONSerializer,\u00b6,,Serializer that uses a tag system to compactly represent objects that\nare not JSON types. Passed as the intermediate serializer to,itsdangerous.Serializer,.,,The following extra types are supported:,,,dict,,tuple,,bytes,,Markup,,UUID,,datetime,,,,,default_tags,= [<class 'flask.json.tag.TagDict'>, <class 'flask.json.tag.PassDict'>, <class 'flask.json.tag.TagTuple'>, <class 'flask.json.tag.PassList'>, <class 'flask.json.tag.TagBytes'>, <class 'flask.json.tag.TagMarkup'>, <class 'flask.json.tag.TagUUID'>, <class 'flask.json.tag.TagDateTime'>],\u00b6,,Tag classes to bind when creating the serializer. Other tags can be\nadded later using,register(),.,,,,,dumps,(,value,),\u00b6,,Tag the value and dump it to a compact JSON string.,,,,,loads,(,value,),\u00b6,,Load data from a JSON string and deserialized any tagged objects.,,,,,register,(,tag_class,,,force=False,,,index=None,),\u00b6,,Register a new tag with this serializer.,,,,,,Parameters:,,tag_class,\u2013 tag class to register. Will be instantiated with this\nserializer instance.,,force,\u2013 overwrite an existing tag. If false (default), a,KeyError,is raised.,,index,\u2013 index to insert the new tag in the tag order. Useful when\nthe new tag is a special case of an existing tag. If,None,(default), the tag is appended to the end of the order.,,,,,Raises:,KeyError,\u2013 if the tag key is already registered and,force,is\nnot true.,,,,,,,,,tag,(,value,),\u00b6,,Convert a value to a tagged representation if necessary.,,,,,untag,(,value,),\u00b6,,Convert a tagged representation back to the original type.,,,,,,class,flask.json.tag.,JSONTag,(,serializer,),\u00b6,,Base class for defining type tags for,TaggedJSONSerializer,.,,,,check,(,value,),\u00b6,,Check if the given value should be tagged by this tag.,,,,,key,= None,\u00b6,,The tag to mark the serialized object with. If,None,, this tag is\nonly used as an intermediate step during tagging.,,,,,tag,(,value,),\u00b6,,Convert the value to a valid JSON type and add the tag structure\naround it.,,,,,to_json,(,value,),\u00b6,,Convert the Python object to an object that is a valid JSON type.\nThe tag will be added later.,,,,,to_python,(,value,),\u00b6,,Convert the JSON representation back to the correct type. The tag\nwill already be removed.,,,,Let\u2019s seen an example that adds support for,OrderedDict,.\nDicts don\u2019t have an order in Python or JSON, so to handle this we will dump\nthe items as a list of,[key,,,value],pairs. Subclass,JSONTag,and\ngive it the new key,',,od',to identify the type. The session serializer\nprocesses dicts first, so insert the new tag at the front of the order since,OrderedDict,must be processed before,dict,.,,from,,flask.json.tag,,import,,JSONTag,,class,,TagOrderedDict,(,JSONTag,):,,__slots__,,=,,(,'serializer',,),,key,,=,,' od',,def,,check,(,self,,,,value,):,,return,,isinstance,(,value,,,,OrderedDict,),,def,,to_json,(,self,,,,value,):,,return,,[[,k,,,,self,.,serializer,.,tag,(,v,)],,for,,k,,,,v,,in,,iteritems,(,value,)],,def,,to_python,(,self,,,,value,):,,return,,OrderedDict,(,value,),,app,.,session_interface,.,serializer,.,register,(,TagOrderedDict,,,,index,=,0,),,,,,,,Template Rendering,\u00b6,,,,flask.,render_template,(,template_name_or_list,,,**context,),\u00b6,,Renders a template from the template folder with the given\ncontext.,,,,,,Parameters:,,template_name_or_list,\u2013 the name of the template to be\nrendered, or an iterable with template names\nthe first one existing will be rendered,,context,\u2013 the variables that should be available in the\ncontext of the template.,,,,,,,,,,flask.,render_template_string,(,source,,,**context,),\u00b6,,Renders a template from the given template source string\nwith the given context. Template variables will be autoescaped.,,,,,,Parameters:,,source,\u2013 the source code of the template to be\nrendered,,context,\u2013 the variables that should be available in the\ncontext of the template.,,,,,,,,,,flask.,get_template_attribute,(,template_name,,,attribute,),\u00b6,,Loads a macro (or variable) a template exports.  This can be used to\ninvoke a macro from within Python code.  If you for example have a\ntemplate named,_cider.html,with the following contents:,,{%,,macro,,hello,(,name,),,%},Hello,{{,,name,,}},!,{%,,endmacro,,%},,,,You can access this from Python code like this:,,hello,,=,,get_template_attribute,(,'_cider.html',,,,'hello',),,return,,hello,(,'World',),,,,,Changelog,,New in version 0.2.,,,,,,,Parameters:,,template_name,\u2013 the name of the template,,attribute,\u2013 the name of the variable of macro to access,,,,,,,,,,Configuration,\u00b6,,,,class,flask.,Config,(,root_path,,,defaults=None,),\u00b6,,Works exactly like a dict but provides ways to fill it from files\nor special dictionaries.  There are two common patterns to populate the\nconfig.,,Either you can fill the config from a config file:,,app,.,config,.,from_pyfile,(,'yourconfig.cfg',),,,,Or alternatively you can define the configuration options in the\nmodule that calls,from_object(),or provide an import path to\na module that should be loaded.  It is also possible to tell it to\nuse the same module and with that provide the configuration values\njust before the call:,,DEBUG,,=,,True,,SECRET_KEY,,=,,'development key',,app,.,config,.,from_object,(,__name__,),,,,In both cases (loading from any Python file or loading from modules),\nonly uppercase keys are added to the config.  This makes it possible to use\nlowercase values in the config file for temporary values that are not added\nto the config or to define the config keys in the same file that implements\nthe application.,,Probably the most interesting way to load configurations is from an\nenvironment variable pointing to a file:,,app,.,config,.,from_envvar,(,'YOURAPPLICATION_SETTINGS',),,,,In this case before launching the application you have to set this\nenvironment variable to the file you want to use.  On Linux and OS X\nuse the export statement:,,export,,YOURAPPLICATION_SETTINGS,=,'/path/to/config/file',,,,On windows use,set,instead.,,,,,,Parameters:,,root_path,\u2013 path to which files are read relative from.  When the\nconfig object is created by the application, this is\nthe application\u2019s,root_path,.,,defaults,\u2013 an optional dictionary of default values,,,,,,,,,from_envvar,(,variable_name,,,silent=False,),\u00b6,,Loads a configuration from an environment variable pointing to\na configuration file.  This is basically just a shortcut with nicer\nerror messages for this line of code:,,app,.,config,.,from_pyfile,(,os,.,environ,[,'YOURAPPLICATION_SETTINGS',]),,,,,,,,Parameters:,,variable_name,\u2013 name of the environment variable,,silent,\u2013 set to,True,if you want silent failure for missing\nfiles.,,,,,Returns:,bool.,True,if able to load config,,False,otherwise.,,,,,,,,,from_json,(,filename,,,silent=False,),\u00b6,,Updates the values in the config from a JSON file. This function\nbehaves as if the JSON object was a dictionary and passed to the,from_mapping(),function.,,,,,,Parameters:,,filename,\u2013 the filename of the JSON file.  This can either be an\nabsolute filename or a filename relative to the\nroot path.,,silent,\u2013 set to,True,if you want silent failure for missing\nfiles.,,,,,,,,Changelog,,New in version 0.11.,,,,,,from_mapping,(,*mapping,,,**kwargs,),\u00b6,,Updates the config like,update(),ignoring items with non-upper\nkeys.,,,Changelog,,New in version 0.11.,,,,,,from_object,(,obj,),\u00b6,,Updates the values from the given object.  An object can be of one\nof the following two types:,,,a string: in this case the object with that name will be imported,,an actual object reference: that object is used directly,,,Objects are usually either modules or classes.,from_object(),loads only the uppercase attributes of the module/class. A,dict,object will not work with,from_object(),because the keys of a,dict,are not attributes of the,dict,class.,,Example of module-based configuration:,,app,.,config,.,from_object,(,'yourapplication.default_config',),,from,,yourapplication,,import,,default_config,,app,.,config,.,from_object,(,default_config,),,,,You should not use this function to load the actual configuration but\nrather configuration defaults.  The actual config should be loaded\nwith,from_pyfile(),and ideally from a location not within the\npackage because the package might be installed system wide.,,See,Development / Production,for an example of class-based configuration\nusing,from_object(),.,,,,,,Parameters:,obj,\u2013 an import name or object,,,,,,,,from_pyfile,(,filename,,,silent=False,),\u00b6,,Updates the values in the config from a Python file.  This function\nbehaves as if the file was imported as module with the,from_object(),function.,,,,,,Parameters:,,filename,\u2013 the filename of the config.  This can either be an\nabsolute filename or a filename relative to the\nroot path.,,silent,\u2013 set to,True,if you want silent failure for missing\nfiles.,,,,,,,,Changelog,,New in version 0.7:,silent,parameter.,,,,,,get_namespace,(,namespace,,,lowercase=True,,,trim_namespace=True,),\u00b6,,Returns a dictionary containing a subset of configuration options\nthat match the specified namespace/prefix. Example usage:,,app,.,config,[,'IMAGE_STORE_TYPE',],,=,,'fs',,app,.,config,[,'IMAGE_STORE_PATH',],,=,,'/var/app/images',,app,.,config,[,'IMAGE_STORE_BASE_URL',],,=,,'http://img.website.com',,image_store_config,,=,,app,.,config,.,get_namespace,(,'IMAGE_STORE_',),,,,The resulting dictionary,image_store_config,would look like:,,{,,'type',:,,'fs',,,,'path',:,,'/var/app/images',,,,'base_url',:,,'http://img.website.com',,},,,,This is often useful when configuration options map directly to\nkeyword arguments in functions or class constructors.,,,,,,Parameters:,,namespace,\u2013 a configuration namespace,,lowercase,\u2013 a flag indicating if the keys of the resulting\ndictionary should be lowercase,,trim_namespace,\u2013 a flag indicating if the keys of the resulting\ndictionary should not include the namespace,,,,,,,,Changelog,,New in version 0.11.,,,,,,,Stream Helpers,\u00b6,,,,flask.,stream_with_context,(,generator_or_function,),\u00b6,,Request contexts disappear when the response is started on the server.\nThis is done for efficiency reasons and to make it less likely to encounter\nmemory leaks with badly written WSGI middlewares.  The downside is that if\nyou are using streamed responses, the generator cannot access request bound\ninformation any more.,,This function however can help you keep the context around for longer:,,from,,flask,,import,,stream_with_context,,,,request,,,,Response,,@app,.,route,(,'/stream',),,def,,streamed_response,():,,@stream_with_context,,def,,generate,():,,yield,,'Hello ',,yield,,request,.,args,[,'name',],,yield,,'!',,return,,Response,(,generate,()),,,,Alternatively it can also be used around a specific generator:,,from,,flask,,import,,stream_with_context,,,,request,,,,Response,,@app,.,route,(,'/stream',),,def,,streamed_response,():,,def,,generate,():,,yield,,'Hello ',,yield,,request,.,args,[,'name',],,yield,,'!',,return,,Response,(,stream_with_context,(,generate,())),,,,,Changelog,,New in version 0.9.,,,,,,Useful Internals,\u00b6,,,,class,flask.ctx.,RequestContext,(,app,,,environ,,,request=None,),\u00b6,,The request context contains all request relevant information.  It is\ncreated at the beginning of the request and pushed to the,_request_ctx_stack,and removed at the end of it.  It will create the\nURL adapter and request object for the WSGI environment provided.,,Do not attempt to use this class directly, instead use,test_request_context(),and,request_context(),to create this object.,,When the request context is popped, it will evaluate all the\nfunctions registered on the application for teardown execution\n(,teardown_request(),).,,The request context is automatically popped at the end of the request\nfor you.  In debug mode the request context is kept around if\nexceptions happen so that interactive debuggers have a chance to\nintrospect the data.  With 0.4 this can also be forced for requests\nthat did not fail and outside of,DEBUG,mode.  By setting,'flask._preserve_context',to,True,on the WSGI environment the\ncontext will not pop itself at the end of the request.  This is used by\nthe,test_client(),for example to implement the\ndeferred cleanup functionality.,,You might find this helpful for unittests where you need the\ninformation from the context local around for a little longer.  Make\nsure to properly,pop(),the stack yourself in\nthat situation, otherwise your unittests will leak memory.,,,,copy,(,),\u00b6,,Creates a copy of this request context with the same request object.\nThis can be used to move a request context to a different greenlet.\nBecause the actual request object is the same this cannot be used to\nmove a request context to a different thread unless access to the\nrequest object is locked.,,,Changelog,,New in version 0.10.,,,,,,match_request,(,),\u00b6,,Can be overridden by a subclass to hook into the matching\nof the request.,,,,,pop,(,exc=<object object>,),\u00b6,,Pops the request context and unbinds it by doing that.  This will\nalso trigger the execution of functions registered by the,teardown_request(),decorator.,,,Changelog,,Changed in version 0.9:,Added the,exc,argument.,,,,,,push,(,),\u00b6,,Binds the request context to the current context.,,,,,,flask.,_request_ctx_stack,\u00b6,,The internal,LocalStack,that holds,RequestContext,instances. Typically, the,request,and,session,proxies should be accessed\ninstead of the stack. It may be useful to access the stack in\nextension code.,,The following attributes are always present on each layer of the\nstack:,,,app,,the active Flask application.,,url_adapter,,the URL adapter that was used to match the request.,,request,,the current request object.,,session,,the active session object.,,g,,an object with all the attributes of the,flask.g,object.,,flashes,,an internal cache for the flashed messages.,,,Example usage:,,from,,flask,,import,,_request_ctx_stack,,def,,get_session,():,,ctx,,=,,_request_ctx_stack,.,top,,if,,ctx,,is,,not,,None,:,,return,,ctx,.,session,,,,,,,class,flask.ctx.,AppContext,(,app,),\u00b6,,The application context binds an application object implicitly\nto the current thread or greenlet, similar to how the,RequestContext,binds request information.  The application\ncontext is also implicitly created if a request context is created\nbut the application is not on top of the individual application\ncontext.,,,,pop,(,exc=<object object>,),\u00b6,,Pops the app context.,,,,,push,(,),\u00b6,,Binds the app context to the current context.,,,,,,flask.,_app_ctx_stack,\u00b6,,The internal,LocalStack,that holds,AppContext,instances. Typically, the,current_app,and,g,proxies should be accessed instead\nof the stack. Extensions can access the contexts on the stack as a\nnamespace to store data.,,,Changelog,,New in version 0.9.,,,,,,class,flask.blueprints.,BlueprintSetupState,(,blueprint,,,app,,,options,,,first_registration,),\u00b6,,Temporary holder object for registering a blueprint with the\napplication.  An instance of this class is created by the,make_setup_state(),method and later passed\nto all register callback functions.,,,,add_url_rule,(,rule,,,endpoint=None,,,view_func=None,,,**options,),\u00b6,,A helper method to register a rule (and optionally a view function)\nto the application.  The endpoint is automatically prefixed with the\nblueprint\u2019s name.,,,,,app,= None,\u00b6,,a reference to the current application,,,,,blueprint,= None,\u00b6,,a reference to the blueprint that created this setup state.,,,,,first_registration,= None,\u00b6,,as blueprints can be registered multiple times with the\napplication and not everything wants to be registered\nmultiple times on it, this attribute can be used to figure\nout if the blueprint was registered in the past already.,,,,,options,= None,\u00b6,,a dictionary with all options that were passed to the,register_blueprint(),method.,,,,,subdomain,= None,\u00b6,,The subdomain that the blueprint should be active for,,None,otherwise.,,,,,url_defaults,= None,\u00b6,,A dictionary with URL defaults that is added to each and every\nURL that was defined with the blueprint.,,,,,url_prefix,= None,\u00b6,,The prefix that should be used for all URLs defined on the\nblueprint.,,,,,,Signals,\u00b6,,,Changelog,,New in version 0.6.,,,,,signals.,signals_available,\u00b6,,True,if the signaling system is available.  This is the case\nwhen,blinker,is installed.,,,The following signals exist in Flask:,,,,flask.,template_rendered,\u00b6,,This signal is sent when a template was successfully rendered.  The\nsignal is invoked with the instance of the template as,template,and the context as dictionary (named,context,).,,Example subscriber:,,def,,log_template_renders,(,sender,,,,template,,,,context,,,,**,extra,):,,sender,.,logger,.,debug,(,'Rendering template \",%s,\" with context,%s,',,,,template,.,name,,or,,'string template',,,,context,),,from,,flask,,import,,template_rendered,,template_rendered,.,connect,(,log_template_renders,,,,app,),,,,,,,flask.,before_render_template,,This signal is sent before template rendering process. The\nsignal is invoked with the instance of the template as,template,and the context as dictionary (named,context,).,,Example subscriber:,,def,,log_template_renders,(,sender,,,,template,,,,context,,,,**,extra,):,,sender,.,logger,.,debug,(,'Rendering template \",%s,\" with context,%s,',,,,template,.,name,,or,,'string template',,,,context,),,from,,flask,,import,,before_render_template,,before_render_template,.,connect,(,log_template_renders,,,,app,),,,,,,,flask.,request_started,\u00b6,,This signal is sent when the request context is set up, before\nany request processing happens.  Because the request context is already\nbound, the subscriber can access the request with the standard global\nproxies such as,request,.,,Example subscriber:,,def,,log_request,(,sender,,,,**,extra,):,,sender,.,logger,.,debug,(,'Request context is set up',),,from,,flask,,import,,request_started,,request_started,.,connect,(,log_request,,,,app,),,,,,,,flask.,request_finished,\u00b6,,This signal is sent right before the response is sent to the client.\nIt is passed the response to be sent named,response,.,,Example subscriber:,,def,,log_response,(,sender,,,,response,,,,**,extra,):,,sender,.,logger,.,debug,(,'Request context is about to close down.  ',,'Response:,%s,',,,,response,),,from,,flask,,import,,request_finished,,request_finished,.,connect,(,log_response,,,,app,),,,,,,,flask.,got_request_exception,\u00b6,,This signal is sent when an exception happens during request processing.\nIt is sent,before,the standard exception handling kicks in and even\nin debug mode, where no exception handling happens.  The exception\nitself is passed to the subscriber as,exception,.,,Example subscriber:,,def,,log_exception,(,sender,,,,exception,,,,**,extra,):,,sender,.,logger,.,debug,(,'Got exception during processing:,%s,',,,,exception,),,from,,flask,,import,,got_request_exception,,got_request_exception,.,connect,(,log_exception,,,,app,),,,,,,,flask.,request_tearing_down,\u00b6,,This signal is sent when the request is tearing down.  This is always\ncalled, even if an exception is caused.  Currently functions listening\nto this signal are called after the regular teardown handlers, but this\nis not something you can rely on.,,Example subscriber:,,def,,close_db_connection,(,sender,,,,**,extra,):,,session,.,close,(),,from,,flask,,import,,request_tearing_down,,request_tearing_down,.,connect,(,close_db_connection,,,,app,),,,,As of Flask 0.9, this will also be passed an,exc,keyword argument\nthat has a reference to the exception that caused the teardown if\nthere was one.,,,,,flask.,appcontext_tearing_down,\u00b6,,This signal is sent when the app context is tearing down.  This is always\ncalled, even if an exception is caused.  Currently functions listening\nto this signal are called after the regular teardown handlers, but this\nis not something you can rely on.,,Example subscriber:,,def,,close_db_connection,(,sender,,,,**,extra,):,,session,.,close,(),,from,,flask,,import,,appcontext_tearing_down,,appcontext_tearing_down,.,connect,(,close_db_connection,,,,app,),,,,This will also be passed an,exc,keyword argument that has a reference\nto the exception that caused the teardown if there was one.,,,,,flask.,appcontext_pushed,\u00b6,,This signal is sent when an application context is pushed.  The sender\nis the application.  This is usually useful for unittests in order to\ntemporarily hook in information.  For instance it can be used to\nset a resource early onto the,g,object.,,Example usage:,,from,,contextlib,,import,,contextmanager,,from,,flask,,import,,appcontext_pushed,,@contextmanager,,def,,user_set,(,app,,,,user,):,,def,,handler,(,sender,,,,**,kwargs,):,,g,.,user,,=,,user,,with,,appcontext_pushed,.,connected_to,(,handler,,,,app,):,,yield,,,,And in the testcode:,,def,,test_user_me,(,self,):,,with,,user_set,(,app,,,,'john',):,,c,,=,,app,.,test_client,(),,resp,,=,,c,.,get,(,'/users/me',),,assert,,resp,.,data,,==,,'username=john',,,,,Changelog,,New in version 0.10.,,,,,,flask.,appcontext_popped,\u00b6,,This signal is sent when an application context is popped.  The sender\nis the application.  This usually falls in line with the,appcontext_tearing_down,signal.,,,Changelog,,New in version 0.10.,,,,,,flask.,message_flashed,\u00b6,,This signal is sent when the application is flashing a message.  The\nmessages is sent as,message,keyword argument and the category as,category,.,,Example subscriber:,,recorded,,=,,[],,def,,record,(,sender,,,,message,,,,category,,,,**,extra,):,,recorded,.,append,((,message,,,,category,)),,from,,flask,,import,,message_flashed,,message_flashed,.,connect,(,record,,,,app,),,,,,Changelog,,New in version 0.10.,,,,,,class,signals.,Namespace,\u00b6,,An alias for,blinker.base.Namespace,if blinker is available,\notherwise a dummy class that creates fake signals.  This class is\navailable for Flask extensions that want to provide the same fallback\nsystem as Flask itself.,,,,signal,(,name,,,doc=None,),\u00b6,,Creates a new signal for this namespace if blinker is available,\notherwise returns a fake signal that has a send method that will\ndo nothing but will fail with a,RuntimeError,for all other\noperations, including connecting.,,,,,,Class-Based Views,\u00b6,,,Changelog,,New in version 0.7.,,,,,class,flask.views.,View,\u00b6,,Alternative way to use view functions.  A subclass has to implement,dispatch_request(),which is called with the view arguments from\nthe URL routing system.  If,methods,is provided the methods\ndo not have to be passed to the,add_url_rule(),method explicitly:,,class,,MyView,(,View,):,,methods,,=,,[,'GET',],,def,,dispatch_request,(,self,,,,name,):,,return,,'Hello,%s,!',,%,,name,,app,.,add_url_rule,(,'/hello/<name>',,,,view_func,=,MyView,.,as_view,(,'myview',)),,,,When you want to decorate a pluggable view you will have to either do that\nwhen the view function is created (by wrapping the return value of,as_view(),) or you can use the,decorators,attribute:,,class,,SecretView,(,View,):,,methods,,=,,[,'GET',],,decorators,,=,,[,superuser_required,],,def,,dispatch_request,(,self,):,,...,,,,The decorators stored in the decorators list are applied one after another\nwhen the view function is created.  Note that you can,not,use the class\nbased decorators since those would decorate the view class and not the\ngenerated view function!,,,,classmethod,as_view,(,name,,,*class_args,,,**class_kwargs,),\u00b6,,Converts the class into an actual view function that can be used\nwith the routing system.  Internally this generates a function on the\nfly which will instantiate the,View,on each request and call\nthe,dispatch_request(),method on it.,,The arguments passed to,as_view(),are forwarded to the\nconstructor of the class.,,,,,decorators,= (),\u00b6,,The canonical way to decorate class-based views is to decorate the\nreturn value of as_view().  However since this moves parts of the\nlogic from the class declaration to the place where it\u2019s hooked\ninto the routing system.,,You can place one or more decorators in this list and whenever the\nview function is created the result is automatically decorated.,,,Changelog,,New in version 0.8.,,,,,,dispatch_request,(,),\u00b6,,Subclasses have to override this method to implement the\nactual view function code.  This method is called with all\nthe arguments from the URL rule.,,,,,methods,= None,\u00b6,,A list of methods this view can handle.,,,,,provide_automatic_options,= None,\u00b6,,Setting this disables or force-enables the automatic options handling.,,,,,,class,flask.views.,MethodView,\u00b6,,A class-based view that dispatches request methods to the corresponding\nclass methods. For example, if you implement a,get,method, it will be\nused to handle,GET,requests.,,class,,CounterAPI,(,MethodView,):,,def,,get,(,self,):,,return,,session,.,get,(,'counter',,,,0,),,def,,post,(,self,):,,session,[,'counter',],,=,,session,.,get,(,'counter',,,,0,),,+,,1,,return,,'OK',,app,.,add_url_rule,(,'/counter',,,,view_func,=,CounterAPI,.,as_view,(,'counter',)),,,,,,dispatch_request,(,*args,,,**kwargs,),\u00b6,,Subclasses have to override this method to implement the\nactual view function code.  This method is called with all\nthe arguments from the URL rule.,,,,,,URL Route Registrations,\u00b6,,Generally there are three ways to define rules for the routing system:,,,You can use the,flask.Flask.route(),decorator.,,You can use the,flask.Flask.add_url_rule(),function.,,You can directly access the underlying Werkzeug routing system\nwhich is exposed as,flask.Flask.url_map,.,,,Variable parts in the route can be specified with angular brackets\n(,/user/<username>,).  By default a variable part in the URL accepts any\nstring without a slash however a different converter can be specified as\nwell by using,<converter:name>,.,,Variable parts are passed to the view function as keyword arguments.,,The following converters are available:,,,,,,,,string,,accepts any text without a slash (the default),,,int,,accepts integers,,,float,,like,int,but for floating point values,,,path,,like the default but also accepts slashes,,,any,,matches one of the items provided,,,uuid,,accepts UUID strings,,,,,Custom converters can be defined using,flask.Flask.url_map,.,,Here are some examples:,,@app,.,route,(,'/',),,def,,index,():,,pass,,@app,.,route,(,'/<username>',),,def,,show_user,(,username,):,,pass,,@app,.,route,(,'/post/<int:post_id>',),,def,,show_post,(,post_id,):,,pass,,,,An important detail to keep in mind is how Flask deals with trailing\nslashes.  The idea is to keep each URL unique so the following rules\napply:,,,If a rule ends with a slash and is requested without a slash by the\nuser, the user is automatically redirected to the same page with a\ntrailing slash attached.,,If a rule does not end with a trailing slash and the user requests the\npage with a trailing slash, a 404 not found is raised.,,,This is consistent with how web servers deal with static files.  This\nalso makes it possible to use relative link targets safely.,,You can also define multiple rules for the same function.  They have to be\nunique however.  Defaults can also be specified.  Here for example is a\ndefinition for a URL that accepts an optional page:,,@app,.,route,(,'/users/',,,,defaults,=,{,'page',:,,1,}),,@app,.,route,(,'/users/page/<int:page>',),,def,,show_users,(,page,):,,pass,,,,This specifies that,/users/,will be the URL for page one and,/users/page/N,will be the URL for page,N,.,,If a URL contains a default value, it will be redirected to its simpler\nform with a 301 redirect. In the above example,,/users/page/1,will\nbe redirected to,/users/,. If your route handles,GET,and,POST,requests, make sure the default route only handles,GET,, as redirects\ncan\u2019t preserve form data.,,@app,.,route,(,'/region/',,,,defaults,=,{,'id',:,,1,}),,@app,.,route,(,'/region/<id>',,,,methods,=,[,'GET',,,,'POST',]),,def,,region,(,id,):,,pass,,,,Here are the parameters that,route(),and,add_url_rule(),accept.  The only difference is that\nwith the route parameter the view function is defined with the decorator\ninstead of the,view_func,parameter.,,,,,,,,rule,,the URL rule as string,,,endpoint,,the endpoint for the registered URL rule.  Flask itself\nassumes that the name of the view function is the name\nof the endpoint if not explicitly stated.,,,view_func,,the function to call when serving a request to the\nprovided endpoint.  If this is not provided one can\nspecify the function later by storing it in the,view_functions,dictionary with the\nendpoint as key.,,,defaults,,A dictionary with defaults for this rule.  See the\nexample above for how defaults work.,,,subdomain,,specifies the rule for the subdomain in case subdomain\nmatching is in use.  If not specified the default\nsubdomain is assumed.,,,**options,,the options to be forwarded to the underlying,Rule,object.  A change to\nWerkzeug is handling of method options.  methods is a list\nof methods this rule should be limited to (,GET,,,POST,etc.).  By default a rule just listens for,GET,(and\nimplicitly,HEAD,).  Starting with Flask 0.6,,OPTIONS,is\nimplicitly added and handled by the standard request\nhandling.  They have to be specified as keyword arguments.,,,,,,,View Function Options,\u00b6,,For internal usage the view functions can have some attributes attached to\ncustomize behavior the view function would normally not have control over.\nThe following attributes can be provided optionally to either override\nsome defaults to,add_url_rule(),or general behavior:,,,__name__,: The name of a function is by default used as endpoint.  If\nendpoint is provided explicitly this value is used.  Additionally this\nwill be prefixed with the name of the blueprint by default which\ncannot be customized from the function itself.,,methods,: If methods are not provided when the URL rule is added,\nFlask will look on the view function object itself if a,methods,attribute exists.  If it does, it will pull the information for the\nmethods from there.,,provide_automatic_options,: if this attribute is set Flask will\neither force enable or disable the automatic implementation of the\nHTTP,OPTIONS,response.  This can be useful when working with\ndecorators that want to customize the,OPTIONS,response on a per-view\nbasis.,,required_methods,: if this attribute is set, Flask will always add\nthese methods when registering a URL rule even if the methods were\nexplicitly overridden in the,route(),call.,,,Full example:,,def,,index,():,,if,,request,.,method,,==,,'OPTIONS',:,,# custom options handling here,,...,,return,,'Hello World!',,index,.,provide_automatic_options,,=,,False,,index,.,methods,,=,,[,'GET',,,,'OPTIONS',],,app,.,add_url_rule,(,'/',,,,index,),,,,,Changelog,,New in version 0.8:,The,provide_automatic_options,functionality was added.,,,,,Command Line Interface,\u00b6,,,,class,flask.cli.,FlaskGroup,(,add_default_commands=True,,,create_app=None,,,add_version_option=True,,,load_dotenv=True,,,**extra,),\u00b6,,Special subclass of the,AppGroup,group that supports\nloading more commands from the configured Flask app.  Normally a\ndeveloper does not have to interface with this class but there are\nsome very advanced use cases for which it makes sense to create an\ninstance of this.,,For information as of why this is useful see,Custom Scripts,.,,,,,,Parameters:,,add_default_commands,\u2013 if this is True then the default run and\nshell commands wil be added.,,add_version_option,\u2013 adds the,--version,option.,,create_app,\u2013 an optional callback that is passed the script info and\nreturns the loaded app.,,load_dotenv,\u2013 Load the nearest,.env,and,.flaskenv,files to set environment variables. Will also change the working\ndirectory to the directory containing the first file found.,,,,,,,,Changed in version 1.0:,If installed, python-dotenv will be used to load environment variables\nfrom,.env,and,.flaskenv,files.,,,,Changelog,,,get_command,(,ctx,,,name,),\u00b6,,Given a context and a command name, this returns a,Command,object if it exists or returns,None,.,,,,,list_commands,(,ctx,),\u00b6,,Returns a list of subcommand names in the order they should\nappear.,,,,,main,(,*args,,,**kwargs,),\u00b6,,This is the way to invoke a script with all the bells and\nwhistles as a command line application.  This will always terminate\nthe application after a call.  If this is not wanted,,SystemExit,needs to be caught.,,This method is also available by directly calling the instance of\na,Command,.,,,New in version 3.0:,Added the,standalone_mode,flag to control the standalone mode.,,,,Changelog,,,,,Parameters:,,args,\u2013 the arguments that should be used for parsing.  If not\nprovided,,sys.argv[1:],is used.,,prog_name,\u2013 the program name that should be used.  By default\nthe program name is constructed by taking the file\nname from,sys.argv[0],.,,complete_var,\u2013 the environment variable that controls the\nbash completion support.  The default is,\"_<prog_name>_COMPLETE\",with prog name in\nuppercase.,,standalone_mode,\u2013 the default behavior is to invoke the script\nin standalone mode.  Click will then\nhandle exceptions and convert them into\nerror messages and the function will never\nreturn but shut down the interpreter.  If\nthis is set to,False,they will be\npropagated to the caller and the return\nvalue of this function is the return value\nof,invoke(),.,,extra,\u2013 extra keyword arguments are forwarded to the context\nconstructor.  See,Context,for more information.,,,,,,,,,,,class,flask.cli.,AppGroup,(,name=None,,,commands=None,,,**attrs,),\u00b6,,This works similar to a regular click,Group,but it\nchanges the behavior of the,command(),decorator so that it\nautomatically wraps the functions in,with_appcontext(),.,,Not to be confused with,FlaskGroup,.,,,,command,(,*args,,,**kwargs,),\u00b6,,This works exactly like the method of the same name on a regular,click.Group,but it wraps callbacks in,with_appcontext(),unless it\u2019s disabled by passing,with_appcontext=False,.,,,,,group,(,*args,,,**kwargs,),\u00b6,,This works exactly like the method of the same name on a regular,click.Group,but it defaults the group class to,AppGroup,.,,,,,,class,flask.cli.,ScriptInfo,(,app_import_path=None,,,create_app=None,),\u00b6,,Help object to deal with Flask applications.  This is usually not\nnecessary to interface with as it\u2019s used internally in the dispatching\nto click.  In future versions of Flask this object will most likely play\na bigger role.  Typically it\u2019s created automatically by the,FlaskGroup,but you can also manually create it and pass it\nonwards as click object.,,,,app_import_path,= None,\u00b6,,Optionally the import path for the Flask application.,,,,,create_app,= None,\u00b6,,Optionally a function that is passed the script info to create\nthe instance of the application.,,,,,data,= None,\u00b6,,A dictionary with arbitrary data that can be associated with\nthis script info.,,,,,load_app,(,),\u00b6,,Loads the Flask app (if not yet loaded) and returns it.  Calling\nthis multiple times will just result in the already loaded app to\nbe returned.,,,,,,flask.cli.,load_dotenv,(,path=None,),\u00b6,,Load \u201cdotenv\u201d files in order of precedence to set environment variables.,,If an env var is already set it is not overwritten, so earlier files in the\nlist are preferred over later files.,,Changes the current working directory to the location of the first file\nfound, with the assumption that it is in the top level project directory\nand will be where the Python path should import local packages from.,,This is a no-op if,python-dotenv,is not installed.,,,,,,Parameters:,path,\u2013 Load the file at this location instead of searching.,,,Returns:,True,if a file was loaded.,,,,,,New in version 1.0.,,,,Changelog,,,,flask.cli.,with_appcontext,(,f,),\u00b6,,Wraps a callback so that it\u2019s guaranteed to be executed with the\nscript\u2019s application context.  If callbacks are registered directly\nto the,app.cli,object then they are wrapped with this function\nby default unless it\u2019s disabled.,,,,,flask.cli.,pass_script_info,(,f,),\u00b6,,Marks a function so that an instance of,ScriptInfo,is passed\nas first argument to the click callback.,,,,,flask.cli.,run_command,= <click.core.Command object>,\u00b6,,Run a local development server.,,This server is for development purposes only. It does not provide\nthe stability, security, or performance of production WSGI servers.,,The reloader and debugger are enabled by default if\nFLASK_ENV=development or FLASK_DEBUG=1.,,,,,flask.cli.,shell_command,= <click.core.Command object>,\u00b6,,Runs an interactive Python shell in the context of a given\nFlask application.  The application will populate the default\nnamespace of this shell according to it\u2019s configuration.,,This is useful for executing small snippets of management code\nwithout having to manually configure the application.,,,,,,,,,,,,,,Contents,,,API,,Application Object,,Blueprint Objects,,Incoming Request Data,,Response Objects,,Sessions,,Session Interface,,Test Client,,Test CLI Runner,,Application Globals,,Useful Functions and Classes,,Message Flashing,,JSON Support,,Tagged JSON,,,,Template Rendering,,Configuration,,Stream Helpers,,Useful Internals,,Signals,,Class-Based Views,,URL Route Registrations,,View Function Options,,Command Line Interface,,,,,Navigation,,,Overview,,,Previous:,Becoming Big,,Next:,Design Decisions in Flask,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Python Module Index", "url": "http://flask.pocoo.org/docs/1.0/py-modindex/", "content": ",,,,,Python Module Index \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,Flask 1.0.2 documentation,\u00bb,,,,,,,,Python Module Index,,,f,,,,,,,f,,,,,flask,,,,,,flask.json,,,,,,flask.json.tag,,,,,,,,,,,,Navigation,,,Overview,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Flask Changelog", "url": "http://flask.pocoo.org/docs/1.0/changelog/", "content": ",,,,,Flask Changelog \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,,,,,,,,Flask Changelog,\u00b6,,,Version 1.0.3,\u00b6,,Unreleased,,,,Version 1.0.2,\u00b6,,Released on May 2nd 2018,,,Fix more backwards compatibility issues with merging slashes between\na blueprint prefix and route. (,#2748,),,Fix error with,flask,,routes,command when there are no routes.\n(,#2751,),,,,,Version 1.0.1,\u00b6,,Released on April 29th 2018,,,Fix registering partials (with no,__name__,) as view functions.\n(,#2730,),,Don\u2019t treat lists returned from view functions the same as tuples.\nOnly tuples are interpreted as response data. (,#2736,),,Extra slashes between a blueprint\u2019s,url_prefix,and a route URL\nare merged. This fixes some backwards compatibility issues with the\nchange in 1.0. (,#2731,,,#2742,),,Only trap,BadRequestKeyError,errors in debug mode, not all,BadRequest,errors. This allows,abort(400),to continue\nworking as expected. (,#2735,),,The,FLASK_SKIP_DOTENV,environment variable can be set to,1,to skip automatically loading dotenv files. (,#2722,),,,,,Version 1.0,\u00b6,,Released on April 26th 2018,,,Python 2.6 and 3.3 are no longer supported.,(,pallets/meta#24,),,Bump minimum dependency versions to the latest stable versions:\nWerkzeug >= 0.14, Jinja >= 2.10, itsdangerous >= 0.24, Click >= 5.1.\n(,#2586,),,Skip,app.run,when a Flask application is run\nfrom the command line. This avoids some behavior that was confusing\nto debug.,,Change the default for,JSONIFY_PRETTYPRINT_REGULAR,to,False,.,jsonify(),returns a compact format by\ndefault, and an indented format in debug mode. (,#2193,),,Flask.__init__,accepts the,host_matching,argument and sets it on,url_map,. (,#1559,),,Flask.__init__,accepts the,static_host,argument\nand passes it as the,host,argument when defining the static\nroute. (,#1559,),,send_file(),supports Unicode in,attachment_filename,.\n(,#2223,),,Pass,_scheme,argument from,url_for(),to,handle_url_build_error(),. (,#2017,),,add_url_rule(),accepts the,provide_automatic_options,argument to disable adding the,OPTIONS,method. (,#1489,),,MethodView,subclasses inherit method handlers from\nbase classes. (,#1936,),,Errors caused while opening the session at the beginning of the\nrequest are handled by the app\u2019s error handlers. (,#2254,),,Blueprints gained,json_encoder,and,json_decoder,attributes to override the app\u2019s\nencoder and decoder. (,#1898,),,Flask.make_response(),raises,TypeError,instead of,ValueError,for bad response types. The error messages have been\nimproved to describe why the type is invalid. (,#2256,),,Add,routes,CLI command to output routes registered on the\napplication. (,#2259,),,Show warning when session cookie domain is a bare hostname or an IP\naddress, as these may not behave properly in some browsers, such as\nChrome. (,#2282,),,Allow IP address as exact session cookie domain. (,#2282,),,SESSION_COOKIE_DOMAIN,is set if it is detected through,SERVER_NAME,. (,#2282,),,Auto-detect zero-argument app factory called,create_app,or,make_app,from,FLASK_APP,. (,#2297,),,Factory functions are not required to take a,script_info,parameter to work with the,flask,command. If they take a single\nparameter or a parameter named,script_info,, the,ScriptInfo,object will be passed. (,#2319,),,FLASK_APP,can be set to an app factory, with arguments if\nneeded, for example,FLASK_APP=myproject.app:create_app('dev'),.\n(,#2326,),,FLASK_APP,can point to local packages that are not installed in\neditable mode, although,pip,,install,,-e,is still preferred.\n(,#2414,),,The,View,class attribute,provide_automatic_options,is set in,as_view(),, to be detected by,add_url_rule(),. (,#2316,),,Error handling will try handlers registered for,blueprint,,,code,,,app,,,code,,,blueprint,,,exception,,,app,,,exception,.\n(,#2314,),,Cookie,is added to the response\u2019s,Vary,header if the session\nis accessed at all during the request (and not deleted). (,#2288,),,test_request_context(),accepts,subdomain,and,url_scheme,arguments for use when building the base URL.\n(,#1621,),,Set,APPLICATION_ROOT,to,'/',by default. This was already\nthe implicit default when it was set to,None,.,,TRAP_BAD_REQUEST_ERRORS,is enabled by default in debug mode.,BadRequestKeyError,has a message with the bad key in debug mode\ninstead of the generic bad request message. (,#2348,),,Allow registering new tags with,TaggedJSONSerializer,to support storing other\ntypes in the session cookie. (,#2352,),,Only open the session if the request has not been pushed onto the\ncontext stack yet. This allows,stream_with_context(),generators to access the same session that the containing view uses.\n(,#2354,),,Add,json,keyword argument for the test client request methods.\nThis will dump the given object as JSON and set the appropriate\ncontent type. (,#2358,),,Extract JSON handling to a mixin applied to both the,Request,and,Response,classes. This adds the,is_json(),and,get_json(),methods to\nthe response to make testing JSON response much easier. (,#2358,),,Removed error handler caching because it caused unexpected results\nfor some exception inheritance hierarchies. Register handlers\nexplicitly for each exception if you want to avoid traversing the\nMRO. (,#2362,),,Fix incorrect JSON encoding of aware, non-UTC datetimes. (,#2374,),,Template auto reloading will honor debug mode even even if,jinja_env,was already accessed. (,#2373,),,The following old deprecated code was removed. (,#2385,),,flask.ext,- import extensions directly by their name instead\nof through the,flask.ext,namespace. For example,,import,,flask.ext.sqlalchemy,becomes,import,,flask_sqlalchemy,.,,Flask.init_jinja_globals,- extend,Flask.create_jinja_environment(),instead.,,Flask.error_handlers,- tracked by,Flask.error_handler_spec,, use,Flask.errorhandler(),to register handlers.,,Flask.request_globals_class,- use,Flask.app_ctx_globals_class,instead.,,Flask.static_path,- use,Flask.static_url_path,instead.,,Request.module,- use,Request.blueprint,instead.,,,,The,Request.json,property is no longer deprecated.\n(,#1421,),,Support passing a,EnvironBuilder,or,dict,to,test_client.open,.\n(,#2412,),,The,flask,command and,Flask.run(),will load environment\nvariables from,.env,and,.flaskenv,files if python-dotenv is\ninstalled. (,#2416,),,When passing a full URL to the test client, the scheme in the URL is\nused instead of,PREFERRED_URL_SCHEME,. (,#2430,),,Flask.logger,has been simplified.,LOGGER_NAME,and,LOGGER_HANDLER_POLICY,config was removed. The logger is always\nnamed,flask.app,. The level is only set on first access, it\ndoesn\u2019t check,Flask.debug,each time. Only one format is\nused, not different ones depending on,Flask.debug,. No\nhandlers are removed, and a handler is only added if no handlers are\nalready configured. (,#2436,),,Blueprint view function names may not contain dots. (,#2450,),,Fix a,ValueError,caused by invalid,Range,requests in some\ncases. (,#2526,),,The development server uses threads by default. (,#2529,),,Loading config files with,silent=True,will ignore,ENOTDIR,errors. (,#2581,),,Pass,--cert,and,--key,options to,flask,,run,to run the\ndevelopment server over HTTPS. (,#2606,),,Added,SESSION_COOKIE_SAMESITE,to control the,SameSite,attribute on the session cookie. (,#2607,),,Added,test_cli_runner(),to create a Click runner\nthat can invoke Flask CLI commands for testing. (,#2636,),,Subdomain matching is disabled by default and setting,SERVER_NAME,does not implicily enable it. It can be enabled\nby passing,subdomain_matching=True,to the,Flask,constructor.\n(,#2635,),,A single trailing slash is stripped from the blueprint,url_prefix,when it is registered with the app. (,#2629,),,Request.get_json(),doesn\u2019t cache the\nresult if parsing fails when,silent,is true. (,#2651,),,Request.get_json(),no longer accepts arbitrary encodings.\nIncoming JSON should be encoded using UTF-8 per,RFC 8259,, but\nFlask will autodetect UTF-8, -16, or -32. (,#2691,),,Added,MAX_COOKIE_SIZE,and,Response.max_cookie_size,to control when Werkzeug warns about large cookies that browsers may\nignore. (,#2693,),,Updated documentation theme to make docs look better in small\nwindows. (,#2709,),,Rewrote the tutorial docs and example project to take a more\nstructured approach to help new users avoid common pitfalls.\n(,#2676,),,,,,Version 0.12.4,\u00b6,,Released on April 29 2018,,,Repackage 0.12.3 to fix package layout issue. (,#2728,),,,,,Version 0.12.3,\u00b6,,Released on April 26th 2018,,,Request.get_json(),no longer accepts arbitrary encodings.\nIncoming JSON should be encoded using UTF-8 per,RFC 8259,, but\nFlask will autodetect UTF-8, -16, or -32. (,#2692,),,Fix a Python warning about imports when using,python,,-m,,flask,.\n(,#2666,),,Fix a,ValueError,caused by invalid,Range,requests in some\ncases.,,,,,Version 0.12.2,\u00b6,,Released on May 16 2017,,,Fix a bug in,safe_join,on Windows.,,,,,Version 0.12.1,\u00b6,,Bugfix release, released on March 31st 2017,,,Prevent,flask run,from showing a NoAppException when an ImportError occurs\nwithin the imported application module.,,Fix encoding behavior of,app.config.from_pyfile,for Python 3. Fix,#2118,.,,Use the,SERVER_NAME,config if it is present as default values for,app.run,.,#2109,,,#2152,,Call,ctx.auto_pop,with the exception object instead of,None,, in the\nevent that a,BaseException,such as,KeyboardInterrupt,is raised in a\nrequest handler.,,,,,Version 0.12,\u00b6,,Released on December 21st 2016, codename Punsch.,,,the cli command now responds to,\u2013version,.,,Mimetype guessing and ETag generation for file-like objects in,send_file,has been removed, as per issue,#104,.  See pull request,#1849,.,,Mimetype guessing in,send_file,now fails loudly and doesn\u2019t fall back to,application/octet-stream,. See pull request,#1988,.,,Make,flask.safe_join,able to join multiple paths like,os.path.join,(pull request,#1730,).,,Revert a behavior change that made the dev server crash instead of returning\na Internal Server Error (pull request,#2006,).,,Correctly invoke response handlers for both regular request dispatching as\nwell as error handlers.,,Disable logger propagation by default for the app logger.,,Add support for range requests in,send_file,.,,app.test_client,includes preset default environment, which can now be\ndirectly set, instead of per,client.get,.,,,,,Version 0.11.2,\u00b6,,Bugfix release, unreleased,,,Fix crash when running under PyPy3, see pull request,#1814,.,,,,,Version 0.11.1,\u00b6,,Bugfix release, released on June 7th 2016.,,,Fixed a bug that prevented,FLASK_APP=foobar/__init__.py,from working. See\npull request,#1872,.,,,,,Version 0.11,\u00b6,,Released on May 29th 2016, codename Absinthe.,,,Added support to serializing top-level arrays to,flask.jsonify(),. This\nintroduces a security risk in ancient browsers. See,JSON Security,for details.,,Added before_render_template signal.,,Added,**kwargs,to,flask.Test.test_client(),to support passing\nadditional keyword arguments to the constructor of,flask.Flask.test_client_class,.,,Added,SESSION_REFRESH_EACH_REQUEST,config key that controls the\nset-cookie behavior.  If set to,True,a permanent session will be\nrefreshed each request and get their lifetime extended, if set to,False,it will only be modified if the session actually modifies.\nNon permanent sessions are not affected by this and will always\nexpire if the browser window closes.,,Made Flask support custom JSON mimetypes for incoming data.,,Added support for returning tuples in the form,(response,,,headers),from a view function.,,Added,flask.Config.from_json(),.,,Added,flask.Flask.config_class,.,,Added,flask.Config.get_namespace(),.,,Templates are no longer automatically reloaded outside of debug mode. This\ncan be configured with the new,TEMPLATES_AUTO_RELOAD,config key.,,Added a workaround for a limitation in Python 3.3\u2019s namespace loader.,,Added support for explicit root paths when using Python 3.3\u2019s namespace\npackages.,,Added,flask,and the,flask.cli,module to start the local\ndebug server through the click CLI system.  This is recommended over the old,flask.run(),method as it works faster and more reliable due to a\ndifferent design and also replaces,Flask-Script,.,,Error handlers that match specific classes are now checked first,\nthereby allowing catching exceptions that are subclasses of HTTP\nexceptions (in,werkzeug.exceptions,).  This makes it possible\nfor an extension author to create exceptions that will by default\nresult in the HTTP error of their choosing, but may be caught with\na custom error handler if desired.,,Added,flask.Config.from_mapping(),.,,Flask will now log by default even if debug is disabled.  The log format is\nnow hardcoded but the default log handling can be disabled through the,LOGGER_HANDLER_POLICY,configuration key.,,Removed deprecated module functionality.,,Added the,EXPLAIN_TEMPLATE_LOADING,config flag which when enabled will\ninstruct Flask to explain how it locates templates.  This should help\nusers debug when the wrong templates are loaded.,,Enforce blueprint handling in the order they were registered for template\nloading.,,Ported test suite to py.test.,,Deprecated,request.json,in favour of,request.get_json(),.,,Add \u201cpretty\u201d and \u201ccompressed\u201d separators definitions in jsonify() method.\nReduces JSON response size when JSONIFY_PRETTYPRINT_REGULAR=False by removing\nunnecessary white space included by default after separators.,,JSON responses are now terminated with a newline character, because it is a\nconvention that UNIX text files end with a newline and some clients don\u2019t\ndeal well when this newline is missing. See,https://github.com/pallets/flask/pull/1262,\u2013 this came up originally as a\npart of,https://github.com/kennethreitz/httpbin/issues/168,,The automatically provided,OPTIONS,method is now correctly disabled if\nthe user registered an overriding rule with the lowercase-version,options,(issue,#1288,).,,flask.json.jsonify,now supports the,datetime.date,type (pull request,#1326,).,,Don\u2019t leak exception info of already catched exceptions to context teardown\nhandlers (pull request,#1393,).,,Allow custom Jinja environment subclasses (pull request,#1422,).,,Updated extension dev guidelines.,,flask.g,now has,pop(),and,setdefault,methods.,,Turn on autoescape for,flask.templating.render_template_string,by default\n(pull request,#1515,).,,flask.ext,is now deprecated (pull request,#1484,).,,send_from_directory,now raises BadRequest if the filename is invalid on\nthe server OS (pull request,#1763,).,,Added the,JSONIFY_MIMETYPE,configuration variable (pull request,#1728,).,,Exceptions during teardown handling will no longer leave bad application\ncontexts lingering around.,,,,,Version 0.10.2,\u00b6,,(bugfix release, release date to be announced),,,Fixed broken,test_appcontext_signals(),test case.,,Raise an,AttributeError,in,flask.helpers.find_package(),with a\nuseful message explaining why it is raised when a PEP 302 import hook is used\nwithout an,is_package(),method.,,Fixed an issue causing exceptions raised before entering a request or app\ncontext to be passed to teardown handlers.,,Fixed an issue with query parameters getting removed from requests in\nthe test client when absolute URLs were requested.,,Made,@before_first_request,into a decorator as intended.,,Fixed an etags bug when sending a file streams with a name.,,Fixed,send_from_directory,not expanding to the application root path\ncorrectly.,,Changed logic of before first request handlers to flip the flag after\ninvoking.  This will allow some uses that are potentially dangerous but\nshould probably be permitted.,,Fixed Python 3 bug when a handler from,app.url_build_error_handlers,reraises the,BuildError,.,,,,,Version 0.10.1,\u00b6,,(bugfix release, released on June 14th 2013),,,Fixed an issue where,|tojson,was not quoting single quotes which\nmade the filter not work properly in HTML attributes.  Now it\u2019s\npossible to use that filter in single quoted attributes.  This should\nmake using that filter with angular.js easier.,,Added support for byte strings back to the session system.  This broke\ncompatibility with the common case of people putting binary data for\ntoken verification into the session.,,Fixed an issue where registering the same method twice for the same endpoint\nwould trigger an exception incorrectly.,,,,,Version 0.10,\u00b6,,Released on June 13th 2013, codename Limoncello.,,,Changed default cookie serialization format from pickle to JSON to\nlimit the impact an attacker can do if the secret key leaks.  See,Version 0.10,for more information.,,Added,template_test,methods in addition to the already existing,template_filter,method family.,,Added,template_global,methods in addition to the already existing,template_filter,method family.,,Set the content-length header for x-sendfile.,,tojson,filter now does not escape script blocks in HTML5 parsers.,,tojson,used in templates is now safe by default due.  This was\nallowed due to the different escaping behavior.,,Flask will now raise an error if you attempt to register a new function\non an already used endpoint.,,Added wrapper module around simplejson and added default serialization\nof datetime objects.  This allows much easier customization of how\nJSON is handled by Flask or any Flask extension.,,Removed deprecated internal,flask.session,module alias.  Use,flask.sessions,instead to get the session module.  This is not to\nbe confused with,flask.session,the session proxy.,,Templates can now be rendered without request context.  The behavior is\nslightly different as the,request,,,session,and,g,objects\nwill not be available and blueprint\u2019s context processors are not\ncalled.,,The config object is now available to the template as a real global and\nnot through a context processor which makes it available even in imported\ntemplates by default.,,Added an option to generate non-ascii encoded JSON which should result\nin less bytes being transmitted over the network.  It\u2019s disabled by\ndefault to not cause confusion with existing libraries that might expect,flask.json.dumps,to return bytestrings by default.,,flask.g,is now stored on the app context instead of the request\ncontext.,,flask.g,now gained a,get(),method for not erroring out on non\nexisting items.,,flask.g,now can be used with the,in,operator to see what\u2019s defined\nand it now is iterable and will yield all attributes stored.,,flask.Flask.request_globals_class,got renamed to,flask.Flask.app_ctx_globals_class,which is a better name to what it\ndoes since 0.10.,,request,,,session,and,g,are now also added as proxies to the template\ncontext which makes them available in imported templates.  One has to be\nvery careful with those though because usage outside of macros might\ncause caching.,,Flask will no longer invoke the wrong error handlers if a proxy\nexception is passed through.,,Added a workaround for chrome\u2019s cookies in localhost not working\nas intended with domain names.,,Changed logic for picking defaults for cookie values from sessions\nto work better with Google Chrome.,,Added,message_flashed,signal that simplifies flashing testing.,,Added support for copying of request contexts for better working with\ngreenlets.,,Removed custom JSON HTTP exception subclasses.  If you were relying on them\nyou can reintroduce them again yourself trivially.  Using them however is\nstrongly discouraged as the interface was flawed.,,Python requirements changed: requiring Python 2.6 or 2.7 now to prepare\nfor Python 3.3 port.,,Changed how the teardown system is informed about exceptions.  This is now\nmore reliable in case something handles an exception halfway through\nthe error handling process.,,Request context preservation in debug mode now keeps the exception\ninformation around which means that teardown handlers are able to\ndistinguish error from success cases.,,Added the,JSONIFY_PRETTYPRINT_REGULAR,configuration variable.,,Flask now orders JSON keys by default to not trash HTTP caches due to\ndifferent hash seeds between different workers.,,Added,appcontext_pushed,and,appcontext_popped,signals.,,The builtin run method now takes the,SERVER_NAME,into account when\npicking the default port to run on.,,Added,flask.request.get_json(),as a replacement for the old,flask.request.json,property.,,,,,Version 0.9,\u00b6,,Released on July 1st 2012, codename Campari.,,,The,flask.Request.on_json_loading_failed(),now returns a JSON formatted\nresponse by default.,,The,flask.url_for(),function now can generate anchors to the\ngenerated links.,,The,flask.url_for(),function now can also explicitly generate\nURL rules specific to a given HTTP method.,,Logger now only returns the debug log setting if it was not set\nexplicitly.,,Unregister a circular dependency between the WSGI environment and\nthe request object when shutting down the request.  This means that\nenviron,werkzeug.request,will be,None,after the response was\nreturned to the WSGI server but has the advantage that the garbage\ncollector is not needed on CPython to tear down the request unless\nthe user created circular dependencies themselves.,,Session is now stored after callbacks so that if the session payload\nis stored in the session you can still modify it in an after\nrequest callback.,,The,flask.Flask,class will avoid importing the provided import name\nif it can (the required first parameter), to benefit tools which build Flask\ninstances programmatically.  The Flask class will fall back to using import\non systems with custom module hooks, e.g. Google App Engine, or when the\nimport name is inside a zip archive (usually a .egg) prior to Python 2.7.,,Blueprints now have a decorator to add custom template filters application\nwide,,flask.Blueprint.app_template_filter(),.,,The Flask and Blueprint classes now have a non-decorator method for adding\ncustom template filters application wide,,flask.Flask.add_template_filter(),and,flask.Blueprint.add_app_template_filter(),.,,The,flask.get_flashed_messages(),function now allows rendering flashed\nmessage categories in separate blocks, through a,category_filter,argument.,,The,flask.Flask.run(),method now accepts,None,for,host,and,port,arguments, using default values when,None,.  This allows for calling run\nusing configuration values, e.g.,app.run(app.config.get('MYHOST'),,,app.config.get('MYPORT')),, with proper behavior whether or not a config\nfile is provided.,,The,flask.render_template(),method now accepts a either an iterable of\ntemplate names or a single template name.  Previously, it only accepted a\nsingle template name.  On an iterable, the first template found is rendered.,,Added,flask.Flask.app_context(),which works very similar to the\nrequest context but only provides access to the current application.  This\nalso adds support for URL generation without an active request context.,,View functions can now return a tuple with the first instance being an\ninstance of,flask.Response,.  This allows for returning,jsonify(error=\"error,,msg\"),,,400,from a view function.,,Flask,and,Blueprint,now provide a,get_send_file_max_age(),hook for subclasses to override\nbehavior of serving static files from Flask when using,flask.Flask.send_static_file(),(used for the default static file\nhandler) and,send_file(),.  This hook is provided a\nfilename, which for example allows changing cache controls by file extension.\nThe default max-age for,send_file,and static files can be configured\nthrough a new,SEND_FILE_MAX_AGE_DEFAULT,configuration variable, which is\nused in the default,get_send_file_max_age,implementation.,,Fixed an assumption in sessions implementation which could break message\nflashing on sessions implementations which use external storage.,,Changed the behavior of tuple return values from functions.  They are no\nlonger arguments to the response object, they now have a defined meaning.,,Added,flask.Flask.request_globals_class,to allow a specific class to\nbe used on creation of the,g,instance of each request.,,Added,required_methods,attribute to view functions to force-add methods\non registration.,,Added,flask.after_this_request(),.,,Added,flask.stream_with_context(),and the ability to push contexts\nmultiple times without producing unexpected behavior.,,,,,Version 0.8.1,\u00b6,,Bugfix release, released on July 1st 2012,,,Fixed an issue with the undocumented,flask.session,module to not\nwork properly on Python 2.5.  It should not be used but did cause\nsome problems for package managers.,,,,,Version 0.8,\u00b6,,Released on September 29th 2011, codename Rakija,,,Refactored session support into a session interface so that\nthe implementation of the sessions can be changed without\nhaving to override the Flask class.,,Empty session cookies are now deleted properly automatically.,,View functions can now opt out of getting the automatic\nOPTIONS implementation.,,HTTP exceptions and Bad Request errors can now be trapped so that they\nshow up normally in the traceback.,,Flask in debug mode is now detecting some common problems and tries to\nwarn you about them.,,Flask in debug mode will now complain with an assertion error if a view\nwas attached after the first request was handled.  This gives earlier\nfeedback when users forget to import view code ahead of time.,,Added the ability to register callbacks that are only triggered once at\nthe beginning of the first request. (,Flask.before_first_request(),),,Malformed JSON data will now trigger a bad request HTTP exception instead\nof a value error which usually would result in a 500 internal server\nerror if not handled.  This is a backwards incompatible change.,,Applications now not only have a root path where the resources and modules\nare located but also an instance path which is the designated place to\ndrop files that are modified at runtime (uploads etc.).  Also this is\nconceptually only instance depending and outside version control so it\u2019s\nthe perfect place to put configuration files etc.  For more information\nsee,Instance Folders,.,,Added the,APPLICATION_ROOT,configuration variable.,,Implemented,session_transaction(),to\neasily modify sessions from the test environment.,,Refactored test client internally.  The,APPLICATION_ROOT,configuration\nvariable as well as,SERVER_NAME,are now properly used by the test client\nas defaults.,,Added,flask.views.View.decorators,to support simpler decorating of\npluggable (class-based) views.,,Fixed an issue where the test client if used with the \u201cwith\u201d statement did not\ntrigger the execution of the teardown handlers.,,Added finer control over the session cookie parameters.,,HEAD requests to a method view now automatically dispatch to the,get,method if no handler was implemented.,,Implemented the virtual,flask.ext,package to import extensions from.,,The context preservation on exceptions is now an integral component of\nFlask itself and no longer of the test client.  This cleaned up some\ninternal logic and lowers the odds of runaway request contexts in unittests.,,,,,Version 0.7.3,\u00b6,,Bugfix release, release date to be decided,,,Fixed the Jinja2 environment\u2019s list_templates method not returning the\ncorrect names when blueprints or modules were involved.,,,,,Version 0.7.2,\u00b6,,Bugfix release, released on July 6th 2011,,,Fixed an issue with URL processors not properly working on\nblueprints.,,,,,Version 0.7.1,\u00b6,,Bugfix release, released on June 29th 2011,,,Added missing future import that broke 2.5 compatibility.,,Fixed an infinite redirect issue with blueprints.,,,,,Version 0.7,\u00b6,,Released on June 28th 2011, codename Grappa,,,Added,make_default_options_response(),which can be used by subclasses to alter the default\nbehavior for,OPTIONS,responses.,,Unbound locals now raise a proper,RuntimeError,instead\nof an,AttributeError,.,,Mimetype guessing and etag support based on file objects is now\ndeprecated for,flask.send_file(),because it was unreliable.\nPass filenames instead or attach your own etags and provide a\nproper mimetype by hand.,,Static file handling for modules now requires the name of the\nstatic folder to be supplied explicitly.  The previous autodetection\nwas not reliable and caused issues on Google\u2019s App Engine.  Until\n1.0 the old behavior will continue to work but issue dependency\nwarnings.,,fixed a problem for Flask to run on jython.,,added a,PROPAGATE_EXCEPTIONS,configuration variable that can be\nused to flip the setting of exception propagation which previously\nwas linked to,DEBUG,alone and is now linked to either,DEBUG,or,TESTING,.,,Flask no longer internally depends on rules being added through the,add_url_rule,function and can now also accept regular werkzeug\nrules added to the url map.,,Added an,endpoint,method to the flask application object which\nallows one to register a callback to an arbitrary endpoint with\na decorator.,,Use Last-Modified for static file sending instead of Date which\nwas incorrectly introduced in 0.6.,,Added,create_jinja_loader,to override the loader creation process.,,Implemented a silent flag for,config.from_pyfile,.,,Added,teardown_request,decorator, for functions that should run at the end\nof a request regardless of whether an exception occurred.  Also the behavior\nfor,after_request,was changed.  It\u2019s now no longer executed when an exception\nis raised.  See,Upgrading to new Teardown Handling,,Implemented,flask.has_request_context(),,Deprecated,init_jinja_globals,.  Override the,create_jinja_environment(),method instead to\nachieve the same functionality.,,Added,flask.safe_join(),,The automatic JSON request data unpacking now looks at the charset\nmimetype parameter.,,Don\u2019t modify the session on,flask.get_flashed_messages(),if there\nare no messages in the session.,,before_request,handlers are now able to abort requests with errors.,,it is not possible to define user exception handlers.  That way you can\nprovide custom error messages from a central hub for certain errors that\nmight occur during request processing (for instance database connection\nerrors, timeouts from remote resources etc.).,,Blueprints can provide blueprint specific error handlers.,,Implemented generic,Pluggable Views,(class-based views).,,,,,Version 0.6.1,\u00b6,,Bugfix release, released on December 31st 2010,,,Fixed an issue where the default,OPTIONS,response was\nnot exposing all valid methods in the,Allow,header.,,Jinja2 template loading syntax now allows \u201c./\u201d in front of\na template load path.  Previously this caused issues with\nmodule setups.,,Fixed an issue where the subdomain setting for modules was\nignored for the static folder.,,Fixed a security problem that allowed clients to download arbitrary files\nif the host server was a windows based operating system and the client\nuses backslashes to escape the directory the files where exposed from.,,,,,Version 0.6,\u00b6,,Released on July 27th 2010, codename Whisky,,,after request functions are now called in reverse order of\nregistration.,,OPTIONS is now automatically implemented by Flask unless the\napplication explicitly adds \u2018OPTIONS\u2019 as method to the URL rule.\nIn this case no automatic OPTIONS handling kicks in.,,static rules are now even in place if there is no static folder\nfor the module.  This was implemented to aid GAE which will\nremove the static folder if it\u2019s part of a mapping in the .yml\nfile.,,the,config,is now available in the templates\nas,config,.,,context processors will no longer override values passed directly\nto the render function.,,added the ability to limit the incoming request data with the\nnew,MAX_CONTENT_LENGTH,configuration value.,,the endpoint for the,flask.Module.add_url_rule(),method\nis now optional to be consistent with the function of the\nsame name on the application object.,,added a,flask.make_response(),function that simplifies\ncreating response object instances in views.,,added signalling support based on blinker.  This feature is currently\noptional and supposed to be used by extensions and applications.  If\nyou want to use it, make sure to have,blinker,installed.,,refactored the way URL adapters are created.  This process is now\nfully customizable with the,create_url_adapter(),method.,,modules can now register for a subdomain instead of just an URL\nprefix.  This makes it possible to bind a whole module to a\nconfigurable subdomain.,,,,,Version 0.5.2,\u00b6,,Bugfix Release, released on July 15th 2010,,,fixed another issue with loading templates from directories when\nmodules were used.,,,,,Version 0.5.1,\u00b6,,Bugfix Release, released on July 6th 2010,,,fixes an issue with template loading from directories when modules\nwhere used.,,,,,Version 0.5,\u00b6,,Released on July 6th 2010, codename Calvados,,,fixed a bug with subdomains that was caused by the inability to\nspecify the server name.  The server name can now be set with\nthe,SERVER_NAME,config key.  This key is now also used to set\nthe session cookie cross-subdomain wide.,,autoescaping is no longer active for all templates.  Instead it\nis only active for,.html,,,.htm,,,.xml,and,.xhtml,.\nInside templates this behavior can be changed with the,autoescape,tag.,,refactored Flask internally.  It now consists of more than a\nsingle file.,,flask.send_file(),now emits etags and has the ability to\ndo conditional responses builtin.,,(temporarily) dropped support for zipped applications.  This was a\nrarely used feature and led to some confusing behavior.,,added support for per-package template and static-file directories.,,removed support for,create_jinja_loader,which is no longer used\nin 0.5 due to the improved module support.,,added a helper function to expose files from any directory.,,,,,Version 0.4,\u00b6,,Released on June 18th 2010, codename Rakia,,,added the ability to register application wide error handlers\nfrom modules.,,after_request(),handlers are now also invoked\nif the request dies with an exception and an error handling page\nkicks in.,,test client has not the ability to preserve the request context\nfor a little longer.  This can also be used to trigger custom\nrequests that do not pop the request stack for testing.,,because the Python standard library caches loggers, the name of\nthe logger is configurable now to better support unittests.,,added,TESTING,switch that can activate unittesting helpers.,,the logger switches to,DEBUG,mode now if debug is enabled.,,,,,Version 0.3.1,\u00b6,,Bugfix release, released on May 28th 2010,,,fixed a error reporting bug with,flask.Config.from_envvar(),,removed some unused code from flask,,release does no longer include development leftover files (.git\nfolder for themes, built documentation in zip and pdf file and\nsome .pyc files),,,,,Version 0.3,\u00b6,,Released on May 28th 2010, codename Schnaps,,,added support for categories for flashed messages.,,the application now configures a,logging.Handler,and will\nlog request handling exceptions to that logger when not in debug\nmode.  This makes it possible to receive mails on server errors\nfor example.,,added support for context binding that does not require the use of\nthe with statement for playing in the console.,,the request context is now available within the with statement making\nit possible to further push the request context or pop it.,,added support for configurations.,,,,,Version 0.2,\u00b6,,Released on May 12th 2010, codename J\u00e4germeister,,,various bugfixes,,integrated JSON support,,added,get_template_attribute(),helper function.,,add_url_rule(),can now also register a\nview function.,,refactored internal request dispatching.,,server listens on 127.0.0.1 by default now to fix issues with chrome.,,added external URL support.,,added support for,send_file(),,module support and internal request handling refactoring\nto better support pluggable applications.,,sessions can be set to be permanent now on a per-session basis.,,better error reporting on missing secret keys.,,added support for Google Appengine.,,,,,Version 0.1,\u00b6,,First public preview release.,,,,,,,,,,,,,Contents,,,Flask Changelog,,Version 1.0.3,,Version 1.0.2,,Version 1.0.1,,Version 1.0,,Version 0.12.4,,Version 0.12.3,,Version 0.12.2,,Version 0.12.1,,Version 0.12,,Version 0.11.2,,Version 0.11.1,,Version 0.11,,Version 0.10.2,,Version 0.10.1,,Version 0.10,,Version 0.9,,Version 0.8.1,,Version 0.8,,Version 0.7.3,,Version 0.7.2,,Version 0.7.1,,Version 0.7,,Version 0.6.1,,Version 0.6,,Version 0.5.2,,Version 0.5.1,,Version 0.5,,Version 0.4,,Version 0.3.1,,Version 0.3,,Version 0.2,,Version 0.1,,,,,Navigation,,,Overview,,,Previous:,Upgrading to Newer Releases,,Next:,License,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "CGI", "url": "http://flask.pocoo.org/docs/1.0/deploying/cgi/", "content": ",,,,,CGI \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,Deployment Options,\u00bb,,,,,,,,,CGI,\u00b6,,If all other deployment methods do not work, CGI will work for sure.\nCGI is supported by all major servers but usually has a sub-optimal\nperformance.,,This is also the way you can use a Flask application on Google\u2019s,App\nEngine,, where execution happens in a CGI-like environment.,,,Watch Out,,Please make sure in advance that any,app.run(),calls you might\nhave in your application file are inside an,if,,__name__,,==,,'__main__':,block or moved to a separate file.  Just make sure it\u2019s\nnot called because this will always start a local WSGI server which\nwe do not want if we deploy that application to CGI / app engine.,,With CGI, you will also have to make sure that your code does not contain\nany,print,statements, or that,sys.stdout,is overridden by something\nthat doesn\u2019t write into the HTTP response.,,,,Creating a,.cgi,file,\u00b6,,First you need to create the CGI application file.  Let\u2019s call it,yourapplication.cgi,:,,#!/usr/bin/python,,from,,wsgiref.handlers,,import,,CGIHandler,,from,,yourapplication,,import,,app,,CGIHandler,(),.,run,(,app,),,,,,,Server Setup,\u00b6,,Usually there are two ways to configure the server.  Either just copy the,.cgi,into a,cgi-bin,(and use,mod_rewrite,or something similar to\nrewrite the URL) or let the server point to the file directly.,,In Apache for example you can put something like this into the config:,,ScriptAlias,,/app,,/path/to/the/application.cgi,,,,On shared webhosting, though, you might not have access to your Apache config.\nIn this case, a file called,.htaccess,, sitting in the public directory you want\nyour app to be available, works too but the,ScriptAlias,directive won\u2019t\nwork in that case:,,RewriteEngine,,On,,RewriteCond,%{REQUEST_FILENAME} !-f # Don't interfere with static files,RewriteRule,^(.*)$,/path/to/the/application.cgi/,$1 [L],,,For more information consult the documentation of your webserver.,,,,,,,,,,,,,Contents,,,CGI,,Creating a,.cgi,file,,Server Setup,,,,,Navigation,,,Overview,,,Deployment Options,,,Previous:,FastCGI,,Next:,Becoming Big,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "FastCGI", "url": "http://flask.pocoo.org/docs/1.0/deploying/fastcgi/", "content": ",,,,,FastCGI \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,Deployment Options,\u00bb,,,,,,,,,FastCGI,\u00b6,,FastCGI is a deployment option on servers like,nginx,,,lighttpd,, and,cherokee,; see,uWSGI,and,Standalone WSGI Containers,for other options.  To use your WSGI application with any of them you will need\na FastCGI server first.  The most popular one is,flup,which we will use for\nthis guide.  Make sure to have it installed to follow along.,,,Watch Out,,Please make sure in advance that any,app.run(),calls you might\nhave in your application file are inside an,if,,__name__,,==,,'__main__':,block or moved to a separate file.  Just make sure it\u2019s\nnot called because this will always start a local WSGI server which\nwe do not want if we deploy that application to FastCGI.,,,,Creating a,.fcgi,file,\u00b6,,First you need to create the FastCGI server file.  Let\u2019s call it,yourapplication.fcgi,:,,#!/usr/bin/python,,from,,flup.server.fcgi,,import,,WSGIServer,,from,,yourapplication,,import,,app,,if,,__name__,,==,,'__main__',:,,WSGIServer,(,app,),.,run,(),,,,This is enough for Apache to work, however nginx and older versions of\nlighttpd need a socket to be explicitly passed to communicate with the\nFastCGI server.  For that to work you need to pass the path to the\nsocket to the,WSGIServer,:,,WSGIServer,(,application,,,,bindAddress,=,'/path/to/fcgi.sock',),.,run,(),,,,The path has to be the exact same path you define in the server\nconfig.,,Save the,yourapplication.fcgi,file somewhere you will find it again.\nIt makes sense to have that in,/var/www/yourapplication,or something\nsimilar.,,Make sure to set the executable bit on that file so that the servers\ncan execute it:,,# chmod +x /var/www/yourapplication/yourapplication.fcgi,,,,,Configuring Apache,\u00b6,,The example above is good enough for a basic Apache deployment but your,.fcgi,file will appear in your application URL e.g.,example.com/yourapplication.fcgi/news/,. There are few ways to configure\nyour application so that yourapplication.fcgi does not appear in the URL.\nA preferable way is to use the ScriptAlias and SetHandler configuration\ndirectives to route requests to the FastCGI server. The following example\nuses FastCgiServer to start 5 instances of the application which will\nhandle all incoming requests:,,LoadModule,,fastcgi_module,,/,usr,/,lib64,/,httpd,/,modules,/,mod_fastcgi,.,so,,FastCgiServer,,/,var,/,www,/,html,/,yourapplication,/,app,.,fcgi,,-,idle,-,timeout,,300,,-,processes,,5,,<,VirtualHost,,*>,,ServerName,,webapp1,.,mydomain,.,com,,DocumentRoot,,/,var,/,www,/,html,/,yourapplication,,AddHandler,,fastcgi,-,script,,fcgi,,ScriptAlias,,/,,/,var,/,www,/,html,/,yourapplication,/,app,.,fcgi,/,,<,Location,,/>,,SetHandler,,fastcgi,-,script,,</,Location,>,,</,VirtualHost,>,,,,These processes will be managed by Apache. If you\u2019re using a standalone\nFastCGI server, you can use the FastCgiExternalServer directive instead.\nNote that in the following the path is not real, it\u2019s simply used as an\nidentifier to other\ndirectives such as AliasMatch:,,FastCgiServer,,/,var,/,www,/,html,/,yourapplication,,-,host,,127.0,.,0.1,:,3000,,,,If you cannot set ScriptAlias, for example on a shared web host, you can use\nWSGI middleware to remove yourapplication.fcgi from the URLs. Set .htaccess:,,<IfModule mod_fcgid.c>\n   AddHandler fcgid-script .fcgi\n   <Files ~ (\\.fcgi)>\n       SetHandler fcgid-script\n       Options +FollowSymLinks +ExecCGI\n   </Files>\n</IfModule>\n\n<IfModule mod_rewrite.c>\n   Options +FollowSymlinks\n   RewriteEngine On\n   RewriteBase /\n   RewriteCond %{REQUEST_FILENAME} !-f\n   RewriteRule ^(.*)$ yourapplication.fcgi/$1 [QSA,L]\n</IfModule>,,,Set yourapplication.fcgi:,,#!/usr/bin/python,,#: optional path to your local python site-packages folder,,import,,sys,,sys,.,path,.,insert,(,0,,,,'<your_local_path>/lib/python<your_python_version>/site-packages',),,from,,flup.server.fcgi,,import,,WSGIServer,,from,,yourapplication,,import,,app,,class,,ScriptNameStripper,(,object,):,,def,,__init__,(,self,,,,app,):,,self,.,app,,=,,app,,def,,__call__,(,self,,,,environ,,,,start_response,):,,environ,[,'SCRIPT_NAME',],,=,,'',,return,,self,.,app,(,environ,,,,start_response,),,app,,=,,ScriptNameStripper,(,app,),,if,,__name__,,==,,'__main__',:,,WSGIServer,(,app,),.,run,(),,,,,,Configuring lighttpd,\u00b6,,A basic FastCGI configuration for lighttpd looks like that:,,fastcgi,.,server,,=,,(,\"/yourapplication.fcgi\",,=>,,((,,\"socket\",,=>,,\"/tmp/yourapplication-fcgi.sock\",,,,\"bin-path\",,=>,,\"/var/www/yourapplication/yourapplication.fcgi\",,,,\"check-local\",,=>,,\"disable\",,,,\"max-procs\",,=>,,1,,)),,),,alias,.,url,,=,,(,,\"/static/\",,=>,,\"/path/to/your/static/\",,),,url,.,rewrite,-,once,,=,,(,,\"^(/static($|/.*))$\",,=>,,\"$1\",,,,\"^(/.*)$\",,=>,,\"/yourapplication.fcgi$1\",,),,,,Remember to enable the FastCGI, alias and rewrite modules. This configuration\nbinds the application to,/yourapplication,.  If you want the application to\nwork in the URL root you have to work around a lighttpd bug with the,LighttpdCGIRootFix,middleware.,,Make sure to apply it only if you are mounting the application the URL\nroot. Also, see the Lighty docs for more information on,FastCGI and Python,(note that\nexplicitly passing a socket to run() is no longer necessary).,,,,Configuring nginx,\u00b6,,Installing FastCGI applications on nginx is a bit different because by\ndefault no FastCGI parameters are forwarded.,,A basic Flask FastCGI configuration for nginx looks like this:,,location = /yourapplication { rewrite ^ /yourapplication/ last; }\nlocation /yourapplication { try_files $uri @yourapplication; }\nlocation @yourapplication {\n    include fastcgi_params;\n    fastcgi_split_path_info ^(/yourapplication)(.*)$;\n    fastcgi_param PATH_INFO $fastcgi_path_info;\n    fastcgi_param SCRIPT_NAME $fastcgi_script_name;\n    fastcgi_pass unix:/tmp/yourapplication-fcgi.sock;\n},,,This configuration binds the application to,/yourapplication,.  If you\nwant to have it in the URL root it\u2019s a bit simpler because you don\u2019t\nhave to figure out how to calculate,PATH_INFO,and,SCRIPT_NAME,:,,location / { try_files $uri @yourapplication; }\nlocation @yourapplication {\n    include fastcgi_params;\n    fastcgi_param PATH_INFO $fastcgi_script_name;\n    fastcgi_param SCRIPT_NAME \"\";\n    fastcgi_pass unix:/tmp/yourapplication-fcgi.sock;\n},,,,,Running FastCGI Processes,\u00b6,,Since nginx and others do not load FastCGI apps, you have to do it by\nyourself.,Supervisor can manage FastCGI processes.,You can look around for other FastCGI process managers or write a script\nto run your,.fcgi,file at boot, e.g. using a SysV,init.d,script.\nFor a temporary solution, you can always run the,.fcgi,script inside\nGNU screen.  See,man,,screen,for details, and note that this is a\nmanual solution which does not persist across system restart:,,$ screen\n$ /var/www/yourapplication/yourapplication.fcgi,,,,,Debugging,\u00b6,,FastCGI deployments tend to be hard to debug on most web servers.  Very\noften the only thing the server log tells you is something along the\nlines of \u201cpremature end of headers\u201d.  In order to debug the application\nthe only thing that can really give you ideas why it breaks is switching\nto the correct user and executing the application by hand.,,This example assumes your application is called,application.fcgi,and\nthat your web server user is,www-data,:,,$ su www-data\n$ cd /var/www/yourapplication\n$ python application.fcgi\nTraceback (most recent call last):\n  File \"yourapplication.fcgi\", line 4, in <module>\nImportError: No module named yourapplication,,,In this case the error seems to be \u201cyourapplication\u201d not being on the\npython path.  Common problems are:,,,Relative paths being used.  Don\u2019t rely on the current working directory.,,The code depending on environment variables that are not set by the\nweb server.,,Different python interpreters being used.,,,,,,,,,,,,,,Contents,,,FastCGI,,Creating a,.fcgi,file,,Configuring Apache,,Configuring lighttpd,,Configuring nginx,,Running FastCGI Processes,,Debugging,,,,,Navigation,,,Overview,,,Deployment Options,,,Previous:,mod_wsgi (Apache),,Next:,CGI,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "uWSGI", "url": "http://flask.pocoo.org/docs/1.0/deploying/uwsgi/", "content": ",,,,,uWSGI \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,Deployment Options,\u00bb,,,,,,,,,uWSGI,\u00b6,,uWSGI is a deployment option on servers like,nginx,,,lighttpd,, and,cherokee,; see,FastCGI,and,Standalone WSGI Containers,for other options.  To use your WSGI application with uWSGI protocol you will\nneed a uWSGI server first. uWSGI is both a protocol and an application server;\nthe application server can serve uWSGI, FastCGI, and HTTP protocols.,,The most popular uWSGI server is,uwsgi,, which we will use for this\nguide.  Make sure to have it installed to follow along.,,,Watch Out,,Please make sure in advance that any,app.run(),calls you might\nhave in your application file are inside an,if,,__name__,,==,,'__main__':,block or moved to a separate file.  Just make sure it\u2019s\nnot called because this will always start a local WSGI server which\nwe do not want if we deploy that application to uWSGI.,,,,Starting your app with uwsgi,\u00b6,,uwsgi,is designed to operate on WSGI callables found in python modules.,,Given a flask application in myapp.py, use the following command:,,$ uwsgi -s /tmp/yourapplication.sock --manage-script-name --mount /yourapplication=myapp:app,,,The,--manage-script-name,will move the handling of,SCRIPT_NAME,to uwsgi,\nsince its smarter about that. It is used together with the,--mount,directive\nwhich will make requests to,/yourapplication,be directed to,myapp:app,.\nIf your application is accessible at root level, you can use a single,/,instead of,/yourapplication,.,myapp,refers to the name of the file of\nyour flask application (without extension) or the module which provides,app,.,app,is the callable inside of your application (usually the line reads,app,,=,,Flask(__name__),.,,If you want to deploy your flask application inside of a virtual environment,\nyou need to also add,--virtualenv,,/path/to/virtual/environment,. You might\nalso need to add,--plugin,,python,or,--plugin,,python3,depending on which\npython version you use for your project.,,,,Configuring nginx,\u00b6,,A basic flask nginx configuration looks like this:,,location = /yourapplication { rewrite ^ /yourapplication/; }\nlocation /yourapplication { try_files $uri @yourapplication; }\nlocation @yourapplication {\n  include uwsgi_params;\n  uwsgi_pass unix:/tmp/yourapplication.sock;\n},,,This configuration binds the application to,/yourapplication,.  If you want\nto have it in the URL root its a bit simpler:,,location / { try_files $uri @yourapplication; }\nlocation @yourapplication {\n    include uwsgi_params;\n    uwsgi_pass unix:/tmp/yourapplication.sock;\n},,,,,,,,,,,,,,Contents,,,uWSGI,,Starting your app with uwsgi,,Configuring nginx,,,,,Navigation,,,Overview,,,Deployment Options,,,Previous:,Standalone WSGI Containers,,Next:,mod_wsgi (Apache),,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Adding HTTP Method Overrides", "url": "http://flask.pocoo.org/docs/1.0/patterns/methodoverrides/", "content": ",,,,,Adding HTTP Method Overrides \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,,,,,Adding HTTP Method Overrides,\u00b6,,Some HTTP proxies do not support arbitrary HTTP methods or newer HTTP\nmethods (such as PATCH).  In that case it\u2019s possible to \u201cproxy\u201d HTTP\nmethods through another HTTP method in total violation of the protocol.,,The way this works is by letting the client do an HTTP POST request and\nset the,X-HTTP-Method-Override,header and set the value to the\nintended HTTP method (such as,PATCH,).,,This can easily be accomplished with an HTTP middleware:,,class,,HTTPMethodOverrideMiddleware,(,object,):,,allowed_methods,,=,,frozenset,([,,'GET',,,,'HEAD',,,,'POST',,,,'DELETE',,,,'PUT',,,,'PATCH',,,,'OPTIONS',,]),,bodyless_methods,,=,,frozenset,([,'GET',,,,'HEAD',,,,'OPTIONS',,,,'DELETE',]),,def,,__init__,(,self,,,,app,):,,self,.,app,,=,,app,,def,,__call__,(,self,,,,environ,,,,start_response,):,,method,,=,,environ,.,get,(,'HTTP_X_HTTP_METHOD_OVERRIDE',,,,'',),.,upper,(),,if,,method,,in,,self,.,allowed_methods,:,,method,,=,,method,.,encode,(,'ascii',,,,'replace',),,environ,[,'REQUEST_METHOD',],,=,,method,,if,,method,,in,,self,.,bodyless_methods,:,,environ,[,'CONTENT_LENGTH',],,=,,'0',,return,,self,.,app,(,environ,,,,start_response,),,,,To use this with Flask this is all that is necessary:,,from,,flask,,import,,Flask,,app,,=,,Flask,(,__name__,),,app,.,wsgi_app,,=,,HTTPMethodOverrideMiddleware,(,app,.,wsgi_app,),,,,,,,,,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,Deferred Request Callbacks,,Next:,Request Content Checksums,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "mod_wsgi (Apache)", "url": "http://flask.pocoo.org/docs/1.0/deploying/mod_wsgi/", "content": ",,,,,mod_wsgi (Apache) \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,Deployment Options,\u00bb,,,,,,,,,mod_wsgi (Apache),\u00b6,,If you are using the,Apache,webserver, consider using,mod_wsgi,.,,,Watch Out,,Please make sure in advance that any,app.run(),calls you might\nhave in your application file are inside an,if,,__name__,,==,,'__main__':,block or moved to a separate file.  Just make sure it\u2019s\nnot called because this will always start a local WSGI server which\nwe do not want if we deploy that application to mod_wsgi.,,,,Installing,mod_wsgi,\u00b6,,If you don\u2019t have,mod_wsgi,installed yet you have to either install it\nusing a package manager or compile it yourself.  The mod_wsgi,installation instructions,cover source installations on UNIX systems.,,If you are using Ubuntu/Debian you can apt-get it and activate it as\nfollows:,,# apt-get install libapache2-mod-wsgi,,,If you are using a yum based distribution (Fedora, OpenSUSE, etc..) you\ncan install it as follows:,,# yum install mod_wsgi,,,On FreeBSD install,mod_wsgi,by compiling the,www/mod_wsgi,port or by\nusing pkg_add:,,# pkg install ap22-mod_wsgi2,,,If you are using pkgsrc you can install,mod_wsgi,by compiling the,www/ap2-wsgi,package.,,If you encounter segfaulting child processes after the first apache\nreload you can safely ignore them.  Just restart the server.,,,,Creating a,.wsgi,file,\u00b6,,To run your application you need a,yourapplication.wsgi,file.  This file\ncontains the code,mod_wsgi,is executing on startup to get the application\nobject.  The object called,application,in that file is then used as\napplication.,,For most applications the following file should be sufficient:,,from,,yourapplication,,import,,app,,as,,application,,,,If you don\u2019t have a factory function for application creation but a singleton\ninstance you can directly import that one as,application,.,,Store that file somewhere that you will find it again (e.g.:,/var/www/yourapplication,) and make sure that,yourapplication,and all\nthe libraries that are in use are on the python load path.  If you don\u2019t\nwant to install it system wide consider using a,virtual python,instance.  Keep in mind that you will have to actually install your\napplication into the virtualenv as well.  Alternatively there is the\noption to just patch the path in the,.wsgi,file before the import:,,import,,sys,,sys,.,path,.,insert,(,0,,,,'/path/to/the/application',),,,,,,Configuring Apache,\u00b6,,The last thing you have to do is to create an Apache configuration file\nfor your application.  In this example we are telling,mod_wsgi,to\nexecute the application under a different user for security reasons:,,<VirtualHost,,*,>,,ServerName,example.com,WSGIDaemonProcess,yourapplication,user,=user1,group,=group1 threads=5,WSGIScriptAlias,/,/var/www/yourapplication/yourapplication.wsgi,,<Directory,,/var/www/yourapplication,>,,WSGIProcessGroup,yourapplication,WSGIApplicationGroup,%{GLOBAL},Order,deny,allow,Allow,from,all,,</Directory>,,</VirtualHost>,,,,Note: WSGIDaemonProcess isn\u2019t implemented in Windows and Apache will\nrefuse to run with the above configuration. On a Windows system, eliminate those lines:,,<VirtualHost,,*,>,,ServerName,example.com,WSGIScriptAlias,/ C:\\yourdir\\yourapp.wsgi,<Directory,,C:\\yourdir,>,,Order,deny,allow,Allow,from,all,,</Directory>,,</VirtualHost>,,,,Note: There have been some changes in access control configuration for,Apache 2.4,.,,Most notably, the syntax for directory permissions has changed from httpd 2.2,,Order,allow,deny,Allow,from,all,,,,to httpd 2.4 syntax,,Require,,all,granted,,,For more information consult the,mod_wsgi documentation,.,,,,Troubleshooting,\u00b6,,If your application does not run, follow this guide to troubleshoot:,,,Problem:,application does not run, errorlog shows SystemExit ignored,,You have an,app.run(),call in your application file that is not\nguarded by an,if,,__name__,,==,,'__main__':,condition.  Either\nremove that,run(),call from the file and move it\ninto a separate,run.py,file or put it into such an if block.,,Problem:,application gives permission errors,,Probably caused by your application running as the wrong user.  Make\nsure the folders the application needs access to have the proper\nprivileges set and the application runs as the correct user\n(,user,and,group,parameter to the,WSGIDaemonProcess,directive),,Problem:,application dies with an error on print,,Keep in mind that mod_wsgi disallows doing anything with,sys.stdout,and,sys.stderr,.  You can disable this\nprotection from the config by setting the,WSGIRestrictStdout,to,off,:,,WSGIRestrictStdout,,Off,,,,Alternatively you can also replace the standard out in the .wsgi file\nwith a different stream:,,import,,sys,,sys,.,stdout,,=,,sys,.,stderr,,,,,Problem:,accessing resources gives IO errors,,Your application probably is a single .py file you symlinked into\nthe site-packages folder.  Please be aware that this does not work,\ninstead you either have to put the folder into the pythonpath the\nfile is stored in, or convert your application into a package.,,The reason for this is that for non-installed packages, the module\nfilename is used to locate the resources and for symlinks the wrong\nfilename is picked up.,,,,,,Support for Automatic Reloading,\u00b6,,To help deployment tools you can activate support for automatic\nreloading.  Whenever something changes the,.wsgi,file,,mod_wsgi,will\nreload all the daemon processes for us.,,For that, just add the following directive to your,Directory,section:,,WSGIScriptReloading,,On,,,,,,Working with Virtual Environments,\u00b6,,Virtual environments have the advantage that they never install the\nrequired dependencies system wide so you have a better control over what\nis used where.  If you want to use a virtual environment with mod_wsgi\nyou have to modify your,.wsgi,file slightly.,,Add the following lines to the top of your,.wsgi,file:,,activate_this,,=,,'/path/to/env/bin/activate_this.py',,execfile,(,activate_this,,,,dict,(,__file__,=,activate_this,)),,,,For Python 3 add the following lines to the top of your,.wsgi,file:,,activate_this,,=,,'/path/to/env/bin/activate_this.py',,with,,open,(,activate_this,),,as,,file_,:,,exec,(,file_,.,read,(),,,dict,(,__file__,=,activate_this,)),,,,This sets up the load paths according to the settings of the virtual\nenvironment.  Keep in mind that the path has to be absolute.,,,,,,,,,,,,,Contents,,,mod_wsgi (Apache),,Installing,mod_wsgi,,Creating a,.wsgi,file,,Configuring Apache,,Troubleshooting,,Support for Automatic Reloading,,Working with Virtual Environments,,,,,Navigation,,,Overview,,,Deployment Options,,,Previous:,uWSGI,,Next:,FastCGI,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Standalone WSGI Containers", "url": "http://flask.pocoo.org/docs/1.0/deploying/wsgi-standalone/", "content": ",,,,,Standalone WSGI Containers \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,Deployment Options,\u00bb,,,,,,,,,Standalone WSGI Containers,\u00b6,,There are popular servers written in Python that contain WSGI applications and\nserve HTTP.  These servers stand alone when they run; you can proxy to them\nfrom your web server.  Note the section on,Proxy Setups,if you\nrun into issues.,,,Gunicorn,\u00b6,,Gunicorn,\u2018Green Unicorn\u2019 is a WSGI HTTP Server for UNIX. It\u2019s a pre-fork\nworker model ported from Ruby\u2019s Unicorn project. It supports both,eventlet,and,greenlet,. Running a Flask application on this server is quite simple:,,gunicorn,,myproject,:,app,,,,Gunicorn,provides many command-line options \u2013 see,gunicorn,,-h,.\nFor example, to run a Flask application with 4 worker processes (,-w,,4,) binding to localhost port 4000 (,-b,,127.0.0.1:4000,):,,gunicorn,,-,w,,4,,-,b,,127.0,.,0.1,:,4000,,myproject,:,app,,,,,,uWSGI,\u00b6,,uWSGI,is a fast application server written in C. It is very configurable\nwhich makes it more complicated to setup than gunicorn.,,Running,uWSGI HTTP Router,:,,uwsgi,,--,http,,127.0,.,0.1,:,5000,,--,module,,myproject,:,app,,,,For a more optimized setup, see,configuring uWSGI and NGINX,.,,,,Gevent,\u00b6,,Gevent,is a coroutine-based Python networking library that uses,greenlet,to provide a high-level synchronous API on top of,libev,event loop:,,from,,gevent.wsgi,,import,,WSGIServer,,from,,yourapplication,,import,,app,,http_server,,=,,WSGIServer,((,'',,,,5000,),,,app,),,http_server,.,serve_forever,(),,,,,,Twisted Web,\u00b6,,Twisted Web,is the web server shipped with,Twisted,, a mature,\nnon-blocking event-driven networking library. Twisted Web comes with a\nstandard WSGI container which can be controlled from the command line using\nthe,twistd,utility:,,twistd,,web,,--,wsgi,,myproject,.,app,,,,This example will run a Flask application called,app,from a module named,myproject,.,,Twisted Web supports many flags and options, and the,twistd,utility does\nas well; see,twistd,,-h,and,twistd,,web,,-h,for more information. For\nexample, to run a Twisted Web server in the foreground, on port 8080, with an\napplication from,myproject,:,,twistd,,-,n,,web,,--,port,,tcp,:,8080,,--,wsgi,,myproject,.,app,,,,,,Proxy Setups,\u00b6,,If you deploy your application using one of these servers behind an HTTP proxy\nyou will need to rewrite a few headers in order for the application to work.\nThe two problematic values in the WSGI environment usually are,REMOTE_ADDR,and,HTTP_HOST,.  You can configure your httpd to pass these headers, or you\ncan fix them in middleware.  Werkzeug ships a fixer that will solve some common\nsetups, but you might want to write your own WSGI middleware for specific\nsetups.,,Here\u2019s a simple nginx configuration which proxies to an application served on\nlocalhost at port 8000, setting appropriate headers:,,server,,{,,listen,,80,;,,server_name,,_,;,,access_log,,/var/log/nginx/access.log,;,,error_log,,/var/log/nginx/error.log,;,,location,,/,,{,,proxy_pass,,http://127.0.0.1:8000/,;,,proxy_redirect,,off,;,,proxy_set_header,,Host,,$host,;,,proxy_set_header,,X-Real-IP,,$remote_addr,;,,proxy_set_header,,X-Forwarded-For,,$proxy_add_x_forwarded_for,;,,proxy_set_header,,X-Forwarded-Proto,,$scheme,;,,},,},,,,If your httpd is not providing these headers, the most common setup invokes the\nhost being set from,X-Forwarded-Host,and the remote address from,X-Forwarded-For,:,,from,,werkzeug.contrib.fixers,,import,,ProxyFix,,app,.,wsgi_app,,=,,ProxyFix,(,app,.,wsgi_app,),,,,,Trusting Headers,,Please keep in mind that it is a security issue to use such a middleware in\na non-proxy setup because it will blindly trust the incoming headers which\nmight be forged by malicious clients.,,,If you want to rewrite the headers from another header, you might want to\nuse a fixer like this:,,class,,CustomProxyFix,(,object,):,,def,,__init__,(,self,,,,app,):,,self,.,app,,=,,app,,def,,__call__,(,self,,,,environ,,,,start_response,):,,host,,=,,environ,.,get,(,'HTTP_X_FHOST',,,,'',),,if,,host,:,,environ,[,'HTTP_HOST',],,=,,host,,return,,self,.,app,(,environ,,,,start_response,),,app,.,wsgi_app,,=,,CustomProxyFix,(,app,.,wsgi_app,),,,,,,,,,,,,,,,Contents,,,Standalone WSGI Containers,,Gunicorn,,uWSGI,,Gevent,,Twisted Web,,Proxy Setups,,,,,Navigation,,,Overview,,,Deployment Options,,,Previous:,Deployment Options,,Next:,uWSGI,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/category/deployment/", "content": "Deployment | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Deployment,,,Apache hosting,,(2012-09-20),,Cherokee fix for URL prefix,,(2012-02-01),,Deploying a Flask app on Dotcloud,,(2011-06-17),,Deploying a Flask app on Webfaction,,(2011-08-11),,Fix for Connection Reset on POST,,(2011-06-03),,Fixing SCRIPT_NAME/url_scheme when behind reverse proxy,,(2010-07-21),,Passing REMOTE_USER from Apache as a reverse proxy to web application servers,,(2011-09-08),,Python Anywhere,,(2013-07-06),,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/category/utilities/", "content": "Utilities | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Utilities,,,Basic Message Queue with Redis,,(2011-09-24),,CMS Pages,,(2013-07-18),,Content negotiated error responses,,(2012-07-22),,Creating your own local proxies,,(2010-05-07),,Custom Flask JSONEncoder,,(2013-11-28),,Custom HTTP methods,,(2010-05-03),,Dumping post-mortem information on production,,(2014-11-28),,Flashing errors from WTForms forms,,(2010-05-07),,Flask-Mail with google apps,,(2012-02-05),,Flask Set Cookies by Response,,(2010-06-28),,Flask TestCase,,(2010-06-02),,Handling multiple sub-requests in a single Flask request,,(2015-05-01),,Include / Import css file as string,,(2011-10-19),,Job queue implemented using SQLite,,(2012-02-10),,Nicer Errors with Descriptions from Werkzeug,,(2010-05-08),,Overriding HTTP Methods for old browsers,,(2010-08-14),,Per-Request After-Request Callbacks,,(2011-07-08),,Preconfigured interactive shell,,(2010-05-28),,Reloading with other WSGI servers,,(2010-07-16),,Serve CoffeeScript, SCSS, or other transcompiling file via Python,,(2012-03-12),,Share your Local Server with a Friend,,(2012-03-12),,Shutdown The Simple Server,,(2011-08-29),,Stream Proxy with Requests,,(2013-11-15),,Triggering the debugger on purpose,,(2010-05-26),,Upload a StringIO object with send_file,,(2010-07-07),,Using Context Globals with Gevent-Socketio,,(2012-12-17),,Using TurboMail with Flask,,(2010-05-08),,Wrapper for passing command-line flags to app.run(),,(2015-09-14),,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "FastCGI", "url": "http://flask.pocoo.org/docs/0.12/deploying/fastcgi/", "content": ",,,,,FastCGI \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,Deployment Options,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,FastCGI,\u00b6,,FastCGI is a deployment option on servers like,nginx,,,lighttpd,, and,cherokee,; see,uWSGI,and,Standalone WSGI Containers,for other options.  To use your WSGI application with any of them you will need\na FastCGI server first.  The most popular one is,flup,which we will use for\nthis guide.  Make sure to have it installed to follow along.,,,Watch Out,,Please make sure in advance that any,app.run(),calls you might\nhave in your application file are inside an,if,,__name__,,==,,'__main__':,block or moved to a separate file.  Just make sure it\u2019s\nnot called because this will always start a local WSGI server which\nwe do not want if we deploy that application to FastCGI.,,,,Creating a,.fcgi,file,\u00b6,,First you need to create the FastCGI server file.  Let\u2019s call it,yourapplication.fcgi,:,,#!/usr/bin/python,,from,,flup.server.fcgi,,import,,WSGIServer,,from,,yourapplication,,import,,app,,if,,__name__,,==,,'__main__',:,,WSGIServer,(,app,),.,run,(),,,,This is enough for Apache to work, however nginx and older versions of\nlighttpd need a socket to be explicitly passed to communicate with the\nFastCGI server.  For that to work you need to pass the path to the\nsocket to the,WSGIServer,:,,WSGIServer,(,application,,,,bindAddress,=,'/path/to/fcgi.sock',),.,run,(),,,,The path has to be the exact same path you define in the server\nconfig.,,Save the,yourapplication.fcgi,file somewhere you will find it again.\nIt makes sense to have that in,/var/www/yourapplication,or something\nsimilar.,,Make sure to set the executable bit on that file so that the servers\ncan execute it:,,# chmod +x /var/www/yourapplication/yourapplication.fcgi,,,,,Configuring Apache,\u00b6,,The example above is good enough for a basic Apache deployment but your,.fcgi,file will appear in your application URL e.g.,example.com/yourapplication.fcgi/news/,. There are few ways to configure\nyour application so that yourapplication.fcgi does not appear in the URL.\nA preferable way is to use the ScriptAlias and SetHandler configuration\ndirectives to route requests to the FastCGI server. The following example\nuses FastCgiServer to start 5 instances of the application which will\nhandle all incoming requests:,,LoadModule,,fastcgi_module,,/,usr,/,lib64,/,httpd,/,modules,/,mod_fastcgi,.,so,,FastCgiServer,,/,var,/,www,/,html,/,yourapplication,/,app,.,fcgi,,-,idle,-,timeout,,300,,-,processes,,5,,<,VirtualHost,,*>,,ServerName,,webapp1,.,mydomain,.,com,,DocumentRoot,,/,var,/,www,/,html,/,yourapplication,,AddHandler,,fastcgi,-,script,,fcgi,,ScriptAlias,,/,,/,var,/,www,/,html,/,yourapplication,/,app,.,fcgi,/,,<,Location,,/>,,SetHandler,,fastcgi,-,script,,</,Location,>,,</,VirtualHost,>,,,,These processes will be managed by Apache. If you\u2019re using a standalone\nFastCGI server, you can use the FastCgiExternalServer directive instead.\nNote that in the following the path is not real, it\u2019s simply used as an\nidentifier to other\ndirectives such as AliasMatch:,,FastCgiServer,,/,var,/,www,/,html,/,yourapplication,,-,host,,127.0,.,0.1,:,3000,,,,If you cannot set ScriptAlias, for example on a shared web host, you can use\nWSGI middleware to remove yourapplication.fcgi from the URLs. Set .htaccess:,,<IfModule mod_fcgid.c>\n   AddHandler fcgid-script .fcgi\n   <Files ~ (\\.fcgi)>\n       SetHandler fcgid-script\n       Options +FollowSymLinks +ExecCGI\n   </Files>\n</IfModule>\n\n<IfModule mod_rewrite.c>\n   Options +FollowSymlinks\n   RewriteEngine On\n   RewriteBase /\n   RewriteCond %{REQUEST_FILENAME} !-f\n   RewriteRule ^(.*)$ yourapplication.fcgi/$1 [QSA,L]\n</IfModule>,,,Set yourapplication.fcgi:,,#!/usr/bin/python,,#: optional path to your local python site-packages folder,,import,,sys,,sys,.,path,.,insert,(,0,,,,'<your_local_path>/lib/python2.6/site-packages',),,from,,flup.server.fcgi,,import,,WSGIServer,,from,,yourapplication,,import,,app,,class,,ScriptNameStripper,(,object,):,,def,,__init__,(,self,,,,app,):,,self,.,app,,=,,app,,def,,__call__,(,self,,,,environ,,,,start_response,):,,environ,[,'SCRIPT_NAME',],,=,,'',,return,,self,.,app,(,environ,,,,start_response,),,app,,=,,ScriptNameStripper,(,app,),,if,,__name__,,==,,'__main__',:,,WSGIServer,(,app,),.,run,(),,,,,,Configuring lighttpd,\u00b6,,A basic FastCGI configuration for lighttpd looks like that:,,fastcgi,.,server,,=,,(,\"/yourapplication.fcgi\",,=>,,((,,\"socket\",,=>,,\"/tmp/yourapplication-fcgi.sock\",,,,\"bin-path\",,=>,,\"/var/www/yourapplication/yourapplication.fcgi\",,,,\"check-local\",,=>,,\"disable\",,,,\"max-procs\",,=>,,1,,)),,),,alias,.,url,,=,,(,,\"/static/\",,=>,,\"/path/to/your/static\",,),,url,.,rewrite,-,once,,=,,(,,\"^(/static($|/.*))$\",,=>,,\"$1\",,,,\"^(/.*)$\",,=>,,\"/yourapplication.fcgi$1\",,),,,,Remember to enable the FastCGI, alias and rewrite modules. This configuration\nbinds the application to,/yourapplication,.  If you want the application to\nwork in the URL root you have to work around a lighttpd bug with the,LighttpdCGIRootFix,middleware.,,Make sure to apply it only if you are mounting the application the URL\nroot. Also, see the Lighty docs for more information on,FastCGI and Python,(note that\nexplicitly passing a socket to run() is no longer necessary).,,,,Configuring nginx,\u00b6,,Installing FastCGI applications on nginx is a bit different because by\ndefault no FastCGI parameters are forwarded.,,A basic Flask FastCGI configuration for nginx looks like this:,,location = /yourapplication { rewrite ^ /yourapplication/ last; }\nlocation /yourapplication { try_files $uri @yourapplication; }\nlocation @yourapplication {\n    include fastcgi_params;\n    fastcgi_split_path_info ^(/yourapplication)(.*)$;\n    fastcgi_param PATH_INFO $fastcgi_path_info;\n    fastcgi_param SCRIPT_NAME $fastcgi_script_name;\n    fastcgi_pass unix:/tmp/yourapplication-fcgi.sock;\n},,,This configuration binds the application to,/yourapplication,.  If you\nwant to have it in the URL root it\u2019s a bit simpler because you don\u2019t\nhave to figure out how to calculate,PATH_INFO,and,SCRIPT_NAME,:,,location / { try_files $uri @yourapplication; }\nlocation @yourapplication {\n    include fastcgi_params;\n    fastcgi_param PATH_INFO $fastcgi_script_name;\n    fastcgi_param SCRIPT_NAME \"\";\n    fastcgi_pass unix:/tmp/yourapplication-fcgi.sock;\n},,,,,Running FastCGI Processes,\u00b6,,Since nginx and others do not load FastCGI apps, you have to do it by\nyourself.,Supervisor can manage FastCGI processes.,You can look around for other FastCGI process managers or write a script\nto run your,.fcgi,file at boot, e.g. using a SysV,init.d,script.\nFor a temporary solution, you can always run the,.fcgi,script inside\nGNU screen.  See,man,,screen,for details, and note that this is a\nmanual solution which does not persist across system restart:,,$ screen\n$ /var/www/yourapplication/yourapplication.fcgi,,,,,Debugging,\u00b6,,FastCGI deployments tend to be hard to debug on most web servers.  Very\noften the only thing the server log tells you is something along the\nlines of \u201cpremature end of headers\u201d.  In order to debug the application\nthe only thing that can really give you ideas why it breaks is switching\nto the correct user and executing the application by hand.,,This example assumes your application is called,application.fcgi,and\nthat your web server user is,www-data,:,,$ su www-data\n$ cd /var/www/yourapplication\n$ python application.fcgi\nTraceback (most recent call last):\n  File \"yourapplication.fcgi\", line 4, in <module>\nImportError: No module named yourapplication,,,In this case the error seems to be \u201cyourapplication\u201d not being on the\npython path.  Common problems are:,,,Relative paths being used.  Don\u2019t rely on the current working directory.,,The code depending on environment variables that are not set by the\nweb server.,,Different python interpreters being used.,,,,,,,,,,,,,,Contents,,,FastCGI,,Creating a,.fcgi,file,,Configuring Apache,,Configuring lighttpd,,Configuring nginx,,Running FastCGI Processes,,Debugging,,,,,Navigation,,,Overview,,,Deployment Options,,,Previous:,uWSGI,,Next:,CGI,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "None", "url": "http://flask.pocoo.org/community/", "content": "Welcome | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/community.png); },,,Flask Community,,,overview,//,docs,//,community,//,extensions,//,donate,,Flask is supported by an active, helpful community.\n        Get involved by joining the,mailing list,and,IRC channel,.\n        Discussion for developers using Flask as well as working on the core is welcome.,If you want to spread the word, there is also a selection of,badges,and,logos,you can use on your own website.\n        There are also shirts and mugs available at the,Flask store,, and,stickers,too.,,Issues Tracker,- for bugs and feature requests,Mailing List,- for help and long term discussion,IRC Channel,- for general help and discussion,Stack Overflow,- for,focused questions,about code,Powered By Flask,,Badges,,Logos,,Store,,Stickers,,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "uWSGI", "url": "http://flask.pocoo.org/docs/0.12/deploying/uwsgi/", "content": ",,,,,uWSGI \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,Deployment Options,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,uWSGI,\u00b6,,uWSGI is a deployment option on servers like,nginx,,,lighttpd,, and,cherokee,; see,FastCGI,and,Standalone WSGI Containers,for other options.  To use your WSGI application with uWSGI protocol you will\nneed a uWSGI server first. uWSGI is both a protocol and an application server;\nthe application server can serve uWSGI, FastCGI, and HTTP protocols.,,The most popular uWSGI server is,uwsgi,, which we will use for this\nguide.  Make sure to have it installed to follow along.,,,Watch Out,,Please make sure in advance that any,app.run(),calls you might\nhave in your application file are inside an,if,,__name__,,==,,'__main__':,block or moved to a separate file.  Just make sure it\u2019s\nnot called because this will always start a local WSGI server which\nwe do not want if we deploy that application to uWSGI.,,,,Starting your app with uwsgi,\u00b6,,uwsgi,is designed to operate on WSGI callables found in python modules.,,Given a flask application in myapp.py, use the following command:,,$ uwsgi -s /tmp/yourapplication.sock --manage-script-name --mount /yourapplication=myapp:app,,,The,--manage-script-name,will move the handling of,SCRIPT_NAME,to uwsgi,\nsince its smarter about that. It is used together with the,--mount,directive\nwhich will make requests to,/yourapplication,be directed to,myapp:app,.\nIf your application is accessible at root level, you can use a single,/,instead of,/yourapplication,.,myapp,refers to the name of the file of\nyour flask application (without extension) or the module which provides,app,.,app,is the callable inside of your application (usually the line reads,app,,=,,Flask(__name__),.,,If you want to deploy your flask application inside of a virtual environment,\nyou need to also add,--virtualenv,,/path/to/virtual/environment,. You might\nalso need to add,--plugin,,python,or,--plugin,,python3,depending on which\npython version you use for your project.,,,,Configuring nginx,\u00b6,,A basic flask nginx configuration looks like this:,,location = /yourapplication { rewrite ^ /yourapplication/; }\nlocation /yourapplication { try_files $uri @yourapplication; }\nlocation @yourapplication {\n  include uwsgi_params;\n  uwsgi_pass unix:/tmp/yourapplication.sock;\n},,,This configuration binds the application to,/yourapplication,.  If you want\nto have it in the URL root its a bit simpler:,,location / { try_files $uri @yourapplication; }\nlocation @yourapplication {\n    include uwsgi_params;\n    uwsgi_pass unix:/tmp/yourapplication.sock;\n},,,,,,,,,,,,,,Contents,,,uWSGI,,Starting your app with uwsgi,,Configuring nginx,,,,,Navigation,,,Overview,,,Deployment Options,,,Previous:,Standalone WSGI Containers,,Next:,FastCGI,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Standalone WSGI Containers", "url": "http://flask.pocoo.org/docs/0.12/deploying/wsgi-standalone/", "content": ",,,,,Standalone WSGI Containers \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,Deployment Options,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,Standalone WSGI Containers,\u00b6,,There are popular servers written in Python that contain WSGI applications and\nserve HTTP.  These servers stand alone when they run; you can proxy to them\nfrom your web server.  Note the section on,Proxy Setups,if you\nrun into issues.,,,Gunicorn,\u00b6,,Gunicorn,\u2018Green Unicorn\u2019 is a WSGI HTTP Server for UNIX. It\u2019s a pre-fork\nworker model ported from Ruby\u2019s Unicorn project. It supports both,eventlet,and,greenlet,. Running a Flask application on this server is quite simple:,,gunicorn,,myproject,:,app,,,,Gunicorn,provides many command-line options \u2013 see,gunicorn,,-h,.\nFor example, to run a Flask application with 4 worker processes (,-w,,4,) binding to localhost port 4000 (,-b,,127.0.0.1:4000,):,,gunicorn,,-,w,,4,,-,b,,127.0,.,0.1,:,4000,,myproject,:,app,,,,,,Gevent,\u00b6,,Gevent,is a coroutine-based Python networking library that uses,greenlet,to provide a high-level synchronous API on top of,libev,event loop:,,from,,gevent.wsgi,,import,,WSGIServer,,from,,yourapplication,,import,,app,,http_server,,=,,WSGIServer,((,'',,,,5000,),,,app,),,http_server,.,serve_forever,(),,,,,,Twisted Web,\u00b6,,Twisted Web,is the web server shipped with,Twisted,, a mature,\nnon-blocking event-driven networking library. Twisted Web comes with a\nstandard WSGI container which can be controlled from the command line using\nthe,twistd,utility:,,twistd,,web,,--,wsgi,,myproject,.,app,,,,This example will run a Flask application called,app,from a module named,myproject,.,,Twisted Web supports many flags and options, and the,twistd,utility does\nas well; see,twistd,,-h,and,twistd,,web,,-h,for more information. For\nexample, to run a Twisted Web server in the foreground, on port 8080, with an\napplication from,myproject,:,,twistd,,-,n,,web,,--,port,,8080,,--,wsgi,,myproject,.,app,,,,,,Proxy Setups,\u00b6,,If you deploy your application using one of these servers behind an HTTP proxy\nyou will need to rewrite a few headers in order for the application to work.\nThe two problematic values in the WSGI environment usually are,REMOTE_ADDR,and,HTTP_HOST,.  You can configure your httpd to pass these headers, or you\ncan fix them in middleware.  Werkzeug ships a fixer that will solve some common\nsetups, but you might want to write your own WSGI middleware for specific\nsetups.,,Here\u2019s a simple nginx configuration which proxies to an application served on\nlocalhost at port 8000, setting appropriate headers:,,server,,{,,listen,,80,;,,server_name,,_,;,,access_log,,/var/log/nginx/access.log,;,,error_log,,/var/log/nginx/error.log,;,,location,,/,,{,,proxy_pass,,http://127.0.0.1:8000/,;,,proxy_redirect,,off,;,,proxy_set_header,,Host,,$host,;,,proxy_set_header,,X-Real-IP,,$remote_addr,;,,proxy_set_header,,X-Forwarded-For,,$proxy_add_x_forwarded_for,;,,proxy_set_header,,X-Forwarded-Proto,,$scheme,;,,},,},,,,If your httpd is not providing these headers, the most common setup invokes the\nhost being set from,X-Forwarded-Host,and the remote address from,X-Forwarded-For,:,,from,,werkzeug.contrib.fixers,,import,,ProxyFix,,app,.,wsgi_app,,=,,ProxyFix,(,app,.,wsgi_app,),,,,,Trusting Headers,,Please keep in mind that it is a security issue to use such a middleware in\na non-proxy setup because it will blindly trust the incoming headers which\nmight be forged by malicious clients.,,,If you want to rewrite the headers from another header, you might want to\nuse a fixer like this:,,class,,CustomProxyFix,(,object,):,,def,,__init__,(,self,,,,app,):,,self,.,app,,=,,app,,def,,__call__,(,self,,,,environ,,,,start_response,):,,host,,=,,environ,.,get,(,'HTTP_X_FHOST',,,,'',),,if,,host,:,,environ,[,'HTTP_HOST',],,=,,host,,return,,self,.,app,(,environ,,,,start_response,),,app,.,wsgi_app,,=,,CustomProxyFix,(,app,.,wsgi_app,),,,,,,,,,,,,,,,Contents,,,Standalone WSGI Containers,,Gunicorn,,Gevent,,Twisted Web,,Proxy Setups,,,,,Navigation,,,Overview,,,Deployment Options,,,Previous:,mod_wsgi (Apache),,Next:,uWSGI,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Extensions", "url": "http://flask.pocoo.org/docs/1.0/extensions/", "content": ",,,,,Extensions \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,,,,,,,,Extensions,\u00b6,,Extensions are extra packages that add functionality to a Flask\napplication. For example, an extension might add support for sending\nemail or connecting to a database. Some extensions add entire new\nframeworks to help build certain types of applications, like a ReST API.,,,Finding Extensions,\u00b6,,Flask extensions are usually named \u201cFlask-Foo\u201d or \u201cFoo-Flask\u201d. Many\nextensions are listed in the,Extension Registry,, which can be updated\nby extension developers. You can also search PyPI for packages tagged\nwith,Framework :: Flask,.,,,,Using Extensions,\u00b6,,Consult each extension\u2019s documentation for installation, configuration,\nand usage instructions. Generally, extensions pull their own\nconfiguration from,app.config,and are\npassed an application instance during initialization. For example,\nan extension caled \u201cFlask-Foo\u201d might be used like this:,,from,,flask_foo,,import,,Foo,,foo,,=,,Foo,(),,app,,=,,Flask,(,__name__,),,app,.,config,.,update,(,,FOO_BAR,=,'baz',,,,FOO_SPAM,=,'eggs',,,,),,foo,.,init_app,(,app,),,,,,,Building Extensions,\u00b6,,While the,Extension Registry,contains many Flask extensions, you may\nnot find an extension that fits your need. If this is the case, you can\ncreate your own. Read,Flask Extension Development,to develop your own Flask\nextension.,,,,,,,,,,,,,Contents,,,Extensions,,Finding Extensions,,Using Extensions,,Building Extensions,,,,,Navigation,,,Overview,,,Previous:,Modular Applications with Blueprints,,Next:,Command Line Interface,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Keep Developing!", "url": "http://flask.pocoo.org/docs/1.0/tutorial/next/", "content": ",,,,,Keep Developing! \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,Tutorial,\u00bb,,,,,,,,,Keep Developing!,\u00b6,,You\u2019ve learned about quite a few Flask and Python concepts throughout\nthe tutorial. Go back and review the tutorial and compare your code with\nthe steps you took to get there. Compare your project to the,example project,, which might look a bit\ndifferent due to the step-by-step nature of the tutorial.,,There\u2019s a lot more to Flask than what you\u2019ve seen so far. Even so,\nyou\u2019re now equipped to start developing your own web applications. Check\nout the,Quickstart,for an overview of what Flask can do, then\ndive into the docs to keep learning. Flask uses,Jinja,,,Click,,,Werkzeug,, and,ItsDangerous,behind the scenes, and they all have\ntheir own documentation too. You\u2019ll also be interested in,Extensions,which make tasks like working with the database or\nvalidating form data easier and more powerful.,,If you want to keep developing your Flaskr project, here are some ideas\nfor what to try next:,,,A detail view to show a single post. Click a post\u2019s title to go to\nits page.,,Like / unlike a post.,,Comments.,,Tags. Clicking a tag shows all the posts with that tag.,,A search box that filters the index page by name.,,Paged display. Only show 5 posts per page.,,Upload an image to go along with a post.,,Format posts using Markdown.,,An RSS feed of new posts.,,,Have fun and make awesome applications!,,,,,,,,,,,Navigation,,,Overview,,,Tutorial,,,Previous:,Deploy to Production,,Next:,Templates,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "How to contribute to Flask", "url": "http://flask.pocoo.org/docs/1.0/contributing/", "content": ",,,,,How to contribute to Flask \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,,,,,,,,How to contribute to Flask,\u00b6,,Thank you for considering contributing to Flask!,,,Support questions,\u00b6,,Please, don\u2019t use the issue tracker for this. Use one of the following\nresources for questions about your own code:,,,The IRC channel,#pocoo,on FreeNode.,,The IRC channel,#python,on FreeNode for more general questions.,,The mailing list,flask,@,python,.,org,for long term discussion or larger issues.,,Ask on,Stack Overflow,. Search with Google first using:,site:stackoverflow.com,,flask,,{search,,term,,,exception,,message,,,etc.},,,,,Reporting issues,\u00b6,,,Describe what you expected to happen.,,If possible, include a,minimal, complete, and verifiable example,to help\nus identify the issue. This also helps check that the issue is not with your\nown code.,,Describe what actually happened. Include the full traceback if there was an\nexception.,,List your Python, Flask, and Werkzeug versions. If possible, check if this\nissue is already fixed in the repository.,,,,,Submitting patches,\u00b6,,,Include tests if your patch is supposed to solve a bug, and explain\nclearly under which circumstances the bug happens. Make sure the test fails\nwithout your patch.,,Try to follow,PEP8,, but you may ignore the line length limit if following\nit would make the code uglier.,,,,First time setup,\u00b6,,,Download and install the,latest version of git,.,,,Configure git with your,username,and,email,:,,git,,config,,--,global,,user,.,name,,'your name',,git,,config,,--,global,,user,.,email,,'your email',,,,,Make sure you have a,GitHub account,.,,,Fork Flask to your GitHub account by clicking the,Fork,button.,,,Clone,your GitHub fork locally:,,git,,clone,,https,:,//,github,.,com,/,{,username,},/,flask,,cd,,flask,,,,,Add the main repository as a remote to update later:,,git,,remote,,add,,pallets,,https,:,//,github,.,com,/,pallets,/,flask,,git,,fetch,,pallets,,,,,Create a virtualenv:,,python3,,-,m,,venv,,env,,.,,env,/,bin,/,activate,,# or \"env\\Scripts\\activate\" on Windows,,,,,Install Flask in editable mode with development dependencies:,,pip,,install,,-,e,,\".[dev]\",,,,,,,,Start coding,\u00b6,,,Create a branch to identify the issue you would like to work on (e.g.,2287-dry-test-suite,),,Using your favorite editor, make your changes,,committing as you go,.,,Try to follow,PEP8,, but you may ignore the line length limit if following\nit would make the code uglier.,,Include tests that cover any code changes you make. Make sure the test fails\nwithout your patch.,Run the tests.,.,,Push your commits to GitHub and,create a pull request,.,,Celebrate \ud83c\udf89,,,,,Running the tests,\u00b6,,Run the basic test suite with:,,pytest,,,,This only runs the tests for the current environment. Whether this is relevant\ndepends on which part of Flask you\u2019re working on. Travis-CI will run the full\nsuite when you submit your pull request.,,The full test suite takes a long time to run because it tests multiple\ncombinations of Python and dependencies. You need to have Python 2.7, 3.4,\n3.5 3.6, and PyPy 2.7 installed to run all of the environments. Then run:,,tox,,,,,,Running test coverage,\u00b6,,Generating a report of lines that do not have test coverage can indicate\nwhere to start contributing. Run,pytest,using,coverage,and generate a\nreport on the terminal and as an interactive HTML document:,,coverage,,run,,-,m,,pytest,,coverage,,report,,coverage,,html,,# then open htmlcov/index.html,,,,Read more about,coverage,.,,Running the full test suite with,tox,will combine the coverage reports\nfrom all runs.,,,,Building the docs,\u00b6,,Build the docs in the,docs,directory using Sphinx:,,cd,,docs,,make,,html,,,,Open,_build/html/index.html,in your browser to view the docs.,,Read more about,Sphinx,.,,,,make targets,\u00b6,,Flask provides a,Makefile,with various shortcuts. They will ensure that\nall dependencies are installed.,,,make,,test,runs the basic test suite with,pytest,,make,,cov,runs the basic test suite with,coverage,,make,,test-all,runs the full test suite with,tox,,make,,docs,builds the HTML documentation,,,,,,Caution: zero-padded file modes,\u00b6,,This repository contains several zero-padded file modes that may cause issues\nwhen pushing this repository to git hosts other than GitHub. Fixing this is\ndestructive to the commit history, so we suggest ignoring these warnings. If it\nfails to push and you\u2019re using a self-hosted git service like GitLab, you can\nturn off repository checks in the admin panel.,,These files can also cause issues while cloning. If you have,,[,fetch,],,fsckobjects,,=,,true,,,,or,,[,receive,],,fsckObjects,,=,,true,,,,set in your git configuration file, cloning this repository will fail. The only\nsolution is to set both of the above settings to false while cloning, and then\nsetting them back to true after the cloning is finished.,,,,,,,,,,,,,Contents,,,How to contribute to Flask,,Support questions,,Reporting issues,,Submitting patches,,First time setup,,Start coding,,Running the tests,,Running test coverage,,Building the docs,,make targets,,,,Caution: zero-padded file modes,,,,,Navigation,,,Overview,,,Previous:,License,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Deploy to Production", "url": "http://flask.pocoo.org/docs/1.0/tutorial/deploy/", "content": ",,,,,Deploy to Production \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,Tutorial,\u00bb,,,,,,,,,Deploy to Production,\u00b6,,This part of the tutorial assumes you have a server that you want to\ndeploy your application to. It gives an overview of how to create the\ndistribution file and install it, but won\u2019t go into specifics about\nwhat server or software to use. You can set up a new environment on your\ndevelopment computer to try out the instructions below, but probably\nshouldn\u2019t use it for hosting a real public application. See,Deployment Options,for a list of many different ways to host your\napplication.,,,Build and Install,\u00b6,,When you want to deploy your application elsewhere, you build a\ndistribution file. The current standard for Python distribution is the,wheel,format, with the,.whl,extension. Make sure the wheel library\nis installed first:,,pip install wheel,,,Running,setup.py,with Python gives you a command line tool to issue\nbuild-related commands. The,bdist_wheel,command will build a wheel\ndistribution file.,,python setup.py bdist_wheel,,,You can find the file in,dist/flaskr-1.0.0-py3-none-any.whl,. The\nfile name is the name of the project, the version, and some tags about\nthe file can install.,,Copy this file to another machine,,set up a new virtualenv,, then install the\nfile with,pip,.,,pip install flaskr-1.0.0-py3-none-any.whl,,,Pip will install your project along with its dependencies.,,Since this is a different machine, you need to run,init-db,again to\ncreate the database in the instance folder.,,export FLASK_APP=flaskr\nflask init-db,,,When Flask detects that it\u2019s installed (not in editable mode), it uses\na different directory for the instance folder. You can find it at,venv/var/flaskr-instance,instead.,,,,Configure the Secret Key,\u00b6,,In the beginning of the tutorial that you gave a default value for,SECRET_KEY,. This should be changed to some random bytes in\nproduction. Otherwise, attackers could use the public,'dev',key to\nmodify the session cookie, or anything else that uses the secret key.,,You can use the following command to output a random secret key:,,python -c 'import os; print(os.urandom(16))'\n\nb'_5#y2L\"F4Q8z\\n\\xec]/',,,Create the,config.py,file in the instance folder, which the factory\nwill read from if it exists. Copy the generated value into it.,,,venv/var/flaskr-instance/config.py,\u00b6,,SECRET_KEY,,=,,b,'_5#y2L\"F4Q8z,\\n\\xec,]/',,,,,You can also set any other necessary configuration here, although,SECRET_KEY,is the only one needed for Flaskr.,,,,Run with a Production Server,\u00b6,,When running publicly rather than in development, you should not use the\nbuilt-in development server (,flask,,run,). The development server is\nprovided by Werkzeug for convenience, but is not designed to be\nparticularly efficient, stable, or secure.,,Instead, use a production WSGI server. For example, to use,Waitress,,\nfirst install it in the virtual environment:,,pip install waitress,,,You need to tell Waitress about your application, but it doesn\u2019t use,FLASK_APP,like,flask,,run,does. You need to tell it to import and\ncall the application factory to get an application object.,,waitress-serve --call 'flaskr:create_app'\n\nServing on http://0.0.0.0:8080,,,See,Deployment Options,for a list of many different ways to host\nyour application. Waitress is just an example, chosen for the tutorial\nbecause it supports both Windows and Linux. There are many more WSGI\nservers and deployment options that you may choose for your project.,,Continue to,Keep Developing!,.,,,,,,,,,,,,,Contents,,,Deploy to Production,,Build and Install,,Configure the Secret Key,,Run with a Production Server,,,,,Navigation,,,Overview,,,Tutorial,,,Previous:,Test Coverage,,Next:,Keep Developing!,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Test Coverage", "url": "http://flask.pocoo.org/docs/1.0/tutorial/tests/", "content": ",,,,,Test Coverage \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,Tutorial,\u00bb,,,,,,,,,Test Coverage,\u00b6,,Writing unit tests for your application lets you check that the code\nyou wrote works the way you expect. Flask provides a test client that\nsimulates requests to the application and returns the response data.,,You should test as much of your code as possible. Code in functions only\nruns when the function is called, and code in branches, such as,if,blocks, only runs when the condition is met. You want to make sure that\neach function is tested with data that covers each branch.,,The closer you get to 100% coverage, the more comfortable you can be\nthat making a change won\u2019t unexpectedly change other behavior. However,\n100% coverage doesn\u2019t guarantee that your application doesn\u2019t have bugs.\nIn particular, it doesn\u2019t test how the user interacts with the\napplication in the browser. Despite this, test coverage is an important\ntool to use during development.,,,Note,,This is being introduced late in the tutorial, but in your future\nprojects you should test as you develop.,,,You\u2019ll use,pytest,and,coverage,to test and measure your code.\nInstall them both:,,pip install pytest coverage,,,,Setup and Fixtures,\u00b6,,The test code is located in the,tests,directory. This directory is,next to,the,flaskr,package, not inside it. The,tests/conftest.py,file contains setup functions called,fixtures,that each test will use. Tests are in Python modules that start with,test_,, and each test function in those modules also starts with,test_,.,,Each test will create a new temporary database file and populate some\ndata that will be used in the tests. Write a SQL file to insert that\ndata.,,,tests/data.sql,\u00b6,,INSERT,,INTO,,user,,(,username,,,,password,),,VALUES,,(,'test',,,,'pbkdf2:sha256:50000$TCI4GzcX$0de171a4f4dac32e3364c7ddc7c14f3e2fa61f2d17574483f7ffbb431b4acb2f',),,,(,'other',,,,'pbkdf2:sha256:50000$kJPKsz6N$d2d4784f1b030a9761f5ccaeeaca413f27f2ecb76d6168407af962ddce849f79',);,,INSERT,,INTO,,post,,(,title,,,,body,,,,author_id,,,,created,),,VALUES,,(,'test title',,,,'test',,||,,x,'0a',,||,,'body',,,,1,,,,'2018-01-01 00:00:00',);,,,,,The,app,fixture will call the factory and pass,test_config,to\nconfigure the application and database for testing instead of using your\nlocal development configuration.,,,tests/conftest.py,\u00b6,,import,,os,,import,,tempfile,,import,,pytest,,from,,flaskr,,import,,create_app,,from,,flaskr.db,,import,,get_db,,,,init_db,,with,,open,(,os,.,path,.,join,(,os,.,path,.,dirname,(,__file__,),,,'data.sql',),,,'rb',),,as,,f,:,,_data_sql,,=,,f,.,read,(),.,decode,(,'utf8',),,@pytest.fixture,,def,,app,():,,db_fd,,,,db_path,,=,,tempfile,.,mkstemp,(),,app,,=,,create_app,({,,'TESTING',:,,True,,,,'DATABASE',:,,db_path,,,,}),,with,,app,.,app_context,():,,init_db,(),,get_db,(),.,executescript,(,_data_sql,),,yield,,app,,os,.,close,(,db_fd,),,os,.,unlink,(,db_path,),,@pytest.fixture,,def,,client,(,app,):,,return,,app,.,test_client,(),,@pytest.fixture,,def,,runner,(,app,):,,return,,app,.,test_cli_runner,(),,,,,tempfile.mkstemp(),creates and opens a temporary file, returning\nthe file object and the path to it. The,DATABASE,path is\noverridden so it points to this temporary path instead of the instance\nfolder. After setting the path, the database tables are created and the\ntest data is inserted. After the test is over, the temporary file is\nclosed and removed.,,TESTING,tells Flask that the app is in test mode. Flask changes\nsome internal behavior so it\u2019s easier to test, and other extensions can\nalso use the flag to make testing them easier.,,The,client,fixture calls,app.test_client(),with the application\nobject created by the,app,fixture. Tests will use the client to make\nrequests to the application without running the server.,,The,runner,fixture is similar to,client,.,app.test_cli_runner(),creates a runner\nthat can call the Click commands registered with the application.,,Pytest uses fixtures by matching their function names with the names\nof arguments in the test functions. For example, the,test_hello,function you\u2019ll write next takes a,client,argument. Pytest matches\nthat with the,client,fixture function, calls it, and passes the\nreturned value to the test function.,,,,Factory,\u00b6,,There\u2019s not much to test about the factory itself. Most of the code will\nbe executed for each test already, so if something fails the other tests\nwill notice.,,The only behavior that can change is passing test config. If config is\nnot passed, there should be some default configuration, otherwise the\nconfiguration should be overridden.,,,tests/test_factory.py,\u00b6,,from,,flaskr,,import,,create_app,,def,,test_config,():,,assert,,not,,create_app,(),.,testing,,assert,,create_app,({,'TESTING',:,,True,}),.,testing,,def,,test_hello,(,client,):,,response,,=,,client,.,get,(,'/hello',),,assert,,response,.,data,,==,,b,'Hello, World!',,,,,You added the,hello,route as an example when writing the factory at\nthe beginning of the tutorial. It returns \u201cHello, World!\u201d, so the test\nchecks that the response data matches.,,,,Database,\u00b6,,Within an application context,,get_db,should return the same\nconnection each time it\u2019s called. After the context, the connection\nshould be closed.,,,tests/test_db.py,\u00b6,,import,,sqlite3,,import,,pytest,,from,,flaskr.db,,import,,get_db,,def,,test_get_close_db,(,app,):,,with,,app,.,app_context,():,,db,,=,,get_db,(),,assert,,db,,is,,get_db,(),,with,,pytest,.,raises,(,sqlite3,.,ProgrammingError,),,as,,e,:,,db,.,execute,(,'SELECT 1',),,assert,,'closed',,in,,str,(,e,),,,,,The,init-db,command should call the,init_db,function and output\na message.,,,tests/test_db.py,\u00b6,,def,,test_init_db_command,(,runner,,,,monkeypatch,):,,class,,Recorder,(,object,):,,called,,=,,False,,def,,fake_init_db,():,,Recorder,.,called,,=,,True,,monkeypatch,.,setattr,(,'flaskr.db.init_db',,,,fake_init_db,),,result,,=,,runner,.,invoke,(,args,=,[,'init-db',]),,assert,,'Initialized',,in,,result,.,output,,assert,,Recorder,.,called,,,,,This test uses Pytest\u2019s,monkeypatch,fixture to replace the,init_db,function with one that records that it\u2019s been called. The,runner,fixture you wrote above is used to call the,init-db,command by name.,,,,Authentication,\u00b6,,For most of the views, a user needs to be logged in. The easiest way to\ndo this in tests is to make a,POST,request to the,login,view\nwith the client. Rather than writing that out every time, you can write\na class with methods to do that, and use a fixture to pass it the client\nfor each test.,,,tests/conftest.py,\u00b6,,class,,AuthActions,(,object,):,,def,,__init__,(,self,,,,client,):,,self,.,_client,,=,,client,,def,,login,(,self,,,,username,=,'test',,,,password,=,'test',):,,return,,self,.,_client,.,post,(,,'/auth/login',,,,data,=,{,'username',:,,username,,,,'password',:,,password,},,),,def,,logout,(,self,):,,return,,self,.,_client,.,get,(,'/auth/logout',),,@pytest.fixture,,def,,auth,(,client,):,,return,,AuthActions,(,client,),,,,,With the,auth,fixture, you can call,auth.login(),in a test to\nlog in as the,test,user, which was inserted as part of the test\ndata in the,app,fixture.,,The,register,view should render successfully on,GET,. On,POST,with valid form data, it should redirect to the login URL and the user\u2019s\ndata should be in the database. Invalid data should display error\nmessages.,,,tests/test_auth.py,\u00b6,,import,,pytest,,from,,flask,,import,,g,,,,session,,from,,flaskr.db,,import,,get_db,,def,,test_register,(,client,,,,app,):,,assert,,client,.,get,(,'/auth/register',),.,status_code,,==,,200,,response,,=,,client,.,post,(,,'/auth/register',,,,data,=,{,'username',:,,'a',,,,'password',:,,'a',},,),,assert,,'http://localhost/auth/login',,==,,response,.,headers,[,'Location',],,with,,app,.,app_context,():,,assert,,get_db,(),.,execute,(,,\"select * from user where username = 'a'\",,,,),.,fetchone,(),,is,,not,,None,,@pytest.mark.parametrize,((,'username',,,,'password',,,,'message',),,,(,,(,'',,,,'',,,,b,'Username is required.',),,,(,'a',,,,'',,,,b,'Password is required.',),,,(,'test',,,,'test',,,,b,'already registered',),,,)),,def,,test_register_validate_input,(,client,,,,username,,,,password,,,,message,):,,response,,=,,client,.,post,(,,'/auth/register',,,,data,=,{,'username',:,,username,,,,'password',:,,password,},,),,assert,,message,,in,,response,.,data,,,,,client.get(),makes a,GET,request\nand returns the,Response,object returned by Flask. Similarly,,client.post(),makes a,POST,request, converting the,data,dict into form data.,,To test that the page renders successfully, a simple request is made and\nchecked for a,200,,OK,,status_code,. If\nrendering failed, Flask would return a,500,,Internal,,Server,,Error,code.,,headers,will have a,Location,header with the login\nURL when the register view redirects to the login view.,,data,contains the body of the response as bytes. If\nyou expect a certain value to render on the page, check that it\u2019s in,data,. Bytes must be compared to bytes. If you want to compare\nUnicode text, use,get_data(as_text=True),instead.,,pytest.mark.parametrize,tells Pytest to run the same test function\nwith different arguments. You use it here to test different invalid\ninput and error messages without writing the same code three times.,,The tests for the,login,view are very similar to those for,register,. Rather than testing the data in the database,,session,should have,user_id,set after logging in.,,,tests/test_auth.py,\u00b6,,def,,test_login,(,client,,,,auth,):,,assert,,client,.,get,(,'/auth/login',),.,status_code,,==,,200,,response,,=,,auth,.,login,(),,assert,,response,.,headers,[,'Location',],,==,,'http://localhost/',,with,,client,:,,client,.,get,(,'/',),,assert,,session,[,'user_id',],,==,,1,,assert,,g,.,user,[,'username',],,==,,'test',,@pytest.mark.parametrize,((,'username',,,,'password',,,,'message',),,,(,,(,'a',,,,'test',,,,b,'Incorrect username.',),,,(,'test',,,,'a',,,,b,'Incorrect password.',),,,)),,def,,test_login_validate_input,(,auth,,,,username,,,,password,,,,message,):,,response,,=,,auth,.,login,(,username,,,,password,),,assert,,message,,in,,response,.,data,,,,,Using,client,in a,with,block allows accessing context variables\nsuch as,session,after the response is returned. Normally,\naccessing,session,outside of a request would raise an error.,,Testing,logout,is the opposite of,login,.,session,should\nnot contain,user_id,after logging out.,,,tests/test_auth.py,\u00b6,,def,,test_logout,(,client,,,,auth,):,,auth,.,login,(),,with,,client,:,,auth,.,logout,(),,assert,,'user_id',,not,,in,,session,,,,,,,Blog,\u00b6,,All the blog views use the,auth,fixture you wrote earlier. Call,auth.login(),and subsequent requests from the client will be logged\nin as the,test,user.,,The,index,view should display information about the post that was\nadded with the test data. When logged in as the author, there should be\na link to edit the post.,,You can also test some more authentication behavior while testing the,index,view. When not logged in, each page shows links to log in or\nregister. When logged in, there\u2019s a link to log out.,,,tests/test_blog.py,\u00b6,,import,,pytest,,from,,flaskr.db,,import,,get_db,,def,,test_index,(,client,,,,auth,):,,response,,=,,client,.,get,(,'/',),,assert,,b,\"Log In\",,in,,response,.,data,,assert,,b,\"Register\",,in,,response,.,data,,auth,.,login,(),,response,,=,,client,.,get,(,'/',),,assert,,b,'Log Out',,in,,response,.,data,,assert,,b,'test title',,in,,response,.,data,,assert,,b,'by test on 2018-01-01',,in,,response,.,data,,assert,,b,'test,\\n,body',,in,,response,.,data,,assert,,b,'href=\"/1/update\"',,in,,response,.,data,,,,,A user must be logged in to access the,create,,,update,, and,delete,views. The logged in user must be the author of the post to\naccess,update,and,delete,, otherwise a,403,,Forbidden,status\nis returned. If a,post,with the given,id,doesn\u2019t exist,,update,and,delete,should return,404,,Not,,Found,.,,,tests/test_blog.py,\u00b6,,@pytest.mark.parametrize,(,'path',,,,(,,'/create',,,,'/1/update',,,,'/1/delete',,,,)),,def,,test_login_required,(,client,,,,path,):,,response,,=,,client,.,post,(,path,),,assert,,response,.,headers,[,'Location',],,==,,'http://localhost/auth/login',,def,,test_author_required,(,app,,,,client,,,,auth,):,,# change the post author to another user,,with,,app,.,app_context,():,,db,,=,,get_db,(),,db,.,execute,(,'UPDATE post SET author_id = 2 WHERE id = 1',),,db,.,commit,(),,auth,.,login,(),,# current user can't modify other user's post,,assert,,client,.,post,(,'/1/update',),.,status_code,,==,,403,,assert,,client,.,post,(,'/1/delete',),.,status_code,,==,,403,,# current user doesn't see edit link,,assert,,b,'href=\"/1/update\"',,not,,in,,client,.,get,(,'/',),.,data,,@pytest.mark.parametrize,(,'path',,,,(,,'/2/update',,,,'/2/delete',,,,)),,def,,test_exists_required,(,client,,,,auth,,,,path,):,,auth,.,login,(),,assert,,client,.,post,(,path,),.,status_code,,==,,404,,,,,The,create,and,update,views should render and return a,200,,OK,status for a,GET,request. When valid data is sent in a,POST,request,,create,should insert the new post data into the\ndatabase, and,update,should modify the existing data. Both pages\nshould show an error message on invalid data.,,,tests/test_blog.py,\u00b6,,def,,test_create,(,client,,,,auth,,,,app,):,,auth,.,login,(),,assert,,client,.,get,(,'/create',),.,status_code,,==,,200,,client,.,post,(,'/create',,,,data,=,{,'title',:,,'created',,,,'body',:,,'',}),,with,,app,.,app_context,():,,db,,=,,get_db,(),,count,,=,,db,.,execute,(,'SELECT COUNT(id) FROM post',),.,fetchone,()[,0,],,assert,,count,,==,,2,,def,,test_update,(,client,,,,auth,,,,app,):,,auth,.,login,(),,assert,,client,.,get,(,'/1/update',),.,status_code,,==,,200,,client,.,post,(,'/1/update',,,,data,=,{,'title',:,,'updated',,,,'body',:,,'',}),,with,,app,.,app_context,():,,db,,=,,get_db,(),,post,,=,,db,.,execute,(,'SELECT * FROM post WHERE id = 1',),.,fetchone,(),,assert,,post,[,'title',],,==,,'updated',,@pytest.mark.parametrize,(,'path',,,,(,,'/create',,,,'/1/update',,,,)),,def,,test_create_update_validate,(,client,,,,auth,,,,path,):,,auth,.,login,(),,response,,=,,client,.,post,(,path,,,,data,=,{,'title',:,,'',,,,'body',:,,'',}),,assert,,b,'Title is required.',,in,,response,.,data,,,,,The,delete,view should redirect to the index URL and the post should\nno longer exist in the database.,,,tests/test_blog.py,\u00b6,,def,,test_delete,(,client,,,,auth,,,,app,):,,auth,.,login,(),,response,,=,,client,.,post,(,'/1/delete',),,assert,,response,.,headers,[,'Location',],,==,,'http://localhost/',,with,,app,.,app_context,():,,db,,=,,get_db,(),,post,,=,,db,.,execute,(,'SELECT * FROM post WHERE id = 1',),.,fetchone,(),,assert,,post,,is,,None,,,,,,,Running the Tests,\u00b6,,Some extra configuration, which is not required but makes running\ntests with coverage less verbose, can be added to the project\u2019s,setup.cfg,file.,,,setup.cfg,\u00b6,,[tool:pytest]\ntestpaths = tests\n\n[coverage:run]\nbranch = True\nsource =\n    flaskr,,,,To run the tests, use the,pytest,command. It will find and run all\nthe test functions you\u2019ve written.,,pytest\n\n========================= test session starts ==========================\nplatform linux -- Python 3.6.4, pytest-3.5.0, py-1.5.3, pluggy-0.6.0\nrootdir: /home/user/Projects/flask-tutorial, inifile: setup.cfg\ncollected 23 items\n\ntests/test_auth.py ........                                      [ 34%]\ntests/test_blog.py ............                                  [ 86%]\ntests/test_db.py ..                                              [ 95%]\ntests/test_factory.py ..                                         [100%]\n\n====================== 24 passed in 0.64 seconds =======================,,,If any tests fail, pytest will show the error that was raised. You can\nrun,pytest,,-v,to get a list of each test function rather than dots.,,To measure the code coverage of your tests, use the,coverage,command\nto run pytest instead of running it directly.,,coverage run -m pytest,,,You can either view a simple coverage report in the terminal:,,coverage report\n\nName                 Stmts   Miss Branch BrPart  Cover\n------------------------------------------------------\nflaskr/__init__.py      21      0      2      0   100%\nflaskr/auth.py          54      0     22      0   100%\nflaskr/blog.py          54      0     16      0   100%\nflaskr/db.py            24      0      4      0   100%\n------------------------------------------------------\nTOTAL                  153      0     44      0   100%,,,An HTML report allows you to see which lines were covered in each file:,,coverage html,,,This generates files in the,htmlcov,directory. Open,htmlcov/index.html,in your browser to see the report.,,Continue to,Deploy to Production,.,,,,,,,,,,,,,Contents,,,Test Coverage,,Setup and Fixtures,,Factory,,Database,,Authentication,,Blog,,Running the Tests,,,,,Navigation,,,Overview,,,Tutorial,,,Previous:,Make the Project Installable,,Next:,Deploy to Production,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Make the Project Installable", "url": "http://flask.pocoo.org/docs/1.0/tutorial/install/", "content": ",,,,,Make the Project Installable \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,Tutorial,\u00bb,,,,,,,,,Make the Project Installable,\u00b6,,Making your project installable means that you can build a,distribution,file and install that in another environment, just like\nyou installed Flask in your project\u2019s environment. This makes deploying\nyour project the same as installing any other library, so you\u2019re using\nall the standard Python tools to manage everything.,,Installing also comes with other benefits that might not be obvious from\nthe tutorial or as a new Python user, including:,,,Currently, Python and Flask understand how to use the,flaskr,package only because you\u2019re running from your project\u2019s directory.\nInstalling means you can import it no matter where you run from.,,You can manage your project\u2019s dependencies just like other packages\ndo, so,pip,,install,,yourproject.whl,installs them.,,Test tools can isolate your test environment from your development\nenvironment.,,,,Note,,This is being introduced late in the tutorial, but in your future\nprojects you should always start with this.,,,,Describe the Project,\u00b6,,The,setup.py,file describes your project and the files that belong\nto it.,,,setup.py,\u00b6,,from,,setuptools,,import,,find_packages,,,,setup,,setup,(,,name,=,'flaskr',,,,version,=,'1.0.0',,,,packages,=,find_packages,(),,,include_package_data,=,True,,,,zip_safe,=,False,,,,install_requires,=,[,,'flask',,,,],,,),,,,,packages,tells Python what package directories (and the Python files\nthey contain) to include.,find_packages(),finds these directories\nautomatically so you don\u2019t have to type them out. To include other\nfiles, such as the static and templates directories,,include_package_data,is set. Python needs another file named,MANIFEST.in,to tell what this other data is.,,,MANIFEST.in,\u00b6,,include flaskr/schema.sql\ngraft flaskr/static\ngraft flaskr/templates\nglobal-exclude *.pyc,,,,This tells Python to copy everything in the,static,and,templates,directories, and the,schema.sql,file, but to exclude all bytecode\nfiles.,,See the,official packaging guide,for another explanation of the files\nand options used.,,,,Install the Project,\u00b6,,Use,pip,to install your project in the virtual environment.,,pip install -e .,,,This tells pip to find,setup.py,in the current directory and install\nit in,editable,or,development,mode. Editable mode means that as you\nmake changes to your local code, you\u2019ll only need to re-install if you\nchange the metadata about the project, such as its dependencies.,,You can observe that the project is now installed with,pip,,list,.,,pip list\n\nPackage        Version   Location\n-------------- --------- ----------------------------------\nclick          6.7\nFlask          1.0\nflaskr         1.0.0     /home/user/Projects/flask-tutorial\nitsdangerous   0.24\nJinja2         2.10\nMarkupSafe     1.0\npip            9.0.3\nsetuptools     39.0.1\nWerkzeug       0.14.1\nwheel          0.30.0,,,Nothing changes from how you\u2019ve been running your project so far.,FLASK_APP,is still set to,flaskr,and,flask,,run,still runs\nthe application.,,Continue to,Test Coverage,.,,,,,,,,,,,,,Contents,,,Make the Project Installable,,Describe the Project,,Install the Project,,,,,Navigation,,,Overview,,,Tutorial,,,Previous:,Blog Blueprint,,Next:,Test Coverage,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Deploying with Fabric", "url": "http://flask.pocoo.org/docs/1.0/patterns/fabric/", "content": ",,,,,Deploying with Fabric \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,,,,,Deploying with Fabric,\u00b6,,Fabric,is a tool for Python similar to Makefiles but with the ability\nto execute commands on a remote server.  In combination with a properly\nset up Python package (,Larger Applications,) and a good concept for\nconfigurations (,Configuration Handling,) it is very easy to deploy Flask\napplications to external servers.,,Before we get started, here a quick checklist of things we have to ensure\nupfront:,,,Fabric 1.0 has to be installed locally.  This tutorial assumes the\nlatest version of Fabric.,,The application already has to be a package and requires a working,setup.py,file (,Deploying with Setuptools,).,,In the following example we are using,mod_wsgi,for the remote\nservers.  You can of course use your own favourite server there, but\nfor this example we chose Apache +,mod_wsgi,because it\u2019s very easy\nto setup and has a simple way to reload applications without root\naccess.,,,,Creating the first Fabfile,\u00b6,,A fabfile is what controls what Fabric executes.  It is named,fabfile.py,and executed by the,fab,command.  All the functions defined in that file\nwill show up as,fab,subcommands.  They are executed on one or more\nhosts.  These hosts can be defined either in the fabfile or on the command\nline.  In this case we will add them to the fabfile.,,This is a basic first example that has the ability to upload the current\nsource code to the server and install it into a pre-existing\nvirtual environment:,,from,,fabric.api,,import,,*,,# the user to use for the remote commands,,env,.,user,,=,,'appuser',,# the servers where the commands are executed,,env,.,hosts,,=,,[,'server1.example.com',,,,'server2.example.com',],,def,,pack,():,,# build the package,,local,(,'python setup.py sdist --formats=gztar',,,,capture,=,False,),,def,,deploy,():,,# figure out the package name and version,,dist,,=,,local,(,'python setup.py --fullname',,,,capture,=,True,),.,strip,(),,filename,,=,,',%s,.tar.gz',,%,,dist,,# upload the package to the temporary folder on the server,,put,(,'dist/,%s,',,%,,filename,,,,'/tmp/,%s,',,%,,filename,),,# install the package in the application's virtualenv with pip,,run,(,'/var/www/yourapplication/env/bin/pip install /tmp/,%s,',,%,,filename,),,# remove the uploaded package,,run,(,'rm -r /tmp/,%s,',,%,,filename,),,# touch the .wsgi file to trigger a reload in mod_wsgi,,run,(,'touch /var/www/yourapplication.wsgi',),,,,,,Running Fabfiles,\u00b6,,Now how do you execute that fabfile?  You use the,fab,command.  To\ndeploy the current version of the code on the remote server you would use\nthis command:,,$ fab pack deploy,,,However this requires that our server already has the,/var/www/yourapplication,folder created and,/var/www/yourapplication/env,to be a virtual environment.  Furthermore\nare we not creating the configuration or,.wsgi,file on the server.  So\nhow do we bootstrap a new server into our infrastructure?,,This now depends on the number of servers we want to set up.  If we just\nhave one application server (which the majority of applications will\nhave), creating a command in the fabfile for this is overkill.  But\nobviously you can do that.  In that case you would probably call it,setup,or,bootstrap,and then pass the servername explicitly on the\ncommand line:,,$ fab -H newserver.example.com bootstrap,,,To setup a new server you would roughly do these steps:,,,Create the directory structure in,/var/www,:,,$ mkdir /var/www/yourapplication\n$ cd /var/www/yourapplication\n$ virtualenv --distribute env,,,,Upload a new,application.wsgi,file to the server and the\nconfiguration file for the application (eg:,application.cfg,),,,Create a new Apache config for,yourapplication,and activate it.\nMake sure to activate watching for changes of the,.wsgi,file so\nthat we can automatically reload the application by touching it.\n(See,mod_wsgi (Apache),for more information),,,,So now the question is, where do the,application.wsgi,and,application.cfg,files come from?,,,,The WSGI File,\u00b6,,The WSGI file has to import the application and also to set an environment\nvariable so that the application knows where to look for the config.  This\nis a short example that does exactly that:,,import,,os,,os,.,environ,[,'YOURAPPLICATION_CONFIG',],,=,,'/var/www/yourapplication/application.cfg',,from,,yourapplication,,import,,app,,,,The application itself then has to initialize itself like this to look for\nthe config at that environment variable:,,app,,=,,Flask,(,__name__,),,app,.,config,.,from_object,(,'yourapplication.default_config',),,app,.,config,.,from_envvar,(,'YOURAPPLICATION_CONFIG',),,,,This approach is explained in detail in the,Configuration Handling,section of the\ndocumentation.,,,,The Configuration File,\u00b6,,Now as mentioned above, the application will find the correct\nconfiguration file by looking up the,YOURAPPLICATION_CONFIG,environment\nvariable.  So we have to put the configuration in a place where the\napplication will able to find it.  Configuration files have the unfriendly\nquality of being different on all computers, so you do not version them\nusually.,,A popular approach is to store configuration files for different servers\nin a separate version control repository and check them out on all\nservers.  Then symlink the file that is active for the server into the\nlocation where it\u2019s expected (eg:,/var/www/yourapplication,).,,Either way, in our case here we only expect one or two servers and we can\nupload them ahead of time by hand.,,,,First Deployment,\u00b6,,Now we can do our first deployment.  We have set up the servers so that\nthey have their virtual environments and activated apache configs.  Now we\ncan pack up the application and deploy it:,,$ fab pack deploy,,,Fabric will now connect to all servers and run the commands as written\ndown in the fabfile.  First it will execute pack so that we have our\ntarball ready and then it will execute deploy and upload the source code\nto all servers and install it there.  Thanks to the,setup.py,file we\nwill automatically pull in the required libraries into our virtual\nenvironment.,,,,Next Steps,\u00b6,,From that point onwards there is so much that can be done to make\ndeployment actually fun:,,,Create a,bootstrap,command that initializes new servers.  It could\ninitialize a new virtual environment, setup apache appropriately etc.,,Put configuration files into a separate version control repository\nand symlink the active configs into place.,,You could also put your application code into a repository and check\nout the latest version on the server and then install.  That way you\ncan also easily go back to older versions.,,hook in testing functionality so that you can deploy to an external\nserver and run the test suite.,,,Working with Fabric is fun and you will notice that it\u2019s quite magical to\ntype,fab,,deploy,and see your application being deployed automatically\nto one or more remote servers.,,,,,,,,,,,,,Contents,,,Deploying with Fabric,,Creating the first Fabfile,,Running Fabfiles,,The WSGI File,,The Configuration File,,First Deployment,,Next Steps,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,Deploying with Setuptools,,Next:,Using SQLite 3 with Flask,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Deploying with Setuptools", "url": "http://flask.pocoo.org/docs/1.0/patterns/distribute/", "content": ",,,,,Deploying with Setuptools \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,,,,,Deploying with Setuptools,\u00b6,,Setuptools,, is an extension library that is commonly used to\ndistribute Python libraries and extensions. It extends distutils, a basic\nmodule installation system shipped with Python to also support various more\ncomplex constructs that make larger applications easier to distribute:,,,support for dependencies,: a library or application can declare a\nlist of other libraries it depends on which will be installed\nautomatically for you.,,package registry,: setuptools registers your package with your\nPython installation.  This makes it possible to query information\nprovided by one package from another package.  The best known feature of\nthis system is the entry point support which allows one package to\ndeclare an \u201centry point\u201d that another package can hook into to extend the\nother package.,,installation manager,:,pip,can install other libraries for you.,,,If you have Python 2 (>=2.7.9) or Python 3 (>=3.4) installed from python.org,\nyou will already have pip and setuptools on your system.  Otherwise, you\nwill need to install them yourself.,,Flask itself, and all the libraries you can find on PyPI are distributed with\neither setuptools or distutils.,,In this case we assume your application is called,yourapplication.py,and you are not using a module, but a,package,. If you have not yet converted your application into\na package, head over to the,Larger Applications,pattern to see\nhow this can be done.,,A working deployment with setuptools is the first step into more complex\nand more automated deployment scenarios.  If you want to fully automate\nthe process, also read the,Deploying with Fabric,chapter.,,,Basic Setup Script,\u00b6,,Because you have Flask installed, you have setuptools available on your system.\nFlask already depends upon setuptools.,,Standard disclaimer applies:,you better use a virtualenv,.,,Your setup code always goes into a file named,setup.py,next to your\napplication.  The name of the file is only convention, but because\neverybody will look for a file with that name, you better not change it.,,A basic,setup.py,file for a Flask application looks like this:,,from,,setuptools,,import,,setup,,setup,(,,name,=,'Your Application',,,,version,=,'1.0',,,,long_description,=,__doc__,,,,packages,=,[,'yourapplication',],,,include_package_data,=,True,,,,zip_safe,=,False,,,,install_requires,=,[,'Flask',],,),,,,Please keep in mind that you have to list subpackages explicitly.  If you\nwant setuptools to lookup the packages for you automatically, you can use\nthe,find_packages,function:,,from,,setuptools,,import,,setup,,,,find_packages,,setup,(,,...,,packages,=,find_packages,(),,),,,,Most parameters to the,setup,function should be self explanatory,,include_package_data,and,zip_safe,might not be.,include_package_data,tells setuptools to look for a,MANIFEST.in,file\nand install all the entries that match as package data.  We will use this\nto distribute the static files and templates along with the Python module\n(see,Distributing Resources,).  The,zip_safe,flag can be used to\nforce or prevent zip Archive creation.  In general you probably don\u2019t want\nyour packages to be installed as zip files because some tools do not\nsupport them and they make debugging a lot harder.,,,,Tagging Builds,\u00b6,,It is useful to distinguish between release and development builds. Add a,setup.cfg,file to configure these options.,,[,egg_info,],,tag_build,,=,,.,dev,,tag_date,,=,,1,,[,aliases,],,release,,=,,egg_info,,-,Db,,'',,,,Running,python,,setup.py,,sdist,will create a development package\nwith \u201c.dev\u201d and the current date appended:,flaskr-1.0.dev20160314.tar.gz,.\nRunning,python,,setup.py,,release,,sdist,will create a release package\nwith only the version:,flaskr-1.0.tar.gz,.,,,,Distributing Resources,\u00b6,,If you try to install the package you just created, you will notice that\nfolders like,static,or,templates,are not installed for you.  The\nreason for this is that setuptools does not know which files to add for\nyou.  What you should do, is to create a,MANIFEST.in,file next to your,setup.py,file.  This file lists all the files that should be added to\nyour tarball:,,recursive,-,include,,yourapplication,/,templates,,*,,recursive,-,include,,yourapplication,/,static,,*,,,,Don\u2019t forget that even if you enlist them in your,MANIFEST.in,file, they\nwon\u2019t be installed for you unless you set the,include_package_data,parameter of the,setup,function to,True,!,,,,Declaring Dependencies,\u00b6,,Dependencies are declared in the,install_requires,parameter as a list.\nEach item in that list is the name of a package that should be pulled from\nPyPI on installation.  By default it will always use the most recent\nversion, but you can also provide minimum and maximum version\nrequirements.  Here some examples:,,install_requires,=,[,,'Flask>=0.2',,,,'SQLAlchemy>=0.6',,,,'BrokenPackage>=0.7,<=1.0',,],,,,As mentioned earlier, dependencies are pulled from PyPI.  What if you\nwant to depend on a package that cannot be found on PyPI and won\u2019t be\nbecause it is an internal package you don\u2019t want to share with anyone?\nJust do it as if there was a PyPI entry and provide a list of\nalternative locations where setuptools should look for tarballs:,,dependency_links,=,[,'http://example.com/yourfiles',],,,,Make sure that page has a directory listing and the links on the page are\npointing to the actual tarballs with their correct filenames as this is\nhow setuptools will find the files.  If you have an internal company\nserver that contains the packages, provide the URL to that server.,,,,Installing / Developing,\u00b6,,To install your application (ideally into a virtualenv) just run the,setup.py,script with the,install,parameter.  It will install your\napplication into the virtualenv\u2019s site-packages folder and also download\nand install all dependencies:,,$ python setup.py install,,,If you are developing on the package and also want the requirements to be\ninstalled, you can use the,develop,command instead:,,$ python setup.py develop,,,This has the advantage of just installing a link to the site-packages\nfolder instead of copying the data over.  You can then continue to work on\nthe code without having to run,install,again after each change.,,,,,,,,,,,,,Contents,,,Deploying with Setuptools,,Basic Setup Script,,Tagging Builds,,Distributing Resources,,Declaring Dependencies,,Installing / Developing,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,Using URL Processors,,Next:,Deploying with Fabric,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Logging", "url": "http://flask.pocoo.org/docs/1.0/logging/", "content": ",,,,,Logging \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,,,,,,,,Logging,\u00b6,,Flask uses standard Python,logging,. All Flask-related messages are\nlogged under the,'flask',logger namespace.,Flask.logger,returns the logger named,'flask.app',, and can be used to log messages for your application.,,@app,.,route,(,'/login',,,,methods,=,[,'POST',]),,def,,login,():,,user,,=,,get_user,(,request,.,form,[,'username',]),,if,,user,.,check_password,(,request,.,form,[,'password',]):,,login_user,(,user,),,app,.,logger,.,info,(,',%s,logged in successfully',,,,user,.,username,),,return,,redirect,(,url_for,(,'index',)),,else,:,,app,.,logger,.,info,(,',%s,failed to log in',,,,user,.,username,),,abort,(,401,),,,,,Basic Configuration,\u00b6,,When you want to configure logging for your project, you should do it as soon\nas possible when the program starts. If,app.logger,is accessed before logging is configured, it will add a default handler. If\npossible, configure logging before creating the application object.,,This example uses,dictConfig(),to create a logging\nconfiguration similar to Flask\u2019s default, except for all logs:,,from,,logging.config,,import,,dictConfig,,dictConfig,({,,'version',:,,1,,,,'formatters',:,,{,'default',:,,{,,'format',:,,'[,%(asctime)s,],%(levelname)s,in,%(module)s,:,%(message)s,',,,,}},,,'handlers',:,,{,'wsgi',:,,{,,'class',:,,'logging.StreamHandler',,,,'stream',:,,'ext://flask.logging.wsgi_errors_stream',,,,'formatter',:,,'default',,}},,,'root',:,,{,,'level',:,,'INFO',,,,'handlers',:,,[,'wsgi',],,},,}),,app,,=,,Flask,(,__name__,),,,,,Default Configuration,\u00b6,,If you do not configure logging yourself, Flask will add a,StreamHandler,to,app.logger,automatically. During requests, it will write to the stream specified by the\nWSGI server in,environ['wsgi.errors'],(which is usually,sys.stderr,). Outside a request, it will log to,sys.stderr,.,,,,Removing the Default Handler,\u00b6,,If you configured logging after accessing,app.logger,, and need to remove the default\nhandler, you can import and remove it:,,from,,flask.logging,,import,,default_handler,,app,.,logger,.,removeHandler,(,default_handler,),,,,,,,Email Errors to Admins,\u00b6,,When running the application on a remote server for production, you probably\nwon\u2019t be looking at the log messages very often. The WSGI server will probably\nsend log messages to a file, and you\u2019ll only check that file if a user tells\nyou something went wrong.,,To be proactive about discovering and fixing bugs, you can configure a,logging.handlers.SMTPHandler,to send an email when errors and higher\nare logged.,,import,,logging,,from,,logging.handlers,,import,,SMTPHandler,,mail_handler,,=,,SMTPHandler,(,,mailhost,=,'127.0.0.1',,,,fromaddr,=,'server-error@example.com',,,,toaddrs,=,[,'admin@example.com',],,,subject,=,'Application Error',,),,mail_handler,.,setLevel,(,logging,.,ERROR,),,mail_handler,.,setFormatter,(,logging,.,Formatter,(,,'[,%(asctime)s,],%(levelname)s,in,%(module)s,:,%(message)s,',,)),,if,,not,,app,.,debug,:,,app,.,logger,.,addHandler,(,mail_handler,),,,,This requires that you have an SMTP server set up on the same server. See the\nPython docs for more information about configuring the handler.,,,,Injecting Request Information,\u00b6,,Seeing more information about the request, such as the IP address, may help\ndebugging some errors. You can subclass,logging.Formatter,to inject\nyour own fields that can be used in messages. You can change the formatter for\nFlask\u2019s default handler, the mail handler defined above, or any other\nhandler.,,from,,flask,,import,,request,,from,,flask.logging,,import,,default_handler,,class,,RequestFormatter,(,logging,.,Formatter,):,,def,,format,(,self,,,,record,):,,record,.,url,,=,,request,.,url,,record,.,remote_addr,,=,,request,.,remote_addr,,return,,super,(),.,format,(,record,),,formatter,,=,,RequestFormatter,(,,'[,%(asctime)s,],%(remote_addr)s,requested,%(url)s,\\n,',,',%(levelname)s,in,%(module)s,:,%(message)s,',,),,default_handler,.,setFormatter,(,formatter,),,mail_handler,.,setFormatter,(,formatter,),,,,,,Other Libraries,\u00b6,,Other libraries may use logging extensively, and you want to see relevant\nmessages from those logs too. The simplest way to do this is to add handlers\nto the root logger instead of only the app logger.,,from,,flask.logging,,import,,default_handler,,root,,=,,logging,.,getLogger,(),,root,.,addHandler,(,default_handler,),,root,.,addHandler,(,mail_handler,),,,,Depending on your project, it may be more useful to configure each logger you\ncare about separately, instead of configuring only the root logger.,,for,,logger,,in,,(,,app,.,logger,,,,logging,.,getLogger,(,'sqlalchemy',),,,logging,.,getLogger,(,'other_package',),,,):,,logger,.,addHandler,(,default_handler,),,logger,.,addHandler,(,mail_handler,),,,,,Werkzeug,\u00b6,,Werkzeug logs basic request/response information to the,'werkzeug',logger.\nIf the root logger has no handlers configured, Werkzeug adds a,StreamHandler,to its logger.,,,,Flask Extensions,\u00b6,,Depending on the situation, an extension may choose to log to,app.logger,or its own named logger. Consult each\nextension\u2019s documentation for details.,,,,,,,,,,,,,,Contents,,,Logging,,Basic Configuration,,Default Configuration,,Removing the Default Handler,,,,Email Errors to Admins,,Injecting Request Information,,Other Libraries,,Werkzeug,,Flask Extensions,,,,,,,Navigation,,,Overview,,,Previous:,Application Errors,,Next:,Configuration Handling,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Signals", "url": "http://flask.pocoo.org/docs/1.0/signals/", "content": ",,,,,Signals \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,,,,,,,,Signals,\u00b6,,,Changelog,,New in version 0.6.,,,Starting with Flask 0.6, there is integrated support for signalling in\nFlask.  This support is provided by the excellent,blinker,library and\nwill gracefully fall back if it is not available.,,What are signals?  Signals help you decouple applications by sending\nnotifications when actions occur elsewhere in the core framework or\nanother Flask extensions.  In short, signals allow certain senders to\nnotify subscribers that something happened.,,Flask comes with a couple of signals and other extensions might provide\nmore.  Also keep in mind that signals are intended to notify subscribers\nand should not encourage subscribers to modify data.  You will notice that\nthere are signals that appear to do the same thing like some of the\nbuiltin decorators do (eg:,request_started,is very similar\nto,before_request(),).  However, there are differences in\nhow they work.  The core,before_request(),handler, for\nexample, is executed in a specific order and is able to abort the request\nearly by returning a response.  In contrast all signal handlers are\nexecuted in undefined order and do not modify any data.,,The big advantage of signals over handlers is that you can safely\nsubscribe to them for just a split second.  These temporary\nsubscriptions are helpful for unit testing for example.  Say you want to\nknow what templates were rendered as part of a request: signals allow you\nto do exactly that.,,,Subscribing to Signals,\u00b6,,To subscribe to a signal, you can use the,connect(),method of a signal.  The first\nargument is the function that should be called when the signal is emitted,\nthe optional second argument specifies a sender.  To unsubscribe from a\nsignal, you can use the,disconnect(),method.,,For all core Flask signals, the sender is the application that issued the\nsignal.  When you subscribe to a signal, be sure to also provide a sender\nunless you really want to listen for signals from all applications.  This is\nespecially true if you are developing an extension.,,For example, here is a helper context manager that can be used in a unit test\nto determine which templates were rendered and what variables were passed\nto the template:,,from,,flask,,import,,template_rendered,,from,,contextlib,,import,,contextmanager,,@contextmanager,,def,,captured_templates,(,app,):,,recorded,,=,,[],,def,,record,(,sender,,,,template,,,,context,,,,**,extra,):,,recorded,.,append,((,template,,,,context,)),,template_rendered,.,connect,(,record,,,,app,),,try,:,,yield,,recorded,,finally,:,,template_rendered,.,disconnect,(,record,,,,app,),,,,This can now easily be paired with a test client:,,with,,captured_templates,(,app,),,as,,templates,:,,rv,,=,,app,.,test_client,(),.,get,(,'/',),,assert,,rv,.,status_code,,==,,200,,assert,,len,(,templates,),,==,,1,,template,,,,context,,=,,templates,[,0,],,assert,,template,.,name,,==,,'index.html',,assert,,len,(,context,[,'items',]),,==,,10,,,,Make sure to subscribe with an extra,**extra,argument so that your\ncalls don\u2019t fail if Flask introduces new arguments to the signals.,,All the template rendering in the code issued by the application,app,in the body of the,with,block will now be recorded in the,templates,variable.  Whenever a template is rendered, the template object as well as\ncontext are appended to it.,,Additionally there is a convenient helper method\n(,connected_to(),)  that allows you to\ntemporarily subscribe a function to a signal with a context manager on\nits own.  Because the return value of the context manager cannot be\nspecified that way, you have to pass the list in as an argument:,,from,,flask,,import,,template_rendered,,def,,captured_templates,(,app,,,,recorded,,,,**,extra,):,,def,,record,(,sender,,,,template,,,,context,):,,recorded,.,append,((,template,,,,context,)),,return,,template_rendered,.,connected_to,(,record,,,,app,),,,,The example above would then look like this:,,templates,,=,,[],,with,,captured_templates,(,app,,,,templates,,,,**,extra,):,,...,,template,,,,context,,=,,templates,[,0,],,,,,Blinker API Changes,,The,connected_to(),method arrived in Blinker\nwith version 1.1.,,,,,Creating Signals,\u00b6,,If you want to use signals in your own application, you can use the\nblinker library directly.  The most common use case are named signals in a\ncustom,Namespace,..  This is what is recommended\nmost of the time:,,from,,blinker,,import,,Namespace,,my_signals,,=,,Namespace,(),,,,Now you can create new signals like this:,,model_saved,,=,,my_signals,.,signal,(,'model-saved',),,,,The name for the signal here makes it unique and also simplifies\ndebugging.  You can access the name of the signal with the,name,attribute.,,,For Extension Developers,,If you are writing a Flask extension and you want to gracefully degrade for\nmissing blinker installations, you can do so by using the,flask.signals.Namespace,class.,,,,,Sending Signals,\u00b6,,If you want to emit a signal, you can do so by calling the,send(),method.  It accepts a sender as first\nargument and optionally some keyword arguments that are forwarded to the\nsignal subscribers:,,class,,Model,(,object,):,,...,,def,,save,(,self,):,,model_saved,.,send,(,self,),,,,Try to always pick a good sender.  If you have a class that is emitting a\nsignal, pass,self,as sender.  If you are emitting a signal from a random\nfunction, you can pass,current_app._get_current_object(),as sender.,,,Passing Proxies as Senders,,Never pass,current_app,as sender to a signal.  Use,current_app._get_current_object(),instead.  The reason for this is\nthat,current_app,is a proxy and not the real application\nobject.,,,,,Signals and Flask\u2019s Request Context,\u00b6,,Signals fully support,The Request Context,when receiving signals.\nContext-local variables are consistently available between,request_started,and,request_finished,, so you can\nrely on,flask.g,and others as needed.  Note the limitations described\nin,Sending Signals,and the,request_tearing_down,signal.,,,,Decorator Based Signal Subscriptions,\u00b6,,With Blinker 1.1 you can also easily subscribe to signals by using the new,connect_via(),decorator:,,from,,flask,,import,,template_rendered,,@template_rendered,.,connect_via,(,app,),,def,,when_template_rendered,(,sender,,,,template,,,,context,,,,**,extra,):,,print,,'Template,%s,is rendered with,%s,',,%,,(,template,.,name,,,,context,),,,,,,Core Signals,\u00b6,,Take a look at,Signals,for a list of all builtin signals.,,,,,,,,,,,,,Contents,,,Signals,,Subscribing to Signals,,Creating Signals,,Sending Signals,,Signals and Flask\u2019s Request Context,,Decorator Based Signal Subscriptions,,Core Signals,,,,,Navigation,,,Overview,,,Previous:,Configuration Handling,,Next:,Pluggable Views,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Define and Access the Database", "url": "http://flask.pocoo.org/docs/1.0/tutorial/database/", "content": ",,,,,Define and Access the Database \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,Tutorial,\u00bb,,,,,,,,,Define and Access the Database,\u00b6,,The application will use a,SQLite,database to store users and posts.\nPython comes with built-in support for SQLite in the,sqlite3,module.,,SQLite is convenient because it doesn\u2019t require setting up a separate\ndatabase server and is built-in to Python. However, if concurrent\nrequests try to write to the database at the same time, they will slow\ndown as each write happens sequentially. Small applications won\u2019t notice\nthis. Once you become big, you may want to switch to a different\ndatabase.,,The tutorial doesn\u2019t go into detail about SQL. If you are not familiar\nwith it, the SQLite docs describe the,language,.,,,Connect to the Database,\u00b6,,The first thing to do when working with a SQLite database (and most\nother Python database libraries) is to create a connection to it. Any\nqueries and operations are performed using the connection, which is\nclosed after the work is finished.,,In web applications this connection is typically tied to the request. It\nis created at some point when handling a request, and closed before the\nresponse is sent.,,,flaskr/db.py,\u00b6,,import,,sqlite3,,import,,click,,from,,flask,,import,,current_app,,,,g,,from,,flask.cli,,import,,with_appcontext,,def,,get_db,():,,if,,'db',,not,,in,,g,:,,g,.,db,,=,,sqlite3,.,connect,(,,current_app,.,config,[,'DATABASE',],,,detect_types,=,sqlite3,.,PARSE_DECLTYPES,,),,g,.,db,.,row_factory,,=,,sqlite3,.,Row,,return,,g,.,db,,def,,close_db,(,e,=,None,):,,db,,=,,g,.,pop,(,'db',,,,None,),,if,,db,,is,,not,,None,:,,db,.,close,(),,,,,g,is a special object that is unique for each request. It is\nused to store data that might be accessed by multiple functions during\nthe request. The connection is stored and reused instead of creating a\nnew connection if,get_db,is called a second time in the same\nrequest.,,current_app,is another special object that points to the Flask\napplication handling the request. Since you used an application factory,\nthere is no application object when writing the rest of your code.,get_db,will be called when the application has been created and is\nhandling a request, so,current_app,can be used.,,sqlite3.connect(),establishes a connection to the file pointed at\nby the,DATABASE,configuration key. This file doesn\u2019t have to exist\nyet, and won\u2019t until you initialize the database later.,,sqlite3.Row,tells the connection to return rows that behave\nlike dicts. This allows accessing the columns by name.,,close_db,checks if a connection was created by checking if,g.db,was set. If the connection exists, it is closed. Further down you will\ntell your application about the,close_db,function in the application\nfactory so that it is called after each request.,,,,Create the Tables,\u00b6,,In SQLite, data is stored in,tables,and,columns,. These need to be\ncreated before you can store and retrieve data. Flaskr will store users\nin the,user,table, and posts in the,post,table. Create a file\nwith the SQL commands needed to create empty tables:,,,flaskr/schema.sql,\u00b6,,DROP,,TABLE,,IF,,EXISTS,,user,;,,DROP,,TABLE,,IF,,EXISTS,,post,;,,CREATE,,TABLE,,user,,(,,id,,INTEGER,,PRIMARY,,KEY,,AUTOINCREMENT,,,,username,,TEXT,,UNIQUE,,NOT,,NULL,,,,password,,TEXT,,NOT,,NULL,,);,,CREATE,,TABLE,,post,,(,,id,,INTEGER,,PRIMARY,,KEY,,AUTOINCREMENT,,,,author_id,,INTEGER,,NOT,,NULL,,,,created,,TIMESTAMP,,NOT,,NULL,,DEFAULT,,CURRENT_TIMESTAMP,,,,title,,TEXT,,NOT,,NULL,,,,body,,TEXT,,NOT,,NULL,,,,FOREIGN,,KEY,,(,author_id,),,REFERENCES,,user,,(,id,),,);,,,,,Add the Python functions that will run these SQL commands to the,db.py,file:,,,flaskr/db.py,\u00b6,,def,,init_db,():,,db,,=,,get_db,(),,with,,current_app,.,open_resource,(,'schema.sql',),,as,,f,:,,db,.,executescript,(,f,.,read,(),.,decode,(,'utf8',)),,@click.command,(,'init-db',),,@with_appcontext,,def,,init_db_command,():,,\"\"\"Clear the existing data and create new tables.\"\"\",,init_db,(),,click,.,echo,(,'Initialized the database.',),,,,,open_resource(),opens a file relative to\nthe,flaskr,package, which is useful since you won\u2019t necessarily know\nwhere that location is when deploying the application later.,get_db,returns a database connection, which is used to execute the commands\nread from the file.,,click.command(),defines a command line command called,init-db,that calls the,init_db,function and shows a success message to the\nuser. You can read,Command Line Interface,to learn more about writing commands.,,,,Register with the Application,\u00b6,,The,close_db,and,init_db_command,functions need to be registered\nwith the application instance, otherwise they won\u2019t be used by the\napplication. However, since you\u2019re using a factory function, that\ninstance isn\u2019t available when writing the functions. Instead, write a\nfunction that takes an application and does the registration.,,,flaskr/db.py,\u00b6,,def,,init_app,(,app,):,,app,.,teardown_appcontext,(,close_db,),,app,.,cli,.,add_command,(,init_db_command,),,,,,app.teardown_appcontext(),tells\nFlask to call that function when cleaning up after returning the\nresponse.,,app.cli.add_command(),adds a new\ncommand that can be called with the,flask,command.,,Import and call this function from the factory. Place the new code at\nthe end of the factory function before returning the app.,,,flaskr/__init__.py,\u00b6,,def,,create_app,():,,app,,=,,...,,# existing code omitted,,from,,.,,import,,db,,db,.,init_app,(,app,),,return,,app,,,,,,,Initialize the Database File,\u00b6,,Now that,init-db,has been registered with the app, it can be called\nusing the,flask,command, similar to the,run,command from the\nprevious page.,,,Note,,If you\u2019re still running the server from the previous page, you can\neither stop the server, or run this command in a new terminal. If\nyou use a new terminal, remember to change to your project directory\nand activate the env as described in,Activate the environment,.\nYou\u2019ll also need to set,FLASK_APP,and,FLASK_ENV,as shown on\nthe previous page.,,,Run the,init-db,command:,,flask init-db\nInitialized the database.,,,There will now be a,flaskr.sqlite,file in the,instance,folder in\nyour project.,,Continue to,Blueprints and Views,.,,,,,,,,,,,,,Contents,,,Define and Access the Database,,Connect to the Database,,Create the Tables,,Register with the Application,,Initialize the Database File,,,,,Navigation,,,Overview,,,Tutorial,,,Previous:,Application Setup,,Next:,Blueprints and Views,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Application Setup", "url": "http://flask.pocoo.org/docs/1.0/tutorial/factory/", "content": ",,,,,Application Setup \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,Tutorial,\u00bb,,,,,,,,,Application Setup,\u00b6,,A Flask application is an instance of the,Flask,class.\nEverything about the application, such as configuration and URLs, will\nbe registered with this class.,,The most straightforward way to create a Flask application is to create\na global,Flask,instance directly at the top of your code, like\nhow the \u201cHello, World!\u201d example did on the previous page. While this is\nsimple and useful in some cases, it can cause some tricky issues as the\nproject grows.,,Instead of creating a,Flask,instance globally, you will create\nit inside a function. This function is known as the,application\nfactory,. Any configuration, registration, and other setup the\napplication needs will happen inside the function, then the application\nwill be returned.,,,The Application Factory,\u00b6,,It\u2019s time to start coding! Create the,flaskr,directory and add the,__init__.py,file. The,__init__.py,serves double duty: it will\ncontain the application factory, and it tells Python that the,flaskr,directory should be treated as a package.,,mkdir flaskr,,,,flaskr/__init__.py,\u00b6,,import,,os,,from,,flask,,import,,Flask,,def,,create_app,(,test_config,=,None,):,,# create and configure the app,,app,,=,,Flask,(,__name__,,,,instance_relative_config,=,True,),,app,.,config,.,from_mapping,(,,SECRET_KEY,=,'dev',,,,DATABASE,=,os,.,path,.,join,(,app,.,instance_path,,,,'flaskr.sqlite',),,,),,if,,test_config,,is,,None,:,,# load the instance config, if it exists, when not testing,,app,.,config,.,from_pyfile,(,'config.py',,,,silent,=,True,),,else,:,,# load the test config if passed in,,app,.,config,.,from_mapping,(,test_config,),,# ensure the instance folder exists,,try,:,,os,.,makedirs,(,app,.,instance_path,),,except,,OSError,:,,pass,,# a simple page that says hello,,@app.route,(,'/hello',),,def,,hello,():,,return,,'Hello, World!',,return,,app,,,,,create_app,is the application factory function. You\u2019ll add to it\nlater in the tutorial, but it already does a lot.,,,app,,=,,Flask(__name__,,,instance_relative_config=True),creates the,Flask,instance.,,__name__,is the name of the current Python module. The app\nneeds to know where it\u2019s located to set up some paths, and,__name__,is a convenient way to tell it that.,,instance_relative_config=True,tells the app that\nconfiguration files are relative to the,instance folder,. The instance folder\nis located outside the,flaskr,package and can hold local\ndata that shouldn\u2019t be committed to version control, such as\nconfiguration secrets and the database file.,,,,app.config.from_mapping(),sets\nsome default configuration that the app will use:,,SECRET_KEY,is used by Flask and extensions to keep data\nsafe. It\u2019s set to,'dev',to provide a convenient value\nduring development, but it should be overridden with a random\nvalue when deploying.,,DATABASE,is the path where the SQLite database file will be\nsaved. It\u2019s under,app.instance_path,, which is the\npath that Flask has chosen for the instance folder. You\u2019ll learn\nmore about the database in the next section.,,,,app.config.from_pyfile(),overrides\nthe default configuration with values taken from the,config.py,file in the instance folder if it exists. For example, when\ndeploying, this can be used to set a real,SECRET_KEY,.,,test_config,can also be passed to the factory, and will be\nused instead of the instance configuration. This is so the tests\nyou\u2019ll write later in the tutorial can be configured\nindependently of any development values you have configured.,,,,os.makedirs(),ensures that,app.instance_path,exists. Flask\ndoesn\u2019t create the instance folder automatically, but it needs to be\ncreated because your project will create the SQLite database file\nthere.,,@app.route(),creates a simple route so you can\nsee the application working before getting into the rest of the\ntutorial. It creates a connection between the URL,/hello,and a\nfunction that returns a response, the string,'Hello,,,World!',in\nthis case.,,,,,Run The Application,\u00b6,,Now you can run your application using the,flask,command. From the\nterminal, tell Flask where to find your application, then run it in\ndevelopment mode.,,Development mode shows an interactive debugger whenever a page raises an\nexception, and restarts the server whenever you make changes to the\ncode. You can leave it running and just reload the browser page as you\nfollow the tutorial.,,For Linux and Mac:,,export FLASK_APP=flaskr\nexport FLASK_ENV=development\nflask run,,,For Windows cmd, use,set,instead of,export,:,,set FLASK_APP=flaskr\nset FLASK_ENV=development\nflask run,,,For Windows PowerShell, use,$env:,instead of,export,:,,$env:FLASK_APP = \"flaskr\"\n$env:FLASK_ENV = \"development\"\nflask run,,,You\u2019ll see output similar to this:,,* Serving Flask app \"flaskr\"\n* Environment: development\n* Debug mode: on\n* Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n* Restarting with stat\n* Debugger is active!\n* Debugger PIN: 855-212-761,,,Visit,http://127.0.0.1:5000/hello,in a browser and you should see the\n\u201cHello, World!\u201d message. Congratulations, you\u2019re now running your Flask\nweb application!,,Continue to,Define and Access the Database,.,,,,,,,,,,,,,Contents,,,Application Setup,,The Application Factory,,Run The Application,,,,,Navigation,,,Overview,,,Tutorial,,,Previous:,Project Layout,,Next:,Define and Access the Database,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Deferred Request Callbacks", "url": "http://flask.pocoo.org/docs/1.0/patterns/deferredcallbacks/", "content": ",,,,,Deferred Request Callbacks \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,,,,,Deferred Request Callbacks,\u00b6,,One of the design principles of Flask is that response objects are created and\npassed down a chain of potential callbacks that can modify them or replace\nthem. When the request handling starts, there is no response object yet. It is\ncreated as necessary either by a view function or by some other component in\nthe system.,,What happens if you want to modify the response at a point where the response\ndoes not exist yet?  A common example for that would be a,before_request(),callback that wants to set a cookie on the\nresponse object.,,One way is to avoid the situation. Very often that is possible. For instance\nyou can try to move that logic into a,after_request(),callback instead. However, sometimes moving code there makes it more\nmore complicated or awkward to reason about.,,As an alternative, you can use,after_this_request(),to register\ncallbacks that will execute after only the current request. This way you can\ndefer code execution from anywhere in the application, based on the current\nrequest.,,At any time during a request, we can register a function to be called at the\nend of the request. For example you can remember the current language of the\nuser in a cookie in a,before_request(),callback:,,from,,flask,,import,,request,,,,after_this_request,,@app,.,before_request,,def,,detect_user_language,():,,language,,=,,request,.,cookies,.,get,(,'user_lang',),,if,,language,,is,,None,:,,language,,=,,guess_language_from_request,(),,# when the response exists, set a cookie with the language,,@after_this_request,,def,,remember_language,(,response,):,,response,.,set_cookie,(,'user_lang',,,,language,),,g,.,language,,=,,language,,,,,,,,,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,Streaming Contents,,Next:,Adding HTTP Method Overrides,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "uWSGI", "url": "http://flask.pocoo.org/docs/dev/deploying/uwsgi/", "content": ",,,,,uWSGI \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,Deployment Options,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,uWSGI,\u00b6,,uWSGI is a deployment option on servers like,nginx,,,lighttpd,, and,cherokee,; see,FastCGI,and,Standalone WSGI Containers,for other options.  To use your WSGI application with uWSGI protocol you will\nneed a uWSGI server first. uWSGI is both a protocol and an application server;\nthe application server can serve uWSGI, FastCGI, and HTTP protocols.,,The most popular uWSGI server is,uwsgi,, which we will use for this\nguide.  Make sure to have it installed to follow along.,,,Watch Out,,Please make sure in advance that any,app.run(),calls you might\nhave in your application file are inside an,if,,__name__,,==,,'__main__':,block or moved to a separate file.  Just make sure it\u2019s\nnot called because this will always start a local WSGI server which\nwe do not want if we deploy that application to uWSGI.,,,,Starting your app with uwsgi,\u00b6,,uwsgi,is designed to operate on WSGI callables found in python modules.,,Given a flask application in myapp.py, use the following command:,,$ uwsgi -s /tmp/yourapplication.sock --manage-script-name --mount /yourapplication=myapp:app,,,The,--manage-script-name,will move the handling of,SCRIPT_NAME,to uwsgi,\nsince its smarter about that. It is used together with the,--mount,directive\nwhich will make requests to,/yourapplication,be directed to,myapp:app,.\nIf your application is accessible at root level, you can use a single,/,instead of,/yourapplication,.,myapp,refers to the name of the file of\nyour flask application (without extension) or the module which provides,app,.,app,is the callable inside of your application (usually the line reads,app,,=,,Flask(__name__),.,,If you want to deploy your flask application inside of a virtual environment,\nyou need to also add,--virtualenv,,/path/to/virtual/environment,. You might\nalso need to add,--plugin,,python,or,--plugin,,python3,depending on which\npython version you use for your project.,,,,Configuring nginx,\u00b6,,A basic flask nginx configuration looks like this:,,location = /yourapplication { rewrite ^ /yourapplication/; }\nlocation /yourapplication { try_files $uri @yourapplication; }\nlocation @yourapplication {\n  include uwsgi_params;\n  uwsgi_pass unix:/tmp/yourapplication.sock;\n},,,This configuration binds the application to,/yourapplication,.  If you want\nto have it in the URL root its a bit simpler:,,location / { try_files $uri @yourapplication; }\nlocation @yourapplication {\n    include uwsgi_params;\n    uwsgi_pass unix:/tmp/yourapplication.sock;\n},,,,,,,,,,,,,,Contents,,,uWSGI,,Starting your app with uwsgi,,Configuring nginx,,,,,Navigation,,,Overview,,,Deployment Options,,,Previous:,Standalone WSGI Containers,,Next:,mod_wsgi (Apache),,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "CGI", "url": "http://flask.pocoo.org/docs/dev/deploying/cgi/", "content": ",,,,,CGI \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,Deployment Options,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,CGI,\u00b6,,If all other deployment methods do not work, CGI will work for sure.\nCGI is supported by all major servers but usually has a sub-optimal\nperformance.,,This is also the way you can use a Flask application on Google\u2019s,App\nEngine,, where execution happens in a CGI-like environment.,,,Watch Out,,Please make sure in advance that any,app.run(),calls you might\nhave in your application file are inside an,if,,__name__,,==,,'__main__':,block or moved to a separate file.  Just make sure it\u2019s\nnot called because this will always start a local WSGI server which\nwe do not want if we deploy that application to CGI / app engine.,,With CGI, you will also have to make sure that your code does not contain\nany,print,statements, or that,sys.stdout,is overridden by something\nthat doesn\u2019t write into the HTTP response.,,,,Creating a,.cgi,file,\u00b6,,First you need to create the CGI application file.  Let\u2019s call it,yourapplication.cgi,:,,#!/usr/bin/python,,from,,wsgiref.handlers,,import,,CGIHandler,,from,,yourapplication,,import,,app,,CGIHandler,(),.,run,(,app,),,,,,,Server Setup,\u00b6,,Usually there are two ways to configure the server.  Either just copy the,.cgi,into a,cgi-bin,(and use,mod_rewrite,or something similar to\nrewrite the URL) or let the server point to the file directly.,,In Apache for example you can put something like this into the config:,,ScriptAlias,,/app,,/path/to/the/application.cgi,,,,On shared webhosting, though, you might not have access to your Apache config.\nIn this case, a file called,.htaccess,, sitting in the public directory you want\nyour app to be available, works too but the,ScriptAlias,directive won\u2019t\nwork in that case:,,RewriteEngine,,On,,RewriteCond,%{REQUEST_FILENAME} !-f # Don't interfere with static files,RewriteRule,^(.*)$,/path/to/the/application.cgi/,$1 [L],,,For more information consult the documentation of your webserver.,,,,,,,,,,,,,Contents,,,CGI,,Creating a,.cgi,file,,Server Setup,,,,,Navigation,,,Overview,,,Deployment Options,,,Previous:,FastCGI,,Next:,Becoming Big,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Project Layout", "url": "http://flask.pocoo.org/docs/1.0/tutorial/layout/", "content": ",,,,,Project Layout \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,Tutorial,\u00bb,,,,,,,,,Project Layout,\u00b6,,Create a project directory and enter it:,,mkdir flask-tutorial\ncd flask-tutorial,,,Then follow the,installation instructions,to set\nup a Python virtual environment and install Flask for your project.,,The tutorial will assume you\u2019re working from the,flask-tutorial,directory from now on. The file names at the top of each code block are\nrelative to this directory.,,,A Flask application can be as simple as a single file.,,,hello.py,\u00b6,,from,,flask,,import,,Flask,,app,,=,,Flask,(,__name__,),,@app.route,(,'/',),,def,,hello,():,,return,,'Hello, World!',,,,,However, as a project get bigger, it becomes overwhelming to keep all\nthe code in one file. Python projects use,packages,to organize code\ninto multiple modules that can be imported where needed, and the\ntutorial will do this as well.,,The project directory will contain:,,,flaskr/,, a Python package containing your application code and\nfiles.,,tests/,, a directory containing test modules.,,venv/,, a Python virtual environment where Flask and other\ndependencies are installed.,,Installation files telling Python how to install your project.,,Version control config, such as,git,. You should make a habit of\nusing some type of version control for all your projects, no matter\nthe size.,,Any other project files you might add in the future.,,,By the end, your project layout will look like this:,,/home/user/Projects/flask-tutorial\n\u251c\u2500\u2500 flaskr/\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 db.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 schema.sql\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 auth.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 blog.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 templates/\n\u2502\u00a0\u00a0 \u2502   \u251c\u2500\u2500 base.html\n\u2502\u00a0\u00a0 \u2502   \u251c\u2500\u2500 auth/\n\u2502\u00a0\u00a0 \u2502   \u2502\u00a0\u00a0 \u251c\u2500\u2500 login.html\n\u2502\u00a0\u00a0 \u2502   \u2502\u00a0\u00a0 \u2514\u2500\u2500 register.html\n\u2502\u00a0\u00a0 \u2502   \u2514\u2500\u2500 blog/\n\u2502\u00a0\u00a0 \u2502       \u251c\u2500\u2500 create.html\n\u2502\u00a0\u00a0 \u2502       \u251c\u2500\u2500 index.html\n\u2502\u00a0\u00a0 \u2502       \u2514\u2500\u2500 update.html\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 static/\n\u2502\u00a0\u00a0  \u00a0\u00a0 \u2514\u2500\u2500 style.css\n\u251c\u2500\u2500 tests/\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 conftest.py\n\u2502 \u00a0 \u251c\u2500\u2500 data.sql\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 test_factory.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 test_db.py\n\u2502\u00a0  \u251c\u2500\u2500 test_auth.py\n\u2502\u00a0  \u2514\u2500\u2500 test_blog.py\n\u251c\u2500\u2500 venv/\n\u251c\u2500\u2500 setup.py\n\u2514\u2500\u2500 MANIFEST.in,,,If you\u2019re using version control, the following files that are generated\nwhile running your project should be ignored. There may be other files\nbased on the editor you use. In general, ignore files that you didn\u2019t\nwrite. For example, with git:,,,.gitignore,\u00b6,,venv/\n\n*.pyc\n__pycache__/\n\ninstance/\n\n.pytest_cache/\n.coverage\nhtmlcov/\n\ndist/\nbuild/\n*.egg-info/,,,,Continue to,Application Setup,.,,,,,,,,,,,Navigation,,,Overview,,,Tutorial,,,Previous:,Tutorial,,Next:,Application Setup,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Quickstart", "url": "http://flask.pocoo.org/docs/1.0/quickstart/", "content": ",,,,,Quickstart \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,,,,,,,,Quickstart,\u00b6,,Eager to get started?  This page gives a good introduction to Flask.  It\nassumes you already have Flask installed.  If you do not, head over to the,Installation,section.,,,A Minimal Application,\u00b6,,A minimal Flask application looks something like this:,,from,,flask,,import,,Flask,,app,,=,,Flask,(,__name__,),,@app,.,route,(,'/',),,def,,hello_world,():,,return,,'Hello, World!',,,,So what did that code do?,,,First we imported the,Flask,class.  An instance of this\nclass will be our WSGI application.,,Next we create an instance of this class. The first argument is the name of\nthe application\u2019s module or package.  If you are using a single module (as\nin this example), you should use,__name__,because depending on if it\u2019s\nstarted as application or imported as module the name will be different\n(,'__main__',versus the actual import name). This is needed so that\nFlask knows where to look for templates, static files, and so on. For more\ninformation have a look at the,Flask,documentation.,,We then use the,route(),decorator to tell Flask what URL\nshould trigger our function.,,The function is given a name which is also used to generate URLs for that\nparticular function, and returns the message we want to display in the\nuser\u2019s browser.,,,Just save it as,hello.py,or something similar. Make sure to not call\nyour application,flask.py,because this would conflict with Flask\nitself.,,To run the application you can either use the,flask,command or\npython\u2019s,-m,switch with Flask.  Before you can do that you need\nto tell your terminal the application to work with by exporting the,FLASK_APP,environment variable:,,$ export FLASK_APP=hello.py\n$ flask run\n * Running on http://127.0.0.1:5000/,,,If you are on Windows, the environment variable syntax depends on command line\ninterpreter. On Command Prompt:,,C,:,\\,path,\\,to,\\,app,>,set,,FLASK_APP,=,hello,.,py,,,,And on PowerShell:,,PS C:\\path\\to\\app> $env:FLASK_APP = \"hello.py\",,,Alternatively you can use,python -m flask,:,,$ export FLASK_APP=hello.py\n$ python -m flask run\n * Running on http://127.0.0.1:5000/,,,This launches a very simple builtin server, which is good enough for testing\nbut probably not what you want to use in production. For deployment options see,Deployment Options,.,,Now head over to,http://127.0.0.1:5000/,, and you\nshould see your hello world greeting.,,,Externally Visible Server,,If you run the server you will notice that the server is only accessible\nfrom your own computer, not from any other in the network.  This is the\ndefault because in debugging mode a user of the application can execute\narbitrary Python code on your computer.,,If you have the debugger disabled or trust the users on your network,\nyou can make the server publicly available simply by adding,--host=0.0.0.0,to the command line:,,flask,,run,,--,host,=,0.0,.,0.0,,,,This tells your operating system to listen on all public IPs.,,,,,What to do if the Server does not Start,\u00b6,,In case the,python -m flask,fails or,flask,does not exist,\nthere are multiple reasons this might be the case.  First of all you need\nto look at the error message.,,,Old Version of Flask,\u00b6,,Versions of Flask older than 0.11 use to have different ways to start the\napplication.  In short, the,flask,command did not exist, and\nneither did,python -m flask,.  In that case you have two options:\neither upgrade to newer Flask versions or have a look at the,Development Server,docs to see the alternative method for running a server.,,,,Invalid Import Name,\u00b6,,The,FLASK_APP,environment variable is the name of the module to import at,flask run,. In case that module is incorrectly named you will get an\nimport error upon start (or if debug is enabled when you navigate to the\napplication). It will tell you what it tried to import and why it failed.,,The most common reason is a typo or because you did not actually create an,app,object.,,,,,Debug Mode,\u00b6,,(Want to just log errors and stack traces? See,Application Errors,),,The,flask,script is nice to start a local development server, but\nyou would have to restart it manually after each change to your code.\nThat is not very nice and Flask can do better.  If you enable debug\nsupport the server will reload itself on code changes, and it will also\nprovide you with a helpful debugger if things go wrong.,,To enable all development features (including debug mode) you can export\nthe,FLASK_ENV,environment variable and set it to,development,before running the server:,,$ export FLASK_ENV=development\n$ flask run,,,(On Windows you need to use,set,instead of,export,.),,This does the following things:,,,it activates the debugger,,it activates the automatic reloader,,it enables the debug mode on the Flask application.,,,You can also control debug mode separately from the environment by\nexporting,FLASK_DEBUG=1,.,,There are more parameters that are explained in the,Development Server,docs.,,,Attention,,Even though the interactive debugger does not work in forking environments\n(which makes it nearly impossible to use on production servers), it still\nallows the execution of arbitrary code. This makes it a major security risk\nand therefore it,must never be used on production machines,.,,,Screenshot of the debugger in action:,,,More information on using the debugger can be found in the,Werkzeug\ndocumentation,.,,Have another debugger in mind? See,Working with Debuggers,.,,,,Routing,\u00b6,,Modern web applications use meaningful URLs to help users. Users are more\nlikely to like a page and come back if the page uses a meaningful URL they can\nremember and use to directly visit a page.,,Use the,route(),decorator to bind a function to a URL.,,@app,.,route,(,'/',),,def,,index,():,,return,,'Index Page',,@app,.,route,(,'/hello',),,def,,hello,():,,return,,'Hello, World',,,,You can do more! You can make parts of the URL dynamic and attach multiple\nrules to a function.,,,Variable Rules,\u00b6,,You can add variable sections to a URL by marking sections with,<variable_name>,. Your function then receives the,<variable_name>,as a keyword argument. Optionally, you can use a converter to specify the type\nof the argument like,<converter:variable_name>,.,,@app,.,route,(,'/user/<username>',),,def,,show_user_profile,(,username,):,,# show the user profile for that user,,return,,'User,%s,',,%,,username,,@app,.,route,(,'/post/<int:post_id>',),,def,,show_post,(,post_id,):,,# show the post with the given id, the id is an integer,,return,,'Post,%d,',,%,,post_id,,@app,.,route,(,'/path/<path:subpath>',),,def,,show_subpath,(,subpath,):,,# show the subpath after /path/,,return,,'Subpath,%s,',,%,,subpath,,,,Converter types:,,,,,,,,string,,(default) accepts any text without a slash,,,int,,accepts positive integers,,,float,,accepts positive floating point values,,,path,,like,string,but also accepts slashes,,,uuid,,accepts UUID strings,,,,,,,Unique URLs / Redirection Behavior,\u00b6,,The following two rules differ in their use of a trailing slash.,,@app,.,route,(,'/projects/',),,def,,projects,():,,return,,'The project page',,@app,.,route,(,'/about',),,def,,about,():,,return,,'The about page',,,,The canonical URL for the,projects,endpoint has a trailing slash.\nIt\u2019s similar to a folder in a file system. If you access the URL without\na trailing slash, Flask redirects you to the canonical URL with the\ntrailing slash.,,The canonical URL for the,about,endpoint does not have a trailing\nslash. It\u2019s similar to the pathname of a file. Accessing the URL with a\ntrailing slash produces a 404 \u201cNot Found\u201d error. This helps keep URLs\nunique for these resources, which helps search engines avoid indexing\nthe same page twice.,,,,URL Building,\u00b6,,To build a URL to a specific function, use the,url_for(),function.\nIt accepts the name of the function as its first argument and any number of\nkeyword arguments, each corresponding to a variable part of the URL rule.\nUnknown variable parts are appended to the URL as query parameters.,,Why would you want to build URLs using the URL reversing function,url_for(),instead of hard-coding them into your templates?,,,Reversing is often more descriptive than hard-coding the URLs.,,,You can change your URLs in one go instead of needing to remember to,,manually change hard-coded URLs.,,,,,URL building handles escaping of special characters and Unicode data,,transparently.,,,,The generated paths are always absolute, avoiding unexpected behavior\nof relative paths in browsers.,,,If your application is placed outside the URL root, for example, in,,/myapplication,instead of,/,,,url_for(),properly\nhandles that for you.,,,,,For example, here we use the,test_request_context(),method\nto try out,url_for(),.,test_request_context(),tells Flask to behave as though it\u2019s handling a request even while we use a\nPython shell. See,Context Locals,.,,from flask import Flask, url_for\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    return 'index'\n\n@app.route('/login')\ndef login():\n    return 'login'\n\n@app.route('/user/<username>')\ndef profile(username):\n    return '{}\\'s profile'.format(username)\n\nwith app.test_request_context():\n    print(url_for('index'))\n    print(url_for('login'))\n    print(url_for('login', next='/'))\n    print(url_for('profile', username='John Doe'))\n\n/\n/login\n/login?next=/\n/user/John%20Doe,,,,,HTTP Methods,\u00b6,,Web applications use different HTTP methods when accessing URLs. You should\nfamiliarize yourself with the HTTP methods as you work with Flask. By default,\na route only answers to,GET,requests. You can use the,methods,argument\nof the,route(),decorator to handle different HTTP methods.,,from,,flask,,import,,request,,@app,.,route,(,'/login',,,,methods,=,[,'GET',,,,'POST',]),,def,,login,():,,if,,request,.,method,,==,,'POST',:,,return,,do_the_login,(),,else,:,,return,,show_the_login_form,(),,,,If,GET,is present, Flask automatically adds support for the,HEAD,method\nand handles,HEAD,requests according to the,HTTP RFC,. Likewise,,OPTIONS,is automatically implemented for you.,,,,,Static Files,\u00b6,,Dynamic web applications also need static files.  That\u2019s usually where\nthe CSS and JavaScript files are coming from.  Ideally your web server is\nconfigured to serve them for you, but during development Flask can do that\nas well.  Just create a folder called,static,in your package or next to\nyour module and it will be available at,/static,on the application.,,To generate URLs for static files, use the special,'static',endpoint name:,,url_for,(,'static',,,,filename,=,'style.css',),,,,The file has to be stored on the filesystem as,static/style.css,.,,,,Rendering Templates,\u00b6,,Generating HTML from within Python is not fun, and actually pretty\ncumbersome because you have to do the HTML escaping on your own to keep\nthe application secure.  Because of that Flask configures the,Jinja2,template engine for you automatically.,,To render a template you can use the,render_template(),method.  All you have to do is provide the name of the template and the\nvariables you want to pass to the template engine as keyword arguments.\nHere\u2019s a simple example of how to render a template:,,from,,flask,,import,,render_template,,@app,.,route,(,'/hello/',),,@app,.,route,(,'/hello/<name>',),,def,,hello,(,name,=,None,):,,return,,render_template,(,'hello.html',,,,name,=,name,),,,,Flask will look for templates in the,templates,folder.  So if your\napplication is a module, this folder is next to that module, if it\u2019s a\npackage it\u2019s actually inside your package:,,Case 1,: a module:,,/,application,.,py,,/,templates,,/,hello,.,html,,,,Case 2,: a package:,,/,application,,/,__init__,.,py,,/,templates,,/,hello,.,html,,,,For templates you can use the full power of Jinja2 templates.  Head over\nto the official,Jinja2 Template Documentation,for more information.,,Here is an example template:,,<!doctype html>,,<,title,>,Hello from Flask,</,title,>,,{%,,if,,name,,%},,<,h1,>,Hello,{{,,name,,}},!,</,h1,>,,{%,,else,,%},,<,h1,>,Hello, World!,</,h1,>,,{%,,endif,,%},,,,Inside templates you also have access to the,request,,,session,and,g,,[1],objects\nas well as the,get_flashed_messages(),function.,,Templates are especially useful if inheritance is used.  If you want to\nknow how that works, head over to the,Template Inheritance,pattern\ndocumentation.  Basically template inheritance makes it possible to keep\ncertain elements on each page (like header, navigation and footer).,,Automatic escaping is enabled, so if,name,contains HTML it will be escaped\nautomatically.  If you can trust a variable and you know that it will be\nsafe HTML (for example because it came from a module that converts wiki\nmarkup to HTML) you can mark it as safe by using the,Markup,class or by using the,|safe,filter in the\ntemplate.  Head over to the Jinja 2 documentation for more examples.,,Here is a basic introduction to how the,Markup,class works:,,>>>,from,,flask,,import,,Markup,,>>>,Markup,(,'<strong>Hello,%s,!</strong>',),,%,,'<blink>hacker</blink>',,Markup(u'<strong>Hello &lt;blink&gt;hacker&lt;/blink&gt;!</strong>'),,>>>,Markup,.,escape,(,'<blink>hacker</blink>',),,Markup(u'&lt;blink&gt;hacker&lt;/blink&gt;'),,>>>,Markup,(,'<em>Marked up</em> &raquo; HTML',),.,striptags,(),,u'Marked up \\xbb HTML',,,,,Changelog,,Changed in version 0.5:,Autoescaping is no longer enabled for all templates.  The following\nextensions for templates trigger autoescaping:,.html,,,.htm,,,.xml,,,.xhtml,.  Templates loaded from a string will have\nautoescaping disabled.,,,,,,[1],Unsure what that,g,object is? It\u2019s something in which\nyou can store information for your own needs, check the documentation of\nthat object (,g,) and the,Using SQLite 3 with Flask,for more\ninformation.,,,,,,Accessing Request Data,\u00b6,,For web applications it\u2019s crucial to react to the data a client sends to\nthe server.  In Flask this information is provided by the global,request,object.  If you have some experience with Python\nyou might be wondering how that object can be global and how Flask\nmanages to still be threadsafe.  The answer is context locals:,,,Context Locals,\u00b6,,,Insider Information,,If you want to understand how that works and how you can implement\ntests with context locals, read this section, otherwise just skip it.,,,Certain objects in Flask are global objects, but not of the usual kind.\nThese objects are actually proxies to objects that are local to a specific\ncontext.  What a mouthful.  But that is actually quite easy to understand.,,Imagine the context being the handling thread.  A request comes in and the\nweb server decides to spawn a new thread (or something else, the\nunderlying object is capable of dealing with concurrency systems other\nthan threads).  When Flask starts its internal request handling it\nfigures out that the current thread is the active context and binds the\ncurrent application and the WSGI environments to that context (thread).\nIt does that in an intelligent way so that one application can invoke another\napplication without breaking.,,So what does this mean to you?  Basically you can completely ignore that\nthis is the case unless you are doing something like unit testing.  You\nwill notice that code which depends on a request object will suddenly break\nbecause there is no request object.  The solution is creating a request\nobject yourself and binding it to the context.  The easiest solution for\nunit testing is to use the,test_request_context(),context manager.  In combination with the,with,statement it will bind a\ntest request so that you can interact with it.  Here is an example:,,from,,flask,,import,,request,,with,,app,.,test_request_context,(,'/hello',,,,method,=,'POST',):,,# now you can do something with the request until the,,# end of the with block, such as basic assertions:,,assert,,request,.,path,,==,,'/hello',,assert,,request,.,method,,==,,'POST',,,,The other possibility is passing a whole WSGI environment to the,request_context(),method:,,from,,flask,,import,,request,,with,,app,.,request_context,(,environ,):,,assert,,request,.,method,,==,,'POST',,,,,,The Request Object,\u00b6,,The request object is documented in the API section and we will not cover\nit here in detail (see,Request,). Here is a broad overview of\nsome of the most common operations.  First of all you have to import it from\nthe,flask,module:,,from,,flask,,import,,request,,,,The current request method is available by using the,method,attribute.  To access form data (data\ntransmitted in a,POST,or,PUT,request) you can use the,form,attribute.  Here is a full example of the two\nattributes mentioned above:,,@app,.,route,(,'/login',,,,methods,=,[,'POST',,,,'GET',]),,def,,login,():,,error,,=,,None,,if,,request,.,method,,==,,'POST',:,,if,,valid_login,(,request,.,form,[,'username',],,,request,.,form,[,'password',]):,,return,,log_the_user_in,(,request,.,form,[,'username',]),,else,:,,error,,=,,'Invalid username/password',,# the code below is executed if the request method,,# was GET or the credentials were invalid,,return,,render_template,(,'login.html',,,,error,=,error,),,,,What happens if the key does not exist in the,form,attribute?  In that\ncase a special,KeyError,is raised.  You can catch it like a\nstandard,KeyError,but if you don\u2019t do that, a HTTP 400 Bad Request\nerror page is shown instead.  So for many situations you don\u2019t have to\ndeal with that problem.,,To access parameters submitted in the URL (,?key=value,) you can use the,args,attribute:,,searchword,,=,,request,.,args,.,get,(,'key',,,,'',),,,,We recommend accessing URL parameters with,get,or by catching the,KeyError,because users might change the URL and presenting them a 400\nbad request page in that case is not user friendly.,,For a full list of methods and attributes of the request object, head over\nto the,Request,documentation.,,,,File Uploads,\u00b6,,You can handle uploaded files with Flask easily.  Just make sure not to\nforget to set the,enctype=\"multipart/form-data\",attribute on your HTML\nform, otherwise the browser will not transmit your files at all.,,Uploaded files are stored in memory or at a temporary location on the\nfilesystem.  You can access those files by looking at the,files,attribute on the request object.  Each\nuploaded file is stored in that dictionary.  It behaves just like a\nstandard Python,file,object, but it also has a,save(),method that allows you to store that\nfile on the filesystem of the server.  Here is a simple example showing how\nthat works:,,from,,flask,,import,,request,,@app,.,route,(,'/upload',,,,methods,=,[,'GET',,,,'POST',]),,def,,upload_file,():,,if,,request,.,method,,==,,'POST',:,,f,,=,,request,.,files,[,'the_file',],,f,.,save,(,'/var/www/uploads/uploaded_file.txt',),,...,,,,If you want to know how the file was named on the client before it was\nuploaded to your application, you can access the,filename,attribute.  However please keep in\nmind that this value can be forged so never ever trust that value.  If you\nwant to use the filename of the client to store the file on the server,\npass it through the,secure_filename(),function that\nWerkzeug provides for you:,,from,,flask,,import,,request,,from,,werkzeug.utils,,import,,secure_filename,,@app,.,route,(,'/upload',,,,methods,=,[,'GET',,,,'POST',]),,def,,upload_file,():,,if,,request,.,method,,==,,'POST',:,,f,,=,,request,.,files,[,'the_file',],,f,.,save,(,'/var/www/uploads/',,+,,secure_filename,(,f,.,filename,)),,...,,,,For some better examples, checkout the,Uploading Files,pattern.,,,,Cookies,\u00b6,,To access cookies you can use the,cookies,attribute.  To set cookies you can use the,set_cookie,method of response objects.  The,cookies,attribute of request objects is a\ndictionary with all the cookies the client transmits.  If you want to use\nsessions, do not use the cookies directly but instead use the,Sessions,in Flask that add some security on top of cookies for you.,,Reading cookies:,,from,,flask,,import,,request,,@app,.,route,(,'/',),,def,,index,():,,username,,=,,request,.,cookies,.,get,(,'username',),,# use cookies.get(key) instead of cookies[key] to not get a,,# KeyError if the cookie is missing.,,,,Storing cookies:,,from,,flask,,import,,make_response,,@app,.,route,(,'/',),,def,,index,():,,resp,,=,,make_response,(,render_template,(,...,)),,resp,.,set_cookie,(,'username',,,,'the username',),,return,,resp,,,,Note that cookies are set on response objects.  Since you normally\njust return strings from the view functions Flask will convert them into\nresponse objects for you.  If you explicitly want to do that you can use\nthe,make_response(),function and then modify it.,,Sometimes you might want to set a cookie at a point where the response\nobject does not exist yet.  This is possible by utilizing the,Deferred Request Callbacks,pattern.,,For this also see,About Responses,.,,,,,Redirects and Errors,\u00b6,,To redirect a user to another endpoint, use the,redirect(),function; to abort a request early with an error code, use the,abort(),function:,,from,,flask,,import,,abort,,,,redirect,,,,url_for,,@app,.,route,(,'/',),,def,,index,():,,return,,redirect,(,url_for,(,'login',)),,@app,.,route,(,'/login',),,def,,login,():,,abort,(,401,),,this_is_never_executed,(),,,,This is a rather pointless example because a user will be redirected from\nthe index to a page they cannot access (401 means access denied) but it\nshows how that works.,,By default a black and white error page is shown for each error code.  If\nyou want to customize the error page, you can use the,errorhandler(),decorator:,,from,,flask,,import,,render_template,,@app,.,errorhandler,(,404,),,def,,page_not_found,(,error,):,,return,,render_template,(,'page_not_found.html',),,,404,,,,Note the,404,after the,render_template(),call.  This\ntells Flask that the status code of that page should be 404 which means\nnot found.  By default 200 is assumed which translates to: all went well.,,See,Error handlers,for more details.,,,,About Responses,\u00b6,,The return value from a view function is automatically converted into a\nresponse object for you.  If the return value is a string it\u2019s converted\ninto a response object with the string as response body, a,200,,OK,status code and a,text/html,mimetype.  The logic that Flask applies to\nconverting return values into response objects is as follows:,,,If a response object of the correct type is returned it\u2019s directly\nreturned from the view.,,If it\u2019s a string, a response object is created with that data and the\ndefault parameters.,,If a tuple is returned the items in the tuple can provide extra\ninformation.  Such tuples have to be in the form,(response,,,status,,,headers),or,(response,,,headers),where at least one item has\nto be in the tuple.  The,status,value will override the status code\nand,headers,can be a list or dictionary of additional header values.,,If none of that works, Flask will assume the return value is a\nvalid WSGI application and convert that into a response object.,,,If you want to get hold of the resulting response object inside the view\nyou can use the,make_response(),function.,,Imagine you have a view like this:,,@app,.,errorhandler,(,404,),,def,,not_found,(,error,):,,return,,render_template,(,'error.html',),,,404,,,,You just need to wrap the return expression with,make_response(),and get the response object to modify it, then\nreturn it:,,@app,.,errorhandler,(,404,),,def,,not_found,(,error,):,,resp,,=,,make_response,(,render_template,(,'error.html',),,,404,),,resp,.,headers,[,'X-Something',],,=,,'A value',,return,,resp,,,,,,Sessions,\u00b6,,In addition to the request object there is also a second object called,session,which allows you to store information specific to a\nuser from one request to the next.  This is implemented on top of cookies\nfor you and signs the cookies cryptographically.  What this means is that\nthe user could look at the contents of your cookie but not modify it,\nunless they know the secret key used for signing.,,In order to use sessions you have to set a secret key.  Here is how\nsessions work:,,from,,flask,,import,,Flask,,,,session,,,,redirect,,,,url_for,,,,escape,,,,request,,app,,=,,Flask,(,__name__,),,# Set the secret key to some random bytes. Keep this really secret!,,app,.,secret_key,,=,,b,'_5#y2L\"F4Q8z,\\n\\xec,]/',,@app,.,route,(,'/',),,def,,index,():,,if,,'username',,in,,session,:,,return,,'Logged in as,%s,',,%,,escape,(,session,[,'username',]),,return,,'You are not logged in',,@app,.,route,(,'/login',,,,methods,=,[,'GET',,,,'POST',]),,def,,login,():,,if,,request,.,method,,==,,'POST',:,,session,[,'username',],,=,,request,.,form,[,'username',],,return,,redirect,(,url_for,(,'index',)),,return,,''',,<form method=\"post\">,,<p><input type=text name=username>,,<p><input type=submit value=Login>,,</form>,,''',,@app,.,route,(,'/logout',),,def,,logout,():,,# remove the username from the session if it's there,,session,.,pop,(,'username',,,,None,),,return,,redirect,(,url_for,(,'index',)),,,,The,escape(),mentioned here does escaping for you if you are\nnot using the template engine (as in this example).,,,How to generate good secret keys,,A secret key should be as random as possible. Your operating system has\nways to generate pretty random data based on a cryptographic random\ngenerator. Use the following command to quickly generate a value for,Flask.secret_key,(or,SECRET_KEY,):,,$ python -c 'import os; print(os.urandom(16))'\nb'_5#y2L\"F4Q8z\\n\\xec]/',,,,A note on cookie-based sessions: Flask will take the values you put into the\nsession object and serialize them into a cookie.  If you are finding some\nvalues do not persist across requests, cookies are indeed enabled, and you are\nnot getting a clear error message, check the size of the cookie in your page\nresponses compared to the size supported by web browsers.,,Besides the default client-side based sessions, if you want to handle\nsessions on the server-side instead, there are several\nFlask extensions that support this.,,,,Message Flashing,\u00b6,,Good applications and user interfaces are all about feedback.  If the user\ndoes not get enough feedback they will probably end up hating the\napplication.  Flask provides a really simple way to give feedback to a\nuser with the flashing system.  The flashing system basically makes it\npossible to record a message at the end of a request and access it on the next\n(and only the next) request.  This is usually combined with a layout\ntemplate to expose the message.,,To flash a message use the,flash(),method, to get hold of the\nmessages you can use,get_flashed_messages(),which is also\navailable in the templates.  Check out the,Message Flashing,for a full example.,,,,Logging,\u00b6,,,Changelog,,New in version 0.3.,,,Sometimes you might be in a situation where you deal with data that\nshould be correct, but actually is not.  For example you may have some client-side\ncode that sends an HTTP request to the server but it\u2019s obviously\nmalformed.  This might be caused by a user tampering with the data, or the\nclient code failing.  Most of the time it\u2019s okay to reply with,400,,Bad,,Request,in that situation, but sometimes that won\u2019t do and the code has\nto continue working.,,You may still want to log that something fishy happened.  This is where\nloggers come in handy.  As of Flask 0.3 a logger is preconfigured for you\nto use.,,Here are some example log calls:,,app,.,logger,.,debug,(,'A value for debugging',),,app,.,logger,.,warning,(,'A warning occurred (,%d,apples)',,,,42,),,app,.,logger,.,error,(,'An error occurred',),,,,The attached,logger,is a standard logging,Logger,, so head over to the official,logging\ndocumentation,for more\ninformation.,,Read more on,Application Errors,.,,,,Hooking in WSGI Middlewares,\u00b6,,If you want to add a WSGI middleware to your application you can wrap the\ninternal WSGI application.  For example if you want to use one of the\nmiddlewares from the Werkzeug package to work around bugs in lighttpd, you\ncan do it like this:,,from,,werkzeug.contrib.fixers,,import,,LighttpdCGIRootFix,,app,.,wsgi_app,,=,,LighttpdCGIRootFix,(,app,.,wsgi_app,),,,,,,Using Flask Extensions,\u00b6,,Extensions are packages that help you accomplish common tasks. For\nexample, Flask-SQLAlchemy provides SQLAlchemy support that makes it simple\nand easy to use with Flask.,,For more on Flask extensions, have a look at,Extensions,.,,,,Deploying to a Web Server,\u00b6,,Ready to deploy your new Flask app? Go to,Deployment Options,.,,,,,,,,,,,,,Contents,,,Quickstart,,A Minimal Application,,What to do if the Server does not Start,,Old Version of Flask,,Invalid Import Name,,,,Debug Mode,,Routing,,Variable Rules,,Unique URLs / Redirection Behavior,,URL Building,,HTTP Methods,,,,Static Files,,Rendering Templates,,Accessing Request Data,,Context Locals,,The Request Object,,File Uploads,,Cookies,,,,Redirects and Errors,,About Responses,,Sessions,,Message Flashing,,Logging,,Hooking in WSGI Middlewares,,Using Flask Extensions,,Deploying to a Web Server,,,,,Navigation,,,Overview,,,Previous:,Installation,,Next:,Tutorial,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "FastCGI", "url": "http://flask.pocoo.org/docs/dev/deploying/fastcgi/", "content": ",,,,,FastCGI \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,Deployment Options,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,FastCGI,\u00b6,,FastCGI is a deployment option on servers like,nginx,,,lighttpd,, and,cherokee,; see,uWSGI,and,Standalone WSGI Containers,for other options.  To use your WSGI application with any of them you will need\na FastCGI server first.  The most popular one is,flup,which we will use for\nthis guide.  Make sure to have it installed to follow along.,,,Watch Out,,Please make sure in advance that any,app.run(),calls you might\nhave in your application file are inside an,if,,__name__,,==,,'__main__':,block or moved to a separate file.  Just make sure it\u2019s\nnot called because this will always start a local WSGI server which\nwe do not want if we deploy that application to FastCGI.,,,,Creating a,.fcgi,file,\u00b6,,First you need to create the FastCGI server file.  Let\u2019s call it,yourapplication.fcgi,:,,#!/usr/bin/python,,from,,flup.server.fcgi,,import,,WSGIServer,,from,,yourapplication,,import,,app,,if,,__name__,,==,,'__main__',:,,WSGIServer,(,app,),.,run,(),,,,This is enough for Apache to work, however nginx and older versions of\nlighttpd need a socket to be explicitly passed to communicate with the\nFastCGI server.  For that to work you need to pass the path to the\nsocket to the,WSGIServer,:,,WSGIServer,(,application,,,,bindAddress,=,'/path/to/fcgi.sock',),.,run,(),,,,The path has to be the exact same path you define in the server\nconfig.,,Save the,yourapplication.fcgi,file somewhere you will find it again.\nIt makes sense to have that in,/var/www/yourapplication,or something\nsimilar.,,Make sure to set the executable bit on that file so that the servers\ncan execute it:,,# chmod +x /var/www/yourapplication/yourapplication.fcgi,,,,,Configuring Apache,\u00b6,,The example above is good enough for a basic Apache deployment but your,.fcgi,file will appear in your application URL e.g.,example.com/yourapplication.fcgi/news/,. There are few ways to configure\nyour application so that yourapplication.fcgi does not appear in the URL.\nA preferable way is to use the ScriptAlias and SetHandler configuration\ndirectives to route requests to the FastCGI server. The following example\nuses FastCgiServer to start 5 instances of the application which will\nhandle all incoming requests:,,LoadModule,,fastcgi_module,,/,usr,/,lib64,/,httpd,/,modules,/,mod_fastcgi,.,so,,FastCgiServer,,/,var,/,www,/,html,/,yourapplication,/,app,.,fcgi,,-,idle,-,timeout,,300,,-,processes,,5,,<,VirtualHost,,*>,,ServerName,,webapp1,.,mydomain,.,com,,DocumentRoot,,/,var,/,www,/,html,/,yourapplication,,AddHandler,,fastcgi,-,script,,fcgi,,ScriptAlias,,/,,/,var,/,www,/,html,/,yourapplication,/,app,.,fcgi,/,,<,Location,,/>,,SetHandler,,fastcgi,-,script,,</,Location,>,,</,VirtualHost,>,,,,These processes will be managed by Apache. If you\u2019re using a standalone\nFastCGI server, you can use the FastCgiExternalServer directive instead.\nNote that in the following the path is not real, it\u2019s simply used as an\nidentifier to other\ndirectives such as AliasMatch:,,FastCgiServer,,/,var,/,www,/,html,/,yourapplication,,-,host,,127.0,.,0.1,:,3000,,,,If you cannot set ScriptAlias, for example on a shared web host, you can use\nWSGI middleware to remove yourapplication.fcgi from the URLs. Set .htaccess:,,<IfModule mod_fcgid.c>\n   AddHandler fcgid-script .fcgi\n   <Files ~ (\\.fcgi)>\n       SetHandler fcgid-script\n       Options +FollowSymLinks +ExecCGI\n   </Files>\n</IfModule>\n\n<IfModule mod_rewrite.c>\n   Options +FollowSymlinks\n   RewriteEngine On\n   RewriteBase /\n   RewriteCond %{REQUEST_FILENAME} !-f\n   RewriteRule ^(.*)$ yourapplication.fcgi/$1 [QSA,L]\n</IfModule>,,,Set yourapplication.fcgi:,,#!/usr/bin/python,,#: optional path to your local python site-packages folder,,import,,sys,,sys,.,path,.,insert,(,0,,,,'<your_local_path>/lib/python<your_python_version>/site-packages',),,from,,flup.server.fcgi,,import,,WSGIServer,,from,,yourapplication,,import,,app,,class,,ScriptNameStripper,(,object,):,,def,,__init__,(,self,,,,app,):,,self,.,app,,=,,app,,def,,__call__,(,self,,,,environ,,,,start_response,):,,environ,[,'SCRIPT_NAME',],,=,,'',,return,,self,.,app,(,environ,,,,start_response,),,app,,=,,ScriptNameStripper,(,app,),,if,,__name__,,==,,'__main__',:,,WSGIServer,(,app,),.,run,(),,,,,,Configuring lighttpd,\u00b6,,A basic FastCGI configuration for lighttpd looks like that:,,fastcgi,.,server,,=,,(,\"/yourapplication.fcgi\",,=>,,((,,\"socket\",,=>,,\"/tmp/yourapplication-fcgi.sock\",,,,\"bin-path\",,=>,,\"/var/www/yourapplication/yourapplication.fcgi\",,,,\"check-local\",,=>,,\"disable\",,,,\"max-procs\",,=>,,1,,)),,),,alias,.,url,,=,,(,,\"/static/\",,=>,,\"/path/to/your/static/\",,),,url,.,rewrite,-,once,,=,,(,,\"^(/static($|/.*))$\",,=>,,\"$1\",,,,\"^(/.*)$\",,=>,,\"/yourapplication.fcgi$1\",,),,,,Remember to enable the FastCGI, alias and rewrite modules. This configuration\nbinds the application to,/yourapplication,.  If you want the application to\nwork in the URL root you have to work around a lighttpd bug with the,LighttpdCGIRootFix,middleware.,,Make sure to apply it only if you are mounting the application the URL\nroot. Also, see the Lighty docs for more information on,FastCGI and Python,(note that\nexplicitly passing a socket to run() is no longer necessary).,,,,Configuring nginx,\u00b6,,Installing FastCGI applications on nginx is a bit different because by\ndefault no FastCGI parameters are forwarded.,,A basic Flask FastCGI configuration for nginx looks like this:,,location = /yourapplication { rewrite ^ /yourapplication/ last; }\nlocation /yourapplication { try_files $uri @yourapplication; }\nlocation @yourapplication {\n    include fastcgi_params;\n    fastcgi_split_path_info ^(/yourapplication)(.*)$;\n    fastcgi_param PATH_INFO $fastcgi_path_info;\n    fastcgi_param SCRIPT_NAME $fastcgi_script_name;\n    fastcgi_pass unix:/tmp/yourapplication-fcgi.sock;\n},,,This configuration binds the application to,/yourapplication,.  If you\nwant to have it in the URL root it\u2019s a bit simpler because you don\u2019t\nhave to figure out how to calculate,PATH_INFO,and,SCRIPT_NAME,:,,location / { try_files $uri @yourapplication; }\nlocation @yourapplication {\n    include fastcgi_params;\n    fastcgi_param PATH_INFO $fastcgi_script_name;\n    fastcgi_param SCRIPT_NAME \"\";\n    fastcgi_pass unix:/tmp/yourapplication-fcgi.sock;\n},,,,,Running FastCGI Processes,\u00b6,,Since nginx and others do not load FastCGI apps, you have to do it by\nyourself.,Supervisor can manage FastCGI processes.,You can look around for other FastCGI process managers or write a script\nto run your,.fcgi,file at boot, e.g. using a SysV,init.d,script.\nFor a temporary solution, you can always run the,.fcgi,script inside\nGNU screen.  See,man,,screen,for details, and note that this is a\nmanual solution which does not persist across system restart:,,$ screen\n$ /var/www/yourapplication/yourapplication.fcgi,,,,,Debugging,\u00b6,,FastCGI deployments tend to be hard to debug on most web servers.  Very\noften the only thing the server log tells you is something along the\nlines of \u201cpremature end of headers\u201d.  In order to debug the application\nthe only thing that can really give you ideas why it breaks is switching\nto the correct user and executing the application by hand.,,This example assumes your application is called,application.fcgi,and\nthat your web server user is,www-data,:,,$ su www-data\n$ cd /var/www/yourapplication\n$ python application.fcgi\nTraceback (most recent call last):\n  File \"yourapplication.fcgi\", line 4, in <module>\nImportError: No module named yourapplication,,,In this case the error seems to be \u201cyourapplication\u201d not being on the\npython path.  Common problems are:,,,Relative paths being used.  Don\u2019t rely on the current working directory.,,The code depending on environment variables that are not set by the\nweb server.,,Different python interpreters being used.,,,,,,,,,,,,,,Contents,,,FastCGI,,Creating a,.fcgi,file,,Configuring Apache,,Configuring lighttpd,,Configuring nginx,,Running FastCGI Processes,,Debugging,,,,,Navigation,,,Overview,,,Deployment Options,,,Previous:,mod_wsgi (Apache),,Next:,CGI,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "mod_wsgi (Apache)", "url": "http://flask.pocoo.org/docs/dev/deploying/mod_wsgi/", "content": ",,,,,mod_wsgi (Apache) \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,Deployment Options,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,mod_wsgi (Apache),\u00b6,,If you are using the,Apache,webserver, consider using,mod_wsgi,.,,,Watch Out,,Please make sure in advance that any,app.run(),calls you might\nhave in your application file are inside an,if,,__name__,,==,,'__main__':,block or moved to a separate file.  Just make sure it\u2019s\nnot called because this will always start a local WSGI server which\nwe do not want if we deploy that application to mod_wsgi.,,,,Installing,mod_wsgi,\u00b6,,If you don\u2019t have,mod_wsgi,installed yet you have to either install it\nusing a package manager or compile it yourself.  The mod_wsgi,installation instructions,cover source installations on UNIX systems.,,If you are using Ubuntu/Debian you can apt-get it and activate it as\nfollows:,,# apt-get install libapache2-mod-wsgi,,,If you are using a yum based distribution (Fedora, OpenSUSE, etc..) you\ncan install it as follows:,,# yum install mod_wsgi,,,On FreeBSD install,mod_wsgi,by compiling the,www/mod_wsgi,port or by\nusing pkg_add:,,# pkg install ap22-mod_wsgi2,,,If you are using pkgsrc you can install,mod_wsgi,by compiling the,www/ap2-wsgi,package.,,If you encounter segfaulting child processes after the first apache\nreload you can safely ignore them.  Just restart the server.,,,,Creating a,.wsgi,file,\u00b6,,To run your application you need a,yourapplication.wsgi,file.  This file\ncontains the code,mod_wsgi,is executing on startup to get the application\nobject.  The object called,application,in that file is then used as\napplication.,,For most applications the following file should be sufficient:,,from,,yourapplication,,import,,app,,as,,application,,,,If you don\u2019t have a factory function for application creation but a singleton\ninstance you can directly import that one as,application,.,,Store that file somewhere that you will find it again (e.g.:,/var/www/yourapplication,) and make sure that,yourapplication,and all\nthe libraries that are in use are on the python load path.  If you don\u2019t\nwant to install it system wide consider using a,virtual python,instance.  Keep in mind that you will have to actually install your\napplication into the virtualenv as well.  Alternatively there is the\noption to just patch the path in the,.wsgi,file before the import:,,import,,sys,,sys,.,path,.,insert,(,0,,,,'/path/to/the/application',),,,,,,Configuring Apache,\u00b6,,The last thing you have to do is to create an Apache configuration file\nfor your application.  In this example we are telling,mod_wsgi,to\nexecute the application under a different user for security reasons:,,<VirtualHost,,*,>,,ServerName,example.com,WSGIDaemonProcess,yourapplication,user,=user1,group,=group1 threads=5,WSGIScriptAlias,/,/var/www/yourapplication/yourapplication.wsgi,,<Directory,,/var/www/yourapplication,>,,WSGIProcessGroup,yourapplication,WSGIApplicationGroup,%{GLOBAL},Order,deny,allow,Allow,from,all,,</Directory>,,</VirtualHost>,,,,Note: WSGIDaemonProcess isn\u2019t implemented in Windows and Apache will\nrefuse to run with the above configuration. On a Windows system, eliminate those lines:,,<VirtualHost,,*,>,,ServerName,example.com,WSGIScriptAlias,/ C:\\yourdir\\yourapp.wsgi,<Directory,,C:\\yourdir,>,,Order,deny,allow,Allow,from,all,,</Directory>,,</VirtualHost>,,,,Note: There have been some changes in access control configuration for,Apache 2.4,.,,Most notably, the syntax for directory permissions has changed from httpd 2.2,,Order,allow,deny,Allow,from,all,,,,to httpd 2.4 syntax,,Require,,all,granted,,,For more information consult the,mod_wsgi documentation,.,,,,Troubleshooting,\u00b6,,If your application does not run, follow this guide to troubleshoot:,,,Problem:,application does not run, errorlog shows SystemExit ignored,,You have an,app.run(),call in your application file that is not\nguarded by an,if,,__name__,,==,,'__main__':,condition.  Either\nremove that,run(),call from the file and move it\ninto a separate,run.py,file or put it into such an if block.,,Problem:,application gives permission errors,,Probably caused by your application running as the wrong user.  Make\nsure the folders the application needs access to have the proper\nprivileges set and the application runs as the correct user\n(,user,and,group,parameter to the,WSGIDaemonProcess,directive),,Problem:,application dies with an error on print,,Keep in mind that mod_wsgi disallows doing anything with,sys.stdout,and,sys.stderr,.  You can disable this\nprotection from the config by setting the,WSGIRestrictStdout,to,off,:,,WSGIRestrictStdout,,Off,,,,Alternatively you can also replace the standard out in the .wsgi file\nwith a different stream:,,import,,sys,,sys,.,stdout,,=,,sys,.,stderr,,,,,Problem:,accessing resources gives IO errors,,Your application probably is a single .py file you symlinked into\nthe site-packages folder.  Please be aware that this does not work,\ninstead you either have to put the folder into the pythonpath the\nfile is stored in, or convert your application into a package.,,The reason for this is that for non-installed packages, the module\nfilename is used to locate the resources and for symlinks the wrong\nfilename is picked up.,,,,,,Support for Automatic Reloading,\u00b6,,To help deployment tools you can activate support for automatic\nreloading.  Whenever something changes the,.wsgi,file,,mod_wsgi,will\nreload all the daemon processes for us.,,For that, just add the following directive to your,Directory,section:,,WSGIScriptReloading,,On,,,,,,Working with Virtual Environments,\u00b6,,Virtual environments have the advantage that they never install the\nrequired dependencies system wide so you have a better control over what\nis used where.  If you want to use a virtual environment with mod_wsgi\nyou have to modify your,.wsgi,file slightly.,,Add the following lines to the top of your,.wsgi,file:,,activate_this,,=,,'/path/to/env/bin/activate_this.py',,execfile,(,activate_this,,,,dict,(,__file__,=,activate_this,)),,,,For Python 3 add the following lines to the top of your,.wsgi,file:,,activate_this,,=,,'/path/to/env/bin/activate_this.py',,with,,open,(,activate_this,),,as,,file_,:,,exec,(,file_,.,read,(),,,dict,(,__file__,=,activate_this,)),,,,This sets up the load paths according to the settings of the virtual\nenvironment.  Keep in mind that the path has to be absolute.,,,,,,,,,,,,,Contents,,,mod_wsgi (Apache),,Installing,mod_wsgi,,Creating a,.wsgi,file,,Configuring Apache,,Troubleshooting,,Support for Automatic Reloading,,Working with Virtual Environments,,,,,Navigation,,,Overview,,,Deployment Options,,,Previous:,uWSGI,,Next:,FastCGI,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "The Application Context", "url": "http://flask.pocoo.org/docs/1.0/appcontext/", "content": ",,,,,The Application Context \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,,,,,,,,The Application Context,\u00b6,,The application context keeps track of the application-level data during\na request, CLI command, or other activity. Rather than passing the\napplication around to each function, the,current_app,and,g,proxies are accessed instead.,,This is similar to the,The Request Context,, which keeps track of\nrequest-level data during a request. A corresponding application context\nis pushed when a request context is pushed.,,,Purpose of the Context,\u00b6,,The,Flask,application object has attributes, such as,config,, that are useful to access within views and,CLI commands,. However, importing the,app,instance\nwithin the modules in your project is prone to circular import issues.\nWhen using the,app factory pattern,or\nwriting reusable,blueprints,or,extensions,there won\u2019t be an,app,instance to\nimport at all.,,Flask solves this issue with the,application context,. Rather than\nreferring to an,app,directly, you use the the,current_app,proxy, which points to the application handling the current activity.,,Flask automatically,pushes,an application context when handling a\nrequest. View functions, error handlers, and other functions that run\nduring a request will have access to,current_app,.,,Flask will also automatically push an app context when running CLI\ncommands registered with,Flask.cli,using,@app.cli.command(),.,,,,Lifetime of the Context,\u00b6,,The application context is created and destroyed as necessary. When a\nFlask application begins handling a request, it pushes an application\ncontext and a,request context,. When the request\nends it pops the request context then the application context.\nTypically, an application context will have the same lifetime as a\nrequest.,,See,The Request Context,for more information about how the contexts work\nand the full lifecycle of a request.,,,,Manually Push a Context,\u00b6,,If you try to access,current_app,, or anything that uses it,\noutside an application context, you\u2019ll get this error message:,,RuntimeError: Working outside of application context.,,This typically means that you attempted to use functionality that,,needed to interface with the current application object in some way.,,To solve this, set up an application context with app.app_context().,,,,If you see that error while configuring your application, such as when\ninitializing an extension, you can push a context manually since you\nhave direct access to the,app,. Use,app_context(),in a,with,block, and everything that runs in the block will have access\nto,current_app,.,,def,,create_app,():,,app,,=,,Flask,(,__name__,),,with,,app,.,app_context,():,,init_db,(),,return,,app,,,,If you see that error somewhere else in your code not related to\nconfiguring the application, it most likely indicates that you should\nmove that code into a view function or CLI command.,,,,Storing Data,\u00b6,,The application context is a good place to store common data during a\nrequest or CLI command. Flask provides the,g,,object,for this\npurpose. It is a simple namespace object that has the same lifetime as\nan application context.,,,Note,,The,g,name stands for \u201cglobal\u201d, but that is referring to the\ndata being global,within a context,. The data on,g,is lost\nafter the context ends, and it is not an appropriate place to store\ndata between requests. Use the,session,or a database to\nstore data across requests.,,,A common use for,g,is to manage resources during a request.,,,get_X(),creates resource,X,if it does not exist, caching it\nas,g.X,.,,teardown_X(),closes or otherwise deallocates the resource if it\nexists. It is registered as a,teardown_appcontext(),handler.,,,For example, you can manage a database connection using this pattern:,,from,,flask,,import,,g,,def,,get_db,():,,if,,'db',,not,,in,,g,:,,g,.,db,,=,,connect_to_database,(),,return,,g,.,db,,@app,.,teardown_appcontext,,def,,teardown_db,():,,db,,=,,g,.,pop,(,'db',,,,None,),,if,,db,,is,,not,,None,:,,db,.,close,(),,,,During a request, every call to,get_db(),will return the same\nconnection, and it will be closed automatically at the end of the\nrequest.,,You can use,LocalProxy,to make a new context\nlocal from,get_db(),:,,from,,werkzeug.local,,import,,LocalProxy,,db,,=,,LocalProxy,(,get_db,),,,,Accessing,db,will call,get_db,internally, in the same way that,current_app,works.,,,If you\u2019re writing an extension,,g,should be reserved for user\ncode. You may store internal data on the context itself, but be sure to\nuse a sufficiently unique name. The current context is accessed with,_app_ctx_stack.top,. For more information see,Flask Extension Development,.,,,,Events and Signals,\u00b6,,The application will call functions registered with,teardown_appcontext(),when the application context is\npopped.,,If,signals_available,is true, the following signals are\nsent:,appcontext_pushed,,,appcontext_tearing_down,, and,appcontext_popped,.,,,,,,,,,,,,,Contents,,,The Application Context,,Purpose of the Context,,Lifetime of the Context,,Manually Push a Context,,Storing Data,,Events and Signals,,,,,Navigation,,,Overview,,,Previous:,Pluggable Views,,Next:,The Request Context,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "None", "url": "http://flask.pocoo.org/community/poweredby/", "content": "Powered By Flask | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/community.png); },,,Flask Community,,,overview,//,docs,//,community,//,extensions,//,donate,,Powered By Flask,,This is a list of websites and projects that disclosed that they\n    are running on Flask.  If you want your own website or project\n    listed here,,send me a mail,with the URL, name and description of the website.,Websites,,,Battlefield3 Development News Aggregator,,,Development news aggregator for Battlefield3.  Tracks twitter\n              accounts and forum posts by DICE developers.,,,Sourcecode:,github.com,,,,,Blueslug,,,A flask-powered anti-social delicious clone,,,URL:,blueslug.com,,,,,Brightonpy,,,The website of the Brighton Python User Group,,,URL:,brightonpy.org,,Sourcecode:,github.com,,,,,DotShare,,,Socially driven website for sharing Linux/Unix dot files.,,,URL:,dotshare.it,,,,,Flask Website,,,The website of the Flask microframework itself including the\n              mailinglist interface, snippet archive and extension registry.,,,URL:,flask.pocoo.org,,,,,Get Python 3,,,A website to collect feedback of Python third party\n              libraries about its compatibility with Python 3,,,Sourcecode:,github.com,,,,,MetalSpy,,,MetalSpy.de is the portfolio website of a german hobby\n              photographer featuring mainly photos of metal bands,\n              festivals, fantasy conventions and cosplay.,,,URL:,www.metalspy.de,,,,,Planete GT LL,,,News aggregator for the open source workgroup of the Paris Region\n              innovation cluster, Systematic.,,,Sourcecode:,github.com,,,,,ROCKYOU.fm,,,ROCKYOU.fm is a german internet radio station and webzine\n              featuring mostly metal and hard rock. Since 2012 the DJs and\n              reporters provide their listeners with news, reviews, feature\n              shows and interviews.,,,URL:,www.rockyou.fm,,,,,s h o r e \u2026 software development,,,Corporate website of Shore Software Development.,,,URL:,shore.be,,,,,saallergy.info,,,San Antonio Allergy Data,,,URL:,saallergy.info,,,,,sopython,,,Site of the Python chat room on Stack Overflow. Includes OAuth authentication, a wiki, and a growing, searchable list of \"canonical\" answers to Python questions on SO.,,,,URL:,sopython.com,,Sourcecode:,github.com,,,,,Steven Harms' Website,,,Personal website of Steven Harms.,,,URL:,www.sharms.org,,Sourcecode:,github.com,,,,,ThadeusB's Website,,,Personal website of ThadeusB.,,,URL:,thadeusb.com,,,,Applications,,,blohg,,,A mercurial based blog engine.,,,URL:,blohg.org,,Sourcecode:,github.com,,,,,Cockerel,,,An Online Logic Assistent Based on Coq.,,,Sourcecode:,github.com,,,,,Dominion,,,Domination is a clone of a well-known card game.,,,Sourcecode:,bitbucket.org,,,,,Flask-Pastebin,,,Pastebin app with Flask and a few extensions that does Facebook\n              connect as well as realtime push notifications with socket.io\n              and juggernaut.,,,Sourcecode:,github.com,,,,,Have they emailed me?,,,A mini-site for checking Google's GMail feed with Oauth.,,,Sourcecode:,github.com,,,,,hg-review,,,hg-review is a code review system for Mercurial.  It is available\n              GPL2 license.,,,Sourcecode:,bitbucket.org,,,,,HTTPBin,,,An HTTP request & response service.,,,URL:,httpbin.org,,Sourcecode:,github.com,,,,,Indico,,,Indico is a full-fledged meeting and conference management\n              system developed at CERN. It includes advanced features such\n              as integration with collaborative systems, a plugin system\n              and support for SSO-based authentication.,,,URL:,getindico.io,,Sourcecode:,github.com,,,,,jitviewer,,,web-based tool to inspect the output of PyPy JIT log,,,Sourcecode:,bitbucket.org,,,,,newsmeme,,,A hackernews/reddit clone written with Flask and\n              various Flask extensions.,,,Sourcecode:,bitbucket.org,,,,,pidsim-web,,,PID Controller simulator.,,,Sourcecode:,github.com,,,,,Remar.kZ,,,Sometimes you use someone else's computer and find something\n               neat and interesting.  Store it on Remar.kZ without having\n               to enter your credentials.,,,Sourcecode:,bitbucket.org,,,,,Ryshcate,,,Ryshcate is a Flask powered pastebin with sourcecode\n              available.,,,Sourcecode:,bitbucket.org,,,,,\u00dcbersuggest Keyword Suggestion Tool,,,\u00dcbersuggest is a free tool that exploit the Google\n              suggest JSON API to get keyword ideas for your search marketing\n              campaign (PPC or SEO).,,,Sourcecode:,bitbucket.org,,,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "Standalone WSGI Containers", "url": "http://flask.pocoo.org/docs/dev/deploying/wsgi-standalone/", "content": ",,,,,Standalone WSGI Containers \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,Deployment Options,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,Standalone WSGI Containers,\u00b6,,There are popular servers written in Python that contain WSGI applications and\nserve HTTP.  These servers stand alone when they run; you can proxy to them\nfrom your web server.  Note the section on,Proxy Setups,if you\nrun into issues.,,,Gunicorn,\u00b6,,Gunicorn,\u2018Green Unicorn\u2019 is a WSGI HTTP Server for UNIX. It\u2019s a pre-fork\nworker model ported from Ruby\u2019s Unicorn project. It supports both,eventlet,and,greenlet,. Running a Flask application on this server is quite simple:,,gunicorn,,myproject,:,app,,,,Gunicorn,provides many command-line options \u2013 see,gunicorn,,-h,.\nFor example, to run a Flask application with 4 worker processes (,-w,,4,) binding to localhost port 4000 (,-b,,127.0.0.1:4000,):,,gunicorn,,-,w,,4,,-,b,,127.0,.,0.1,:,4000,,myproject,:,app,,,,,,uWSGI,\u00b6,,uWSGI,is a fast application server written in C. It is very configurable\nwhich makes it more complicated to setup than gunicorn.,,Running,uWSGI HTTP Router,:,,uwsgi,,--,http,,127.0,.,0.1,:,5000,,--,module,,myproject,:,app,,,,For a more optimized setup, see,configuring uWSGI and NGINX,.,,,,Gevent,\u00b6,,Gevent,is a coroutine-based Python networking library that uses,greenlet,to provide a high-level synchronous API on top of,libev,event loop:,,from,,gevent.pywsgi,,import,,WSGIServer,,from,,yourapplication,,import,,app,,http_server,,=,,WSGIServer,((,'',,,,5000,),,,app,),,http_server,.,serve_forever,(),,,,,,Twisted Web,\u00b6,,Twisted Web,is the web server shipped with,Twisted,, a mature,\nnon-blocking event-driven networking library. Twisted Web comes with a\nstandard WSGI container which can be controlled from the command line using\nthe,twistd,utility:,,twistd,,web,,--,wsgi,,myproject,.,app,,,,This example will run a Flask application called,app,from a module named,myproject,.,,Twisted Web supports many flags and options, and the,twistd,utility does\nas well; see,twistd,,-h,and,twistd,,web,,-h,for more information. For\nexample, to run a Twisted Web server in the foreground, on port 8080, with an\napplication from,myproject,:,,twistd,,-,n,,web,,--,port,,tcp,:,8080,,--,wsgi,,myproject,.,app,,,,,,Proxy Setups,\u00b6,,If you deploy your application using one of these servers behind an HTTP proxy\nyou will need to rewrite a few headers in order for the application to work.\nThe two problematic values in the WSGI environment usually are,REMOTE_ADDR,and,HTTP_HOST,.  You can configure your httpd to pass these headers, or you\ncan fix them in middleware.  Werkzeug ships a fixer that will solve some common\nsetups, but you might want to write your own WSGI middleware for specific\nsetups.,,Here\u2019s a simple nginx configuration which proxies to an application served on\nlocalhost at port 8000, setting appropriate headers:,,server,,{,,listen,,80,;,,server_name,,_,;,,access_log,,/var/log/nginx/access.log,;,,error_log,,/var/log/nginx/error.log,;,,location,,/,,{,,proxy_pass,,http://127.0.0.1:8000/,;,,proxy_redirect,,off,;,,proxy_set_header,,Host,,$host,;,,proxy_set_header,,X-Real-IP,,$remote_addr,;,,proxy_set_header,,X-Forwarded-For,,$proxy_add_x_forwarded_for,;,,proxy_set_header,,X-Forwarded-Proto,,$scheme,;,,},,},,,,If your httpd is not providing these headers, the most common setup invokes the\nhost being set from,X-Forwarded-Host,and the remote address from,X-Forwarded-For,:,,from,,werkzeug.contrib.fixers,,import,,ProxyFix,,app,.,wsgi_app,,=,,ProxyFix,(,app,.,wsgi_app,),,,,,Trusting Headers,,Please keep in mind that it is a security issue to use such a middleware in\na non-proxy setup because it will blindly trust the incoming headers which\nmight be forged by malicious clients.,,,If you want to rewrite the headers from another header, you might want to\nuse a fixer like this:,,class,,CustomProxyFix,(,object,):,,def,,__init__,(,self,,,,app,):,,self,.,app,,=,,app,,def,,__call__,(,self,,,,environ,,,,start_response,):,,host,,=,,environ,.,get,(,'HTTP_X_FHOST',,,,'',),,if,,host,:,,environ,[,'HTTP_HOST',],,=,,host,,return,,self,.,app,(,environ,,,,start_response,),,app,.,wsgi_app,,=,,CustomProxyFix,(,app,.,wsgi_app,),,,,,,,,,,,,,,,Contents,,,Standalone WSGI Containers,,Gunicorn,,uWSGI,,Gevent,,Twisted Web,,Proxy Setups,,,,,Navigation,,,Overview,,,Deployment Options,,,Previous:,Deployment Options,,Next:,uWSGI,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Modular Applications with Blueprints", "url": "http://flask.pocoo.org/docs/1.0/blueprints/", "content": ",,,,,Modular Applications with Blueprints \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,,,,,,,,Modular Applications with Blueprints,\u00b6,,,Changelog,,New in version 0.7.,,,Flask uses a concept of,blueprints,for making application components and\nsupporting common patterns within an application or across applications.\nBlueprints can greatly simplify how large applications work and provide a\ncentral means for Flask extensions to register operations on applications.\nA,Blueprint,object works similarly to a,Flask,application object, but it is not actually an application.  Rather it is a,blueprint,of how to construct or extend an application.,,,Why Blueprints?,\u00b6,,Blueprints in Flask are intended for these cases:,,,Factor an application into a set of blueprints.  This is ideal for\nlarger applications; a project could instantiate an application object,\ninitialize several extensions, and register a collection of blueprints.,,Register a blueprint on an application at a URL prefix and/or subdomain.\nParameters in the URL prefix/subdomain become common view arguments\n(with defaults) across all view functions in the blueprint.,,Register a blueprint multiple times on an application with different URL\nrules.,,Provide template filters, static files, templates, and other utilities\nthrough blueprints.  A blueprint does not have to implement applications\nor view functions.,,Register a blueprint on an application for any of these cases when\ninitializing a Flask extension.,,,A blueprint in Flask is not a pluggable app because it is not actually an\napplication \u2013 it\u2019s a set of operations which can be registered on an\napplication, even multiple times.  Why not have multiple application\nobjects?  You can do that (see,Application Dispatching,), but your applications\nwill have separate configs and will be managed at the WSGI layer.,,Blueprints instead provide separation at the Flask level, share\napplication config, and can change an application object as necessary with\nbeing registered. The downside is that you cannot unregister a blueprint\nonce an application was created without having to destroy the whole\napplication object.,,,,The Concept of Blueprints,\u00b6,,The basic concept of blueprints is that they record operations to execute\nwhen registered on an application.  Flask associates view functions with\nblueprints when dispatching requests and generating URLs from one endpoint\nto another.,,,,My First Blueprint,\u00b6,,This is what a very basic blueprint looks like.  In this case we want to\nimplement a blueprint that does simple rendering of static templates:,,from,,flask,,import,,Blueprint,,,,render_template,,,,abort,,from,,jinja2,,import,,TemplateNotFound,,simple_page,,=,,Blueprint,(,'simple_page',,,,__name__,,,,template_folder,=,'templates',),,@simple_page,.,route,(,'/',,,,defaults,=,{,'page',:,,'index',}),,@simple_page,.,route,(,'/<page>',),,def,,show,(,page,):,,try,:,,return,,render_template,(,'pages/,%s,.html',,%,,page,),,except,,TemplateNotFound,:,,abort,(,404,),,,,When you bind a function with the help of the,@simple_page.route,decorator the blueprint will record the intention of registering the\nfunction,show,on the application when it\u2019s later registered.\nAdditionally it will prefix the endpoint of the function with the\nname of the blueprint which was given to the,Blueprint,constructor (in this case also,simple_page,).,,,,Registering Blueprints,\u00b6,,So how do you register that blueprint?  Like this:,,from,,flask,,import,,Flask,,from,,yourapplication.simple_page,,import,,simple_page,,app,,=,,Flask,(,__name__,),,app,.,register_blueprint,(,simple_page,),,,,If you check the rules registered on the application, you will find\nthese:,,[,<,Rule,,'/static/<filename>',,(,HEAD,,,,OPTIONS,,,,GET,),,->,,static,>,,,,<,Rule,,'/<page>',,(,HEAD,,,,OPTIONS,,,,GET,),,->,,simple_page,.,show,>,,,,<,Rule,,'/',,(,HEAD,,,,OPTIONS,,,,GET,),,->,,simple_page,.,show,>,],,,,The first one is obviously from the application itself for the static\nfiles.  The other two are for the,show,function of the,simple_page,blueprint.  As you can see, they are also prefixed with the name of the\nblueprint and separated by a dot (,.,).,,Blueprints however can also be mounted at different locations:,,app,.,register_blueprint,(,simple_page,,,,url_prefix,=,'/pages',),,,,And sure enough, these are the generated rules:,,[,<,Rule,,'/static/<filename>',,(,HEAD,,,,OPTIONS,,,,GET,),,->,,static,>,,,,<,Rule,,'/pages/<page>',,(,HEAD,,,,OPTIONS,,,,GET,),,->,,simple_page,.,show,>,,,,<,Rule,,'/pages/',,(,HEAD,,,,OPTIONS,,,,GET,),,->,,simple_page,.,show,>,],,,,On top of that you can register blueprints multiple times though not every\nblueprint might respond properly to that.  In fact it depends on how the\nblueprint is implemented if it can be mounted more than once.,,,,Blueprint Resources,\u00b6,,Blueprints can provide resources as well.  Sometimes you might want to\nintroduce a blueprint only for the resources it provides.,,,Blueprint Resource Folder,\u00b6,,Like for regular applications, blueprints are considered to be contained\nin a folder.  While multiple blueprints can originate from the same folder,\nit does not have to be the case and it\u2019s usually not recommended.,,The folder is inferred from the second argument to,Blueprint,which\nis usually,__name__,.  This argument specifies what logical Python\nmodule or package corresponds to the blueprint.  If it points to an actual\nPython package that package (which is a folder on the filesystem) is the\nresource folder.  If it\u2019s a module, the package the module is contained in\nwill be the resource folder.  You can access the,Blueprint.root_path,property to see what the resource folder is:,,>>>,simple_page,.,root_path,,'/Users/username/TestProject/yourapplication',,,,To quickly open sources from this folder you can use the,open_resource(),function:,,with,,simple_page,.,open_resource,(,'static/style.css',),,as,,f,:,,code,,=,,f,.,read,(),,,,,,Static Files,\u00b6,,A blueprint can expose a folder with static files by providing the path\nto the folder on the filesystem with the,static_folder,argument.\nIt is either an absolute path or relative to the blueprint\u2019s location:,,admin,,=,,Blueprint,(,'admin',,,,__name__,,,,static_folder,=,'static',),,,,By default the rightmost part of the path is where it is exposed on the\nweb. This can be changed with the,static_url_path,argument. Because the\nfolder is called,static,here it will be available at the,url_prefix,of the blueprint +,/static,. If the blueprint\nhas the prefix,/admin,, the static URL will be,/admin/static,.,,The endpoint is named,blueprint_name.static,. You can generate URLs\nto it with,url_for(),like you would with the static folder of the\napplication:,,url_for,(,'admin.static',,,,filename,=,'style.css',),,,,However, if the blueprint does not have a,url_prefix,, it is not\npossible to access the blueprint\u2019s static folder. This is because the\nURL would be,/static,in this case, and the application\u2019s,/static,route takes precedence. Unlike template folders, blueprint static\nfolders are not searched if the file does not exist in the application\nstatic folder.,,,,Templates,\u00b6,,If you want the blueprint to expose templates you can do that by providing\nthe,template_folder,parameter to the,Blueprint,constructor:,,admin,,=,,Blueprint,(,'admin',,,,__name__,,,,template_folder,=,'templates',),,,,For static files, the path can be absolute or relative to the blueprint\nresource folder.,,The template folder is added to the search path of templates but with a lower\npriority than the actual application\u2019s template folder. That way you can\neasily override templates that a blueprint provides in the actual application.\nThis also means that if you don\u2019t want a blueprint template to be accidentally\noverridden, make sure that no other blueprint or actual application template\nhas the same relative path. When multiple blueprints provide the same relative\ntemplate path the first blueprint registered takes precedence over the others.,,So if you have a blueprint in the folder,yourapplication/admin,and you\nwant to render the template,'admin/index.html',and you have provided,templates,as a,template_folder,you will have to create a file like\nthis:,yourapplication/admin/templates/admin/index.html,. The reason\nfor the extra,admin,folder is to avoid getting our template overridden\nby a template named,index.html,in the actual application template\nfolder.,,To further reiterate this: if you have a blueprint named,admin,and you\nwant to render a template called,index.html,which is specific to this\nblueprint, the best idea is to lay out your templates like this:,,yourpackage,/,,blueprints,/,,admin,/,,templates,/,,admin,/,,index,.,html,,__init__,.,py,,,,And then when you want to render the template, use,admin/index.html,as\nthe name to look up the template by.  If you encounter problems loading\nthe correct templates enable the,EXPLAIN_TEMPLATE_LOADING,config\nvariable which will instruct Flask to print out the steps it goes through\nto locate templates on every,render_template,call.,,,,,Building URLs,\u00b6,,If you want to link from one page to another you can use the,url_for(),function just like you normally would do just that you\nprefix the URL endpoint with the name of the blueprint and a dot (,.,):,,url_for,(,'admin.index',),,,,Additionally if you are in a view function of a blueprint or a rendered\ntemplate and you want to link to another endpoint of the same blueprint,\nyou can use relative redirects by prefixing the endpoint with a dot only:,,url_for,(,'.index',),,,,This will link to,admin.index,for instance in case the current request\nwas dispatched to any other admin blueprint endpoint.,,,,Error Handlers,\u00b6,,Blueprints support the errorhandler decorator just like the,Flask,application object, so it is easy to make Blueprint-specific custom error\npages.,,Here is an example for a \u201c404 Page Not Found\u201d exception:,,@simple_page,.,errorhandler,(,404,),,def,,page_not_found,(,e,):,,return,,render_template,(,'pages/404.html',),,,,Most errorhandlers will simply work as expected; however, there is a caveat\nconcerning handlers for 404 and 405 exceptions.  These errorhandlers are only\ninvoked from an appropriate,raise,statement or a call to,abort,in another\nof the blueprint\u2019s view functions; they are not invoked by, e.g., an invalid URL\naccess.  This is because the blueprint does not \u201cown\u201d a certain URL space, so\nthe application instance has no way of knowing which blueprint errorhandler it\nshould run if given an invalid URL.  If you would like to execute different\nhandling strategies for these errors based on URL prefixes, they may be defined\nat the application level using the,request,proxy object:,,@app,.,errorhandler,(,404,),,@app,.,errorhandler,(,405,),,def,,_handle_api_error,(,ex,):,,if,,request,.,path,.,startswith,(,'/api/',):,,return,,jsonify_error,(,ex,),,else,:,,return,,ex,,,,More information on error handling see,Custom Error Pages,.,,,,,,,,,,,,,Contents,,,Modular Applications with Blueprints,,Why Blueprints?,,The Concept of Blueprints,,My First Blueprint,,Registering Blueprints,,Blueprint Resources,,Blueprint Resource Folder,,Static Files,,Templates,,,,Building URLs,,Error Handlers,,,,,Navigation,,,Overview,,,Previous:,The Request Context,,Next:,Extensions,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/133/", "content": "Wrapper for passing command-line flags to app.run() | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Wrapper for passing command-line flags to app.run(),,Posted by alexwlchan\n    on 2015-09-14 @ 07:30\n    and filed in,Utilities,,Wrapper that allows you to pass options to app.run() on the command line.  Example invocations:,,$ ./server.py --host 0.0.0.0\n$ ./server.py --host 127.0.1.1 --port 8000\n$ ./server.py --debug,,Pass the --help flag to get a help message.,,Here's the code, which I usually put in a separate file flaskrun.py:,,import,,optparse,,def,,flaskrun,(,app,,,,default_host,=,\"127.0.0.1\",,,,default_port,=,\"5000\",):,,\"\"\",,Takes a flask.Flask instance and runs it. Parses,,command-line flags to configure the app.,,\"\"\",,# Set up the command-line options,,parser,,=,,optparse,.,OptionParser,(),,parser,.,add_option,(,\"-H\",,,,\"--host\",,,,help,=,\"Hostname of the Flask app \",,+,\\,\"[default,%s,]\",,%,,default_host,,,,default,=,default_host,),,parser,.,add_option,(,\"-P\",,,,\"--port\",,,,help,=,\"Port for the Flask app \",,+,\\,\"[default,%s,]\",,%,,default_port,,,,default,=,default_port,),,# Two options useful for debugging purposes, but,,# a bit dangerous so not exposed in the help message.,,parser,.,add_option,(,\"-d\",,,,\"--debug\",,,,action,=,\"store_true\",,,,dest,=,\"debug\",,,,help,=,optparse,.,SUPPRESS_HELP,),,parser,.,add_option,(,\"-p\",,,,\"--profile\",,,,action,=,\"store_true\",,,,dest,=,\"profile\",,,,help,=,optparse,.,SUPPRESS_HELP,),,options,,,,_,,=,,parser,.,parse_args,(),,# If the user selects the profiling option, then we need,,# to do a little extra setup,,if,,options,.,profile,:,,from,,werkzeug.contrib.profiler,,import,,ProfilerMiddleware,,app,.,config,[,'PROFILE',],,=,,True,,app,.,wsgi_app,,=,,ProfilerMiddleware,(,app,.,wsgi_app,,,,restrictions,=,[,30,]),,options,.,debug,,=,,True,,app,.,run,(,,debug,=,options,.,debug,,,,host,=,options,.,host,,,,port,=,int,(,options,.,port,),,),,,To use it with a given Flask app:,,from,,flask,,import,,Flask,,from,,flaskrun,,import,,flaskrun,,app,,=,,Flask,(,__name__,),,# do some Flask setup here,,flaskrun,(,app,),,,You can set the default host and port on a per-app basis by passing arguments to flaskrun.,,I use optparse rather than one of the fancier argument-parsing modules to ensure compatibility at least as far back as Python 2.6.,,This snippet by alexwlchan can be used freely for\n    anything you like. Consider it public domain.,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "Pluggable Views", "url": "http://flask.pocoo.org/docs/1.0/views/", "content": ",,,,,Pluggable Views \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,,,,,,,,Pluggable Views,\u00b6,,,Changelog,,New in version 0.7.,,,Flask 0.7 introduces pluggable views inspired by the generic views from\nDjango which are based on classes instead of functions.  The main\nintention is that you can replace parts of the implementations and this\nway have customizable pluggable views.,,,Basic Principle,\u00b6,,Consider you have a function that loads a list of objects from the\ndatabase and renders into a template:,,@app,.,route,(,'/users/',),,def,,show_users,(,page,):,,users,,=,,User,.,query,.,all,(),,return,,render_template,(,'users.html',,,,users,=,users,),,,,This is simple and flexible, but if you want to provide this view in a\ngeneric fashion that can be adapted to other models and templates as well\nyou might want more flexibility.  This is where pluggable class-based\nviews come into place.  As the first step to convert this into a class\nbased view you would do this:,,from,,flask.views,,import,,View,,class,,ShowUsers,(,View,):,,def,,dispatch_request,(,self,):,,users,,=,,User,.,query,.,all,(),,return,,render_template,(,'users.html',,,,objects,=,users,),,app,.,add_url_rule,(,'/users/',,,,view_func,=,ShowUsers,.,as_view,(,'show_users',)),,,,As you can see what you have to do is to create a subclass of,flask.views.View,and implement,dispatch_request(),.  Then we have to convert that\nclass into an actual view function by using the,as_view(),class method.  The string you pass to\nthat function is the name of the endpoint that view will then have.  But\nthis by itself is not helpful, so let\u2019s refactor the code a bit:,,from,,flask.views,,import,,View,,class,,ListView,(,View,):,,def,,get_template_name,(,self,):,,raise,,NotImplementedError,(),,def,,render_template,(,self,,,,context,):,,return,,render_template,(,self,.,get_template_name,(),,,**,context,),,def,,dispatch_request,(,self,):,,context,,=,,{,'objects',:,,self,.,get_objects,()},,return,,self,.,render_template,(,context,),,class,,UserView,(,ListView,):,,def,,get_template_name,(,self,):,,return,,'users.html',,def,,get_objects,(,self,):,,return,,User,.,query,.,all,(),,,,This of course is not that helpful for such a small example, but it\u2019s good\nenough to explain the basic principle.  When you have a class-based view\nthe question comes up what,self,points to.  The way this works is that\nwhenever the request is dispatched a new instance of the class is created\nand the,dispatch_request(),method is called with\nthe parameters from the URL rule.  The class itself is instantiated with\nthe parameters passed to the,as_view(),function.\nFor instance you can write a class like this:,,class,,RenderTemplateView,(,View,):,,def,,__init__,(,self,,,,template_name,):,,self,.,template_name,,=,,template_name,,def,,dispatch_request,(,self,):,,return,,render_template,(,self,.,template_name,),,,,And then you can register it like this:,,app,.,add_url_rule,(,'/about',,,,view_func,=,RenderTemplateView,.,as_view,(,,'about_page',,,,template_name,=,'about.html',)),,,,,,Method Hints,\u00b6,,Pluggable views are attached to the application like a regular function by\neither using,route(),or better,add_url_rule(),.  That however also means that you would\nhave to provide the names of the HTTP methods the view supports when you\nattach this.  In order to move that information to the class you can\nprovide a,methods,attribute that has this\ninformation:,,class,,MyView,(,View,):,,methods,,=,,[,'GET',,,,'POST',],,def,,dispatch_request,(,self,):,,if,,request,.,method,,==,,'POST',:,,...,,...,,app,.,add_url_rule,(,'/myview',,,,view_func,=,MyView,.,as_view,(,'myview',)),,,,,,Method Based Dispatching,\u00b6,,For RESTful APIs it\u2019s especially helpful to execute a different function\nfor each HTTP method.  With the,flask.views.MethodView,you can\neasily do that.  Each HTTP method maps to a function with the same name\n(just in lowercase):,,from,,flask.views,,import,,MethodView,,class,,UserAPI,(,MethodView,):,,def,,get,(,self,):,,users,,=,,User,.,query,.,all,(),,...,,def,,post,(,self,):,,user,,=,,User,.,from_form_data,(,request,.,form,),,...,,app,.,add_url_rule,(,'/users/',,,,view_func,=,UserAPI,.,as_view,(,'users',)),,,,That way you also don\u2019t have to provide the,methods,attribute.  It\u2019s automatically set based\non the methods defined in the class.,,,,Decorating Views,\u00b6,,Since the view class itself is not the view function that is added to the\nrouting system it does not make much sense to decorate the class itself.\nInstead you either have to decorate the return value of,as_view(),by hand:,,def,,user_required,(,f,):,,\"\"\"Checks whether user is logged in or raises error 401.\"\"\",,def,,decorator,(,*,args,,,,**,kwargs,):,,if,,not,,g,.,user,:,,abort,(,401,),,return,,f,(,*,args,,,,**,kwargs,),,return,,decorator,,view,,=,,user_required,(,UserAPI,.,as_view,(,'users',)),,app,.,add_url_rule,(,'/users/',,,,view_func,=,view,),,,,Starting with Flask 0.8 there is also an alternative way where you can\nspecify a list of decorators to apply in the class declaration:,,class,,UserAPI,(,MethodView,):,,decorators,,=,,[,user_required,],,,,Due to the implicit self from the caller\u2019s perspective you cannot use\nregular view decorators on the individual methods of the view however,\nkeep this in mind.,,,,Method Views for APIs,\u00b6,,Web APIs are often working very closely with HTTP verbs so it makes a lot\nof sense to implement such an API based on the,MethodView,.  That said, you will notice that the API\nwill require different URL rules that go to the same method view most of\nthe time.  For instance consider that you are exposing a user object on\nthe web:,,,,,,,,,URL,,Method,,Description,,,/users/,,GET,,Gives a list of all users,,,/users/,,POST,,Creates a new user,,,/users/<id>,,GET,,Shows a single user,,,/users/<id>,,PUT,,Updates a single user,,,/users/<id>,,DELETE,,Deletes a single user,,,,,So how would you go about doing that with the,MethodView,?  The trick is to take advantage of the\nfact that you can provide multiple rules to the same view.,,Let\u2019s assume for the moment the view would look like this:,,class,,UserAPI,(,MethodView,):,,def,,get,(,self,,,,user_id,):,,if,,user_id,,is,,None,:,,# return a list of users,,pass,,else,:,,# expose a single user,,pass,,def,,post,(,self,):,,# create a new user,,pass,,def,,delete,(,self,,,,user_id,):,,# delete a single user,,pass,,def,,put,(,self,,,,user_id,):,,# update a single user,,pass,,,,So how do we hook this up with the routing system?  By adding two rules\nand explicitly mentioning the methods for each:,,user_view,,=,,UserAPI,.,as_view,(,'user_api',),,app,.,add_url_rule,(,'/users/',,,,defaults,=,{,'user_id',:,,None,},,,view_func,=,user_view,,,,methods,=,[,'GET',,]),,app,.,add_url_rule,(,'/users/',,,,view_func,=,user_view,,,,methods,=,[,'POST',,]),,app,.,add_url_rule,(,'/users/<int:user_id>',,,,view_func,=,user_view,,,,methods,=,[,'GET',,,,'PUT',,,,'DELETE',]),,,,If you have a lot of APIs that look similar you can refactor that\nregistration code:,,def,,register_api,(,view,,,,endpoint,,,,url,,,,pk,=,'id',,,,pk_type,=,'int',):,,view_func,,=,,view,.,as_view,(,endpoint,),,app,.,add_url_rule,(,url,,,,defaults,=,{,pk,:,,None,},,,view_func,=,view_func,,,,methods,=,[,'GET',,]),,app,.,add_url_rule,(,url,,,,view_func,=,view_func,,,,methods,=,[,'POST',,]),,app,.,add_url_rule,(,',%s,<,%s,:,%s,>',,%,,(,url,,,,pk_type,,,,pk,),,,view_func,=,view_func,,,,methods,=,[,'GET',,,,'PUT',,,,'DELETE',]),,register_api,(,UserAPI,,,,'user_api',,,,'/users/',,,,pk,=,'user_id',),,,,,,,,,,,,,,,Contents,,,Pluggable Views,,Basic Principle,,Method Hints,,Method Based Dispatching,,Decorating Views,,Method Views for APIs,,,,,Navigation,,,Overview,,,Previous:,Signals,,Next:,The Application Context,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "None", "url": "http://flask.pocoo.org/community/logos/", "content": "Logos | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/community.png); },,,Flask Community,,,overview,//,docs,//,community,//,extensions,//,donate,,Logos,,The Flask logo is available for download and use in the formats\n    below.  You can use the logo to promote Flask like you want.\n    The image is licensed under the \u201cFlask Artwork License\u201d.,Read license text,.,,PNG format,: for online and screen usage,SVG format,: for online and screen usage,EPS format,: for print use,PDF format,: for print use,,The font used in the logo is \u201cHightower Text roman\u201d from the\n    Font Bureau foundry.  The font can be purchased from,Ascender Fonts,.,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/community/badges/", "content": "Badges | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/community.png); },,,Flask Community,,,overview,//,docs,//,community,//,extensions,//,donate,,Badges,,If you want to share the word and want to add a \u201cpowered by\n    Flask\u201d badge to your website you can display one of these\n    nifty badges.  We also have some badges if your website is not\n    yet powered by Flask :),Large Badges,,,,<a href=\"http://flask.pocoo.org/\"><img\n   src=\"http://flask.pocoo.org/static/badges/flask-powered.png\"\n   border=\"0\"\n   alt=\"Flask powered\"\n   title=\"Flask powered\"></a>,,,,,<a href=\"http://flask.pocoo.org/\"><img\n   src=\"http://flask.pocoo.org/static/badges/i-wish.png\"\n   border=\"0\"\n   alt=\"I wish this site were Flask powered\"\n   title=\"I wish this site were Flask powered\"></a>,,,,,<a href=\"http://flask.pocoo.org/\"><img\n   src=\"http://flask.pocoo.org/static/badges/unfortunately-not.png\"\n   border=\"0\"\n   alt=\"Unfortunately not Flask powered\"\n   title=\"Unfortunately not Flask powered\"></a>,,,Small Badges,,,,<a href=\"http://flask.pocoo.org/\"><img\n   src=\"http://flask.pocoo.org/static/badges/flask-project-s.png\"\n   border=\"0\"\n   alt=\"a Flask project\"\n   title=\"a Flask project\"></a>,,,,,<a href=\"http://flask.pocoo.org/\"><img\n   src=\"http://flask.pocoo.org/static/badges/made-with-flask-s.png\"\n   border=\"0\"\n   alt=\"made with Flask\"\n   title=\"made with Flask\"></a>,,,,,<a href=\"http://flask.pocoo.org/\"><img\n   src=\"http://flask.pocoo.org/static/badges/powered-by-flask-s.png\"\n   border=\"0\"\n   alt=\"powered by Flask\"\n   title=\"powered by Flask\"></a>,,,Idea for badges inspired by the Django Framework badges.,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/16/", "content": "Using TurboMail with Flask | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Using TurboMail with Flask,,Posted by Dan Jacob\n    on 2010-05-08 @ 14:20\n    and filed in,Utilities,,TurboMail,is an email package originally bundled with TurboGears but now existing as a standalone library.,,It provides convenient functionality for configuring and sending emails, for example for testing, multipart messages, etc.,,It's quite straightforward to set up TurboMail for your Flask application. One thing you need to take care of is ensuring that the interface is set up so that when the current process exits, any unsent emails are cleanly dispatched. This is achieved using the standard atexit module.,,import,,atexit,,from,,turbomail.control,,import,,interface,,from,,turbomail.message,,import,,Message,,from,,flask,,import,,Flask,,# pass in dict of config options,,interface,.,start,({,'mail.on',,:,,True,}),,# ensures interface cleanly shutdown when process exits,,atexit,.,register,(,interface,.,stop,,,,force,=,True,),,app,,=,,Flask,(,__name__,),,@app.route,(,\"/\",),,def,,index,():,,# send an email,,msg,,=,,Message,(,\"from@example.com\",,,,\"to@example.com\",,,,\"a subject\",),,msg,.,plain,,=,,\"body of message\",,msg,.,send,(),,,This snippet by Dan Jacob can be used freely for\n    anything you like. Consider it public domain.,,,Comments,,,,HTML messages\n          by Dag Odenhall\n          on 2010-05-14 @ 10:41,You can render HTML messages from templates.,,from,,flask,,import,,render_template,,[,...,],,msg,.,rich,,=,,render_template,(,'email.html',,,,name,=,name,),,,,,Plain text from templates\n          by Dag Odenhall\n          on 2010-05-14 @ 10:46,Nothing stops you from rendering the plain text messages from templates too, of course.,,msg,.,plain,,=,,render_template,(,'email.txt',,,,name,=,name,),,,,,Marrow.mailer\n          by Priit Laes\n          on 2011-11-09 @ 13:09,TurboMail project has now changed its name to marrow.mailer.,,,,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "The Request Context", "url": "http://flask.pocoo.org/docs/1.0/reqcontext/", "content": ",,,,,The Request Context \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,,,,,,,,The Request Context,\u00b6,,The request context keeps track of the request-level data during a\nrequest. Rather than passing the request object to each function that\nruns during a request, the,request,and,session,proxies\nare accessed instead.,,This is similar to the,The Application Context,, which keeps track of the\napplication-level data independent of a request. A corresponding\napplication context is pushed when a request context is pushed.,,,Purpose of the Context,\u00b6,,When the,Flask,application handles a request, it creates a,Request,object based on the environment it received from the\nWSGI server. Because a,worker,(thread, process, or coroutine depending\non the server) handles only one request at a time, the request data can\nbe considered global to that worker during that request. Flask uses the\nterm,context local,for this.,,Flask automatically,pushes,a request context when handling a request.\nView functions, error handlers, and other functions that run during a\nrequest will have access to the,request,proxy, which points to\nthe request object for the current request.,,,,Lifetime of the Context,\u00b6,,When a Flask application begins handling a request, it pushes a request\ncontext, which also pushes an,The Application Context,. When the request ends\nit pops the request context then the application context.,,The context is unique to each thread (or other worker type).,request,cannot be passed to another thread, the other thread\nwill have a different context stack and will not know about the request\nthe parent thread was pointing to.,,Context locals are implemented in Werkzeug. See,Context Locals,for more information on how this works internally.,,,,Manually Push a Context,\u00b6,,If you try to access,request,, or anything that uses it, outside\na request context, you\u2019ll get this error message:,,RuntimeError: Working outside of request context.,,This typically means that you attempted to use functionality that,,needed an active HTTP request. Consult the documentation on testing,,for information about how to avoid this problem.,,,,This should typically only happen when testing code that expects an\nactive request. One option is to use the,test,,client,to simulate a full request. Or\nyou can use,test_request_context(),in a,with,block, and\neverything that runs in the block will have access to,request,,\npopulated with your test data.,,def,,generate_report,(,year,):,,format,,=,,request,.,args,.,get,(,'format',),,...,,with,,app,.,test_request_context,(,,'/make_report/2017',,,,data,=,{,'format',:,,'short',}):,,generate_report,(),,,,If you see that error somewhere else in your code not related to\ntesting, it most likely indicates that you should move that code into a\nview function.,,For information on how to use the request context from the interactive\nPython shell, see,Working with the Shell,.,,,,How the Context Works,\u00b6,,The,Flask.wsgi_app(),method is called to handle each request. It\nmanages the contexts during the request. Internally, the request and\napplication contexts work as stacks,,_request_ctx_stack,and,_app_ctx_stack,. When contexts are pushed onto the stack, the\nproxies that depend on them are available and point at information from\nthe top context on the stack.,,When the request starts, a,RequestContext,is created and\npushed, which creates and pushes an,AppContext,first if\na context for that application is not already the top context. While\nthese contexts are pushed, the,current_app,,,g,,,request,, and,session,proxies are available to the\noriginal thread handling the request.,,Because the contexts are stacks, other contexts may be pushed to change\nthe proxies during a request. While this is not a common pattern, it\ncan be used in advanced applications to, for example, do internal\nredirects or chain different applications together.,,After the request is dispatched and a response is generated and sent,\nthe request context is popped, which then pops the application context.\nImmediately before they are popped, the,teardown_request(),and,teardown_appcontext(),functions are are executed. These\nexecute even if an unhandled exception occurred during dispatch.,,,,Callbacks and Errors,\u00b6,,Flask dispatches a request in multiple stages which can affect the\nrequest, response, and how errors are handled. The contexts are active\nduring all of these stages.,,A,Blueprint,can add handlers for these events that are specific\nto the blueprint. The handlers for a blueprint will run if the blueprint\nowns the route that matches the request.,,,Before each request,,before_request(),functions are\ncalled. If one of these functions return a value, the other\nfunctions are skipped. The return value is treated as the response\nand the view function is not called.,,If the,before_request(),functions did not return a\nresponse, the view function for the matched route is called and\nreturns a response.,,The return value of the view is converted into an actual response\nobject and passed to the,after_request(),functions. Each function returns a modified or new response object.,,After the response is returned, the contexts are popped, which calls\nthe,teardown_request(),and,teardown_appcontext(),functions. These functions are\ncalled even if an unhandled exception was raised at any point above.,,,If an exception is raised before the teardown functions, Flask tries to\nmatch it with an,errorhandler(),function to handle the\nexception and return a response. If no error handler is found, or the\nhandler itself raises an exception, Flask returns a generic,500,,Internal,,Server,,Error,response. The teardown functions are still\ncalled, and are passed the exception object.,,If debug mode is enabled, unhandled exceptions are not converted to a,500,response and instead are propagated to the WSGI server. This\nallows the development server to present the interactive debugger with\nthe traceback.,,,Teardown Callbacks,\u00b6,,The teardown callbacks are independent of the request dispatch, and are\ninstead called by the contexts when they are popped. The functions are\ncalled even if there is an unhandled exception during dispatch, and for\nmanually pushed contexts. This means there is no guarantee that any\nother parts of the request dispatch have run first. Be sure to write\nthese functions in a way that does not depend on other callbacks and\nwill not fail.,,During testing, it can be useful to defer popping the contexts after the\nrequest ends, so that their data can be accessed in the test function.\nUsing the,test_client(),as a,with,block to preserve the\ncontexts until the with block exits.,,from,,flask,,import,,Flask,,,,request,,app,,=,,Flask,(,__name__,),,@app.route,(,'/',),,def,,hello,():,,print,(,'during view',),,return,,'Hello, World!',,@app.teardown_request,,def,,show_teardown,(,exception,):,,print,(,'after with block',),,with,,app,.,test_request_context,():,,print,(,'during with block',),,# teardown functions are called after the context with block exits,,with,,app,.,test_client,():,,client,.,get,(,'/',),,# the contexts are not popped even though the request ended,,print,(,request,.,path,),,# the contexts are popped and teardown functions are called after,,# the client with block exists,,,,,,Signals,\u00b6,,If,signals_available,is true, the following signals are\nsent:,,,request_started,is sent before the,before_request(),functions are called.,,request_finished,is sent after the,after_request(),functions are called.,,got_request_exception,is sent when an exception begins to\nbe handled, but before an,errorhandler(),is looked up or\ncalled.,,request_tearing_down,is sent after the,teardown_request(),functions are called.,,,,,,Context Preservation on Error,\u00b6,,At the end of a request, the request context is popped and all data\nassociated with it is destroyed. If an error occurs during development,\nit is useful to delay destroying the data for debugging purposes.,,When the development server is running in development mode (the,FLASK_ENV,environment variable is set to,'development',), the\nerror and data will be preserved and shown in the interactive debugger.,,This behavior can be controlled with the,PRESERVE_CONTEXT_ON_EXCEPTION,config. As described above, it\ndefaults to,True,in the development environment.,,Do not enable,PRESERVE_CONTEXT_ON_EXCEPTION,in production, as it\nwill cause your application to leak memory on exceptions.,,,,Notes On Proxies,\u00b6,,Some of the objects provided by Flask are proxies to other objects. The\nproxies are accessed in the same way for each worker thread, but\npoint to the unique object bound to each worker behind the scenes as\ndescribed on this page.,,Most of the time you don\u2019t have to care about that, but there are some\nexceptions where it is good to know that this object is an actual proxy:,,,The proxy objects cannot fake their type as the actual object types.\nIf you want to perform instance checks, you have to do that on the\nobject being proxied.,,If the specific object reference is important, for example for\nsending,Signals,or passing data to a background thread.,,,If you need to access the underlying object that is proxied, use the,_get_current_object(),method:,,app,,=,,current_app,.,_get_current_object,(),,my_signal,.,send,(,app,),,,,,,,,,,,,,,,Contents,,,The Request Context,,Purpose of the Context,,Lifetime of the Context,,Manually Push a Context,,How the Context Works,,Callbacks and Errors,,Teardown Callbacks,,Signals,,,,Context Preservation on Error,,Notes On Proxies,,,,,Navigation,,,Overview,,,Previous:,The Application Context,,Next:,Modular Applications with Blueprints,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Larger Applications", "url": "http://flask.pocoo.org/docs/1.0/patterns/packages/", "content": ",,,,,Larger Applications \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,,,,,Larger Applications,\u00b6,,For larger applications it\u2019s a good idea to use a package instead of a\nmodule.  That is quite simple.  Imagine a small application looks like\nthis:,,/,yourapplication,,yourapplication,.,py,,/,static,,style,.,css,,/,templates,,layout,.,html,,index,.,html,,login,.,html,,...,,,,The,tutorial,is structured this way, see the,example code,.,,,Simple Packages,\u00b6,,To convert that into a larger one, just create a new folder,yourapplication,inside the existing one and move everything below it.\nThen rename,yourapplication.py,to,__init__.py,.  (Make sure to delete\nall,.pyc,files first, otherwise things would most likely break),,You should then end up with something like that:,,/,yourapplication,,/,yourapplication,,__init__,.,py,,/,static,,style,.,css,,/,templates,,layout,.,html,,index,.,html,,login,.,html,,...,,,,But how do you run your application now?  The naive,python,,yourapplication/__init__.py,will not work.  Let\u2019s just say that Python\ndoes not want modules in packages to be the startup file.  But that is not\na big problem, just add a new file called,setup.py,next to the inner,yourapplication,folder with the following contents:,,from,,setuptools,,import,,setup,,setup,(,,name,=,'yourapplication',,,,packages,=,[,'yourapplication',],,,include_package_data,=,True,,,,install_requires,=,[,,'flask',,,,],,,),,,,In order to run the application you need to export an environment variable\nthat tells Flask where to find the application instance:,,export,,FLASK_APP,=,yourapplication,,,,If you are outside of the project directory make sure to provide the exact\npath to your application directory. Similarly you can turn on the\ndevelopment features like this:,,export,,FLASK_ENV,=,development,,,,In order to install and run the application you need to issue the following\ncommands:,,pip,,install,,-,e,,.,,flask,,run,,,,What did we gain from this?  Now we can restructure the application a bit\ninto multiple modules.  The only thing you have to remember is the\nfollowing quick checklist:,,,the,Flask,application object creation has to be in the,__init__.py,file.  That way each module can import it safely and the,__name__,variable will resolve to the correct package.,,all the view functions (the ones with a,route(),decorator on top) have to be imported in the,__init__.py,file.\nNot the object itself, but the module it is in. Import the view module,after the application object is created,.,,,Here\u2019s an example,__init__.py,:,,from,,flask,,import,,Flask,,app,,=,,Flask,(,__name__,),,import,,yourapplication.views,,,,And this is what,views.py,would look like:,,from,,yourapplication,,import,,app,,@app,.,route,(,'/',),,def,,index,():,,return,,'Hello World!',,,,You should then end up with something like that:,,/,yourapplication,,setup,.,py,,/,yourapplication,,__init__,.,py,,views,.,py,,/,static,,style,.,css,,/,templates,,layout,.,html,,index,.,html,,login,.,html,,...,,,,,Circular Imports,,Every Python programmer hates them, and yet we just added some:\ncircular imports (That\u2019s when two modules depend on each other.  In this\ncase,views.py,depends on,__init__.py,).  Be advised that this is a\nbad idea in general but here it is actually fine.  The reason for this is\nthat we are not actually using the views in,__init__.py,and just\nensuring the module is imported and we are doing that at the bottom of\nthe file.,,There are still some problems with that approach but if you want to use\ndecorators there is no way around that.  Check out the,Becoming Big,section for some inspiration how to deal with that.,,,,,Working with Blueprints,\u00b6,,If you have larger applications it\u2019s recommended to divide them into\nsmaller groups where each group is implemented with the help of a\nblueprint.  For a gentle introduction into this topic refer to the,Modular Applications with Blueprints,chapter of the documentation.,,,,,,,,,,,,,Contents,,,Larger Applications,,Simple Packages,,Working with Blueprints,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,Patterns for Flask,,Next:,Application Factories,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Using URL Processors", "url": "http://flask.pocoo.org/docs/1.0/patterns/urlprocessors/", "content": ",,,,,Using URL Processors \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,,,,,Using URL Processors,\u00b6,,,Changelog,,New in version 0.7.,,,Flask 0.7 introduces the concept of URL processors.  The idea is that you\nmight have a bunch of resources with common parts in the URL that you\ndon\u2019t always explicitly want to provide.  For instance you might have a\nbunch of URLs that have the language code in it but you don\u2019t want to have\nto handle it in every single function yourself.,,URL processors are especially helpful when combined with blueprints.  We\nwill handle both application specific URL processors here as well as\nblueprint specifics.,,,Internationalized Application URLs,\u00b6,,Consider an application like this:,,from,,flask,,import,,Flask,,,,g,,app,,=,,Flask,(,__name__,),,@app,.,route,(,'/<lang_code>/',),,def,,index,(,lang_code,):,,g,.,lang_code,,=,,lang_code,,...,,@app,.,route,(,'/<lang_code>/about',),,def,,about,(,lang_code,):,,g,.,lang_code,,=,,lang_code,,...,,,,This is an awful lot of repetition as you have to handle the language code\nsetting on the,g,object yourself in every single function.\nSure, a decorator could be used to simplify this, but if you want to\ngenerate URLs from one function to another you would have to still provide\nthe language code explicitly which can be annoying.,,For the latter, this is where,url_defaults(),functions\ncome in.  They can automatically inject values into a call for,url_for(),automatically.  The code below checks if the\nlanguage code is not yet in the dictionary of URL values and if the\nendpoint wants a value named,'lang_code',:,,@app,.,url_defaults,,def,,add_language_code,(,endpoint,,,,values,):,,if,,'lang_code',,in,,values,,or,,not,,g,.,lang_code,:,,return,,if,,app,.,url_map,.,is_endpoint_expecting,(,endpoint,,,,'lang_code',):,,values,[,'lang_code',],,=,,g,.,lang_code,,,,The method,is_endpoint_expecting(),of the URL\nmap can be used to figure out if it would make sense to provide a language\ncode for the given endpoint.,,The reverse of that function are,url_value_preprocessor(),s.  They are executed right\nafter the request was matched and can execute code based on the URL\nvalues.  The idea is that they pull information out of the values\ndictionary and put it somewhere else:,,@app,.,url_value_preprocessor,,def,,pull_lang_code,(,endpoint,,,,values,):,,g,.,lang_code,,=,,values,.,pop,(,'lang_code',,,,None,),,,,That way you no longer have to do the,lang_code,assignment to,g,in every function.  You can further improve that by\nwriting your own decorator that prefixes URLs with the language code, but\nthe more beautiful solution is using a blueprint.  Once the,'lang_code',is popped from the values dictionary and it will no longer\nbe forwarded to the view function reducing the code to this:,,from,,flask,,import,,Flask,,,,g,,app,,=,,Flask,(,__name__,),,@app,.,url_defaults,,def,,add_language_code,(,endpoint,,,,values,):,,if,,'lang_code',,in,,values,,or,,not,,g,.,lang_code,:,,return,,if,,app,.,url_map,.,is_endpoint_expecting,(,endpoint,,,,'lang_code',):,,values,[,'lang_code',],,=,,g,.,lang_code,,@app,.,url_value_preprocessor,,def,,pull_lang_code,(,endpoint,,,,values,):,,g,.,lang_code,,=,,values,.,pop,(,'lang_code',,,,None,),,@app,.,route,(,'/<lang_code>/',),,def,,index,():,,...,,@app,.,route,(,'/<lang_code>/about',),,def,,about,():,,...,,,,,,Internationalized Blueprint URLs,\u00b6,,Because blueprints can automatically prefix all URLs with a common string\nit\u2019s easy to automatically do that for every function.  Furthermore\nblueprints can have per-blueprint URL processors which removes a whole lot\nof logic from the,url_defaults(),function because it no\nlonger has to check if the URL is really interested in a,'lang_code',parameter:,,from,,flask,,import,,Blueprint,,,,g,,bp,,=,,Blueprint,(,'frontend',,,,__name__,,,,url_prefix,=,'/<lang_code>',),,@bp,.,url_defaults,,def,,add_language_code,(,endpoint,,,,values,):,,values,.,setdefault,(,'lang_code',,,,g,.,lang_code,),,@bp,.,url_value_preprocessor,,def,,pull_lang_code,(,endpoint,,,,values,):,,g,.,lang_code,,=,,values,.,pop,(,'lang_code',),,@bp,.,route,(,'/',),,def,,index,():,,...,,@bp,.,route,(,'/about',),,def,,about,():,,...,,,,,,,,,,,,,,,Contents,,,Using URL Processors,,Internationalized Application URLs,,Internationalized Blueprint URLs,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,Implementing API Exceptions,,Next:,Deploying with Setuptools,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Application Errors", "url": "http://flask.pocoo.org/docs/1.0/errorhandling/", "content": ",,,,,Application Errors \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,,,,,,,,Application Errors,\u00b6,,,Changelog,,New in version 0.3.,,,Applications fail, servers fail.  Sooner or later you will see an exception\nin production.  Even if your code is 100% correct, you will still see\nexceptions from time to time.  Why?  Because everything else involved will\nfail.  Here are some situations where perfectly fine code can lead to server\nerrors:,,,the client terminated the request early and the application was still\nreading from the incoming data,,the database server was overloaded and could not handle the query,,a filesystem is full,,a harddrive crashed,,a backend server overloaded,,a programming error in a library you are using,,network connection of the server to another system failed,,,And that\u2019s just a small sample of issues you could be facing.  So how do we\ndeal with that sort of problem?  By default if your application runs in\nproduction mode, Flask will display a very simple page for you and log the\nexception to the,logger,.,,But there is more you can do, and we will cover some better setups to deal\nwith errors.,,,Error Logging Tools,\u00b6,,Sending error mails, even if just for critical ones, can become\noverwhelming if enough users are hitting the error and log files are\ntypically never looked at. This is why we recommend using,Sentry,for dealing with application errors.  It\u2019s\navailable as an Open Source project,on GitHub,and is also available as a,hosted version,which you can try for free. Sentry\naggregates duplicate errors, captures the full stack trace and local\nvariables for debugging, and sends you mails based on new errors or\nfrequency thresholds.,,To use Sentry you need to install the,raven,client with extra,flask,dependencies:,,$ pip install raven[flask],,,And then add this to your Flask app:,,from,,raven.contrib.flask,,import,,Sentry,,sentry,,=,,Sentry,(,app,,,,dsn,=,'YOUR_DSN_HERE',),,,,Or if you are using factories you can also init it later:,,from,,raven.contrib.flask,,import,,Sentry,,sentry,,=,,Sentry,(,dsn,=,'YOUR_DSN_HERE',),,def,,create_app,():,,app,,=,,Flask,(,__name__,),,sentry,.,init_app,(,app,),,...,,return,,app,,,,The,YOUR_DSN_HERE,value needs to be replaced with the DSN value you get\nfrom your Sentry installation.,,Afterwards failures are automatically reported to Sentry and from there\nyou can receive error notifications.,,,,Error handlers,\u00b6,,You might want to show custom error pages to the user when an error occurs.\nThis can be done by registering error handlers.,,An error handler is a normal view function that return a response, but instead\nof being registered for a route, it is registered for an exception or HTTP\nstatus code that would is raised while trying to handle a request.,,,Registering,\u00b6,,Register handlers by decorating a function with,errorhandler(),. Or use,register_error_handler(),to register the function later.\nRemember to set the error code when returning the response.,,@app,.,errorhandler,(,werkzeug,.,exceptions,.,BadRequest,),,def,,handle_bad_request,(,e,):,,return,,'bad request!',,,,400,,# or, without the decorator,,app,.,register_error_handler,(,400,,,,handle_bad_request,),,,,werkzeug.exceptions.HTTPException,subclasses like,BadRequest,and their HTTP codes are interchangeable\nwhen registering handlers. (,BadRequest.code,,==,,400,),,Non-standard HTTP codes cannot be registered by code because they are not known\nby Werkzeug. Instead, define a subclass of,HTTPException,with the appropriate code and\nregister and raise that exception class.,,class,,InsufficientStorage,(,werkzeug,.,exceptions,.,HTTPException,):,,code,,=,,507,,description,,=,,'Not enough storage space.',,app,.,register_error_handler,(,InsuffcientStorage,,,,handle_507,),,raise,,InsufficientStorage,(),,,,Handlers can be registered for any exception class, not just,HTTPException,subclasses or HTTP status\ncodes. Handlers can be registered for a specific class, or for all subclasses\nof a parent class.,,,,Handling,\u00b6,,When an exception is caught by Flask while handling a request, it is first\nlooked up by code. If no handler is registered for the code, it is looked up\nby its class hierarchy; the most specific handler is chosen. If no handler is\nregistered,,HTTPException,subclasses show a\ngeneric message about their code, while other exceptions are converted to a\ngeneric 500 Internal Server Error.,,For example, if an instance of,ConnectionRefusedError,is raised, and a handler\nis registered for,ConnectionError,and,ConnectionRefusedError,,\nthe more specific,ConnectionRefusedError,handler is called with the\nexception instance to generate the response.,,Handlers registered on the blueprint take precedence over those registered\nglobally on the application, assuming a blueprint is handling the request that\nraises the exception. However, the blueprint cannot handle 404 routing errors\nbecause the 404 occurs at the routing level before the blueprint can be\ndetermined.,,,Changelog,,Changed in version 0.11:,Handlers are prioritized by specificity of the exception classes they are\nregistered for instead of the order they are registered in.,,,,,,Logging,\u00b6,,See,Logging,for information on how to log exceptions, such as by\nemailing them to admins.,,,,,Debugging Application Errors,\u00b6,,For production applications, configure your application with logging and\nnotifications as described in,Application Errors,.  This section provides\npointers when debugging deployment configuration and digging deeper with a\nfull-featured Python debugger.,,,When in Doubt, Run Manually,\u00b6,,Having problems getting your application configured for production?  If you\nhave shell access to your host, verify that you can run your application\nmanually from the shell in the deployment environment.  Be sure to run under\nthe same user account as the configured deployment to troubleshoot permission\nissues.  You can use Flask\u2019s builtin development server with,debug=True,on\nyour production host, which is helpful in catching configuration issues, but,be sure to do this temporarily in a controlled environment.,Do not run in\nproduction with,debug=True,.,,,,Working with Debuggers,\u00b6,,To dig deeper, possibly to trace code execution, Flask provides a debugger out\nof the box (see,Debug Mode,).  If you would like to use another Python\ndebugger, note that debuggers interfere with each other.  You have to set some\noptions in order to use your favorite debugger:,,,debug,- whether to enable debug mode and catch exceptions,,use_debugger,- whether to use the internal Flask debugger,,use_reloader,- whether to reload and fork the process on exception,,,debug,must be True (i.e., exceptions must be caught) in order for the other\ntwo options to have any value.,,If you\u2019re using Aptana/Eclipse for debugging you\u2019ll need to set both,use_debugger,and,use_reloader,to False.,,A possible useful pattern for configuration is to set the following in your\nconfig.yaml (change the block as appropriate for your application, of course):,,FLASK,:,,DEBUG,:,,True,,DEBUG_WITH_APTANA,:,,True,,,,Then in your application\u2019s entry-point (main.py), you could have something like:,,if,,__name__,,==,,\"__main__\",:,,# To allow aptana to receive errors, set use_debugger=False,,app,,=,,create_app,(,config,=,\"config.yaml\",),,if,,app,.,debug,:,,use_debugger,,=,,True,,try,:,,# Disable Flask's debugger if external debugger is requested,,use_debugger,,=,,not,(,app,.,config,.,get,(,'DEBUG_WITH_APTANA',)),,except,:,,pass,,app,.,run,(,use_debugger,=,use_debugger,,,,debug,=,app,.,debug,,,,use_reloader,=,use_debugger,,,,host,=,'0.0.0.0',),,,,,,,,,,,,,,,Contents,,,Application Errors,,Error Logging Tools,,Error handlers,,Registering,,Handling,,,,Logging,,,,Debugging Application Errors,,When in Doubt, Run Manually,,Working with Debuggers,,,,,Navigation,,,Overview,,,Previous:,Testing Flask Applications,,Next:,Logging,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Using SQLite 3 with Flask", "url": "http://flask.pocoo.org/docs/1.0/patterns/sqlite3/", "content": ",,,,,Using SQLite 3 with Flask \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,,,,,Using SQLite 3 with Flask,\u00b6,,In Flask you can easily implement the opening of database connections on\ndemand and closing them when the context dies (usually at the end of the\nrequest).,,Here is a simple example of how you can use SQLite 3 with Flask:,,import,,sqlite3,,from,,flask,,import,,g,,DATABASE,,=,,'/path/to/database.db',,def,,get_db,():,,db,,=,,getattr,(,g,,,,'_database',,,,None,),,if,,db,,is,,None,:,,db,,=,,g,.,_database,,=,,sqlite3,.,connect,(,DATABASE,),,return,,db,,@app,.,teardown_appcontext,,def,,close_connection,(,exception,):,,db,,=,,getattr,(,g,,,,'_database',,,,None,),,if,,db,,is,,not,,None,:,,db,.,close,(),,,,Now, to use the database, the application must either have an active\napplication context (which is always true if there is a request in flight)\nor create an application context itself.  At that point the,get_db,function can be used to get the current database connection.  Whenever the\ncontext is destroyed the database connection will be terminated.,,Note: if you use Flask 0.9 or older you need to use,flask._app_ctx_stack.top,instead of,g,as the,flask.g,object was bound to the request and not application context.,,Example:,,@app,.,route,(,'/',),,def,,index,():,,cur,,=,,get_db,(),.,cursor,(),,...,,,,,Note,,Please keep in mind that the teardown request and appcontext functions\nare always executed, even if a before-request handler failed or was\nnever executed.  Because of this we have to make sure here that the\ndatabase is there before we close it.,,,,Connect on Demand,\u00b6,,The upside of this approach (connecting on first use) is that this will\nonly open the connection if truly necessary.  If you want to use this\ncode outside a request context you can use it in a Python shell by opening\nthe application context by hand:,,with,,app,.,app_context,():,,# now you can use get_db(),,,,,,Easy Querying,\u00b6,,Now in each request handling function you can access,get_db(),to get the\ncurrent open database connection.  To simplify working with SQLite, a\nrow factory function is useful.  It is executed for every result returned\nfrom the database to convert the result.  For instance, in order to get\ndictionaries instead of tuples, this could be inserted into the,get_db,function we created above:,,def,,make_dicts,(,cursor,,,,row,):,,return,,dict,((,cursor,.,description,[,idx,][,0,],,,value,),,for,,idx,,,,value,,in,,enumerate,(,row,)),,db,.,row_factory,,=,,make_dicts,,,,This will make the sqlite3 module return dicts for this database connection, which are much nicer to deal with. Even more simply, we could place this in,get_db,instead:,,db,.,row_factory,,=,,sqlite3,.,Row,,,,This would use Row objects rather than dicts to return the results of queries. These are,namedtuple,s, so we can access them either by index or by key. For example, assuming we have a,sqlite3.Row,called,r,for the rows,id,,,FirstName,,,LastName,, and,MiddleInitial,:,,>>>,# You can get values based on the row's name,,>>>,r,[,'FirstName',],,John,,>>>,# Or, you can get them based on index,,>>>,r,[,1,],,John,,# Row objects are also iterable:,,>>>,for,,value,,in,,r,:,,...,,print,(,value,),,1,,John,,Doe,,M,,,,Additionally, it is a good idea to provide a query function that combines\ngetting the cursor, executing and fetching the results:,,def,,query_db,(,query,,,,args,=,(),,,one,=,False,):,,cur,,=,,get_db,(),.,execute,(,query,,,,args,),,rv,,=,,cur,.,fetchall,(),,cur,.,close,(),,return,,(,rv,[,0,],,if,,rv,,else,,None,),,if,,one,,else,,rv,,,,This handy little function, in combination with a row factory, makes\nworking with the database much more pleasant than it is by just using the\nraw cursor and connection objects.,,Here is how you can use it:,,for,,user,,in,,query_db,(,'select * from users',):,,print,,user,[,'username',],,,'has the id',,,,user,[,'user_id',],,,,Or if you just want a single result:,,user,,=,,query_db,(,'select * from users where username = ?',,,,[,the_username,],,,one,=,True,),,if,,user,,is,,None,:,,print,,'No such user',,else,:,,print,,the_username,,,,'has the id',,,,user,[,'user_id',],,,,To pass variable parts to the SQL statement, use a question mark in the\nstatement and pass in the arguments as a list.  Never directly add them to\nthe SQL statement with string formatting because this makes it possible\nto attack the application using,SQL Injections,.,,,,Initial Schemas,\u00b6,,Relational databases need schemas, so applications often ship a,schema.sql,file that creates the database.  It\u2019s a good idea to provide\na function that creates the database based on that schema.  This function\ncan do that for you:,,def,,init_db,():,,with,,app,.,app_context,():,,db,,=,,get_db,(),,with,,app,.,open_resource,(,'schema.sql',,,,mode,=,'r',),,as,,f,:,,db,.,cursor,(),.,executescript,(,f,.,read,()),,db,.,commit,(),,,,You can then create such a database from the Python shell:,,>>>,from,,yourapplication,,import,,init_db,,>>>,init_db,(),,,,,,,,,,,,,,,Contents,,,Using SQLite 3 with Flask,,Connect on Demand,,Easy Querying,,Initial Schemas,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,Deploying with Fabric,,Next:,SQLAlchemy in Flask,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/105/", "content": "Using Context Globals with Gevent-Socketio | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Using Context Globals with Gevent-Socketio,,Posted by Tron Paul\n    on 2012-12-17 @ 06:52\n    and filed in,Utilities,,When using Gevent-Socketio, context globals are popped once the original non-websocket request is closed, after,socketio_manage,is called.  This can be solved without any changes to Flask or Gevent-Socketio.,,First pass the real request into,socketio_manage,,from,,socketio,,import,,socketio_manage,,@app.route,(,'/socket.io/<path:path>',),,def,,run_socketio,(,path,):,,real_request,,=,,request,.,_get_current_object,(),,socketio_manage,(,request,.,environ,,,,{,'',:,,FlaskNamespace,},,,request,=,real_request,),,return,,Response,(),,,Now manually create and destroy contexts inside the namespace,,from,,socketio.namespace,,import,,BaseNamespace,,class,,FlaskNamespace,(,BaseNamespace,):,,def,,__init__,(,self,,,,*,args,,,,**,kwargs,):,,request,,=,,kwargs,.,get,(,'request',,,,None,),,self,.,ctx,,=,,None,,if,,request,:,,self,.,ctx,,=,,current_app,.,request_context,(,request,.,environ,),,self,.,ctx,.,push,(),,current_app,.,preprocess_request,(),,del,,kwargs,[,'request',],,super,(,BaseNamespace,,,,self,),.,__init__,(,*,args,,,,**,kwargs,),,def,,disconnect,(,self,,,,*,args,,,,**,kwargs,):,,if,,self,.,ctx,:,,self,.,ctx,.,pop,(),,super,(,BaseNamespace,,,,self,),.,disconnect,(,*,args,,,,**,kwargs,),,,From here all of our,on_*,methods in,FlaskNamespace,will be able to access,request,,,g,and other context globals.,,One remaining issue is that stale sockets, or sockets that don't disconnect when your application restarts, will raise an error on disconnecting since their request does not exist.  Once I get around to finding a solution I will post it.,,This snippet by Tron Paul can be used freely for\n    anything you like. Consider it public domain.,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/32/", "content": "Upload a StringIO object with send_file | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Upload a StringIO object with send_file,,Posted by Stephane Wirtel\n    on 2010-07-07 @ 21:57\n    and filed in,Utilities,,Sometimes, you want to avoid the creation of a file to send this file to the client.,,So, in this case, you can use a StringIO object with the send_file helper.,,Here is an example:,,#!/usr/bin/env python,,# Thanks to Dan Jacob for a part of the code !,,from,,flask,,import,,Flask,,,,send_file,,import,,StringIO,,app,,=,,Flask,(,__name__,),,@app.route,(,'/',),,def,,index,():,,strIO,,=,,StringIO,.,StringIO,(),,strIO,.,write,(,'Hello from Dan Jacob and Stephane Wirtel !',),,strIO,.,seek,(,0,),,return,,send_file,(,strIO,,,,attachment_filename,=,\"testing.txt\",,,,as_attachment,=,True,),,app,.,run,(,debug,=,True,),,,This snippet by Stephane Wirtel can be used freely for\n    anything you like. Consider it public domain.,,,Comments,,,,Unicode caution\n          by Jason H\n          on 2013-05-23 @ 18:49,If generating a text variable to pass to strIO.write(), it just be of type \"str\" in order for send_file to accept it.  If your text variable is type(txtVar) == \"<type 'unicode'>\", you will need to cast it: strIO.write(str(txtVar)).,,Otherwise, you'll get an error like: \n127.0.0.1 - - [23/May/2013 12:48:15] \"POST /een HTTP/1.1\" 200 -\nError on request:\nTraceback (most recent call last):\n  File \"C:\\Python27\\lib\\site-packages\\werkzeug\\serving.py\", line 159, in run_wsgi\n    execute(app)\n  File \"C:\\Python27\\lib\\site-packages\\werkzeug\\serving.py\", line 149, in execute\n    write(data)\n  File \"C:\\Python27\\lib\\site-packages\\werkzeug\\serving.py\", line 129, in write\n    assert type(data) is str, 'applications must write bytes'\nAssertionError: applications must write bytes,,,,Comment\n          by V.E.O\n          on 2014-01-16 @ 18:35,Better not use StringIO send_file through WSGI.\nsend_file use X-SendFile header to tell http front-end server to do sending data process.\nIf use StringIO, send_file will not use it.\nSo Werkzeug cost a lot of CPU to serve data transfer.,,,,Py3 and BytesIO\n          by Laurent Mazuel\n          on 2014-07-31 @ 20:07,In Python 3, you have to use BytesIO. In addition, BytesIO can take your bytes directly while creating the object, no need to \"write/seek\",,from io import BytesIO,,return send_file(BytesIO(mybytes),....,,,,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "Message Flashing", "url": "http://flask.pocoo.org/docs/1.0/patterns/flashing/", "content": ",,,,,Message Flashing \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,,,,,Message Flashing,\u00b6,,Good applications and user interfaces are all about feedback.  If the user\ndoes not get enough feedback they will probably end up hating the\napplication.  Flask provides a really simple way to give feedback to a\nuser with the flashing system.  The flashing system basically makes it\npossible to record a message at the end of a request and access it next\nrequest and only next request.  This is usually combined with a layout\ntemplate that does this. Note that browsers and sometimes web servers enforce\na limit on cookie sizes. This means that flashing messages that are too\nlarge for session cookies causes message flashing to fail silently.,,,Simple Flashing,\u00b6,,So here is a full example:,,from,,flask,,import,,Flask,,,,flash,,,,redirect,,,,render_template,,,\\,request,,,,url_for,,app,,=,,Flask,(,__name__,),,app,.,secret_key,,=,,b,'_5#y2L\"F4Q8z,\\n\\xec,]/',,@app,.,route,(,'/',),,def,,index,():,,return,,render_template,(,'index.html',),,@app,.,route,(,'/login',,,,methods,=,[,'GET',,,,'POST',]),,def,,login,():,,error,,=,,None,,if,,request,.,method,,==,,'POST',:,,if,,request,.,form,[,'username',],,!=,,'admin',,or,\\,request,.,form,[,'password',],,!=,,'secret',:,,error,,=,,'Invalid credentials',,else,:,,flash,(,'You were successfully logged in',),,return,,redirect,(,url_for,(,'index',)),,return,,render_template,(,'login.html',,,,error,=,error,),,,,And here is the,layout.html,template which does the magic:,,<!doctype html>,,<,title,>,My Application,</,title,>,,{%,,with,,messages,,=,,get_flashed_messages,(),,%},,{%,,if,,messages,,%},,<,ul,,class,=,flashes,>,,{%,,for,,message,,in,,messages,,%},,<,li,>,{{,,message,,}},</,li,>,,{%,,endfor,,%},,</,ul,>,,{%,,endif,,%},,{%,,endwith,,%},,{%,,block,,body,,%}{%,,endblock,,%},,,,Here is the,index.html,template which inherits from,layout.html,:,,{%,,extends,,\"layout.html\",,%},,{%,,block,,body,,%},,<,h1,>,Overview,</,h1,>,,<,p,>,Do you want to,<,a,,href,=,\",{{,,url_for,(,'login',),,}},\",>,log in?,</,a,>,,{%,,endblock,,%},,,,And here is the,login.html,template which also inherits from,layout.html,:,,{%,,extends,,\"layout.html\",,%},,{%,,block,,body,,%},,<,h1,>,Login,</,h1,>,,{%,,if,,error,,%},,<,p,,class,=,error,><,strong,>,Error:,</,strong,>,,{{,,error,,}},,{%,,endif,,%},,<,form,,method,=,post,>,,<,dl,>,,<,dt,>,Username:,<,dd,><,input,,type,=,text,,name,=,username,,value,=,\",{{,,request.form.username,,}},\",>,,<,dt,>,Password:,<,dd,><,input,,type,=,password,,name,=,password,>,,</,dl,>,,<,p,><,input,,type,=,submit,,value,=,Login,>,,</,form,>,,{%,,endblock,,%},,,,,,Flashing With Categories,\u00b6,,,Changelog,,New in version 0.3.,,,It is also possible to provide categories when flashing a message.  The\ndefault category if nothing is provided is,'message',.  Alternative\ncategories can be used to give the user better feedback.  For example\nerror messages could be displayed with a red background.,,To flash a message with a different category, just use the second argument\nto the,flash(),function:,,flash,(,u,'Invalid password provided',,,,'error',),,,,Inside the template you then have to tell the,get_flashed_messages(),function to also return the\ncategories.  The loop looks slightly different in that situation then:,,{%,,with,,messages,,=,,get_flashed_messages,(,with_categories,=,true,),,%},,{%,,if,,messages,,%},,<,ul,,class,=,flashes,>,,{%,,for,,category,,,,message,,in,,messages,,%},,<,li,,class,=,\",{{,,category,,}},\",>,{{,,message,,}},</,li,>,,{%,,endfor,,%},,</,ul,>,,{%,,endif,,%},,{%,,endwith,,%},,,,This is just one example of how to render these flashed messages.  One\nmight also use the category to add a prefix such as,<strong>Error:</strong>,to the message.,,,,Filtering Flash Messages,\u00b6,,,Changelog,,New in version 0.9.,,,Optionally you can pass a list of categories which filters the results of,get_flashed_messages(),.  This is useful if you wish to\nrender each category in a separate block.,,{%,,with,,errors,,=,,get_flashed_messages,(,category_filter,=[,\"error\",]),,%},,{%,,if,,errors,,%},,<,div,,class,=,\"alert-message block-message error\",>,,<,a,,class,=,\"close\",,href,=,\"#\",>,\u00d7,</,a,>,,<,ul,>,,{%,-,for,,msg,,in,,errors,,%},,<,li,>,{{,,msg,,}},</,li,>,,{%,,endfor,-,%},,</,ul,>,,</,div,>,,{%,,endif,,%},,{%,,endwith,,%},,,,,,,,,,,,,,,Contents,,,Message Flashing,,Simple Flashing,,Flashing With Categories,,Filtering Flash Messages,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,Template Inheritance,,Next:,AJAX with jQuery,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Streaming Contents", "url": "http://flask.pocoo.org/docs/1.0/patterns/streaming/", "content": ",,,,,Streaming Contents \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,,,,,Streaming Contents,\u00b6,,Sometimes you want to send an enormous amount of data to the client, much\nmore than you want to keep in memory.  When you are generating the data on\nthe fly though, how do you send that back to the client without the\nroundtrip to the filesystem?,,The answer is by using generators and direct responses.,,,Basic Usage,\u00b6,,This is a basic view function that generates a lot of CSV data on the fly.\nThe trick is to have an inner function that uses a generator to generate\ndata and to then invoke that function and pass it to a response object:,,from,,flask,,import,,Response,,@app,.,route,(,'/large.csv',),,def,,generate_large_csv,():,,def,,generate,():,,for,,row,,in,,iter_all_rows,():,,yield,,',',.,join,(,row,),,+,,',\\n,',,return,,Response,(,generate,(),,,mimetype,=,'text/csv',),,,,Each,yield,expression is directly sent to the browser.  Note though\nthat some WSGI middlewares might break streaming, so be careful there in\ndebug environments with profilers and other things you might have enabled.,,,,Streaming from Templates,\u00b6,,The Jinja2 template engine also supports rendering templates piece by\npiece.  This functionality is not directly exposed by Flask because it is\nquite uncommon, but you can easily do it yourself:,,from,,flask,,import,,Response,,def,,stream_template,(,template_name,,,,**,context,):,,app,.,update_template_context,(,context,),,t,,=,,app,.,jinja_env,.,get_template,(,template_name,),,rv,,=,,t,.,stream,(,context,),,rv,.,enable_buffering,(,5,),,return,,rv,,@app,.,route,(,'/my-large-page.html',),,def,,render_large_template,():,,rows,,=,,iter_all_rows,(),,return,,Response,(,stream_template,(,'the_template.html',,,,rows,=,rows,)),,,,The trick here is to get the template object from the Jinja2 environment\non the application and to call,stream(),instead of,render(),which returns a stream object instead of a\nstring.  Since we\u2019re bypassing the Flask template render functions and\nusing the template object itself we have to make sure to update the render\ncontext ourselves by calling,update_template_context(),.\nThe template is then evaluated as the stream is iterated over.  Since each\ntime you do a yield the server will flush the content to the client you\nmight want to buffer up a few items in the template which you can do with,rv.enable_buffering(size),.,5,is a sane default.,,,,Streaming with Context,\u00b6,,,Changelog,,New in version 0.9.,,,Note that when you stream data, the request context is already gone the\nmoment the function executes.  Flask 0.9 provides you with a helper that\ncan keep the request context around during the execution of the\ngenerator:,,from,,flask,,import,,stream_with_context,,,,request,,,,Response,,@app,.,route,(,'/stream',),,def,,streamed_response,():,,def,,generate,():,,yield,,'Hello ',,yield,,request,.,args,[,'name',],,yield,,'!',,return,,Response,(,stream_with_context,(,generate,())),,,,Without the,stream_with_context(),function you would get a,RuntimeError,at that point.,,,,,,,,,,,,,Contents,,,Streaming Contents,,Basic Usage,,Streaming from Templates,,Streaming with Context,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,Adding a favicon,,Next:,Deferred Request Callbacks,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/118/", "content": "Stream Proxy with Requests | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Stream Proxy with Requests,,Posted by Zeray Rice\n    on 2013-11-15 @ 19:19\n    and filed in,Utilities,,# -*- coding: utf-8 -*-,,from,,flask,,import,,Flask,,from,,flask,,import,,Response,,from,,flask,,import,,stream_with_context,,import,,requests,,app,,=,,Flask,(,__name__,),,@app.route,(,'/<path:url>',),,def,,home,(,url,):,,req,,=,,requests,.,get,(,url,,,,stream,,=,,True,),,return,,Response,(,stream_with_context,(,req,.,iter_content,()),,,content_type,,=,,req,.,headers,[,'content-type',]),,if,,__name__,,==,,'__main__',:,,app,.,run,(),,,This snippet by Zeray Rice can be used freely for\n    anything you like. Consider it public domain.,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/67/", "content": "Shutdown The Simple Server | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Shutdown The Simple Server,,Posted by Armin Ronacher\n    on 2011-08-29 @ 10:14\n    and filed in,Utilities,,The Werkzeug server that is used by the,app.run(),command can be shut down starting with Werkzeug 0.8.  This can be helpful for small applications that should serve as a frontend to a simple library on a user's computer.,,from,,flask,,import,,request,,def,,shutdown_server,():,,func,,=,,request,.,environ,.,get,(,'werkzeug.server.shutdown',),,if,,func,,is,,None,:,,raise,,RuntimeError,(,'Not running with the Werkzeug Server',),,func,(),,,Now you can shutdown the server by calling this function:,,@app.route,(,'/shutdown',,,,methods,=,[,'POST',]),,def,,shutdown,():,,shutdown_server,(),,return,,'Server shutting down...',,,The shutdown functionality is written in a way that the server will finish handling the current request and then stop.,,This snippet by Armin Ronacher can be used freely for\n    anything you like. Consider it public domain.,,,Comments,,,,Comment\n          by Alexey Sakharov\n          on 2014-01-13 @ 12:42,Is it possible to shutdown server without request object?\nWhy an application has a run(...) method, but hasn't stop()? Due to difficulties with reloader?,,,,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "Uploading Files", "url": "http://flask.pocoo.org/docs/1.0/patterns/fileuploads/", "content": ",,,,,Uploading Files \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,,,,,Uploading Files,\u00b6,,Ah yes, the good old problem of file uploads.  The basic idea of file\nuploads is actually quite simple.  It basically works like this:,,,A,<form>,tag is marked with,enctype=multipart/form-data,and an,<input,,type=file>,is placed in that form.,,The application accesses the file from the,files,dictionary on the request object.,,use the,save(),method of the file to save\nthe file permanently somewhere on the filesystem.,,,,A Gentle Introduction,\u00b6,,Let\u2019s start with a very basic application that uploads a file to a\nspecific upload folder and displays a file to the user.  Let\u2019s look at the\nbootstrapping code for our application:,,import,,os,,from,,flask,,import,,Flask,,,,flash,,,,request,,,,redirect,,,,url_for,,from,,werkzeug.utils,,import,,secure_filename,,UPLOAD_FOLDER,,=,,'/path/to/the/uploads',,ALLOWED_EXTENSIONS,,=,,set,([,'txt',,,,'pdf',,,,'png',,,,'jpg',,,,'jpeg',,,,'gif',]),,app,,=,,Flask,(,__name__,),,app,.,config,[,'UPLOAD_FOLDER',],,=,,UPLOAD_FOLDER,,,,So first we need a couple of imports.  Most should be straightforward, the,werkzeug.secure_filename(),is explained a little bit later.  The,UPLOAD_FOLDER,is where we will store the uploaded files and the,ALLOWED_EXTENSIONS,is the set of allowed file extensions.,,Why do we limit the extensions that are allowed?  You probably don\u2019t want\nyour users to be able to upload everything there if the server is directly\nsending out the data to the client.  That way you can make sure that users\nare not able to upload HTML files that would cause XSS problems (see,Cross-Site Scripting (XSS),).  Also make sure to disallow,.php,files if the server\nexecutes them, but who has PHP installed on their server, right?  :),,Next the functions that check if an extension is valid and that uploads\nthe file and redirects the user to the URL for the uploaded file:,,def,,allowed_file,(,filename,):,,return,,'.',,in,,filename,,and,\\,filename,.,rsplit,(,'.',,,,1,)[,1,],.,lower,(),,in,,ALLOWED_EXTENSIONS,,@app,.,route,(,'/',,,,methods,=,[,'GET',,,,'POST',]),,def,,upload_file,():,,if,,request,.,method,,==,,'POST',:,,# check if the post request has the file part,,if,,'file',,not,,in,,request,.,files,:,,flash,(,'No file part',),,return,,redirect,(,request,.,url,),,file,,=,,request,.,files,[,'file',],,# if user does not select file, browser also,,# submit an empty part without filename,,if,,file,.,filename,,==,,'',:,,flash,(,'No selected file',),,return,,redirect,(,request,.,url,),,if,,file,,and,,allowed_file,(,file,.,filename,):,,filename,,=,,secure_filename,(,file,.,filename,),,file,.,save,(,os,.,path,.,join,(,app,.,config,[,'UPLOAD_FOLDER',],,,filename,)),,return,,redirect,(,url_for,(,'uploaded_file',,,,filename,=,filename,)),,return,,''',,<!doctype html>,,<title>Upload new File</title>,,<h1>Upload new File</h1>,,<form method=post enctype=multipart/form-data>,,<input type=file name=file>,,<input type=submit value=Upload>,,</form>,,''',,,,So what does that,secure_filename(),function actually do?\nNow the problem is that there is that principle called \u201cnever trust user\ninput\u201d.  This is also true for the filename of an uploaded file.  All\nsubmitted form data can be forged, and filenames can be dangerous.  For\nthe moment just remember: always use that function to secure a filename\nbefore storing it directly on the filesystem.,,,Information for the Pros,,So you\u2019re interested in what that,secure_filename(),function does and what the problem is if you\u2019re not using it?  So just\nimagine someone would send the following information as,filename,to\nyour application:,,filename,,=,,\"../../../../home/username/.bashrc\",,,,Assuming the number of,../,is correct and you would join this with\nthe,UPLOAD_FOLDER,the user might have the ability to modify a file on\nthe server\u2019s filesystem he or she should not modify.  This does require some\nknowledge about how the application looks like, but trust me, hackers\nare patient :),,Now let\u2019s look how that function works:,,>>>,secure_filename,(,'../../../../home/username/.bashrc',),,'home_username_.bashrc',,,,,Now one last thing is missing: the serving of the uploaded files. In the,upload_file(),we redirect the user to,url_for('uploaded_file',,,filename=filename),, that is,,/uploads/filename,.\nSo we write the,uploaded_file(),function to return the file of that name. As\nof Flask 0.5 we can use a function that does that for us:,,from,,flask,,import,,send_from_directory,,@app,.,route,(,'/uploads/<filename>',),,def,,uploaded_file,(,filename,):,,return,,send_from_directory,(,app,.,config,[,'UPLOAD_FOLDER',],,,filename,),,,,Alternatively you can register,uploaded_file,as,build_only,rule and\nuse the,SharedDataMiddleware,.  This also works with\nolder versions of Flask:,,from,,werkzeug,,import,,SharedDataMiddleware,,app,.,add_url_rule,(,'/uploads/<filename>',,,,'uploaded_file',,,,build_only,=,True,),,app,.,wsgi_app,,=,,SharedDataMiddleware,(,app,.,wsgi_app,,,,{,,'/uploads',:,,app,.,config,[,'UPLOAD_FOLDER',],,}),,,,If you now run the application everything should work as expected.,,,,Improving Uploads,\u00b6,,,Changelog,,New in version 0.6.,,,So how exactly does Flask handle uploads?  Well it will store them in the\nwebserver\u2019s memory if the files are reasonable small otherwise in a\ntemporary location (as returned by,tempfile.gettempdir(),).  But how\ndo you specify the maximum file size after which an upload is aborted?  By\ndefault Flask will happily accept file uploads to an unlimited amount of\nmemory, but you can limit that by setting the,MAX_CONTENT_LENGTH,config key:,,from,,flask,,import,,Flask,,,,Request,,app,,=,,Flask,(,__name__,),,app,.,config,[,'MAX_CONTENT_LENGTH',],,=,,16,,*,,1024,,*,,1024,,,,The code above will limit the maximum allowed payload to 16 megabytes.\nIf a larger file is transmitted, Flask will raise a,RequestEntityTooLarge,exception.,,,Connection Reset Issue,,When using the local development server, you may get a connection\nreset error instead of a 413 response. You will get the correct\nstatus response when running the app with a production WSGI server.,,,This feature was added in Flask 0.6 but can be achieved in older versions\nas well by subclassing the request object.  For more information on that\nconsult the Werkzeug documentation on file handling.,,,,Upload Progress Bars,\u00b6,,A while ago many developers had the idea to read the incoming file in\nsmall chunks and store the upload progress in the database to be able to\npoll the progress with JavaScript from the client.  Long story short: the\nclient asks the server every 5 seconds how much it has transmitted\nalready.  Do you realize the irony?  The client is asking for something it\nshould already know.,,,,An Easier Solution,\u00b6,,Now there are better solutions that work faster and are more reliable. There\nare JavaScript libraries like,jQuery,that have form plugins to ease the\nconstruction of progress bar.,,Because the common pattern for file uploads exists almost unchanged in all\napplications dealing with uploads, there is also a Flask extension called,Flask-Uploads,that implements a full fledged upload mechanism with white and\nblacklisting of extensions and more.,,,,,,,,,,,,,Contents,,,Uploading Files,,A Gentle Introduction,,Improving Uploads,,Upload Progress Bars,,An Easier Solution,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,SQLAlchemy in Flask,,Next:,Caching,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Template Inheritance", "url": "http://flask.pocoo.org/docs/1.0/patterns/templateinheritance/", "content": ",,,,,Template Inheritance \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,,,,,Template Inheritance,\u00b6,,The most powerful part of Jinja is template inheritance. Template inheritance\nallows you to build a base \u201cskeleton\u201d template that contains all the common\nelements of your site and defines,blocks,that child templates can override.,,Sounds complicated but is very basic. It\u2019s easiest to understand it by starting\nwith an example.,,,Base Template,\u00b6,,This template, which we\u2019ll call,layout.html,, defines a simple HTML skeleton\ndocument that you might use for a simple two-column page. It\u2019s the job of\n\u201cchild\u201d templates to fill the empty blocks with content:,,<!doctype html>,,<,html,>,,<,head,>,,{%,,block,,head,,%},,<,link,,rel,=,\"stylesheet\",,href,=,\",{{,,url_for,(,'static',,,,filename,=,'style.css',),,}},\",>,,<,title,>,{%,,block,,title,,%}{%,,endblock,,%},- My Webpage,</,title,>,,{%,,endblock,,%},,</,head,>,,<,body,>,,<,div,,id,=,\"content\",>,{%,,block,,content,,%}{%,,endblock,,%},</,div,>,,<,div,,id,=,\"footer\",>,,{%,,block,,footer,,%},,&copy;,Copyright 2010 by,<,a,,href,=,\"http://domain.invalid/\",>,you,</,a,>,.,{%,,endblock,,%},,</,div,>,,</,body,>,,</,html,>,,,,In this example, the,{%,,block,,%},tags define four blocks that child templates\ncan fill in. All the,block,tag does is tell the template engine that a\nchild template may override those portions of the template.,,,,Child Template,\u00b6,,A child template might look like this:,,{%,,extends,,\"layout.html\",,%},,{%,,block,,title,,%},Index,{%,,endblock,,%},,{%,,block,,head,,%},,{{,,super,(),,}},,<,style,,type,=,\"text/css\",>,,.,important,,{,,color,:,,#336699,;,,},,</,style,>,,{%,,endblock,,%},,{%,,block,,content,,%},,<,h1,>,Index,</,h1,>,,<,p,,class,=,\"important\",>,Welcome on my awesome homepage.,{%,,endblock,,%},,,,The,{%,,extends,,%},tag is the key here. It tells the template engine that\nthis template \u201cextends\u201d another template.  When the template system evaluates\nthis template, first it locates the parent.  The extends tag must be the\nfirst tag in the template.  To render the contents of a block defined in\nthe parent template, use,{{,,super(),,}},.,,,,,,,,,,,,,Contents,,,Template Inheritance,,Base Template,,Child Template,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,Form Validation with WTForms,,Next:,Message Flashing,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/21/", "content": "Triggering the debugger on purpose | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Triggering the debugger on purpose,,Posted by Dag Odenhall\n    on 2010-05-26 @ 15:43\n    and filed in,Utilities,,The Flask (Werkzeug) debugger is really good, but it only triggers on exceptions \u2014 sometimes it could be useful for debugging behavior that isn't raising anything. In these situations you can simply raise an exception intentionally.,,@app.route,(,'/',),,def,,index,():,,do_something_wrong,(),,raise,,return,,'Ohnoes',,,This use of,raise,is actually wrong, which means it\u2026 raises an exception. \u263a,,If you're afraid you might accidentally leave this in the code, here's one that only enters the debugger in debug-mode:,,assert,,app,.,debug,,==,,False,,,This snippet by Dag Odenhall can be used freely for\n    anything you like. Consider it public domain.,,,Comments,,,,Division zero abusing\n          by Armin Ronacher\n          on 2010-05-26 @ 15:46,My classic:,,1,/,0,,,,,Put it in a function\n          by Dag Odenhall\n          on 2010-05-27 @ 02:46,from,,flask,,import,,current_app,,def,,debug,():,,assert,,current_app,.,debug,,==,,False,,,Now you can trigger the debugger with,debug(),.,,,,Give yourself a message\n          by Ron DuPlain\n          on 2011-01-15 @ 22:52,The function from Dag above is great.  I'll extend it slightly to add a friendly reminder message that you're seeing the debugger because you requested it.,,from,,flask,,import,,current_app,,def,,debug,():,,assert,,current_app,.,debug,,==,,False,,,,\"Don't panic! You're here by request of debug()\",,,,,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "Application Factories", "url": "http://flask.pocoo.org/docs/1.0/patterns/appfactories/", "content": ",,,,,Application Factories \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,,,,,Application Factories,\u00b6,,If you are already using packages and blueprints for your application\n(,Modular Applications with Blueprints,) there are a couple of really nice ways to further improve\nthe experience.  A common pattern is creating the application object when\nthe blueprint is imported.  But if you move the creation of this object\ninto a function, you can then create multiple instances of this app later.,,So why would you want to do this?,,,Testing.  You can have instances of the application with different\nsettings to test every case.,,Multiple instances.  Imagine you want to run different versions of the\nsame application.  Of course you could have multiple instances with\ndifferent configs set up in your webserver, but if you use factories,\nyou can have multiple instances of the same application running in the\nsame application process which can be handy.,,,So how would you then actually implement that?,,,Basic Factories,\u00b6,,The idea is to set up the application in a function.  Like this:,,def,,create_app,(,config_filename,):,,app,,=,,Flask,(,__name__,),,app,.,config,.,from_pyfile,(,config_filename,),,from,,yourapplication.model,,import,,db,,db,.,init_app,(,app,),,from,,yourapplication.views.admin,,import,,admin,,from,,yourapplication.views.frontend,,import,,frontend,,app,.,register_blueprint,(,admin,),,app,.,register_blueprint,(,frontend,),,return,,app,,,,The downside is that you cannot use the application object in the blueprints\nat import time.  You can however use it from within a request.  How do you\nget access to the application with the config?  Use,current_app,:,,from,,flask,,import,,current_app,,,,Blueprint,,,,render_template,,admin,,=,,Blueprint,(,'admin',,,,__name__,,,,url_prefix,=,'/admin',),,@admin,.,route,(,'/',),,def,,index,():,,return,,render_template,(,current_app,.,config,[,'INDEX_TEMPLATE',]),,,,Here we look up the name of a template in the config.,,,,Factories & Extensions,\u00b6,,It\u2019s preferable to create your extensions and app factories so that the\nextension object does not initially get bound to the application.,,Using,Flask-SQLAlchemy,,\nas an example, you should not do something along those lines:,,def,,create_app,(,config_filename,):,,app,,=,,Flask,(,__name__,),,app,.,config,.,from_pyfile,(,config_filename,),,db,,=,,SQLAlchemy,(,app,),,,,But, rather, in model.py (or equivalent):,,db,,=,,SQLAlchemy,(),,,,and in your application.py (or equivalent):,,def,,create_app,(,config_filename,):,,app,,=,,Flask,(,__name__,),,app,.,config,.,from_pyfile,(,config_filename,),,from,,yourapplication.model,,import,,db,,db,.,init_app,(,app,),,,,Using this design pattern, no application-specific state is stored on the\nextension object, so one extension object can be used for multiple apps.\nFor more information about the design of extensions refer to,Flask Extension Development,.,,,,Using Applications,\u00b6,,To run such an application, you can use the,flask,command:,,export,,FLASK_APP,=,myapp,,flask,,run,,,,Flask will automatically detect the factory (,create_app,or,make_app,)\nin,myapp,. You can also pass arguments to the factory like this:,,export,,FLASK_APP,=,\"myapp:create_app('dev')\",,flask,,run,,,,Then the,create_app,factory in,myapp,is called with the string,'dev',as the argument. See,Command Line Interface,for more detail.,,,,Factory Improvements,\u00b6,,The factory function above is not very clever, but you can improve it.\nThe following changes are straightforward to implement:,,,Make it possible to pass in configuration values for unit tests so that\nyou don\u2019t have to create config files on the filesystem.,,Call a function from a blueprint when the application is setting up so\nthat you have a place to modify attributes of the application (like\nhooking in before/after request handlers etc.),,Add in WSGI middlewares when the application is being created if necessary.,,,,,,,,,,,,,,Contents,,,Application Factories,,Basic Factories,,Factories & Extensions,,Using Applications,,Factory Improvements,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,Larger Applications,,Next:,Application Dispatching,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/90/", "content": "Serve CoffeeScript, SCSS, or other transcompiling file via Python | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Serve CoffeeScript, SCSS, or other transcompiling file via Python,,Posted by Cosmia Luna\n    on 2012-03-12 @ 14:59\n    and filed in,Utilities,,Usually it can be tiring to execute,,coffee -c,,every time, even in watching mode. So you can disable the static file serving by the code likes following.,,from,,subprocess,,import,,Popen,,,,PIPE,,import,,shlex,,class,,NonZeroExitError,(,Exception,):,,def,,__init__,(,self,,,,command,,,,returncode,,,,output,,,,error,):,,self,.,command,,=,,command,,self,.,returncode,,=,,returncode,,self,.,output,,=,,output,,self,.,error,,=,,error,,def,,__str__,(,self,):,,return,,''',\\,,,%s,returned non-zero exit status,%d,with output,,,%s,,and error,,,%s,''',,%,,(,self,.,command,,,,self,.,returncode,,,,self,.,output,,or,,\"[NO OUTOUT]\",,,,self,.,error,,or,,\"[NO ERROR]\",),,def,,command_line_renderer_factory,(,command,):,,'''command should be a command reads input from stdin,,and prints to stdout''',,args,,=,,shlex,.,split,(,command,),,def,,renderer,(,script,):,,'''Accepts a file object or path and return the,,rendered string''',,if,,isinstance,(,script,,,,file,):,,pass,,elif,,isinstance,(,script,,,,str,):,,script,,=,,open,(,script,),,else,:,,raise,,TypeError,(,'script must be a file object of ',,'or a string to the file',),,process,,=,,Popen,(,args,,,,stdin,=,script,,,,stdout,=,PIPE,,,,stderr,=,PIPE,),,returncode,,=,,process,.,wait,(),,stdoutdata,,,,stderrdata,,=,,process,.,communicate,(),,if,,returncode,,!=,,0,:,,raise,,NonZeroExitError,(,command,,,,returncode,,,,stdoutdata,,,,stderrdata,),,return,,stdoutdata,,return,,renderer,,,and use them like:,,render_coffee,,=,\\,command_line_renderer_factory,(,'coffee -cs',),,render_raw_scss,,=,\\,command_line_renderer_factory,(,'sass -s --scss',),,,It will be a bit more complex to do this with LESS since the default lessc does not read stdin. But you can write a compiler that reads stdio like following, thanks Nikolay V. Nemshilov for the help of STDIN at (,http://st-on-it.blogspot.com/2011/05/how-to-read-user-input-with-nodejs.html,).,,#!/usr/bin/env node,,var,,less,,=,,require,(,'less',);,,process,.,stdin,.,resume,();,,process,.,stdin,.,setEncoding,(,'utf8',);,,process,.,stdin,.,on,(,'data',,,,function,,(,less_css,),,{,,less,.,render,(,less_css,,,,function,(,e,,,,css,){,,console,.,log,(,css,),,});,,});,,,But be sure never to use such a hack on production, you should compile them and using the static ones.,,This snippet by Cosmia Luna can be used freely for\n    anything you like. Consider it public domain.,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/34/", "content": "Reloading with other WSGI servers | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Reloading with other WSGI servers,,Posted by Shane Holloway\n    on 2010-07-16 @ 18:07\n    and filed in,Utilities,,If you want to use reloading with a different WSGI server, you can use,werkzeug.serving.run_with_reloader,directly.,,For example, this snippet uses one of,gevent's WSGIServers,:,,import,,gevent.wsgi,,import,,werkzeug.serving,,@werkzeug.serving.run_with_reloader,,def,,runServer,():,,app,.,debug,,=,,True,,ws,,=,,gevent,.,wsgi,.,WSGIServer,((,'',,,,5000,),,,app,),,ws,.,serve_forever,(),,,This snippet by Shane Holloway can be used freely for\n    anything you like. Consider it public domain.,,,Comments,,,,Comment\n          by Dan Korostelev\n          on 2011-07-22 @ 10:58,Unfortunately, this does not work for me. Gevent's hub raises,,NotImplementedError: gevent is only usable from a single thread,,Do I need to use gevent monkeypatching to make it actually work?,,,,Comment\n          by sib\n          on 2011-09-26 @ 01:19,I can confirm that this works after calling gevent's monkey.patch_all(),,,,Precision...\n          by abulte\n          on 2012-11-30 @ 12:48,Import detail: I'm using socketio.server.SocketIOServer as wsgi server...,,,,Debug mode with SocketIOServer\n          by abulte\n          on 2012-11-30 @ 13:14,Found the solution : use werkzeug.debug.DebuggedApplication like described here at,http://werkzeug.pocoo.org/docs/debug/,,,,Debug mode?\n          by abulte\n          on 2012-11-30 @ 12:47,With this method, I get autoreload : thanks!,,But I lost the beautiful werkzeug debug page when an error occurs... Despite the use of app.debug = True. The page just displays \"Internal Server Error\". Any tip?,,,,Debug mode\n          by Hasen el Judy\n          on 2012-12-13 @ 04:54,Thank abulte for the tip!,,Here's how I managed to run the socketio server without losing debugging and autoreloading:,,from socketio.server import SocketIOServer\nfrom werkzeug.debug import DebuggedApplication,,@werkzeug.serving.run_with_reloader\n    def runDebugServer():\n        app.debug = True\n        dapp = DebuggedApplication(app, evalex=True)\n        SocketIOServer(('', PORT), dapp, resource=\"socket.io\").serve_forever(),,,,the code again ..\n          by Hasen el Judy\n          on 2012-12-13 @ 04:55,ok, this comment box does not like code!,,Here's the snippet again:,,http://hastebin.com/luduhexiso.py,,,,nope, breaks sockets\n          by Hasen el Judy\n          on 2012-12-13 @ 05:50,My bad for commenting hastily without checking first.,,My snippet breaks sockets!,,,,Fix for debug mode not working\n          by ADIO Kingsley\n          on 2013-06-25 @ 23:25,without the monkey patch, both reloader and debugger works nicely. If you want to monkey patch with reloader enabled, then you just have to call the monkey.patch_all() method before you import your app, and you are good to go.\nJust saw the thread and decided to post my observations :),,,,I solved it :)\n          by Ivan Smirnov\n          on 2013-09-29 @ 14:52,After many hours of pain, it looks like I've solved it, both the debugger and auto-reloader now work.,,Enjoy:,https://github.com/aldanor/SocketIO-Flask-Debug,,,,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "Custom Error Pages", "url": "http://flask.pocoo.org/docs/1.0/patterns/errorpages/", "content": ",,,,,Custom Error Pages \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,,,,,Custom Error Pages,\u00b6,,Flask comes with a handy,abort(),function that aborts a\nrequest with an HTTP error code early.  It will also provide a plain black\nand white error page for you with a basic description, but nothing fancy.,,Depending on the error code it is less or more likely for the user to\nactually see such an error.,,,Common Error Codes,\u00b6,,The following error codes are some that are often displayed to the user,\neven if the application behaves correctly:,,,404 Not Found,,The good old \u201cchap, you made a mistake typing that URL\u201d message.  So\ncommon that even novices to the internet know that 404 means: damn,\nthe thing I was looking for is not there.  It\u2019s a very good idea to\nmake sure there is actually something useful on a 404 page, at least a\nlink back to the index.,,403 Forbidden,,If you have some kind of access control on your website, you will have\nto send a 403 code for disallowed resources.  So make sure the user\nis not lost when they try to access a forbidden resource.,,410 Gone,,Did you know that there the \u201c404 Not Found\u201d has a brother named \u201c410\nGone\u201d?  Few people actually implement that, but the idea is that\nresources that previously existed and got deleted answer with 410\ninstead of 404.  If you are not deleting documents permanently from\nthe database but just mark them as deleted, do the user a favour and\nuse the 410 code instead and display a message that what they were\nlooking for was deleted for all eternity.,,500 Internal Server Error,,Usually happens on programming errors or if the server is overloaded.\nA terribly good idea is to have a nice page there, because your\napplication,will,fail sooner or later (see also:,Application Errors,).,,,,,Error Handlers,\u00b6,,An error handler is a function that returns a response when a type of error is\nraised, similar to how a view is a function that returns a response when a\nrequest URL is matched. It is passed the instance of the error being handled,\nwhich is most likely a,HTTPException,. An error\nhandler for \u201c500 Internal Server Error\u201d will be passed uncaught exceptions in\naddition to explicit 500 errors.,,An error handler is registered with the,errorhandler(),decorator or the,register_error_handler(),method. A handler\ncan be registered for a status code, like 404, or for an exception class.,,The status code of the response will not be set to the handler\u2019s code. Make\nsure to provide the appropriate HTTP status code when returning a response from\na handler.,,A handler for \u201c500 Internal Server Error\u201d will not be used when running in\ndebug mode. Instead, the interactive debugger will be shown.,,Here is an example implementation for a \u201c404 Page Not Found\u201d exception:,,from,,flask,,import,,render_template,,@app,.,errorhandler,(,404,),,def,,page_not_found,(,e,):,,# note that we set the 404 status explicitly,,return,,render_template,(,'404.html',),,,404,,,,When using the,application factory pattern,:,,from,,flask,,import,,Flask,,,,render_template,,def,,page_not_found,(,e,):,,return,,render_template,(,'404.html',),,,404,,def,,create_app,(,config_filename,):,,app,,=,,Flask,(,__name__,),,app,.,register_error_handler,(,404,,,,page_not_found,),,return,,app,,,,An example template might be this:,,{%,,extends,,\"layout.html\",,%},,{%,,block,,title,,%},Page Not Found,{%,,endblock,,%},,{%,,block,,body,,%},,<,h1,>,Page Not Found,</,h1,>,,<,p,>,What you were looking for is just not there.,<,p,><,a,,href,=,\",{{,,url_for,(,'index',),,}},\",>,go somewhere nice,</,a,>,,{%,,endblock,,%},,,,,,,,,,,,,,,Contents,,,Custom Error Pages,,Common Error Codes,,Error Handlers,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,AJAX with jQuery,,Next:,Lazily Loading Views,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Application Dispatching", "url": "http://flask.pocoo.org/docs/1.0/patterns/appdispatch/", "content": ",,,,,Application Dispatching \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,,,,,Application Dispatching,\u00b6,,Application dispatching is the process of combining multiple Flask\napplications on the WSGI level.  You can combine not only Flask\napplications but any WSGI application.  This would allow you to run a\nDjango and a Flask application in the same interpreter side by side if\nyou want.  The usefulness of this depends on how the applications work\ninternally.,,The fundamental difference from the,module approach,is that in this case you are running the same or\ndifferent Flask applications that are entirely isolated from each other.\nThey run different configurations and are dispatched on the WSGI level.,,,Working with this Document,\u00b6,,Each of the techniques and examples below results in an,application,object\nthat can be run with any WSGI server.  For production, see,Deployment Options,.\nFor development, Werkzeug provides a builtin server for development available\nat,werkzeug.serving.run_simple(),:,,from,,werkzeug.serving,,import,,run_simple,,run_simple,(,'localhost',,,,5000,,,,application,,,,use_reloader,=,True,),,,,Note that,run_simple,is not intended for\nuse in production.  Use a,full-blown WSGI server,.,,In order to use the interactive debugger, debugging must be enabled both on\nthe application and the simple server. Here is the \u201chello world\u201d example with\ndebugging and,run_simple,:,,from,,flask,,import,,Flask,,from,,werkzeug.serving,,import,,run_simple,,app,,=,,Flask,(,__name__,),,app,.,debug,,=,,True,,@app,.,route,(,'/',),,def,,hello_world,():,,return,,'Hello World!',,if,,__name__,,==,,'__main__',:,,run_simple,(,'localhost',,,,5000,,,,app,,,,use_reloader,=,True,,,,use_debugger,=,True,,,,use_evalex,=,True,),,,,,,Combining Applications,\u00b6,,If you have entirely separated applications and you want them to work next\nto each other in the same Python interpreter process you can take\nadvantage of the,werkzeug.wsgi.DispatcherMiddleware,.  The idea\nhere is that each Flask application is a valid WSGI application and they\nare combined by the dispatcher middleware into a larger one that is\ndispatched based on prefix.,,For example you could have your main application run on,/,and your\nbackend interface on,/backend,:,,from,,werkzeug.wsgi,,import,,DispatcherMiddleware,,from,,frontend_app,,import,,application,,as,,frontend,,from,,backend_app,,import,,application,,as,,backend,,application,,=,,DispatcherMiddleware,(,frontend,,,,{,,'/backend',:,,backend,,}),,,,,,Dispatch by Subdomain,\u00b6,,Sometimes you might want to use multiple instances of the same application\nwith different configurations.  Assuming the application is created inside\na function and you can call that function to instantiate it, that is\nreally easy to implement.  In order to develop your application to support\ncreating new instances in functions have a look at the,Application Factories,pattern.,,A very common example would be creating applications per subdomain.  For\ninstance you configure your webserver to dispatch all requests for all\nsubdomains to your application and you then use the subdomain information\nto create user-specific instances.  Once you have your server set up to\nlisten on all subdomains you can use a very simple WSGI application to do\nthe dynamic application creation.,,The perfect level for abstraction in that regard is the WSGI layer.  You\nwrite your own WSGI application that looks at the request that comes and\ndelegates it to your Flask application.  If that application does not\nexist yet, it is dynamically created and remembered:,,from,,threading,,import,,Lock,,class,,SubdomainDispatcher,(,object,):,,def,,__init__,(,self,,,,domain,,,,create_app,):,,self,.,domain,,=,,domain,,self,.,create_app,,=,,create_app,,self,.,lock,,=,,Lock,(),,self,.,instances,,=,,{},,def,,get_application,(,self,,,,host,):,,host,,=,,host,.,split,(,':',)[,0,],,assert,,host,.,endswith,(,self,.,domain,),,,'Configuration error',,subdomain,,=,,host,[:,-,len,(,self,.,domain,)],.,rstrip,(,'.',),,with,,self,.,lock,:,,app,,=,,self,.,instances,.,get,(,subdomain,),,if,,app,,is,,None,:,,app,,=,,self,.,create_app,(,subdomain,),,self,.,instances,[,subdomain,],,=,,app,,return,,app,,def,,__call__,(,self,,,,environ,,,,start_response,):,,app,,=,,self,.,get_application,(,environ,[,'HTTP_HOST',]),,return,,app,(,environ,,,,start_response,),,,,This dispatcher can then be used like this:,,from,,myapplication,,import,,create_app,,,,get_user_for_subdomain,,from,,werkzeug.exceptions,,import,,NotFound,,def,,make_app,(,subdomain,):,,user,,=,,get_user_for_subdomain,(,subdomain,),,if,,user,,is,,None,:,,# if there is no user for that subdomain we still have,,# to return a WSGI application that handles that request.,,# We can then just return the NotFound() exception as,,# application which will render a default 404 page.,,# You might also redirect the user to the main page then,,return,,NotFound,(),,# otherwise create the application for the specific user,,return,,create_app,(,user,),,application,,=,,SubdomainDispatcher,(,'example.com',,,,make_app,),,,,,,Dispatch by Path,\u00b6,,Dispatching by a path on the URL is very similar.  Instead of looking at\nthe,Host,header to figure out the subdomain one simply looks at the\nrequest path up to the first slash:,,from,,threading,,import,,Lock,,from,,werkzeug.wsgi,,import,,pop_path_info,,,,peek_path_info,,class,,PathDispatcher,(,object,):,,def,,__init__,(,self,,,,default_app,,,,create_app,):,,self,.,default_app,,=,,default_app,,self,.,create_app,,=,,create_app,,self,.,lock,,=,,Lock,(),,self,.,instances,,=,,{},,def,,get_application,(,self,,,,prefix,):,,with,,self,.,lock,:,,app,,=,,self,.,instances,.,get,(,prefix,),,if,,app,,is,,None,:,,app,,=,,self,.,create_app,(,prefix,),,if,,app,,is,,not,,None,:,,self,.,instances,[,prefix,],,=,,app,,return,,app,,def,,__call__,(,self,,,,environ,,,,start_response,):,,app,,=,,self,.,get_application,(,peek_path_info,(,environ,)),,if,,app,,is,,not,,None,:,,pop_path_info,(,environ,),,else,:,,app,,=,,self,.,default_app,,return,,app,(,environ,,,,start_response,),,,,The big difference between this and the subdomain one is that this one\nfalls back to another application if the creator function returns,None,:,,from,,myapplication,,import,,create_app,,,,default_app,,,,get_user_for_prefix,,def,,make_app,(,prefix,):,,user,,=,,get_user_for_prefix,(,prefix,),,if,,user,,is,,not,,None,:,,return,,create_app,(,user,),,application,,=,,PathDispatcher,(,default_app,,,,make_app,),,,,,,,,,,,,,,,Contents,,,Application Dispatching,,Working with this Document,,Combining Applications,,Dispatch by Subdomain,,Dispatch by Path,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,Application Factories,,Next:,Implementing API Exceptions,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/53/", "content": "Per-Request After-Request Callbacks | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Per-Request After-Request Callbacks,,Posted by Armin Ronacher\n    on 2011-07-08 @ 11:21\n    and filed in,Utilities,,Flask provides the,app.after_request,function to trigger the execution of a function at the end of a request.  This however is done for all requests.  Sometimes it can be useful to trigger some code that modifies a response object only for one specific request.,,For instance you might have some code that invalidates a cache somewhere and wants to update a cookie at the end of a request.,,This can be easily implemented by keeping a list of callbacks on the,g,object:,,from,,flask,,import,,g,,def,,after_this_request,(,func,):,,if,,not,,hasattr,(,g,,,,'call_after_request',):,,g,.,call_after_request,,=,,[],,g,.,call_after_request,.,append,(,func,),,return,,func,,@app.after_request,,def,,per_request_callbacks,(,response,):,,for,,func,,in,,getattr,(,g,,,,'call_after_request',,,,()):,,response,,=,,func,(,response,),,return,,response,,,And here is how you can use it:,,def,,invalidate_username_cache,():,,@after_this_request,,def,,delete_username_cookie,(,response,):,,response,.,delete_cookie,(,'username',),,return,,response,,,This snippet by Armin Ronacher can be used freely for\n    anything you like. Consider it public domain.,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/23/", "content": "Preconfigured interactive shell | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Preconfigured interactive shell,,Posted by Dag Odenhall\n    on 2010-05-28 @ 07:00\n    and filed in,Utilities,,The documentation recommends putting imports in a module and import that when you're in an interactive session. Even better, I think, is to make an executable that launches a preconfigured Python shell.,,Put something like this in for example,shell.py,and run,chmod +x shell.py,.,,#!/usr/bin/env python,,import,,os,,import,,readline,,from,,pprint,,import,,pprint,,from,,flask,,import,,*,,from,,myapp,,import,,*,,from,,utils,,import,,*,,from,,db,,import,,*,,from,,models,,import,,*,,os,.,environ,[,'PYTHONINSPECT',],,=,,'True',,,Normally,import *,should be avoided but unless you get namespace collisions it makes sense for an interactive shell environment.,,Now you can simply do,./shell.py,.,,This snippet by Dag Odenhall can be used freely for\n    anything you like. Consider it public domain.,,,Comments,,,,Using werkzeug.script\n          by Dan Jacob\n          on 2010-05-28 @ 07:16,Another way to create a ready shell is to use the werkzeug.script library detailed here:,,http://werkzeug.pocoo.org/documentation/0.6.1/script.html,,For my Flask project I have also have a shell.py script:,,\"\"\",,Creates shell using IPython,,\"\"\",,import,,sys,,from,,werkzeug,,import,,script,,from,,myapp,,import,,create_app,,,,models,,from,,myapp.database,,import,,metadata,,,,db_session,,def,,make_shell,():,,try,:,,config,,=,,sys,.,argv,[,1,],,except,,IndexError,:,,config,,=,,\"dev.cfg\",,return,,dict,(,app,=,create_app,(,config,),,,models,=,models,,,,db_session,=,db_session,,,,metadata,=,metadata,,),,if,,__name__,,==,,\"__main__\",:,,script,.,make_shell,(,make_shell,,,,use_ipython,=,True,)(),,,This will use IPython automatically if installed.,,The make_shell function passes a dict of variables you want included automatically in your shell - in this case the app instance, models module and SQLAlchemy session and metadata (as most of the time I will need to access the database).,,,,werkzeug.script\n          by Dan Jacob\n          on 2010-05-28 @ 08:02,Armin may be planning a rewrite of werkzeug.script, but until we know what that's going to look like it's still part of the Werkzeug package.,,I would therefore use it and change the code as and when needed.,,,,Re: Using werkzeug.script\n          by Dag Odenhall\n          on 2010-05-28 @ 07:58,I used,werkzeug.script,first but:,,<donri>,\"Further Improving the Shell Experience\" why not use\n        werkzeugs manage scripts?,<DasIch>,donri:,mitsuhiko is planning on rewriting \n         werkzeug.script,,Also,import *,raises a,SyntaxWarning,if not used at the top-level, and I couldn't even suppress the exception.,,If however,werkzeug.script,works for you, there are of course benefits to it such as easily setting up a,runserver,command, or any other custom commands.,,,,Flask-Script\n          by Dag Odenhall\n          on 2010-07-21 @ 00:54,Flask-Script,is now an option that's looking good; although it might have the same issue with,import *,.,,,,Simulating import * with Flask-Script\n          by Dag Odenhall\n          on 2010-08-09 @ 16:47,I solved the issue with,SyntaxWarning,. The warnings module didn't help but I realised this rather obvious solution:,,@manager.shell,,def,,shell_context,():,,import,,pprint,,import,,flask,,import,,vlasisku,,context,,=,,dict,(,pprint,=,pprint,.,pprint,),,context,.,update,(,vars,(,flask,)),,context,.,update,(,vars,(,myapp,)),,context,.,update,(,vars,(,myapp,.,utils,)),,context,.,update,(,vars,(,myapp,.,database,)),,context,.,update,(,vars,(,myapp,.,models,)),,return,,context,,,,,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/15/", "content": "Nicer Errors with Descriptions from Werkzeug | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Nicer Errors with Descriptions from Werkzeug,,Posted by Bernd Zeimetz\n    on 2010-05-08 @ 12:42\n    and filed in,Utilities,,Writing nice and shiny error messages and assigning them to the application's error handlers can be a lot of work. If you're happy with the default descriptions which are provided by werkzeug, you're done with a few lines of code:,,from,,flask,,import,,Markup,,,,render_template,,from,,werkzeug.exceptions,,import,,default_exceptions,,def,,show_errormessage,(,error,):,,desc,,=,,error,.,get_description,(,flask,.,request,.,environ,),,return,,render_template,(,'error.html',,,,code,=,error,.,code,,,,name,=,error,.,name,,,,description,=,Markup,(,desc,),,),,,error,.,code,,for,,_exc,,in,,default_exceptions,:,,app,.,error_handlers,[,_exc,],,=,,show_errormessage,,del,,_exc,,,And here the example template:,,{%,,extends,,\"base.html\",,%},,{%,,block,,title,,%},Error,{{,,code,,}},:,{{,,name,,}}{%,,endblock,,%},,{%,,block,,body,,%},,{{,,description,}},,{%,,endblock,,%},,,Make sure to either wrap the description with,Markup(),or to use the,|safe,filter in the template on the description as it contains HTML.,,This snippet by Bernd Zeimetz can be used freely for\n    anything you like. Consider it public domain.,,,Comments,,,,Updated Snippet\n          by Armin Ronacher\n          on 2010-05-15 @ 21:32,Hi, I modified the snippet slightly to use,Markup(),and I also got rid of the map call, a loop is nicer here.,,,,Bug with default handling of uncaught exceptions\n          by Pavel Repin\n          on 2012-01-28 @ 00:31,After looking at source code of Flask.handle_exception(), I am pretty sure the above code will break, because 'show_error_message' may be called 'error' value that's not a Werkzeug HTTPException but a thing like ZeroDivisionError or whatever, which lacks attributes like 'code', 'name', etc.,,See:,https://github.com/mitsuhiko/flask/blob/92dbe3153a9e0c007ecd1987ccd5f3d796c901af/flask/app.py#L1196,,,,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/38/", "content": "Overriding HTTP Methods for old browsers | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Overriding HTTP Methods for old browsers,,Posted by Armin Ronacher\n    on 2010-08-14 @ 17:40\n    and filed in,Utilities,,HTML4 and XHTML only specify POST and GET as HTTP methods that forms can use.  HTTP itself however supports a wider range of methods, and it makes sense to support them on the server.,,If you however want to make a form submission with PUT for instance, and you are using a client that does not support it, you can override it.,,First you need to hook this middleware in:,,from,,werkzeug,,import,,url_decode,,class,,MethodRewriteMiddleware,(,object,):,,def,,__init__,(,self,,,,app,):,,self,.,app,,=,,app,,def,,__call__,(,self,,,,environ,,,,start_response,):,,if,,'METHOD_OVERRIDE',,in,,environ,.,get,(,'QUERY_STRING',,,,'',):,,args,,=,,url_decode,(,environ,[,'QUERY_STRING',]),,method,,=,,args,.,get,(,'__METHOD_OVERRIDE__',),,if,,method,:,,method,,=,,method,.,encode,(,'ascii',,,,'replace',),,environ,[,'REQUEST_METHOD',],,=,,method,,return,,self,.,app,(,environ,,,,start_response,),,,To then override the method, you have to append,?__METHOD_OVERRIDE__=PUT,to the form action:,,<,form,,action,=,\"?__METHOD_OVERRIDE__=PUT\",>,...,</,form,>,,,This snippet by Armin Ronacher can be used freely for\n    anything you like. Consider it public domain.,,,Comments,,,,To use a middleware with Flask\n          by Simon Sapin\n          on 2010-08-14 @ 17:46,To use a middleware with Flask, see,http://flask.pocoo.org/docs/quickstart/#hooking-in-wsgi-middlewares,,,,a pylons style rewriting on\n          by Antoine Cezar\n          on 2010-12-09 @ 13:24,I've restricted rewriting to valid methods,,from,,werkzeug,,import,,Request,,class,,MethodRewriteMiddleware,(,object,):,,def,,__init__,(,self,,,,app,,,,input_name,=,'_method',):,,self,.,app,,=,,app,,self,.,input_name,,=,,input_name,,def,,__call__,(,self,,,,environ,,,,start_response,):,,request,,=,,Request,(,environ,),,if,,self,.,input_name,,in,,request,.,form,:,,method,,=,,request,.,form,[,self,.,input_name,],.,upper,(),,if,,method,,in,,[,'GET',,,,'POST',,,,'PUT',,,,'DELETE',]:,,environ,[,'REQUEST_METHOD',],,=,,method,,return,,self,.,app,(,environ,,,,start_response,),,,Then in the form,,<,form,,action,=,\"...\",,method,=,\"POST\",>,,<,input,,type,=,\"hidden\",,name,=,\"_method\",,value,=,\"PUT\",,/>,...,</,form,>,,,,,Bug in the method above\n          by Antoine Cezar\n          on 2010-12-09 @ 15:10,Accessing request.form in view when previously used in MethodRewriteMiddleware result in endless page loading.\nIf someone kwnow how to fix this...,,,,Comment\n          by Armin Ronacher\n          on 2011-08-08 @ 11:15,There is no fix for that.  How would that even work?  What's the point in overriding an HTTP method if you already started processing the request based on information of the method (form data processed by POST request etc.).,,Don't do that.,,,,Fix for METHOD_OVERRIDE.\n          by Ramin Rakhamimov\n          on 2012-10-20 @ 13:37,I had to add the POST method to the form to get the middleware to work:,,<form action=\"?__METHOD_OVERRIDE__=PUT\" method=\"POST\">\n  ...\n</form>,,Any clue why I was getting a 405 error with the plain PUT and DELETE methods? I got them when testing with curl -X DELETE as well, so it's not a browser issue.,,,,Correct the log for 'requestline' BaseHTTPRequestHandler\n          by seaders\n          on 2013-02-13 @ 16:09,I'm using this method to handle delete's and put's when a browser can't handle it.  The problem is, it's very confusing from a logging perspective, because a call goes out as 'POST', is overridden to 'DELETE', but in BaseHTTPRequestHandler.log_request, it prints what was in the original requestline, 'POST'.,,I'm currently just logging out in the middleware class\n\"_log('info', '[%s] HTTP call overriden with [%s]', old_method, method)\"\nbut I don't really like that solution, it still confuses things.  I've tried finding any way I can access that requestline, or the BaseHTTPRequestHandler object that's dealing with the request further up the line, but I can't find any way I can get access to it.,,,,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "SQLAlchemy in Flask", "url": "http://flask.pocoo.org/docs/1.0/patterns/sqlalchemy/", "content": ",,,,,SQLAlchemy in Flask \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,,,,,SQLAlchemy in Flask,\u00b6,,Many people prefer,SQLAlchemy,for database access.  In this case it\u2019s\nencouraged to use a package instead of a module for your flask application\nand drop the models into a separate module (,Larger Applications,).\nWhile that is not necessary, it makes a lot of sense.,,There are four very common ways to use SQLAlchemy.  I will outline each\nof them here:,,,Flask-SQLAlchemy Extension,\u00b6,,Because SQLAlchemy is a common database abstraction layer and object\nrelational mapper that requires a little bit of configuration effort,\nthere is a Flask extension that handles that for you.  This is recommended\nif you want to get started quickly.,,You can download,Flask-SQLAlchemy,from,PyPI,.,,,,Declarative,\u00b6,,The declarative extension in SQLAlchemy is the most recent method of using\nSQLAlchemy.  It allows you to define tables and models in one go, similar\nto how Django works.  In addition to the following text I recommend the\nofficial documentation on the,declarative,extension.,,Here\u2019s the example,database.py,module for your application:,,from,,sqlalchemy,,import,,create_engine,,from,,sqlalchemy.orm,,import,,scoped_session,,,,sessionmaker,,from,,sqlalchemy.ext.declarative,,import,,declarative_base,,engine,,=,,create_engine,(,'sqlite:////tmp/test.db',,,,convert_unicode,=,True,),,db_session,,=,,scoped_session,(,sessionmaker,(,autocommit,=,False,,,,autoflush,=,False,,,,bind,=,engine,)),,Base,,=,,declarative_base,(),,Base,.,query,,=,,db_session,.,query_property,(),,def,,init_db,():,,# import all modules here that might define models so that,,# they will be registered properly on the metadata.  Otherwise,,# you will have to import them first before calling init_db(),,import,,yourapplication.models,,Base,.,metadata,.,create_all,(,bind,=,engine,),,,,To define your models, just subclass the,Base,class that was created by\nthe code above.  If you are wondering why we don\u2019t have to care about\nthreads here (like we did in the SQLite3 example above with the,g,object): that\u2019s because SQLAlchemy does that for us\nalready with the,scoped_session,.,,To use SQLAlchemy in a declarative way with your application, you just\nhave to put the following code into your application module.  Flask will\nautomatically remove database sessions at the end of the request or\nwhen the application shuts down:,,from,,yourapplication.database,,import,,db_session,,@app,.,teardown_appcontext,,def,,shutdown_session,(,exception,=,None,):,,db_session,.,remove,(),,,,Here is an example model (put this into,models.py,, e.g.):,,from,,sqlalchemy,,import,,Column,,,,Integer,,,,String,,from,,yourapplication.database,,import,,Base,,class,,User,(,Base,):,,__tablename__,,=,,'users',,id,,=,,Column,(,Integer,,,,primary_key,=,True,),,name,,=,,Column,(,String,(,50,),,,unique,=,True,),,email,,=,,Column,(,String,(,120,),,,unique,=,True,),,def,,__init__,(,self,,,,name,=,None,,,,email,=,None,):,,self,.,name,,=,,name,,self,.,email,,=,,email,,def,,__repr__,(,self,):,,return,,'<User,%r,>',,%,,(,self,.,name,),,,,To create the database you can use the,init_db,function:,,>>>,from,,yourapplication.database,,import,,init_db,,>>>,init_db,(),,,,You can insert entries into the database like this:,,>>>,from,,yourapplication.database,,import,,db_session,,>>>,from,,yourapplication.models,,import,,User,,>>>,u,,=,,User,(,'admin',,,,'admin@localhost',),,>>>,db_session,.,add,(,u,),,>>>,db_session,.,commit,(),,,,Querying is simple as well:,,>>>,User,.,query,.,all,(),,[<User u'admin'>],,>>>,User,.,query,.,filter,(,User,.,name,,==,,'admin',),.,first,(),,<User u'admin'>,,,,,,Manual Object Relational Mapping,\u00b6,,Manual object relational mapping has a few upsides and a few downsides\nversus the declarative approach from above.  The main difference is that\nyou define tables and classes separately and map them together.  It\u2019s more\nflexible but a little more to type.  In general it works like the\ndeclarative approach, so make sure to also split up your application into\nmultiple modules in a package.,,Here is an example,database.py,module for your application:,,from,,sqlalchemy,,import,,create_engine,,,,MetaData,,from,,sqlalchemy.orm,,import,,scoped_session,,,,sessionmaker,,engine,,=,,create_engine,(,'sqlite:////tmp/test.db',,,,convert_unicode,=,True,),,metadata,,=,,MetaData,(),,db_session,,=,,scoped_session,(,sessionmaker,(,autocommit,=,False,,,,autoflush,=,False,,,,bind,=,engine,)),,def,,init_db,():,,metadata,.,create_all,(,bind,=,engine,),,,,As in the declarative approach, you need to close the session after\neach request or application context shutdown.  Put this into your\napplication module:,,from,,yourapplication.database,,import,,db_session,,@app,.,teardown_appcontext,,def,,shutdown_session,(,exception,=,None,):,,db_session,.,remove,(),,,,Here is an example table and model (put this into,models.py,):,,from,,sqlalchemy,,import,,Table,,,,Column,,,,Integer,,,,String,,from,,sqlalchemy.orm,,import,,mapper,,from,,yourapplication.database,,import,,metadata,,,,db_session,,class,,User,(,object,):,,query,,=,,db_session,.,query_property,(),,def,,__init__,(,self,,,,name,=,None,,,,email,=,None,):,,self,.,name,,=,,name,,self,.,email,,=,,email,,def,,__repr__,(,self,):,,return,,'<User,%r,>',,%,,(,self,.,name,),,users,,=,,Table,(,'users',,,,metadata,,,,Column,(,'id',,,,Integer,,,,primary_key,=,True,),,,Column,(,'name',,,,String,(,50,),,,unique,=,True,),,,Column,(,'email',,,,String,(,120,),,,unique,=,True,),,),,mapper,(,User,,,,users,),,,,Querying and inserting works exactly the same as in the example above.,,,,SQL Abstraction Layer,\u00b6,,If you just want to use the database system (and SQL) abstraction layer\nyou basically only need the engine:,,from,,sqlalchemy,,import,,create_engine,,,,MetaData,,,,Table,,engine,,=,,create_engine,(,'sqlite:////tmp/test.db',,,,convert_unicode,=,True,),,metadata,,=,,MetaData,(,bind,=,engine,),,,,Then you can either declare the tables in your code like in the examples\nabove, or automatically load them:,,from,,sqlalchemy,,import,,Table,,users,,=,,Table,(,'users',,,,metadata,,,,autoload,=,True,),,,,To insert data you can use the,insert,method.  We have to get a\nconnection first so that we can use a transaction:,,>>>,con,,=,,engine,.,connect,(),,>>>,con,.,execute,(,users,.,insert,(),,,name,=,'admin',,,,email,=,'admin@localhost',),,,,SQLAlchemy will automatically commit for us.,,To query your database, you use the engine directly or use a connection:,,>>>,users,.,select,(,users,.,c,.,id,,==,,1,),.,execute,(),.,first,(),,(1, u'admin', u'admin@localhost'),,,,These results are also dict-like tuples:,,>>>,r,,=,,users,.,select,(,users,.,c,.,id,,==,,1,),.,execute,(),.,first,(),,>>>,r,[,'name',],,u'admin',,,,You can also pass strings of SQL statements to the,execute(),method:,,>>>,engine,.,execute,(,'select * from users where id = :1',,,,[,1,]),.,first,(),,(1, u'admin', u'admin@localhost'),,,,For more information about SQLAlchemy, head over to the,website,.,,,,,,,,,,,,,Contents,,,SQLAlchemy in Flask,,Flask-SQLAlchemy Extension,,Declarative,,Manual Object Relational Mapping,,SQL Abstraction Layer,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,Using SQLite 3 with Flask,,Next:,Uploading Files,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Implementing API Exceptions", "url": "http://flask.pocoo.org/docs/1.0/patterns/apierrors/", "content": ",,,,,Implementing API Exceptions \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,,,,,Implementing API Exceptions,\u00b6,,It\u2019s very common to implement RESTful APIs on top of Flask.  One of the\nfirst things that developers run into is the realization that the builtin\nexceptions are not expressive enough for APIs and that the content type of,text/html,they are emitting is not very useful for API consumers.,,The better solution than using,abort,to signal errors for invalid API\nusage is to implement your own exception type and install an error handler\nfor it that produces the errors in the format the user is expecting.,,,Simple Exception Class,\u00b6,,The basic idea is to introduce a new exception that can take a proper\nhuman readable message, a status code for the error and some optional\npayload to give more context for the error.,,This is a simple example:,,from,,flask,,import,,jsonify,,class,,InvalidUsage,(,Exception,):,,status_code,,=,,400,,def,,__init__,(,self,,,,message,,,,status_code,=,None,,,,payload,=,None,):,,Exception,.,__init__,(,self,),,self,.,message,,=,,message,,if,,status_code,,is,,not,,None,:,,self,.,status_code,,=,,status_code,,self,.,payload,,=,,payload,,def,,to_dict,(,self,):,,rv,,=,,dict,(,self,.,payload,,or,,()),,rv,[,'message',],,=,,self,.,message,,return,,rv,,,,A view can now raise that exception with an error message.  Additionally\nsome extra payload can be provided as a dictionary through the,payload,parameter.,,,,Registering an Error Handler,\u00b6,,At that point views can raise that error, but it would immediately result\nin an internal server error.  The reason for this is that there is no\nhandler registered for this error class.  That however is easy to add:,,@app,.,errorhandler,(,InvalidUsage,),,def,,handle_invalid_usage,(,error,):,,response,,=,,jsonify,(,error,.,to_dict,()),,response,.,status_code,,=,,error,.,status_code,,return,,response,,,,,,Usage in Views,\u00b6,,Here is how a view can use that functionality:,,@app,.,route,(,'/foo',),,def,,get_foo,():,,raise,,InvalidUsage,(,'This view is gone',,,,status_code,=,410,),,,,,,,,,,,,,,,Contents,,,Implementing API Exceptions,,Simple Exception Class,,Registering an Error Handler,,Usage in Views,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,Application Dispatching,,Next:,Using URL Processors,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/77/", "content": "Include / Import css file as string | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Include / Import css file as string,,Posted by elmcrest\n    on 2011-10-19 @ 13:18\n    and filed in,Utilities,,Here a solution how to include your css file(s) as a string into your jinja2 template:,,i've got this from mitsuhiko. thx to him.,,in your .py file define this function:,,app,,=,,Flask,(,__name__,),,def,,get_resource_as_string,(,name,,,,charset,=,'utf-8',):,,with,,app,.,open_resource,(,name,),,as,,f,:,,return,,f,.,read,(),.,decode,(,charset,),,app,.,jinja_env,.,globals,[,'get_resource_as_string',],,=,,get_resource_as_string,,,in your template include the file with this:,,<,style,,type,=,text/css,>,{{,,get_resource_as_string,(,'static/styles.css',),,}},</,style,>,,,This snippet by elmcrest can be used freely for\n    anything you like. Consider it public domain.,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/88/", "content": "Job queue implemented using SQLite | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Job queue implemented using SQLite,,Posted by Thiago Arruda\n    on 2012-02-10 @ 13:11\n    and filed in,Utilities,,Very simple job queue implemented using SQLite.,,This can be used in the same way as in the snippet at,http://flask.pocoo.org/snippets/73/,.,,import,,os,,,,sqlite3,,from,,cPickle,,import,,loads,,,,dumps,,from,,time,,import,,sleep,,try,:,,from,,thread,,import,,get_ident,,except,,ImportError,:,,from,,dummy_thread,,import,,get_ident,,class,,SqliteQueue,(,object,):,,_create,,=,,(,,'CREATE TABLE IF NOT EXISTS queue ',,'(',,'  id INTEGER PRIMARY KEY AUTOINCREMENT,',,'  item BLOB',,')',,),,_count,,=,,'SELECT COUNT(*) FROM queue',,_iterate,,=,,'SELECT id, item FROM queue',,_append,,=,,'INSERT INTO queue (item) VALUES (?)',,_write_lock,,=,,'BEGIN IMMEDIATE',,_popleft_get,,=,,(,,'SELECT id, item FROM queue ',,'ORDER BY id LIMIT 1',,),,_popleft_del,,=,,'DELETE FROM queue WHERE id = ?',,_peek,,=,,(,,'SELECT item FROM queue ',,'ORDER BY id LIMIT 1',,),,def,,__init__,(,self,,,,path,):,,self,.,path,,=,,os,.,path,.,abspath,(,path,),,self,.,_connection_cache,,=,,{},,with,,self,.,_get_conn,(),,as,,conn,:,,conn,.,execute,(,self,.,_create,),,def,,__len__,(,self,):,,with,,self,.,_get_conn,(),,as,,conn,:,,l,,=,,conn,.,execute,(,self,.,_count,),.,next,()[,0,],,return,,l,,def,,__iter__,(,self,):,,with,,self,.,_get_conn,(),,as,,conn,:,,for,,id,,,,obj_buffer,,in,,conn,.,execute,(,self,.,_iterate,):,,yield,,loads,(,str,(,obj_buffer,)),,def,,_get_conn,(,self,):,,id,,=,,get_ident,(),,if,,id,,not,,in,,self,.,_connection_cache,:,,self,.,_connection_cache,[,id,],,=,,sqlite3,.,Connection,(,self,.,path,,,,timeout,=,60,),,return,,self,.,_connection_cache,[,id,],,def,,append,(,self,,,,obj,):,,obj_buffer,,=,,buffer,(,dumps,(,obj,,,,2,)),,with,,self,.,_get_conn,(),,as,,conn,:,,conn,.,execute,(,self,.,_append,,,,(,obj_buffer,,)),,def,,popleft,(,self,,,,sleep_wait,=,True,):,,keep_pooling,,=,,True,,wait,,=,,0.1,,max_wait,,=,,2,,tries,,=,,0,,with,,self,.,_get_conn,(),,as,,conn,:,,id,,=,,None,,while,,keep_pooling,:,,conn,.,execute,(,self,.,_write_lock,),,cursor,,=,,conn,.,execute,(,self,.,_popleft_get,),,try,:,,id,,,,obj_buffer,,=,,cursor,.,next,(),,keep_pooling,,=,,False,,except,,StopIteration,:,,conn,.,commit,(),,# unlock the database,,if,,not,,sleep_wait,:,,keep_pooling,,=,,False,,continue,,tries,,+=,,1,,sleep,(,wait,),,wait,,=,,min,(,max_wait,,,,tries,/,10,,+,,wait,),,if,,id,:,,conn,.,execute,(,self,.,_popleft_del,,,,(,id,,)),,return,,loads,(,str,(,obj_buffer,)),,return,,None,,def,,peek,(,self,):,,with,,self,.,_get_conn,(),,as,,conn,:,,cursor,,=,,conn,.,execute,(,self,.,_peek,),,try,:,,return,,loads,(,str,(,cursor,.,next,()[,0,])),,except,,StopIteration,:,,return,,None,,,Here's a comparison with a redis-based queue:,,# put on queue,$ python -mtimeit -s,'from sqlite_queue import SqliteQueue;from random import random;q = SqliteQueue(\"/run/shm/queue\")',,'q.append(random())',,1000,loops, best of,3,:,280,usec per loop\n$ python -mtimeit -s,'from redis import Redis;from random import random; q = Redis()',,'q.rpush(\"q\", random())',,1000,loops, best of,3,:,201,usec per loop,# remove from queue,$ python -mtimeit -s,'from sqlite_queue import SqliteQueue;from random import random;q = SqliteQueue(\"/run/shm/queue\")',,'q.popleft()',,1000,loops, best of,3,:,325,usec per loop\n$ python -mtimeit -s,'from redis import Redis;from random import random; q = Redis()',,'q.lpop(\"q\")',,1000,loops, best of,3,:,249,usec per loop,,It is fast, simple and requires no external process managing queue access.,,This snippet by Thiago Arruda can be used freely for\n    anything you like. Consider it public domain.,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/131/", "content": "Handling multiple sub-requests in a single Flask request | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Handling multiple sub-requests in a single Flask request,,Posted by Rajiv Mayani\n    on 2015-05-01 @ 18:56\n    and filed in,Utilities,,Batch Request,,[,,{,,\"method\",:,,\"GET\",,,,\"path\",:,,\"/user?pretty-print=True\",,,,},,,{,,\"method\",:,,\"POST\",,,,\"path\",:,,\"/user\",,,,\"body\",:,,{,,\"user\",:,,\"user-a\",,,,\"name\",:,,\"User Alpha\",,},,},,],,,Batch Response,,[,,{,,\"status\",:,,200,,,,\"response\",:,,[,,{,,\"user\",:,,\"user-a\",,},,,{,,\"user\",:,,\"user-b\",,},,],,},,,{,,\"status\",:,,\"400\",,,,\"response\",:,,{,,\"code\",:,,\"INVALID_USER\",,,,\"message\",:,,\"Username contains an invalid character '-'\",,,,},,},,],,,Code,,@app.route,(,'/batch',,,,methods,=,[,'POST',]),,def,,batch,(,username,):,,\"\"\",,Execute multiple requests, submitted as a batch.,,:statuscode 207: Multi status,,\"\"\",,try,:,,requests,,=,,json,.,loads,(,request,.,data,),,except,,ValueError,,as,,e,:,,abort,(,400,),,responses,,=,,[],,for,,index,,,,req,,in,,enumerate,(,requests,):,,method,,=,,req,[,'method',],,path,,=,,req,[,'path',],,body,,=,,req,.,get,(,'body',,,,None,),,with,,app,.,app_context,():,,with,,app,.,test_request_context,(,path,,,,method,=,method,,,,data,=,body,):,,try,:,,# Can modify flask.g here without affecting,,# flask.g of the root request for the batch,,# Pre process Request,,rv,,=,,app,.,preprocess_request,(),,if,,rv,,is,,None,:,,# Main Dispatch,,rv,,=,,app,.,dispatch_request,(),,except,,Exception,,as,,e,:,,rv,,=,,app,.,handle_user_exception,(,e,),,response,,=,,app,.,make_response,(,rv,),,# Post process Request,,response,,=,,app,.,process_response,(,response,),,# Response is a Flask response object.,,# _read_response(response) reads response.response,,# and returns a string. If your endpoints return JSON object,,,# this string would be the response as a JSON string.,,responses,.,append,({,,\"status\",:,,response,.,status_code,,,,\"response\",:,,_read_response,(,response,),,}),,return,,make_response,(,json,.,dumps,(,responses,),,,207,,,,HEADERS,),,,This snippet by Rajiv Mayani can be used freely for\n    anything you like. Consider it public domain.,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/30/", "content": "Flask Set Cookies by Response | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Flask Set Cookies by Response,,Posted by liuliang\n    on 2010-06-28 @ 15:03\n    and filed in,Utilities,,@app.route,(,'/set_cookie',),,def,,cookie_insertion,():,,redirect_to_index,,=,,redirect,(,'/index',),,response,,=,,current_app,.,make_response,(,redirect_to_index,,),,response,.,set_cookie,(,'cookie_name',,,value,=,'values',),,return,,response,,,This snippet by liuliang can be used freely for\n    anything you like. Consider it public domain.,,,Comments,,,,Comment\n          by maxp\n          on 2011-11-24 @ 07:37,Some browsers does not accept cookies on redirect!,,,,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/26/", "content": "Flask TestCase | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Flask TestCase,,Posted by Dan Jacob\n    on 2010-06-02 @ 13:17\n    and filed in,Utilities,,This is a subclass of,unittest.TestCase,to help manage your unit tests in Flask projects.,,It sets up the application and client and exposes the request context so you can do app-specific things outside of your views.,,import,,unittest,,class,,TestCase,(,unittest,.,TestCase,):,,def,,create_app,(,self,):,,\"\"\",,Create your Flask app here, with any,,configuration you need,,\"\"\",,raise,,NotImplementedError,,def,,__call__,(,self,,,,result,=,None,):,,\"\"\",,Does the required setup, doing it here,,means you don't have to call super.setUp,,in subclasses.,,\"\"\",,self,.,_pre_setup,(),,super,(,TestCase,,,,self,),.,__call__,(,result,),,self,.,_post_tearDown,(),,def,,_pre_setup,(,self,):,,self,.,app,,=,,self,.,create_app,(),,self,.,client,,=,,self,.,app,.,test_client,(),,# now you can use flask thread locals,,self,.,_ctx,,=,,self,.,app,.,test_request_context,(),,self,.,_ctx,.,push,(),,def,,_post_tearDown,(,self,):,,self,.,_ctx,.,pop,(),,,A further step would be to add convenience methods to this TestCase - for example,assertRedirects,or,assert404,:,,,def,,assert404,(,self,,,,response,):,,\"\"\",,Checks if a HTTP 404 returned,,e.g.,,resp = self.client.get(\"/\"),,self.assert404(resp),,\"\"\",,self,.,assertTrue,(,response,.,status_code,,==,,404,),,,If you need to handle fixtures with SQLAlchemy or another ORM/backend then the Fixture package may be of use:,,http://pypi.python.org/pypi/fixture/1.3.1,,This snippet by Dan Jacob can be used freely for\n    anything you like. Consider it public domain.,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/85/", "content": "Flask-Mail with google apps | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Flask-Mail with google apps,,Posted by kfk\n    on 2012-02-05 @ 15:12\n    and filed in,Utilities,,A simple example on how to use flask-mail with google or google apps email accounts.\nOther sources:,,-Flask-mail docs:,http://packages.python.org/flask-mail/,,-Google support:,http://support.google.com/mail/bin/answer.py?hl=en&answer=78799,,@kfk,,from,,flask,,import,,Flask,,from,,flaskext.mail,,import,,Mail,,,,Message,,app,,=,Flask,(,__name__,),,mail,=,Mail,(,app,),,app,.,config,.,update,(,,DEBUG,=,True,,,,#EMAIL SETTINGS,,MAIL_SERVER,=,'smtp.gmail.com',,,,MAIL_PORT,=,465,,,,MAIL_USE_SSL,=,True,,,,MAIL_USERNAME,,=,,'you@google.com',,,,MAIL_PASSWORD,,=,,'GooglePasswordHere',,),,mail,=,Mail,(,app,),,@app.route,(,\"/\",),,def,,index,():,,msg,,=,,Message,(,,'Hello',,,,sender,=,'you@dgoogle.com',,,,recipients,=,,[,'recipient@recipient_domain.com',]),,msg,.,body,,=,,\"This is the email body\",,mail,.,send,(,msg,),,return,,\"Sent\",,if,,__name__,,==,,\"__main__\",:,,app,.,run,(),,,This snippet by kfk can be used freely for\n    anything you like. Consider it public domain.,,,Comments,,,,Getting Google App account working\n          by Andrew Kaiser\n          on 2012-06-20 @ 19:26,I struggled getting a Google Apps account to work with Flask-Mail.  These are the settings that eventually worked for me.  Figured this might help someone else.,,app.config.update(\n        DEBUG=True,,,EMAIL SETTINGS\n        MAIL_SERVER='smtp.gmail.com',\n        MAIL_PORT=587,\n        MAIL_USE_SSL=False,\n        MAIL_USE_TLS=True,\n\tMAIL_USERNAME = 'account@domain.com',\n\tMAIL_PASSWORD = 'password'\n        ),,I'm brand new to Flask/Python and I was just wondering if someone could explain why it didn't appear that the mail settings I'd make in my config.py file would take.  The config settings for SQLAlchemy work fine from the config.py file, but for some reason these mail settings won't work.,,,,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "AJAX with jQuery", "url": "http://flask.pocoo.org/docs/1.0/patterns/jquery/", "content": ",,,,,AJAX with jQuery \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,,,,,AJAX with jQuery,\u00b6,,jQuery,is a small JavaScript library commonly used to simplify working\nwith the DOM and JavaScript in general.  It is the perfect tool to make\nweb applications more dynamic by exchanging JSON between server and\nclient.,,JSON itself is a very lightweight transport format, very similar to how\nPython primitives (numbers, strings, dicts and lists) look like which is\nwidely supported and very easy to parse.  It became popular a few years\nago and quickly replaced XML as transport format in web applications.,,,Loading jQuery,\u00b6,,In order to use jQuery, you have to download it first and place it in the\nstatic folder of your application and then ensure it\u2019s loaded.  Ideally\nyou have a layout template that is used for all pages where you just have\nto add a script statement to the bottom of your,<body>,to load jQuery:,,<,script,,type,=,text/javascript,,src,=,\"{{,,url_for('static', filename='jquery.js') }}\",></,script,>,,,,Another method is using Google\u2019s,AJAX Libraries API,to load jQuery:,,<,script,,src,=,\"//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js\",></,script,>,,<,script,>,window,.,jQuery,,||,,document,.,write,(,'<script src=\"{{,,url_for(',static,', filename=',jquery,.,js,') }}\">\\x3C/script>',)</,script,>,,,,In this case you have to put jQuery into your static folder as a fallback, but it will\nfirst try to load it directly from Google. This has the advantage that your\nwebsite will probably load faster for users if they went to at least one\nother website before using the same jQuery version from Google because it\nwill already be in the browser cache.,,,,Where is My Site?,\u00b6,,Do you know where your application is?  If you are developing the answer\nis quite simple: it\u2019s on localhost port something and directly on the root\nof that server.  But what if you later decide to move your application to\na different location?  For example to,http://example.com/myapp,?  On\nthe server side this never was a problem because we were using the handy,url_for(),function that could answer that question for\nus, but if we are using jQuery we should not hardcode the path to\nthe application but make that dynamic, so how can we do that?,,A simple method would be to add a script tag to our page that sets a\nglobal variable to the prefix to the root of the application.  Something\nlike this:,,<,script,,type,=,text/javascript,>,,$SCRIPT_ROOT,,=,,{{,,request.script_root,|,tojson,|,safe,,}},;,,</,script,>,,,,The,|safe,is necessary in Flask before 0.10 so that Jinja does not\nescape the JSON encoded string with HTML rules.  Usually this would be\nnecessary, but we are inside a,script,block here where different rules\napply.,,,Information for Pros,,In HTML the,script,tag is declared,CDATA,which means that entities\nwill not be parsed.  Everything until,</script>,is handled as script.\nThis also means that there must never be any,</,between the script\ntags.,|tojson,is kind enough to do the right thing here and\nescape slashes for you (,{{,,\"</script>\"|tojson|safe,,}},is rendered as,\"<\\/script>\",).,,In Flask 0.10 it goes a step further and escapes all HTML tags with\nunicode escapes.  This makes it possible for Flask to automatically\nmark the result as HTML safe.,,,,,JSON View Functions,\u00b6,,Now let\u2019s create a server side function that accepts two URL arguments of\nnumbers which should be added together and then sent back to the\napplication in a JSON object.  This is a really ridiculous example and is\nsomething you usually would do on the client side alone, but a simple\nexample that shows how you would use jQuery and Flask nonetheless:,,from,,flask,,import,,Flask,,,,jsonify,,,,render_template,,,,request,,app,,=,,Flask,(,__name__,),,@app,.,route,(,'/_add_numbers',),,def,,add_numbers,():,,a,,=,,request,.,args,.,get,(,'a',,,,0,,,,type,=,int,),,b,,=,,request,.,args,.,get,(,'b',,,,0,,,,type,=,int,),,return,,jsonify,(,result,=,a,,+,,b,),,@app,.,route,(,'/',),,def,,index,():,,return,,render_template,(,'index.html',),,,,As you can see I also added an,index,method here that renders a\ntemplate.  This template will load jQuery as above and have a little form\nwe can add two numbers and a link to trigger the function on the server\nside.,,Note that we are using the,get(),method here\nwhich will never fail.  If the key is missing a default value (here,0,)\nis returned.  Furthermore it can convert values to a specific type (like\nin our case,int,).  This is especially handy for code that is\ntriggered by a script (APIs, JavaScript etc.) because you don\u2019t need\nspecial error reporting in that case.,,,,The HTML,\u00b6,,Your index.html template either has to extend a,layout.html,template with\njQuery loaded and the,$SCRIPT_ROOT,variable set, or do that on the top.\nHere\u2019s the HTML code needed for our little application (,index.html,).\nNotice that we also drop the script directly into the HTML here.  It is\nusually a better idea to have that in a separate script file:,,<,script,,type,=,text/javascript,>,,$,(,function,(),,{,,$,(,'a#calculate',).,bind,(,'click',,,,function,(),,{,,$,.,getJSON,(,$SCRIPT_ROOT,,+,,'/_add_numbers',,,,{,,a,:,,$,(,'input[name=\"a\"]',).,val,(),,,b,:,,$,(,'input[name=\"b\"]',).,val,(),,},,,function,(,data,),,{,,$,(,\"#result\",).,text,(,data,.,result,);,,});,,return,,false,;,,});,,});,,</,script,>,,<,h1,>,jQuery Example,</,h1,>,,<,p,><,input,,type,=,text,,size,=,5,,name,=,a,>,+,<,input,,type,=,text,,size,=,5,,name,=,b,>,=,<,span,,id,=,result,>,?,</,span,>,,<,p,><,a,,href,=,#,,id,=,calculate,>,calculate server side,</,a,>,,,,I won\u2019t go into detail here about how jQuery works, just a very quick\nexplanation of the little bit of code above:,,,$(function(),,{,,...,,}),specifies code that should run once the\nbrowser is done loading the basic parts of the page.,,$('selector'),selects an element and lets you operate on it.,,element.bind('event',,,func),specifies a function that should run\nwhen the user clicked on the element.  If that function returns,false,, the default behavior will not kick in (in this case, navigate\nto the,#,URL).,,$.getJSON(url,,,data,,,func),sends a,GET,request to,url,and will\nsend the contents of the,data,object as query parameters.  Once the\ndata arrived, it will call the given function with the return value as\nargument.  Note that we can use the,$SCRIPT_ROOT,variable here that\nwe set earlier.,,,Check out the,example source,for a full\napplication demonstrating the code on this page, as well as the same\nthing using,XMLHttpRequest,and,fetch,.,,,,,,,,,,,,,Contents,,,AJAX with jQuery,,Loading jQuery,,Where is My Site?,,JSON View Functions,,The HTML,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,Message Flashing,,Next:,Custom Error Pages,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Adding a favicon", "url": "http://flask.pocoo.org/docs/1.0/patterns/favicon/", "content": ",,,,,Adding a favicon \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,,,,,Adding a favicon,\u00b6,,A \u201cfavicon\u201d is an icon used by browsers for tabs and bookmarks. This helps\nto distinguish your website and to give it a unique brand.,,A common question is how to add a favicon to a Flask application. First, of\ncourse, you need an icon. It should be 16 \u00d7 16 pixels and in the ICO file\nformat. This is not a requirement but a de-facto standard supported by all\nrelevant browsers. Put the icon in your static directory as,favicon.ico,.,,Now, to get browsers to find your icon, the correct way is to add a link\ntag in your HTML. So, for example:,,<,link,,rel,=,\"shortcut icon\",,href,=,\",{{,,url_for,(,'static',,,,filename,=,'favicon.ico',),,}},\",>,,,,That\u2019s all you need for most browsers, however some really old ones do not\nsupport this standard. The old de-facto standard is to serve this file,\nwith this name, at the website root. If your application is not mounted at\nthe root path of the domain you either need to configure the web server to\nserve the icon at the root or if you can\u2019t do that you\u2019re out of luck. If\nhowever your application is the root you can simply route a redirect:,,app,.,add_url_rule,(,'/favicon.ico',,,,redirect_to,=,url_for,(,'static',,,,filename,=,'favicon.ico',)),,,,If you want to save the extra redirect request you can also write a view\nusing,send_from_directory(),:,,import,,os,,from,,flask,,import,,send_from_directory,,@app,.,route,(,'/favicon.ico',),,def,,favicon,():,,return,,send_from_directory,(,os,.,path,.,join,(,app,.,root_path,,,,'static',),,,'favicon.ico',,,,mimetype,=,'image/vnd.microsoft.icon',),,,,We can leave out the explicit mimetype and it will be guessed, but we may\nas well specify it to avoid the extra guessing, as it will always be the\nsame.,,The above will serve the icon via your application and if possible it\u2019s\nbetter to configure your dedicated web server to serve it; refer to the\nweb server\u2019s documentation.,,,See also,\u00b6,,,The,Favicon,article on\nWikipedia,,,,,,,,,,,,,,Contents,,,Adding a favicon,,See also,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,MongoKit in Flask,,Next:,Streaming Contents,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/12/", "content": "Flashing errors from WTForms forms | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Flashing errors from WTForms forms,,Posted by LeafStorm\n    on 2010-05-07 @ 16:19\n    and filed in,Utilities,,The,flash,function is really useful, as it makes it easy to deliver notifications in a nice, easy way, and guarantee that the user will see it. Normally, when you use WTForms, you have to display errors from your template by showing them in the template next to the field or at the top of the form. But if you want to use the flash mechanism to show the errors, just call this on the form from within the view:,,def,,flash_errors,(,form,):,,for,,field,,,,errors,,in,,form,.,errors,.,items,():,,for,,error,,in,,errors,:,,flash,(,u,\"Error in the,%s,field -,%s,\",,%,,(,,getattr,(,form,,,,field,),.,label,.,text,,,,error,,)),,,That way, your site can have a nice, uniform user interface for notifications.,,This snippet by LeafStorm can be used freely for\n    anything you like. Consider it public domain.,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/127/", "content": "Dumping post-mortem information on production | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Dumping post-mortem information on production,,Posted by Paulo Bu\n    on 2014-11-28 @ 08:48\n    and filed in,Utilities,,Out of the box, when an exception is thrown on production (non debug mode), Flask will log the traceback and and execute the corresponding handler (either custom or default).,,In some circumstances, just a traceback is not enough to figure out obscure bugs. Info like the session, the request arguments, cookies, etc can be very handy, and it would be nice to have them logged too.,,There are two straightforward ways to do this. You can subclass Flask class and override,handle_exception(),method:,,class,,MyFlask,(,Flask,):,,def,,handle_exception,(,self,,,,e,):,,# add all necessary log info here,,log,.,info,(,\"dumping session:,%s,\",,,,session,),,log,.,info,(,\"dumping request:,%s,\",,,,request,),,log,.,info,(,\"dumping request args:,%s,\",,,,request,.,args,),,return,,super,(,MyFlask,,,,self,),.,handle_exception,(,e,),,,or, you can subscribe to the,got_request_exception(),signal, which is emitted inside Flask.handle_exception() method:,,def,,dump_environment,(,e,,,,**,extra,):,,# add all necessary log info here,,log,.,info,(,\"dumping session:,%s,\",,,,session,),,log,.,info,(,\"dumping request:,%s,\",,,,request,),,log,.,info,(,\"dumping request args:,%s,\",,,,request,.,args,),,from,,flask,,import,,got_request_exception,,got_request_exception,.,connect,(,dump_environment,),,,Keep in mind that the information you want to log depends on your needs,,session,,,request,and,request.args,are just examples, you should change it for whatever you think is useful to log in your own environment,,This snippet by Paulo Bu can be used freely for\n    anything you like. Consider it public domain.,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/1/", "content": "Custom HTTP methods | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Custom HTTP methods,,Posted by Peter Ward\n    on 2010-05-03 @ 10:15\n    and filed in,Utilities,,When you design the API for your website, it often makes sense to use things like the DELETE method to delete resources. Unfortunately, the HTML specification only allows GET and POST for form methods.,,With this snippet, you can write your forms like this:,,<,form,,action,=,\",{{,,url_for,(,'delete_entry',,,,id,=,10,),,}},\",,method,=,\"POST\",>,,<,input,,type,=,\"hidden\",,name,=,\"_method\",,value,=,\"DELETE\",,/>,,<,input,,type,=,\"submit\",,value,=,\"Delete entry 10\",,/>,,</,form,>,,,And use it in your view like this:,,@app.route,(,'/entries/<int:id>',,,,methods,=,[,'GET',]),,def,,get_entry,(,id,):,,...,,@app.route,(,'/entries/<int:id>',,,,methods,=,[,'POST',]),,def,,update_entry,(,id,):,,...,,@app.route,(,'/entries/<int:id>',,,,methods,=,[,'DELETE',]),,def,,delete_entry,(,id,):,,...,,,The magic snippet to get this working is this:,,@app.before_request,,def,,before_request,():,,method,,=,,request,.,form,.,get,(,'_method',,,,'',),.,upper,(),,if,,method,:,,request,.,environ,[,'REQUEST_METHOD',],,=,,method,,ctx,,=,,flask,.,_request_ctx_stack,.,top,,ctx,.,url_adapter,.,default_method,,=,,method,,assert,,request,.,method,,==,,method,,,Please note that this uses non-public parts of Flask's API, and hence could easily break in future versions (tested against development version of 0.2).,,(suggestions for improvement welcome!),,This snippet by Peter Ward can be used freely for\n    anything you like. Consider it public domain.,,,Comments,,,,Broken...\n          by Peter Ward\n          on 2010-05-23 @ 12:44,This snippet currently doesn't work.,,I am currently using a custom _RequestContext class to make this work, but I don't think it's the right solution.,,It would be possible to write some WSGI middleware to read the form data, change the request method, and then pass it to flask, but I believe this would mean then having to create a \"fake\" wsgi.input, which isn't very nice. :(,,,,Fixed by Armin\n          by Peter Ward\n          on 2010-11-21 @ 02:54,Please look at,http://flask.pocoo.org/snippets/38/,for a snippet to give the same effect.,,,,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/119/", "content": "Custom Flask JSONEncoder | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Custom Flask JSONEncoder,,Posted by Lin Liang\n    on 2013-11-28 @ 14:33\n    and filed in,Utilities,,As the default Flask json encoder serialized datetime as RFC 822 datetime strings, Sometimes we need serialized datetime in other format.\nThe snippet below is show how to custom Flask json encoder.,,Defualt JSONEncoder,,#!/usr/bin/env python,,# -*- coding: utf-8 -*-,,from,,flask,,import,,Flask,,,,jsonify,,from,,datetime,,import,,datetime,,app,,=,,Flask,(,__name__,),,@app.route,(,'/default',),,def,,default_jsonencoder,():,,now,,=,,datetime,.,now,(),,return,,jsonify,({,'now',:,,now,}),,if,,__name__,,==,,'__main__',:,,app,.,run,(,debug,=,True,),,,Here is the default result:,,http://127.0.0.1:5000/default\n\n{\n  \"now\": \"Thu, 28 Nov 2013 22:28:43 GMT\"\n},,Custom JSONEncoder,,#!/usr/bin/env python,,# -*- coding: utf-8 -*-,,from,,flask,,import,,Flask,,,,jsonify,,from,,flask.json,,import,,JSONEncoder,,import,,calendar,,from,,datetime,,import,,datetime,,class,,CustomJSONEncoder,(,JSONEncoder,):,,def,,default,(,self,,,,obj,):,,try,:,,if,,isinstance,(,obj,,,,datetime,):,,if,,obj,.,utcoffset,(),,is,,not,,None,:,,obj,,=,,obj,,-,,obj,.,utcoffset,(),,millis,,=,,int,(,,calendar,.,timegm,(,obj,.,timetuple,()),,*,,1000,,+,,obj,.,microsecond,,/,,1000,,),,return,,millis,,iterable,,=,,iter,(,obj,),,except,,TypeError,:,,pass,,else,:,,return,,list,(,iterable,),,return,,JSONEncoder,.,default,(,self,,,,obj,),,app,,=,,Flask,(,__name__,),,app,.,json_encoder,,=,,CustomJSONEncoder,,@app.route,(,'/custom',),,def,,custom_jsonencoder,():,,now,,=,,datetime,.,now,(),,return,,jsonify,({,'now',:,,now,}),,if,,__name__,,==,,'__main__',:,,app,.,run,(,debug,=,True,),,,Here is the custom result:,,http://127.0.0.1:5000/custom\n\n{\n  \"now\": 1385677404333\n},,This snippet by Lin Liang can be used freely for\n    anything you like. Consider it public domain.,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/13/", "content": "Creating your own local proxies | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Creating your own local proxies,,Posted by LeafStorm\n    on 2010-05-07 @ 22:20\n    and filed in,Utilities,,Sometimes, you don't want to prefix whatever you are sharing in your thread local with,g.,for some reason. To solve this problem, you can create your own local-type proxy objects with:,,from,,werkzeug.local,,import,,LocalProxy,,whatever,,=,,LocalProxy,(,lambda,:,,g,.,whatever,),,,Of course, this can be used for other things besides just,g,.,,from,,werkzeug.local,,import,,LocalProxy,,method,,=,,LocalProxy,(,lambda,:,,request,.,method,),,,Now that Werkzeug 0.6.1 is out, it's really more of an AnythingProxy than just a LocalProxy.,,This snippet by LeafStorm can be used freely for\n    anything you like. Consider it public domain.,,,Comments,,,,Use case\n          by LeafStorm\n          on 2010-05-07 @ 22:23,I discovered this neat little trick after I had written a bunch of code that saved directly to session. After I decided to use an external session store (actually CouchDB), I didn't want to rewrite it all, so I created a LocalProxy named session and switched the import.,,,,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/97/", "content": "Content negotiated error responses | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Content negotiated error responses,,Posted by J\u00f6kull S\u00f3lberg Au\u00f0unsson\n    on 2012-07-22 @ 21:24\n    and filed in,Utilities,,If you would like to trigger an HTTP exception like `abort` in Flask does, but prefer application/json this is one way to do it. You can raise with any JSON serializable object. If the user agent is a browser it will fall back to the Werkzeug errors which are HTML formatted.,,Usage,,from,,.exceptions,,import,,abort,,@app.route,(,\"/test\",),,def,,view,():,,abort,(,422,,,,{,'errors',:,,dict,(,password,=,\"Wrong password\",)}),,,Snippet,,from,,werkzeug.exceptions,,import,,default_exceptions,,,,HTTPException,,from,,flask,,import,,make_response,,,,abort,,as,,flask_abort,,,,request,,from,,flask.exceptions,,import,,JSONHTTPException,,def,,abort,(,status_code,,,,body,=,None,,,,headers,=,{}):,,\"\"\",,Content negiate the error response.,,\"\"\",,if,,'text/html',,in,,request,.,headers,.,get,(,\"Accept\",,,,\"\",):,,error_cls,,=,,HTTPException,,else,:,,error_cls,,=,,JSONHTTPException,,class_name,,=,,error_cls,.,__name__,,bases,,=,,[,error_cls,],,attributes,,=,,{,'code',:,,status_code,},,if,,status_code,,in,,default_exceptions,:,,# Mixin the Werkzeug exception,,bases,.,insert,(,0,,,,default_exceptions,[,status_code,]),,error_cls,,=,,type,(,class_name,,,,tuple,(,bases,),,,attributes,),,flask_abort,(,make_response,(,error_cls,(,body,),,,status_code,,,,headers,)),,,This snippet by J\u00f6kull S\u00f3lberg Au\u00f0unsson can be used freely for\n    anything you like. Consider it public domain.,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "Form Validation with WTForms", "url": "http://flask.pocoo.org/docs/1.0/patterns/wtforms/", "content": ",,,,,Form Validation with WTForms \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,,,,,Form Validation with WTForms,\u00b6,,When you have to work with form data submitted by a browser view, code\nquickly becomes very hard to read.  There are libraries out there designed\nto make this process easier to manage.  One of them is,WTForms,which we\nwill handle here.  If you find yourself in the situation of having many\nforms, you might want to give it a try.,,When you are working with WTForms you have to define your forms as classes\nfirst.  I recommend breaking up the application into multiple modules\n(,Larger Applications,) for that and adding a separate module for the\nforms.,,,Getting the most out of WTForms with an Extension,,The,Flask-WTF,extension expands on this pattern and adds a\nfew little helpers that make working with forms and Flask more\nfun.  You can get it from,PyPI,.,,,,The Forms,\u00b6,,This is an example form for a typical registration page:,,from,,wtforms,,import,,Form,,,,BooleanField,,,,StringField,,,,PasswordField,,,,validators,,class,,RegistrationForm,(,Form,):,,username,,=,,StringField,(,'Username',,,,[,validators,.,Length,(,min,=,4,,,,max,=,25,)]),,email,,=,,StringField,(,'Email Address',,,,[,validators,.,Length,(,min,=,6,,,,max,=,35,)]),,password,,=,,PasswordField,(,'New Password',,,,[,,validators,.,DataRequired,(),,,validators,.,EqualTo,(,'confirm',,,,message,=,'Passwords must match',),,]),,confirm,,=,,PasswordField,(,'Repeat Password',),,accept_tos,,=,,BooleanField,(,'I accept the TOS',,,,[,validators,.,DataRequired,()]),,,,,,In the View,\u00b6,,In the view function, the usage of this form looks like this:,,@app,.,route,(,'/register',,,,methods,=,[,'GET',,,,'POST',]),,def,,register,():,,form,,=,,RegistrationForm,(,request,.,form,),,if,,request,.,method,,==,,'POST',,and,,form,.,validate,():,,user,,=,,User,(,form,.,username,.,data,,,,form,.,email,.,data,,,,form,.,password,.,data,),,db_session,.,add,(,user,),,flash,(,'Thanks for registering',),,return,,redirect,(,url_for,(,'login',)),,return,,render_template,(,'register.html',,,,form,=,form,),,,,Notice we\u2019re implying that the view is using SQLAlchemy here\n(,SQLAlchemy in Flask,), but that\u2019s not a requirement, of course.  Adapt\nthe code as necessary.,,Things to remember:,,,create the form from the request,form,value if\nthe data is submitted via the HTTP,POST,method and,args,if the data is submitted as,GET,.,,to validate the data, call the,validate(),method, which will return,True,if the data validates,,False,otherwise.,,to access individual values from the form, access,form.<NAME>.data,.,,,,,Forms in Templates,\u00b6,,Now to the template side.  When you pass the form to the templates, you can\neasily render them there.  Look at the following example template to see\nhow easy this is.  WTForms does half the form generation for us already.\nTo make it even nicer, we can write a macro that renders a field with\nlabel and a list of errors if there are any.,,Here\u2019s an example,_formhelpers.html,template with such a macro:,,{%,,macro,,render_field,(,field,),,%},,<,dt,>,{{,,field.label,,}},,<,dd,>,{{,,field,(**,kwargs,)|,safe,,}},,{%,,if,,field.errors,,%},,<,ul,,class,=,errors,>,,{%,,for,,error,,in,,field.errors,,%},,<,li,>,{{,,error,,}},</,li,>,,{%,,endfor,,%},,</,ul,>,,{%,,endif,,%},,</,dd,>,,{%,,endmacro,,%},,,,This macro accepts a couple of keyword arguments that are forwarded to\nWTForm\u2019s field function, which renders the field for us.  The keyword\narguments will be inserted as HTML attributes.  So, for example, you can\ncall,render_field(form.username,,,class='username'),to add a class to\nthe input element.  Note that WTForms returns standard Python unicode\nstrings, so we have to tell Jinja2 that this data is already HTML-escaped\nwith the,|safe,filter.,,Here is the,register.html,template for the function we used above, which\ntakes advantage of the,_formhelpers.html,template:,,{%,,from,,\"_formhelpers.html\",,import,,render_field,,%},,<,form,,method,=,post,>,,<,dl,>,,{{,,render_field,(,form.username,),,}},,{{,,render_field,(,form.email,),,}},,{{,,render_field,(,form.password,),,}},,{{,,render_field,(,form.confirm,),,}},,{{,,render_field,(,form.accept_tos,),,}},,</,dl,>,,<,p,><,input,,type,=,submit,,value,=,Register,>,,</,form,>,,,,For more information about WTForms, head over to the,WTForms\nwebsite,.,,,,,,,,,,,,,Contents,,,Form Validation with WTForms,,The Forms,,In the View,,Forms in Templates,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,View Decorators,,Next:,Template Inheritance,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Caching", "url": "http://flask.pocoo.org/docs/1.0/patterns/caching/", "content": ",,,,,Caching \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,,,,,Caching,\u00b6,,When your application runs slow, throw some caches in.  Well, at least\nit\u2019s the easiest way to speed up things.  What does a cache do?  Say you\nhave a function that takes some time to complete but the results would\nstill be good enough if they were 5 minutes old.  So then the idea is that\nyou actually put the result of that calculation into a cache for some\ntime.,,Flask itself does not provide caching for you, but Werkzeug, one of the\nlibraries it is based on, has some very basic cache support.  It supports\nmultiple cache backends, normally you want to use a memcached server.,,,Setting up a Cache,\u00b6,,You create a cache object once and keep it around, similar to how,Flask,objects are created.  If you are using the\ndevelopment server you can create a,SimpleCache,object, that one is a simple\ncache that keeps the item stored in the memory of the Python interpreter:,,from,,werkzeug.contrib.cache,,import,,SimpleCache,,cache,,=,,SimpleCache,(),,,,If you want to use memcached, make sure to have one of the memcache modules\nsupported (you get them from,PyPI,) and a\nmemcached server running somewhere.  This is how you connect to such an\nmemcached server then:,,from,,werkzeug.contrib.cache,,import,,MemcachedCache,,cache,,=,,MemcachedCache,([,'127.0.0.1:11211',]),,,,If you are using App Engine, you can connect to the App Engine memcache\nserver easily:,,from,,werkzeug.contrib.cache,,import,,GAEMemcachedCache,,cache,,=,,GAEMemcachedCache,(),,,,,,Using a Cache,\u00b6,,Now how can one use such a cache?  There are two very important\noperations:,get(),and,set(),.  This is how to use them:,,To get an item from the cache call,get(),with a string as key name.\nIf something is in the cache, it is returned.  Otherwise that function\nwill return,None,:,,rv,,=,,cache,.,get,(,'my-item',),,,,To add items to the cache, use the,set(),method instead.  The first argument is the key and the second the value\nthat should be set.  Also a timeout can be provided after which the cache\nwill automatically remove item.,,Here a full example how this looks like normally:,,def,,get_my_item,():,,rv,,=,,cache,.,get,(,'my-item',),,if,,rv,,is,,None,:,,rv,,=,,calculate_value,(),,cache,.,set,(,'my-item',,,,rv,,,,timeout,=,5,,*,,60,),,return,,rv,,,,,,,,,,,,,,,Contents,,,Caching,,Setting up a Cache,,Using a Cache,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,Uploading Files,,Next:,View Decorators,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/114/", "content": "CMS Pages | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,CMS Pages,,Posted by kfk\n    on 2013-07-18 @ 21:22\n    and filed in,Utilities,,An idea to create pseudo dynamic text for pseudo static html pages (index, about us, contact, etc.).,,Below the sqlalchemy models:,,class Page(Base):\n\t__tablename__='pages'\n\tid Column(Integer, primary_key=True)\n\tname = Column(String())\n\tpage_snippets = relationship('PageSnippets', backref='pages', lazy='dynamic')\n\nclass PageSnippets('base')\n\t__tablename__='page_snippets'\n\tid Column(Integer, primary_key=True)\n\tsnippet = Column(String())\n\tlanguage = Column(String()),,The view:,,@app.route('/<page_id>')\ndef a_page(page_id):\n\tpage = Page.query.filter_by(id=page_id).one()\n\tpage_snippets = page.page_snippets\n\treturn render_template('a_page.html', page_snippets=page_snippets),,In the template:,,<p>{{page_snippets.intro}}</b>\n<div class=\"footer\">\n<p>{{page_snippets.footer}}\n</div>,,A jinja macro could be used to filter languages.,,This snippet by kfk can be used freely for\n    anything you like. Consider it public domain.,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/73/", "content": "Basic Message Queue with Redis | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Basic Message Queue with Redis,,Posted by Armin Ronacher\n    on 2011-09-24 @ 19:49\n    and filed in,Utilities,,For all your queuing needs there is,Flask-Celery,but if you just want a very basic queue functionality to get started you can build yourself something on top of redis very easily.,,Connecting to Redis,,from,,redis,,import,,Redis,,redis,,=,,Redis,(),,,The Configuration,,For all this to work you need to define the redis key that should be used for queuing in your app config:,,app,.,config,[,'REDIS_QUEUE_KEY',],,=,,'my_queue',,,The Decorator,,from,,flask,,import,,current_app,,from,,pickle,,import,,loads,,,,dumps,,class,,DelayedResult,(,object,):,,def,,__init__,(,self,,,,key,):,,self,.,key,,=,,key,,self,.,_rv,,=,,None,,@property,,def,,return_value,(,self,):,,if,,self,.,_rv,,is,,None,:,,rv,,=,,redis,.,get,(,self,.,key,),,if,,rv,,is,,not,,None,:,,self,.,_rv,,=,,loads,(,rv,),,return,,self,.,_rv,,def,,queuefunc,(,f,):,,def,,delay,(,*,args,,,,**,kwargs,):,,qkey,,=,,current_app,.,config,[,'REDIS_QUEUE_KEY',],,key,,=,,',%s,:result:,%s,',,%,,(,qkey,,,,str,(,uuid4,())),,s,,=,,dumps,((,f,,,,key,,,,args,,,,kwargs,)),,redis,.,rpush,(,current_app,.,config,[,'REDIS_QUEUE_KEY',],,,s,),,return,,DelayedResult,(,key,),,f,.,delay,,=,,delay,,return,,f,,,The Queue Runner,,The queue runner is a simple function that runs in a while loop and processes entries from a list key in redis.  Whenever something is added on there it will pop one item off the list, deserialize it, run the function and put the result into redis for a few seconds (by default 500).  If the return value is,None,we don't store anything because in that case the assumption is that the return value is not interesting.,,def,,queue_daemon,(,app,,,,rv_ttl,=,500,):,,while,,1,:,,msg,,=,,redis,.,blpop,(,app,.,config,[,'REDIS_QUEUE_KEY',]),,func,,,,key,,,,args,,,,kwargs,,=,,loads,(,msg,[,1,]),,try,:,,rv,,=,,func,(,*,args,,,,**,kwargs,),,except,,Exception,,,,e,:,,rv,,=,,e,,if,,rv,,is,,not,,None,:,,redis,.,set,(,key,,,,dumps,(,rv,)),,redis,.,expire,(,key,,,,rv_ttl,),,,To run the daemon you can write a simple script like this:,,#!/usr/bin/env python,,from,,yourapp,,import,,app,,from,,that_queue_module,,import,,queue_daemon,,queue_daemon,(,app,),,,Running Functions through the Queue,,To define a function to be run through the queue you need to use the,@queuefunc,decorator:,,@queuefunc,,def,,add,(,a,,,,b,):,,return,,a,,+,,b,,,When you call it normally it will be executed synchronously and in the same process.  If you however call,add.delay(a, b),it will send off the request to call this function to the queue and return you a,QueueResult,object.  This also will need an active request context.  Here an example from a python shell:,,>>>,from,,yourapp,,import,,app,,,,add,,>>>,,>>>,ctx,,=,,app,.,test_request_context,(),,>>>,ctx,.,push,(),,>>>,rv,,=,,add,.,delay,(,1,,,,2,),,>>>,rv,.,return_value,,3,,,rv.return_value,will be,None,until the key is available.  Usually you will want to poll for a result over HTTP or not at all, so the,return_value,attribute is only really useful for testing.,,If you want to poll this result the,rv,object has a,key,attribute which is the redis key corresponding to the result:,,>>>,rv,.,key,,'my_queue:result:7d43370c-0f98-4e98-9d4b-1cdaf7362eb5',,,Here is how you could poll for this via HTTP:,,from,,flask,,import,,session,,,,abort,,,,jsonify,,@app.route,(,'/add',),,def,,add_numbers,():,,a,,=,,request,.,args,.,get,(,'a',,,,type,=,int,),,b,,=,,request,.,args,.,get,(,'b',,,,type,=,int,),,if,,a,,is,,None,,or,,b,,is,,None,:,,abort,(,400,),,rv,,=,,add,.,delay,(,a,,,,b,),,session,[,'add_result_key',],,=,,rv,.,key,,return,,'Waiting for result...',,@app.route,(,'/add-result',),,def,,add_numbers_result,():,,key,,=,,session,.,get,(,'add_result_key',),,if,,key,,is,,None,:,,return,,jsonify,(,ready,=,False,),,rv,,=,,DelayedResult,(,key,),,if,,rv,.,return_value,,is,,None,:,,return,,jsonify,(,ready,=,False,),,redis,.,delete,(,key,),,del,,session,[,'add_result_key',],,return,,jsonify,(,ready,=,True,,,,result,=,rv,.,return_value,),,,First you let the user access,/add,to do something, then you can use JavaScript to poll,/add-result,.  Note that once successfully polled the result is deleted from the redis server.,,This snippet by Armin Ronacher can be used freely for\n    anything you like. Consider it public domain.,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/113/", "content": "Python Anywhere | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Python Anywhere,,Posted by Matheus Godoy\n    on 2013-07-06 @ 02:40\n    and filed in,Deployment,,https://www.pythonanywhere.com,,This snippet by Matheus Godoy can be used freely for\n    anything you like. Consider it public domain.,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/69/", "content": "Passing REMOTE_USER from Apache as a reverse proxy to web application servers | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Passing REMOTE_USER from Apache as a reverse proxy to web application servers,,Posted by Armin Ronacher\n    on 2011-09-08 @ 19:42\n    and filed in,Deployment,,The,REMOTE_USER,key in the CGI/WSGI environment is well established as to where servers should put the identity of an authenticated user.  This is also where mod_wsgi will store it.  But what if you are using HTTP proxying?  If you are using mod_proxy in Apache you can use the,RequestHeader,directive to pass that information to Flask as an HTTP header:,,RequestHeader,set X-Proxy-REMOTE-USER %{REMOTE_USER},,Then you only need a small WSGI middleware to rename the key:,,class,,RemoteUserMiddleware,(,object,):,,def,,__init__,(,self,,,,app,):,,self,.,app,,=,,app,,def,,__call__,(,self,,,,environ,,,,start_response,):,,user,,=,,environ,.,pop,(,'HTTP_X_PROXY_REMOTE_USER',,,,None,),,environ,[,'REMOTE_USER',],,=,,user,,return,,self,.,app,(,environ,,,,start_response,),,,And hook in the middleware:,,app,.,wsgi_app,,=,,RemoteUserMiddleware,(,app,.,wsgi_app,),,,Inside a view you can then access,REMOTE_USER,as usual:,,remote_user,,=,,request,.,environ,.,get,(,'REMOTE_USER',),,if,,remote_user,:,,...,,,This snippet by Armin Ronacher can be used freely for\n    anything you like. Consider it public domain.,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/35/", "content": "Fixing SCRIPT_NAME/url_scheme when behind reverse proxy | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Fixing SCRIPT_NAME/url_scheme when behind reverse proxy,,Posted by Peter Hansen\n    on 2010-07-21 @ 20:52\n    and filed in,Deployment,,When running behind a reverse proxy, not only is the public URL different, but often you want the application to appear below some path other than /.  Sometimes you even use https from the outside, in which case you likely don't use SSL between the proxy server and your Flask app.,,In such cases, if you can control the headers in the proxy server (easy with Nginx and many others), this middleware lets you transparently change where the application appears.,This works dynamically for each request, so you can simultaneously access from the local machine using,http://localhost:port,without using the full URL.,,class,,ReverseProxied,(,object,):,,'''Wrap the application in this middleware and configure the,,front-end server to add these headers, to let you quietly bind,,this to a URL other than / and to an HTTP scheme that is,,different than what is used locally.,,In nginx:,,location /myprefix {,,proxy_pass http://192.168.0.1:5001;,,proxy_set_header Host $host;,,proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;,,proxy_set_header X-Scheme $scheme;,,proxy_set_header X-Script-Name /myprefix;,,},,:param app: the WSGI application,,''',,def,,__init__,(,self,,,,app,):,,self,.,app,,=,,app,,def,,__call__,(,self,,,,environ,,,,start_response,):,,script_name,,=,,environ,.,get,(,'HTTP_X_SCRIPT_NAME',,,,'',),,if,,script_name,:,,environ,[,'SCRIPT_NAME',],,=,,script_name,,path_info,,=,,environ,[,'PATH_INFO',],,if,,path_info,.,startswith,(,script_name,):,,environ,[,'PATH_INFO',],,=,,path_info,[,len,(,script_name,):],,scheme,,=,,environ,.,get,(,'HTTP_X_SCHEME',,,,'',),,if,,scheme,:,,environ,[,'wsgi.url_scheme',],,=,,scheme,,return,,self,.,app,(,environ,,,,start_response,),,,Install in app using:,,,app,,=,,Flask,(,__name__,),,app,.,wsgi_app,,=,,ReverseProxied,(,app,.,wsgi_app,),,,That's it!  Now your page accessible locally at,http://192.168.0.1:5001/myapp,will also be accessible externally at,https://example.com/myprefix/myapp,.,,Don't forget to,/etc/init.d/nginx reload,or the equivalent after changing your server configuration.,,This snippet by Peter Hansen can be used freely for\n    anything you like. Consider it public domain.,,,Comments,,,,Fixing a redirection bug\n          by Ren\u00e9 Kijewski\n          on 2012-07-20 @ 13:56,If you use redirections in Flask, you need to add three further lines to make the domain known:,,server = environ.get('HTTP_X_FORWARDED_SERVER', '')\n        if server:\n            environ['HTTP_HOST'] = server,,(Tested with Apache2.),,,,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/47/", "content": "Fix for Connection Reset on POST | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Fix for Connection Reset on POST,,Posted by Armin Ronacher\n    on 2011-06-03 @ 14:20\n    and filed in,Deployment,,You might notice that if you start not accessing,.form,or,.files,on incoming POST requests, some browsers will honor this with a connection reset message.  This can happen if you start rejecting uploads that are larger than a given size.,,Some WSGI servers solve that problem for you, others do not.  For instance the builtin Flask webserver is pretty dumb and will not attempt to fix this problem.,,Thankfully it's easy to fix this in a WSGI middleware.  But first we have to figure out why it's actually happening.  The reason this happens is that the browser will have queued up quite some bytes sent and will not start reading from the socket unless it transmitted everything to the server.  Because the server however is not accepting the data, it's not responding.,,The fix is to actually read all the bytes on the server and discarding them.,,This can do the trick for you:,,from,,werkzeug.wsgi,,import,,LimitedStream,,class,,StreamConsumingMiddleware,(,object,):,,def,,__init__,(,self,,,,app,):,,self,.,app,,=,,app,,def,,__call__,(,self,,,,environ,,,,start_response,):,,stream,,=,,LimitedStream,(,environ,[,'wsgi.input',],,,int,(,environ,[,'CONTENT_LENGTH',],,or,,0,)),,environ,[,'wsgi.input',],,=,,stream,,app_iter,,=,,self,.,app,(,environ,,,,start_response,),,try,:,,stream,.,exhaust,(),,for,,event,,in,,app_iter,:,,yield,,event,,finally,:,,if,,hasattr,(,app_iter,,,,'close',):,,app_iter,.,close,(),,,To apply the middleware in Flask, do this:,,app,.,wsgi_app,,=,,StreamConsumingMiddleware,(,app,.,wsgi_app,),,,What does this do?  We wrap the stream in a,LimitedStream,.  This class in Werkzeug internally keeps track of how many bytes were consumed and will not read past the given limit (The,CONTENT_LEGNTH,).  The call to,exhaust(),will start exhausting all bytes after the application provided the response.  The downside of this solution is that your application must not not read bytes in a streamed response.,,This snippet by Armin Ronacher can be used freely for\n    anything you like. Consider it public domain.,,,Comments,,,,force POST method\n          by Ahmad Sofyan\n          on 2012-05-01 @ 03:16,I have problem with facebook apps, they always have request POST method:,,\"POST / HTTP/1.1\" 302,,Which then replied by this error:\nreadv() failed (104: Connection reset by peer) while reading upstream,,Its always served ok when I open it directly (GET). Is it wsgi problem or flask problem?,,,,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "Lazily Loading Views", "url": "http://flask.pocoo.org/docs/1.0/patterns/lazyloading/", "content": ",,,,,Lazily Loading Views \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,,,,,Lazily Loading Views,\u00b6,,Flask is usually used with the decorators.  Decorators are simple and you\nhave the URL right next to the function that is called for that specific\nURL.  However there is a downside to this approach: it means all your code\nthat uses decorators has to be imported upfront or Flask will never\nactually find your function.,,This can be a problem if your application has to import quick.  It might\nhave to do that on systems like Google\u2019s App Engine or other systems.  So\nif you suddenly notice that your application outgrows this approach you\ncan fall back to a centralized URL mapping.,,The system that enables having a central URL map is the,add_url_rule(),function.  Instead of using decorators,\nyou have a file that sets up the application with all URLs.,,,Converting to Centralized URL Map,\u00b6,,Imagine the current application looks somewhat like this:,,from,,flask,,import,,Flask,,app,,=,,Flask,(,__name__,),,@app,.,route,(,'/',),,def,,index,():,,pass,,@app,.,route,(,'/user/<username>',),,def,,user,(,username,):,,pass,,,,Then, with the centralized approach you would have one file with the views\n(,views.py,) but without any decorator:,,def,,index,():,,pass,,def,,user,(,username,):,,pass,,,,And then a file that sets up an application which maps the functions to\nURLs:,,from,,flask,,import,,Flask,,from,,yourapplication,,import,,views,,app,,=,,Flask,(,__name__,),,app,.,add_url_rule,(,'/',,,,view_func,=,views,.,index,),,app,.,add_url_rule,(,'/user/<username>',,,,view_func,=,views,.,user,),,,,,,Loading Late,\u00b6,,So far we only split up the views and the routing, but the module is still\nloaded upfront.  The trick is to actually load the view function as needed.\nThis can be accomplished with a helper class that behaves just like a\nfunction but internally imports the real function on first use:,,from,,werkzeug,,import,,import_string,,,,cached_property,,class,,LazyView,(,object,):,,def,,__init__,(,self,,,,import_name,):,,self,.,__module__,,,,self,.,__name__,,=,,import_name,.,rsplit,(,'.',,,,1,),,self,.,import_name,,=,,import_name,,@cached_property,,def,,view,(,self,):,,return,,import_string,(,self,.,import_name,),,def,,__call__,(,self,,,,*,args,,,,**,kwargs,):,,return,,self,.,view,(,*,args,,,,**,kwargs,),,,,What\u2019s important here is is that,__module__,and,__name__,are properly\nset.  This is used by Flask internally to figure out how to name the\nURL rules in case you don\u2019t provide a name for the rule yourself.,,Then you can define your central place to combine the views like this:,,from,,flask,,import,,Flask,,from,,yourapplication.helpers,,import,,LazyView,,app,,=,,Flask,(,__name__,),,app,.,add_url_rule,(,'/',,,,view_func,=,LazyView,(,'yourapplication.views.index',)),,app,.,add_url_rule,(,'/user/<username>',,,,view_func,=,LazyView,(,'yourapplication.views.user',)),,,,You can further optimize this in terms of amount of keystrokes needed to\nwrite this by having a function that calls into,add_url_rule(),by prefixing a string with the project\nname and a dot, and by wrapping,view_func,in a,LazyView,as needed.,,def,,url,(,import_name,,,,url_rules,=,[],,,**,options,):,,view,,=,,LazyView,(,'yourapplication.',,+,,import_name,),,for,,url_rule,,in,,url_rules,:,,app,.,add_url_rule,(,url_rule,,,,view_func,=,view,,,,**,options,),,# add a single route to the index view,,url,(,'views.index',,,,[,'/',]),,# add two routes to a single function endpoint,,url_rules,,=,,[,'/user/',,,'/user/<username>',],,url,(,'views.user',,,,url_rules,),,,,One thing to keep in mind is that before and after request handlers have\nto be in a file that is imported upfront to work properly on the first\nrequest.  The same goes for any kind of remaining decorator.,,,,,,,,,,,,,Contents,,,Lazily Loading Views,,Converting to Centralized URL Map,,Loading Late,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,Custom Error Pages,,Next:,MongoKit in Flask,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Blog Blueprint", "url": "http://flask.pocoo.org/docs/1.0/tutorial/blog/", "content": ",,,,,Blog Blueprint \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,Tutorial,\u00bb,,,,,,,,,Blog Blueprint,\u00b6,,You\u2019ll use the same techniques you learned about when writing the\nauthentication blueprint to write the blog blueprint. The blog should\nlist all posts, allow logged in users to create posts, and allow the\nauthor of a post to edit or delete it.,,As you implement each view, keep the development server running. As you\nsave your changes, try going to the URL in your browser and testing them\nout.,,,The Blueprint,\u00b6,,Define the blueprint and register it in the application factory.,,,flaskr/blog.py,\u00b6,,from,,flask,,import,,(,,Blueprint,,,,flash,,,,g,,,,redirect,,,,render_template,,,,request,,,,url_for,,),,from,,werkzeug.exceptions,,import,,abort,,from,,flaskr.auth,,import,,login_required,,from,,flaskr.db,,import,,get_db,,bp,,=,,Blueprint,(,'blog',,,,__name__,),,,,,Import and register the blueprint from the factory using,app.register_blueprint(),. Place the\nnew code at the end of the factory function before returning the app.,,,flaskr/__init__.py,\u00b6,,def,,create_app,():,,app,,=,,...,,# existing code omitted,,from,,.,,import,,blog,,app,.,register_blueprint,(,blog,.,bp,),,app,.,add_url_rule,(,'/',,,,endpoint,=,'index',),,return,,app,,,,,Unlike the auth blueprint, the blog blueprint does not have a,url_prefix,. So the,index,view will be at,/,, the,create,view at,/create,, and so on. The blog is the main feature of Flaskr,\nso it makes sense that the blog index will be the main index.,,However, the endpoint for the,index,view defined below will be,blog.index,. Some of the authentication views referred to a plain,index,endpoint.,app.add_url_rule(),associates the endpoint name,'index',with the,/,url so that,url_for('index'),or,url_for('blog.index'),will both work,\ngenerating the same,/,URL either way.,,In another application you might give the blog blueprint a,url_prefix,and define a separate,index,view in the application\nfactory, similar to the,hello,view. Then the,index,and,blog.index,endpoints and URLs would be different.,,,,Index,\u00b6,,The index will show all of the posts, most recent first. A,JOIN,is\nused so that the author information from the,user,table is\navailable in the result.,,,flaskr/blog.py,\u00b6,,@bp.route,(,'/',),,def,,index,():,,db,,=,,get_db,(),,posts,,=,,db,.,execute,(,,'SELECT p.id, title, body, created, author_id, username',,' FROM post p JOIN user u ON p.author_id = u.id',,' ORDER BY created DESC',,),.,fetchall,(),,return,,render_template,(,'blog/index.html',,,,posts,=,posts,),,,,,,flaskr/templates/blog/index.html,\u00b6,,{%,,extends,,'base.html',,%},,{%,,block,,header,,%},,<,h1,>,{%,,block,,title,,%},Posts,{%,,endblock,,%},</,h1,>,,{%,,if,,g.user,,%},,<,a,,class,=,\"action\",,href,=,\",{{,,url_for,(,'blog.create',),,}},\",>,New,</,a,>,,{%,,endif,,%},,{%,,endblock,,%},,{%,,block,,content,,%},,{%,,for,,post,,in,,posts,,%},,<,article,,class,=,\"post\",>,,<,header,>,,<,div,>,,<,h1,>,{{,,post,[,'title',],,}},</,h1,>,,<,div,,class,=,\"about\",>,by,{{,,post,[,'username',],,}},on,{{,,post,[,'created',],.strftime,(,'%Y-%m-%d',),,}},</,div,>,,</,div,>,,{%,,if,,g.user,[,'id',],,==,,post,[,'author_id',],,%},,<,a,,class,=,\"action\",,href,=,\",{{,,url_for,(,'blog.update',,,,id,=,post,[,'id',]),,}},\",>,Edit,</,a,>,,{%,,endif,,%},,</,header,>,,<,p,,class,=,\"body\",>,{{,,post,[,'body',],,}},</,p,>,,</,article,>,,{%,,if,,not,,loop,.last,,%},,<,hr,>,,{%,,endif,,%},,{%,,endfor,,%},,{%,,endblock,,%},,,,,When a user is logged in, the,header,block adds a link to the,create,view. When the user is the author of a post, they\u2019ll see an\n\u201cEdit\u201d link to the,update,view for that post.,loop.last,is a\nspecial variable available inside,Jinja for loops,. It\u2019s used to\ndisplay a line after each post except the last one, to visually separate\nthem.,,,,Create,\u00b6,,The,create,view works the same as the auth,register,view. Either\nthe form is displayed, or the posted data is validated and the post is\nadded to the database or an error is shown.,,The,login_required,decorator you wrote earlier is used on the blog\nviews. A user must be logged in to visit these views, otherwise they\nwill be redirected to the login page.,,,flaskr/blog.py,\u00b6,,@bp.route,(,'/create',,,,methods,=,(,'GET',,,,'POST',)),,@login_required,,def,,create,():,,if,,request,.,method,,==,,'POST',:,,title,,=,,request,.,form,[,'title',],,body,,=,,request,.,form,[,'body',],,error,,=,,None,,if,,not,,title,:,,error,,=,,'Title is required.',,if,,error,,is,,not,,None,:,,flash,(,error,),,else,:,,db,,=,,get_db,(),,db,.,execute,(,,'INSERT INTO post (title, body, author_id)',,' VALUES (?, ?, ?)',,,,(,title,,,,body,,,,g,.,user,[,'id',]),,),,db,.,commit,(),,return,,redirect,(,url_for,(,'blog.index',)),,return,,render_template,(,'blog/create.html',),,,,,,flaskr/templates/blog/create.html,\u00b6,,{%,,extends,,'base.html',,%},,{%,,block,,header,,%},,<,h1,>,{%,,block,,title,,%},New Post,{%,,endblock,,%},</,h1,>,,{%,,endblock,,%},,{%,,block,,content,,%},,<,form,,method,=,\"post\",>,,<,label,,for,=,\"title\",>,Title,</,label,>,,<,input,,name,=,\"title\",,id,=,\"title\",,value,=,\",{{,,request.form,[,'title',],,}},\",,required,>,,<,label,,for,=,\"body\",>,Body,</,label,>,,<,textarea,,name,=,\"body\",,id,=,\"body\",>,{{,,request.form,[,'body',],,}},</,textarea,>,,<,input,,type,=,\"submit\",,value,=,\"Save\",>,,</,form,>,,{%,,endblock,,%},,,,,,,Update,\u00b6,,Both the,update,and,delete,views will need to fetch a,post,by,id,and check if the author matches the logged in user. To avoid\nduplicating code, you can write a function to get the,post,and call\nit from each view.,,,flaskr/blog.py,\u00b6,,def,,get_post,(,id,,,,check_author,=,True,):,,post,,=,,get_db,(),.,execute,(,,'SELECT p.id, title, body, created, author_id, username',,' FROM post p JOIN user u ON p.author_id = u.id',,' WHERE p.id = ?',,,,(,id,,),,),.,fetchone,(),,if,,post,,is,,None,:,,abort,(,404,,,,\"Post id {0} doesn't exist.\",.,format,(,id,)),,if,,check_author,,and,,post,[,'author_id',],,!=,,g,.,user,[,'id',]:,,abort,(,403,),,return,,post,,,,,abort(),will raise a special exception that returns an HTTP status\ncode. It takes an optional message to show with the error, otherwise a\ndefault message is used.,404,means \u201cNot Found\u201d, and,403,means\n\u201cForbidden\u201d. (,401,means \u201cUnauthorized\u201d, but you redirect to the\nlogin page instead of returning that status.),,The,check_author,argument is defined so that the function can be\nused to get a,post,without checking the author. This would be useful\nif you wrote a view to show an individual post on a page, where the user\ndoesn\u2019t matter because they\u2019re not modifying the post.,,,flaskr/blog.py,\u00b6,,@bp.route,(,'/<int:id>/update',,,,methods,=,(,'GET',,,,'POST',)),,@login_required,,def,,update,(,id,):,,post,,=,,get_post,(,id,),,if,,request,.,method,,==,,'POST',:,,title,,=,,request,.,form,[,'title',],,body,,=,,request,.,form,[,'body',],,error,,=,,None,,if,,not,,title,:,,error,,=,,'Title is required.',,if,,error,,is,,not,,None,:,,flash,(,error,),,else,:,,db,,=,,get_db,(),,db,.,execute,(,,'UPDATE post SET title = ?, body = ?',,' WHERE id = ?',,,,(,title,,,,body,,,,id,),,),,db,.,commit,(),,return,,redirect,(,url_for,(,'blog.index',)),,return,,render_template,(,'blog/update.html',,,,post,=,post,),,,,,Unlike the views you\u2019ve written so far, the,update,function takes\nan argument,,id,. That corresponds to the,<int:id>,in the route.\nA real URL will look like,/1/update,. Flask will capture the,1,,\nensure it\u2019s an,int,, and pass it as the,id,argument. If you\ndon\u2019t specify,int:,and instead do,<id>,, it will be a string.\nTo generate a URL to the update page,,url_for(),needs to be passed\nthe,id,so it knows what to fill in:,url_for('blog.update',,,id=post['id']),. This is also in the,index.html,file above.,,The,create,and,update,views look very similar. The main\ndifference is that the,update,view uses a,post,object and an,UPDATE,query instead of an,INSERT,. With some clever refactoring,\nyou could use one view and template for both actions, but for the\ntutorial it\u2019s clearer to keep them separate.,,,flaskr/templates/blog/update.html,\u00b6,,{%,,extends,,'base.html',,%},,{%,,block,,header,,%},,<,h1,>,{%,,block,,title,,%},Edit \",{{,,post,[,'title',],,}},\",{%,,endblock,,%},</,h1,>,,{%,,endblock,,%},,{%,,block,,content,,%},,<,form,,method,=,\"post\",>,,<,label,,for,=,\"title\",>,Title,</,label,>,,<,input,,name,=,\"title\",,id,=,\"title\",,value,=,\",{{,,request.form,[,'title',],,or,,post,[,'title',],,}},\",,required,>,,<,label,,for,=,\"body\",>,Body,</,label,>,,<,textarea,,name,=,\"body\",,id,=,\"body\",>,{{,,request.form,[,'body',],,or,,post,[,'body',],,}},</,textarea,>,,<,input,,type,=,\"submit\",,value,=,\"Save\",>,,</,form,>,,<,hr,>,,<,form,,action,=,\",{{,,url_for,(,'blog.delete',,,,id,=,post,[,'id',]),,}},\",,method,=,\"post\",>,,<,input,,class,=,\"danger\",,type,=,\"submit\",,value,=,\"Delete\",,onclick,=,\"return confirm('Are you sure?');\",>,,</,form,>,,{%,,endblock,,%},,,,,This template has two forms. The first posts the edited data to the\ncurrent page (,/<id>/update,). The other form contains only a button\nand specifies an,action,attribute that posts to the delete view\ninstead. The button uses some JavaScript to show a confirmation dialog\nbefore submitting.,,The pattern,{{,,request.form['title'],,or,,post['title'],,}},is used to\nchoose what data appears in the form. When the form hasn\u2019t been\nsubmitted, the original,post,data appears, but if invalid form data\nwas posted you want to display that so the user can fix the error, so,request.form,is used instead.,request,is another variable\nthat\u2019s automatically available in templates.,,,,Delete,\u00b6,,The delete view doesn\u2019t have its own template, the delete button is part\nof,update.html,and posts to the,/<id>/delete,URL. Since there\nis no template, it will only handle the,POST,method then redirect\nto the,index,view.,,,flaskr/blog.py,\u00b6,,@bp.route,(,'/<int:id>/delete',,,,methods,=,(,'POST',,)),,@login_required,,def,,delete,(,id,):,,get_post,(,id,),,db,,=,,get_db,(),,db,.,execute,(,'DELETE FROM post WHERE id = ?',,,,(,id,,)),,db,.,commit,(),,return,,redirect,(,url_for,(,'blog.index',)),,,,,Congratulations, you\u2019ve now finished writing your application! Take some\ntime to try out everything in the browser. However, there\u2019s still more\nto do before the project is complete.,,Continue to,Make the Project Installable,.,,,,,,,,,,,,,Contents,,,Blog Blueprint,,The Blueprint,,Index,,Create,,Update,,Delete,,,,,Navigation,,,Overview,,,Tutorial,,,Previous:,Static Files,,Next:,Make the Project Installable,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/99/", "content": "Apache hosting | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Apache hosting,,Posted by Dorianux\n    on 2012-09-20 @ 12:43\n    and filed in,Deployment,,I had problems with the default Apache wsgi-setup from the Flask docs:,http://flask.pocoo.org/docs/deploying/mod_wsgi/#creating-a-wsgi-file,,,I simply changed the python current-working-directory in the wsgi-file to the application directory.,,Now Apache is fine.,,myapp.wsgi:,,import,,sys,,,,os,,sys,.,path,.,insert,,(,0,,,'/var/www/myapp',),,os,.,chdir,(,\"/var/www/myapp\",),,from,,srv,,import,,app,,as,,application,,,This snippet by Dorianux can be used freely for\n    anything you like. Consider it public domain.,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/48/", "content": "Deploying a Flask app on Dotcloud | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Deploying a Flask app on Dotcloud,,Posted by Marc de Verdelhan\n    on 2011-06-17 @ 03:09\n    and filed in,Deployment,,Please note: this snippet does not cover the connection to the database.,,How to deploy a Flask app on Dotcloud,,Create the namespace you want:,,dotcloud create <namespace>,,A DotCloud application is described by a,build file,, which is a simple YAML file named \"dotcloud.yml\" located in your local source directory. To add a new python service to your app, just add the following lines to,<source_folder>/dotcloud.yml,:,,www:\n  type: python,,Now create a,<source_folder>/wsgi.py,file containing:,,import,,sys,,sys,.,path,.,append,(,'/home/dotcloud/current',),,from,,<,your_app_package,>,,import,,app,,as,,application,,,/home/dotcloud/current,is the default path to your app on the server.,,Eventually, create,nginx.conf,and,uwsgi.conf,in the source folder. See,Dotcloud documentation,for further information.,,Create your,requirements.txt,file:,,pip freeze > ./requirements.txt,,Now, make sure that your source folder contains at least:,,./\n../\n./<your_app_package>\n\t./static\n\t./__init__.py\n\t./ ...\n./requirements.txt\n./wsgi.py\n./dotcloud.yml\n./ ...,,Create a symbolic link to your,static,folder:,,cd <source_folder>\nln -s <your_app_package>/static static,,You can now push the code to Dotcloud:,,dotcloud push <namespace>,,A random URL has been generated for your python service in your application (something like,http://my4ppr0x.dotcloud.com/,). Point your browser to this URL to see your new app running.,,This snippet by Marc de Verdelhan can be used freely for\n    anything you like. Consider it public domain.,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/84/", "content": "Cherokee fix for URL prefix | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Cherokee fix for URL prefix,,Posted by Robert Vally\n    on 2012-02-01 @ 01:17\n    and filed in,Deployment,,The snippet below is required when hosting a flask application using Cherokee+uWSGI with a prefixed URL.,,class,,CherrokeeFix,(,object,):,,def,,__init__,(,self,,,,app,,,,script_name,):,,self,.,app,,=,,app,,self,.,script_name,,=,,script_name,,def,,__call__,(,self,,,,environ,,,,start_response,):,,path,,=,,environ,.,get,(,'SCRIPT_NAME',,,,'',),,+,,environ,.,get,(,'PATH_INFO',,,,'',),,environ,[,'SCRIPT_NAME',],,=,,self,.,script_name,,environ,[,'PATH_INFO',],,=,,path,[,len,(,self,.,script_name,):],,assert,,path,[:,len,(,self,.,script_name,)],,==,,self,.,script_name,,return,,self,.,app,(,environ,,,,start_response,),,,If this URL was prefixed with '/test', you would apply this to the Flask application as below:,,app,.,wsgi_app,,=,,CherrokeeFix,(,app,.,wsgi_app,,,,'/test',),,,This snippet by Robert Vally can be used freely for\n    anything you like. Consider it public domain.,,,Comments,,,,Thanks Armin\n          by Robert Vally\n          on 2012-02-01 @ 01:18,Thanks go out to Armin for doing all the hard work for me :),,,,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "Working with the Shell", "url": "http://flask.pocoo.org/docs/1.0/shell/", "content": ",,,,,Working with the Shell \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,,,,,,,,Working with the Shell,\u00b6,,,Changelog,,New in version 0.3.,,,One of the reasons everybody loves Python is the interactive shell.  It\nbasically allows you to execute Python commands in real time and\nimmediately get results back.  Flask itself does not come with an\ninteractive shell, because it does not require any specific setup upfront,\njust import your application and start playing around.,,There are however some handy helpers to make playing around in the shell a\nmore pleasant experience.  The main issue with interactive console\nsessions is that you\u2019re not triggering a request like a browser does which\nmeans that,g,,,request,and others are not\navailable.  But the code you want to test might depend on them, so what\ncan you do?,,This is where some helper functions come in handy.  Keep in mind however\nthat these functions are not only there for interactive shell usage, but\nalso for unittesting and other situations that require a faked request\ncontext.,,Generally it\u2019s recommended that you read the,The Request Context,chapter of the documentation first.,,,Command Line Interface,\u00b6,,Starting with Flask 0.11 the recommended way to work with the shell is the,flask,,shell,command which does a lot of this automatically for you.\nFor instance the shell is automatically initialized with a loaded\napplication context.,,For more information see,Command Line Interface,.,,,,Creating a Request Context,\u00b6,,The easiest way to create a proper request context from the shell is by\nusing the,test_request_context,method which creates\nus a,RequestContext,:,,>>>,ctx,,=,,app,.,test_request_context,(),,,,Normally you would use the,with,statement to make this request object\nactive, but in the shell it\u2019s easier to use the,push(),and,pop(),methods by hand:,,>>>,ctx,.,push,(),,,,From that point onwards you can work with the request object until you\ncall,pop,:,,>>>,ctx,.,pop,(),,,,,,Firing Before/After Request,\u00b6,,By just creating a request context, you still don\u2019t have run the code that\nis normally run before a request.  This might result in your database\nbeing unavailable if you are connecting to the database in a\nbefore-request callback or the current user not being stored on the,g,object etc.,,This however can easily be done yourself.  Just call,preprocess_request(),:,,>>>,ctx,,=,,app,.,test_request_context,(),,>>>,ctx,.,push,(),,>>>,app,.,preprocess_request,(),,,,Keep in mind that the,preprocess_request(),function\nmight return a response object, in that case just ignore it.,,To shutdown a request, you need to trick a bit before the after request\nfunctions (triggered by,process_response(),) operate on\na response object:,,>>>,app,.,process_response,(,app,.,response_class,()),,<Response 0 bytes [200 OK]>,,>>>,ctx,.,pop,(),,,,The functions registered as,teardown_request(),are\nautomatically called when the context is popped.  So this is the perfect\nplace to automatically tear down resources that were needed by the request\ncontext (such as database connections).,,,,Further Improving the Shell Experience,\u00b6,,If you like the idea of experimenting in a shell, create yourself a module\nwith stuff you want to star import into your interactive session.  There\nyou could also define some more helper methods for common things such as\ninitializing the database, dropping tables etc.,,Just put them into a module (like,shelltools,) and import from there:,,>>>,from,,shelltools,,import,,*,,,,,,,,,,,,,,,Contents,,,Working with the Shell,,Command Line Interface,,Creating a Request Context,,Firing Before/After Request,,Further Improving the Shell Experience,,,,,Navigation,,,Overview,,,Previous:,Development Server,,Next:,Patterns for Flask,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "HTML/XHTML FAQ", "url": "http://flask.pocoo.org/docs/dev/htmlfaq/", "content": ",,,,,HTML/XHTML FAQ \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,HTML/XHTML FAQ,\u00b6,,The Flask documentation and example applications are using HTML5.  You\nmay notice that in many situations, when end tags are optional they are\nnot used, so that the HTML is cleaner and faster to load.  Because there\nis much confusion about HTML and XHTML among developers, this document tries\nto answer some of the major questions.,,,History of XHTML,\u00b6,,For a while, it appeared that HTML was about to be replaced by XHTML.\nHowever, barely any websites on the Internet are actual XHTML (which is\nHTML processed using XML rules).  There are a couple of major reasons\nwhy this is the case.  One of them is Internet Explorer\u2019s lack of proper\nXHTML support. The XHTML spec states that XHTML must be served with the MIME\ntype,application/xhtml+xml,, but Internet Explorer refuses to read files\nwith that MIME type.\nWhile it is relatively easy to configure Web servers to serve XHTML properly,\nfew people do.  This is likely because properly using XHTML can be quite\npainful.,,One of the most important causes of pain is XML\u2019s draconian (strict and\nruthless) error handling.  When an XML parsing error is encountered,\nthe browser is supposed to show the user an ugly error message, instead\nof attempting to recover from the error and display what it can.  Most of\nthe (X)HTML generation on the web is based on non-XML template engines\n(such as Jinja, the one used in Flask) which do not protect you from\naccidentally creating invalid XHTML.  There are XML based template engines,\nsuch as Kid and the popular Genshi, but they often come with a larger\nruntime overhead and are not as straightforward to use because they have\nto obey XML rules.,,The majority of users, however, assumed they were properly using XHTML.\nThey wrote an XHTML doctype at the top of the document and self-closed all\nthe necessary tags (,<br>,becomes,<br/>,or,<br></br>,in XHTML).\nHowever, even if the document properly validates as XHTML, what really\ndetermines XHTML/HTML processing in browsers is the MIME type, which as\nsaid before is often not set properly. So the valid XHTML was being treated\nas invalid HTML.,,XHTML also changed the way JavaScript is used. To properly work with XHTML,\nprogrammers have to use the namespaced DOM interface with the XHTML\nnamespace to query for HTML elements.,,,,History of HTML5,\u00b6,,Development of the HTML5 specification was started in 2004 under the name\n\u201cWeb Applications 1.0\u201d by the Web Hypertext Application Technology Working\nGroup, or WHATWG (which was formed by the major browser vendors Apple,\nMozilla, and Opera) with the goal of writing a new and improved HTML\nspecification, based on existing browser behavior instead of unrealistic\nand backwards-incompatible specifications.,,For example, in HTML4,<title/Hello/,theoretically parses exactly the\nsame as,<title>Hello</title>,.  However, since people were using\nXHTML-like tags along the lines of,<link,,/>,, browser vendors implemented\nthe XHTML syntax over the syntax defined by the specification.,,In 2007, the specification was adopted as the basis of a new HTML\nspecification under the umbrella of the W3C, known as HTML5.  Currently,\nit appears that XHTML is losing traction, as the XHTML 2 working group has\nbeen disbanded and HTML5 is being implemented by all major browser vendors.,,,,HTML versus XHTML,\u00b6,,The following table gives you a quick overview of features available in\nHTML 4.01, XHTML 1.1 and HTML5. (XHTML 1.0 is not included, as it was\nsuperseded by XHTML 1.1 and the barely-used XHTML5.),,,,,,,,,,,,HTML4.01,,XHTML1.1,,HTML5,,,,,<tag/value/,==,<tag>value</tag>,,,[1],,,,,<br/>,supported,,,,,[2],,,<script/>,supported,,,,,,should be served as,text/html,,,,[3],,,,should be served as,application/xhtml+xml,,,,,,strict error handling,,,,,,inline SVG,,,,,,inline MathML,,,,,,<video>,tag,,,,,,<audio>,tag,,,,,,New semantic tags like,<article>,,,,,,,,,,,[1],This is an obscure feature inherited from SGML. It is usually not\nsupported by browsers, for reasons detailed above.,,,,,,,[2],This is for compatibility with server code that generates XHTML for\ntags such as,<br>,.  It should not be used in new code.,,,,,,,[3],XHTML 1.0 is the last XHTML standard that allows to be served\nas,text/html,for backwards compatibility reasons.,,,,,,What does \u201cstrict\u201d mean?,\u00b6,,HTML5 has strictly defined parsing rules, but it also specifies exactly\nhow a browser should react to parsing errors - unlike XHTML, which simply\nstates parsing should abort. Some people are confused by apparently\ninvalid syntax that still generates the expected results (for example,\nmissing end tags or unquoted attribute values).,,Some of these work because of the lenient error handling most browsers use\nwhen they encounter a markup error, others are actually specified.  The\nfollowing constructs are optional in HTML5 by standard, but have to be\nsupported by browsers:,,,Wrapping the document in an,<html>,tag,,Wrapping header elements in,<head>,or the body elements in,<body>,,Closing the,<p>,,,<li>,,,<dt>,,,<dd>,,,<tr>,,,<td>,,,<th>,,,<tbody>,,,<thead>,, or,<tfoot>,tags.,,Quoting attributes, so long as they contain no whitespace or\nspecial characters (like,<,,,>,,,',, or,\",).,,Requiring boolean attributes to have a value.,,,This means the following page in HTML5 is perfectly valid:,,<!doctype html>,,<,title,>,Hello HTML5,</,title,>,,<,div,,class,=,header,>,,<,h1,>,Hello HTML5,</,h1,>,,<,p,,class,=,tagline,>,HTML5 is awesome,</,div,>,,<,ul,,class,=,nav,>,,<,li,><,a,,href,=,/index,>,Index,</,a,>,,<,li,><,a,,href,=,/downloads,>,Downloads,</,a,>,,<,li,><,a,,href,=,/about,>,About,</,a,>,,</,ul,>,,<,div,,class,=,body,>,,<,h2,>,HTML5 is probably the future,</,h2,>,,<,p,>,There might be some other things around but in terms of\n    browser vendor support, HTML5 is hard to beat.,<,dl,>,,<,dt,>,Key 1,<,dd,>,Value 1,<,dt,>,Key 2,<,dd,>,Value 2,</,dl,>,,</,div,>,,,,,,New technologies in HTML5,\u00b6,,HTML5 adds many new features that make Web applications easier to write\nand to use.,,,The,<audio>,and,<video>,tags provide a way to embed audio and\nvideo without complicated add-ons like QuickTime or Flash.,,Semantic elements like,<article>,,,<header>,,,<nav>,, and,<time>,that make content easier to understand.,,The,<canvas>,tag, which supports a powerful drawing API, reducing\nthe need for server-generated images to present data graphically.,,New form control types like,<input,,type=\"date\">,that allow user\nagents to make entering and validating values easier.,,Advanced JavaScript APIs like Web Storage, Web Workers, Web Sockets,\ngeolocation, and offline applications.,,,Many other features have been added, as well. A good guide to new features\nin HTML5 is Mark Pilgrim\u2019s soon-to-be-published book,,Dive Into HTML5,.\nNot all of them are supported in browsers yet, however, so use caution.,,,,What should be used?,\u00b6,,Currently, the answer is HTML5.  There are very few reasons to use XHTML\nconsidering the latest developments in Web browsers.  To summarize the\nreasons given above:,,,Internet Explorer (which, sadly, currently leads in market share)\nhas poor support for XHTML.,,Many JavaScript libraries also do not support XHTML, due to the more\ncomplicated namespacing API it requires.,,HTML5 adds several new features, including semantic tags and the\nlong-awaited,<audio>,and,<video>,tags.,,It has the support of most browser vendors behind it.,,It is much easier to write, and more compact.,,,For most applications, it is undoubtedly better to use HTML5 than XHTML.,,,,,,,,,,,,,Contents,,,HTML/XHTML FAQ,,History of XHTML,,History of HTML5,,HTML versus XHTML,,What does \u201cstrict\u201d mean?,,New technologies in HTML5,,What should be used?,,,,,Navigation,,,Overview,,,Previous:,Design Decisions in Flask,,Next:,Security Considerations,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "HTML/XHTML FAQ", "url": "http://flask.pocoo.org/docs/1.0/htmlfaq/", "content": ",,,,,HTML/XHTML FAQ \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,,,,,,,,HTML/XHTML FAQ,\u00b6,,The Flask documentation and example applications are using HTML5.  You\nmay notice that in many situations, when end tags are optional they are\nnot used, so that the HTML is cleaner and faster to load.  Because there\nis much confusion about HTML and XHTML among developers, this document tries\nto answer some of the major questions.,,,History of XHTML,\u00b6,,For a while, it appeared that HTML was about to be replaced by XHTML.\nHowever, barely any websites on the Internet are actual XHTML (which is\nHTML processed using XML rules).  There are a couple of major reasons\nwhy this is the case.  One of them is Internet Explorer\u2019s lack of proper\nXHTML support. The XHTML spec states that XHTML must be served with the MIME\ntype,application/xhtml+xml,, but Internet Explorer refuses to read files\nwith that MIME type.\nWhile it is relatively easy to configure Web servers to serve XHTML properly,\nfew people do.  This is likely because properly using XHTML can be quite\npainful.,,One of the most important causes of pain is XML\u2019s draconian (strict and\nruthless) error handling.  When an XML parsing error is encountered,\nthe browser is supposed to show the user an ugly error message, instead\nof attempting to recover from the error and display what it can.  Most of\nthe (X)HTML generation on the web is based on non-XML template engines\n(such as Jinja, the one used in Flask) which do not protect you from\naccidentally creating invalid XHTML.  There are XML based template engines,\nsuch as Kid and the popular Genshi, but they often come with a larger\nruntime overhead and are not as straightforward to use because they have\nto obey XML rules.,,The majority of users, however, assumed they were properly using XHTML.\nThey wrote an XHTML doctype at the top of the document and self-closed all\nthe necessary tags (,<br>,becomes,<br/>,or,<br></br>,in XHTML).\nHowever, even if the document properly validates as XHTML, what really\ndetermines XHTML/HTML processing in browsers is the MIME type, which as\nsaid before is often not set properly. So the valid XHTML was being treated\nas invalid HTML.,,XHTML also changed the way JavaScript is used. To properly work with XHTML,\nprogrammers have to use the namespaced DOM interface with the XHTML\nnamespace to query for HTML elements.,,,,History of HTML5,\u00b6,,Development of the HTML5 specification was started in 2004 under the name\n\u201cWeb Applications 1.0\u201d by the Web Hypertext Application Technology Working\nGroup, or WHATWG (which was formed by the major browser vendors Apple,\nMozilla, and Opera) with the goal of writing a new and improved HTML\nspecification, based on existing browser behavior instead of unrealistic\nand backwards-incompatible specifications.,,For example, in HTML4,<title/Hello/,theoretically parses exactly the\nsame as,<title>Hello</title>,.  However, since people were using\nXHTML-like tags along the lines of,<link,,/>,, browser vendors implemented\nthe XHTML syntax over the syntax defined by the specification.,,In 2007, the specification was adopted as the basis of a new HTML\nspecification under the umbrella of the W3C, known as HTML5.  Currently,\nit appears that XHTML is losing traction, as the XHTML 2 working group has\nbeen disbanded and HTML5 is being implemented by all major browser vendors.,,,,HTML versus XHTML,\u00b6,,The following table gives you a quick overview of features available in\nHTML 4.01, XHTML 1.1 and HTML5. (XHTML 1.0 is not included, as it was\nsuperseded by XHTML 1.1 and the barely-used XHTML5.),,,,,,,,,,,,HTML4.01,,XHTML1.1,,HTML5,,,,,<tag/value/,==,<tag>value</tag>,,,[1],,,,,<br/>,supported,,,,,[2],,,<script/>,supported,,,,,,should be served as,text/html,,,,[3],,,,should be served as,application/xhtml+xml,,,,,,strict error handling,,,,,,inline SVG,,,,,,inline MathML,,,,,,<video>,tag,,,,,,<audio>,tag,,,,,,New semantic tags like,<article>,,,,,,,,,,,[1],This is an obscure feature inherited from SGML. It is usually not\nsupported by browsers, for reasons detailed above.,,,,,,,[2],This is for compatibility with server code that generates XHTML for\ntags such as,<br>,.  It should not be used in new code.,,,,,,,[3],XHTML 1.0 is the last XHTML standard that allows to be served\nas,text/html,for backwards compatibility reasons.,,,,,,What does \u201cstrict\u201d mean?,\u00b6,,HTML5 has strictly defined parsing rules, but it also specifies exactly\nhow a browser should react to parsing errors - unlike XHTML, which simply\nstates parsing should abort. Some people are confused by apparently\ninvalid syntax that still generates the expected results (for example,\nmissing end tags or unquoted attribute values).,,Some of these work because of the lenient error handling most browsers use\nwhen they encounter a markup error, others are actually specified.  The\nfollowing constructs are optional in HTML5 by standard, but have to be\nsupported by browsers:,,,Wrapping the document in an,<html>,tag,,Wrapping header elements in,<head>,or the body elements in,<body>,,Closing the,<p>,,,<li>,,,<dt>,,,<dd>,,,<tr>,,,<td>,,,<th>,,,<tbody>,,,<thead>,, or,<tfoot>,tags.,,Quoting attributes, so long as they contain no whitespace or\nspecial characters (like,<,,,>,,,',, or,\",).,,Requiring boolean attributes to have a value.,,,This means the following page in HTML5 is perfectly valid:,,<!doctype html>,,<,title,>,Hello HTML5,</,title,>,,<,div,,class,=,header,>,,<,h1,>,Hello HTML5,</,h1,>,,<,p,,class,=,tagline,>,HTML5 is awesome,</,div,>,,<,ul,,class,=,nav,>,,<,li,><,a,,href,=,/index,>,Index,</,a,>,,<,li,><,a,,href,=,/downloads,>,Downloads,</,a,>,,<,li,><,a,,href,=,/about,>,About,</,a,>,,</,ul,>,,<,div,,class,=,body,>,,<,h2,>,HTML5 is probably the future,</,h2,>,,<,p,>,There might be some other things around but in terms of\n    browser vendor support, HTML5 is hard to beat.,<,dl,>,,<,dt,>,Key 1,<,dd,>,Value 1,<,dt,>,Key 2,<,dd,>,Value 2,</,dl,>,,</,div,>,,,,,,New technologies in HTML5,\u00b6,,HTML5 adds many new features that make Web applications easier to write\nand to use.,,,The,<audio>,and,<video>,tags provide a way to embed audio and\nvideo without complicated add-ons like QuickTime or Flash.,,Semantic elements like,<article>,,,<header>,,,<nav>,, and,<time>,that make content easier to understand.,,The,<canvas>,tag, which supports a powerful drawing API, reducing\nthe need for server-generated images to present data graphically.,,New form control types like,<input,,type=\"date\">,that allow user\nagents to make entering and validating values easier.,,Advanced JavaScript APIs like Web Storage, Web Workers, Web Sockets,\ngeolocation, and offline applications.,,,Many other features have been added, as well. A good guide to new features\nin HTML5 is Mark Pilgrim\u2019s soon-to-be-published book,,Dive Into HTML5,.\nNot all of them are supported in browsers yet, however, so use caution.,,,,What should be used?,\u00b6,,Currently, the answer is HTML5.  There are very few reasons to use XHTML\nconsidering the latest developments in Web browsers.  To summarize the\nreasons given above:,,,Internet Explorer (which, sadly, currently leads in market share)\nhas poor support for XHTML.,,Many JavaScript libraries also do not support XHTML, due to the more\ncomplicated namespacing API it requires.,,HTML5 adds several new features, including semantic tags and the\nlong-awaited,<audio>,and,<video>,tags.,,It has the support of most browser vendors behind it.,,It is much easier to write, and more compact.,,,For most applications, it is undoubtedly better to use HTML5 than XHTML.,,,,,,,,,,,,,Contents,,,HTML/XHTML FAQ,,History of XHTML,,History of HTML5,,HTML versus XHTML,,What does \u201cstrict\u201d mean?,,New technologies in HTML5,,What should be used?,,,,,Navigation,,,Overview,,,Previous:,Design Decisions in Flask,,Next:,Security Considerations,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Request Content Checksums", "url": "http://flask.pocoo.org/docs/dev/patterns/requestchecksum/", "content": ",,,,,Request Content Checksums \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,Request Content Checksums,\u00b6,,Various pieces of code can consume the request data and preprocess it.\nFor instance JSON data ends up on the request object already read and\nprocessed, form data ends up there as well but goes through a different\ncode path.  This seems inconvenient when you want to calculate the\nchecksum of the incoming request data.  This is necessary sometimes for\nsome APIs.,,Fortunately this is however very simple to change by wrapping the input\nstream.,,The following example calculates the SHA1 checksum of the incoming data as\nit gets read and stores it in the WSGI environment:,,import,,hashlib,,class,,ChecksumCalcStream,(,object,):,,def,,__init__,(,self,,,,stream,):,,self,.,_stream,,=,,stream,,self,.,_hash,,=,,hashlib,.,sha1,(),,def,,read,(,self,,,,bytes,):,,rv,,=,,self,.,_stream,.,read,(,bytes,),,self,.,_hash,.,update,(,rv,),,return,,rv,,def,,readline,(,self,,,,size_hint,):,,rv,,=,,self,.,_stream,.,readline,(,size_hint,),,self,.,_hash,.,update,(,rv,),,return,,rv,,def,,generate_checksum,(,request,):,,env,,=,,request,.,environ,,stream,,=,,ChecksumCalcStream,(,env,[,'wsgi.input',]),,env,[,'wsgi.input',],,=,,stream,,return,,stream,.,_hash,,,,To use this, all you need to do is to hook the calculating stream in\nbefore the request starts consuming data.  (Eg: be careful accessing,request.form,or anything of that nature.,before_request_handlers,for instance should be careful not to access it).,,Example usage:,,@app,.,route,(,'/special-api',,,,methods,=,[,'POST',]),,def,,special_api,():,,hash,,=,,generate_checksum,(,request,),,# Accessing this parses the input stream,,files,,=,,request,.,files,,# At this point the hash is fully constructed.,,checksum,,=,,hash,.,hexdigest,(),,return,,'Hash was:,%s,',,%,,checksum,,,,,,,,,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,Adding HTTP Method Overrides,,Next:,Celery Background Tasks,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Deferred Request Callbacks", "url": "http://flask.pocoo.org/docs/dev/patterns/deferredcallbacks/", "content": ",,,,,Deferred Request Callbacks \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,Deferred Request Callbacks,\u00b6,,One of the design principles of Flask is that response objects are created and\npassed down a chain of potential callbacks that can modify them or replace\nthem. When the request handling starts, there is no response object yet. It is\ncreated as necessary either by a view function or by some other component in\nthe system.,,What happens if you want to modify the response at a point where the response\ndoes not exist yet?  A common example for that would be a,before_request(),callback that wants to set a cookie on the\nresponse object.,,One way is to avoid the situation. Very often that is possible. For instance\nyou can try to move that logic into a,after_request(),callback instead. However, sometimes moving code there makes it more\nmore complicated or awkward to reason about.,,As an alternative, you can use,after_this_request(),to register\ncallbacks that will execute after only the current request. This way you can\ndefer code execution from anywhere in the application, based on the current\nrequest.,,At any time during a request, we can register a function to be called at the\nend of the request. For example you can remember the current language of the\nuser in a cookie in a,before_request(),callback:,,from,,flask,,import,,request,,,,after_this_request,,@app,.,before_request,,def,,detect_user_language,():,,language,,=,,request,.,cookies,.,get,(,'user_lang',),,if,,language,,is,,None,:,,language,,=,,guess_language_from_request,(),,# when the response exists, set a cookie with the language,,@after_this_request,,def,,remember_language,(,response,):,,response,.,set_cookie,(,'user_lang',,,,language,),,g,.,language,,=,,language,,,,,,,,,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,Streaming Contents,,Next:,Adding HTTP Method Overrides,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Adding HTTP Method Overrides", "url": "http://flask.pocoo.org/docs/dev/patterns/methodoverrides/", "content": ",,,,,Adding HTTP Method Overrides \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,Adding HTTP Method Overrides,\u00b6,,Some HTTP proxies do not support arbitrary HTTP methods or newer HTTP\nmethods (such as PATCH).  In that case it\u2019s possible to \u201cproxy\u201d HTTP\nmethods through another HTTP method in total violation of the protocol.,,The way this works is by letting the client do an HTTP POST request and\nset the,X-HTTP-Method-Override,header and set the value to the\nintended HTTP method (such as,PATCH,).,,This can easily be accomplished with an HTTP middleware:,,class,,HTTPMethodOverrideMiddleware,(,object,):,,allowed_methods,,=,,frozenset,([,,'GET',,,,'HEAD',,,,'POST',,,,'DELETE',,,,'PUT',,,,'PATCH',,,,'OPTIONS',,]),,bodyless_methods,,=,,frozenset,([,'GET',,,,'HEAD',,,,'OPTIONS',,,,'DELETE',]),,def,,__init__,(,self,,,,app,):,,self,.,app,,=,,app,,def,,__call__,(,self,,,,environ,,,,start_response,):,,method,,=,,environ,.,get,(,'HTTP_X_HTTP_METHOD_OVERRIDE',,,,'',),.,upper,(),,if,,method,,in,,self,.,allowed_methods,:,,method,,=,,method,.,encode,(,'ascii',,,,'replace',),,environ,[,'REQUEST_METHOD',],,=,,method,,if,,method,,in,,self,.,bodyless_methods,:,,environ,[,'CONTENT_LENGTH',],,=,,'0',,return,,self,.,app,(,environ,,,,start_response,),,,,To use this with Flask this is all that is necessary:,,from,,flask,,import,,Flask,,app,,=,,Flask,(,__name__,),,app,.,wsgi_app,,=,,HTTPMethodOverrideMiddleware,(,app,.,wsgi_app,),,,,,,,,,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,Deferred Request Callbacks,,Next:,Request Content Checksums,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Becoming Big", "url": "http://flask.pocoo.org/docs/dev/becomingbig/", "content": ",,,,,Becoming Big \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,Becoming Big,\u00b6,,Here are your options when growing your codebase or scaling your application.,,,Read the Source.,\u00b6,,Flask started in part to demonstrate how to build your own framework on top of\nexisting well-used tools Werkzeug (WSGI) and Jinja (templating), and as it\ndeveloped, it became useful to a wide audience.  As you grow your codebase,\ndon\u2019t just use Flask \u2013 understand it.  Read the source.  Flask\u2019s code is\nwritten to be read; its documentation is published so you can use its internal\nAPIs.  Flask sticks to documented APIs in upstream libraries, and documents its\ninternal utilities so that you can find the hook points needed for your\nproject.,,,,Hook. Extend.,\u00b6,,The,API,docs are full of available overrides, hook points, and,Signals,. You can provide custom classes for things like the request and\nresponse objects.  Dig deeper on the APIs you use, and look for the\ncustomizations which are available out of the box in a Flask release.  Look for\nways in which your project can be refactored into a collection of utilities and\nFlask extensions.  Explore the many,extensions,in the community, and look for patterns to\nbuild your own extensions if you do not find the tools you need.,,,,Subclass.,\u00b6,,The,Flask,class has many methods designed for subclassing. You\ncan quickly add or customize behavior by subclassing,Flask,(see\nthe linked method docs) and using that subclass wherever you instantiate an\napplication class. This works well with,Application Factories,. See,Subclassing Flask,for an example.,,,,Wrap with middleware.,\u00b6,,The,Application Dispatching,chapter shows in detail how to apply middleware. You\ncan introduce WSGI middleware to wrap your Flask instances and introduce fixes\nand changes at the layer between your Flask application and your HTTP\nserver. Werkzeug includes several,middlewares,.,,,,Fork.,\u00b6,,If none of the above options work, fork Flask.  The majority of code of Flask\nis within Werkzeug and Jinja2.  These libraries do the majority of the work.\nFlask is just the paste that glues those together.  For every project there is\nthe point where the underlying framework gets in the way (due to assumptions\nthe original developers had).  This is natural because if this would not be the\ncase, the framework would be a very complex system to begin with which causes a\nsteep learning curve and a lot of user frustration.,,This is not unique to Flask.  Many people use patched and modified\nversions of their framework to counter shortcomings.  This idea is also\nreflected in the license of Flask.  You don\u2019t have to contribute any\nchanges back if you decide to modify the framework.,,The downside of forking is of course that Flask extensions will most\nlikely break because the new framework has a different import name.\nFurthermore integrating upstream changes can be a complex process,\ndepending on the number of changes.  Because of that, forking should be\nthe very last resort.,,,,Scale like a pro.,\u00b6,,For many web applications the complexity of the code is less an issue than\nthe scaling for the number of users or data entries expected.  Flask by\nitself is only limited in terms of scaling by your application code, the\ndata store you want to use and the Python implementation and webserver you\nare running on.,,Scaling well means for example that if you double the amount of servers\nyou get about twice the performance.  Scaling bad means that if you add a\nnew server the application won\u2019t perform any better or would not even\nsupport a second server.,,There is only one limiting factor regarding scaling in Flask which are\nthe context local proxies.  They depend on context which in Flask is\ndefined as being either a thread, process or greenlet.  If your server\nuses some kind of concurrency that is not based on threads or greenlets,\nFlask will no longer be able to support these global proxies.  However the\nmajority of servers are using either threads, greenlets or separate\nprocesses to achieve concurrency which are all methods well supported by\nthe underlying Werkzeug library.,,,,Discuss with the community.,\u00b6,,The Flask developers keep the framework accessible to users with codebases big\nand small. If you find an obstacle in your way, caused by Flask, don\u2019t hesitate\nto contact the developers on the mailinglist or IRC channel.  The best way for\nthe Flask and Flask extension developers to improve the tools for larger\napplications is getting feedback from users.,,,,,,,,,,,,,Contents,,,Becoming Big,,Read the Source.,,Hook. Extend.,,Subclass.,,Wrap with middleware.,,Fork.,,Scale like a pro.,,Discuss with the community.,,,,,Navigation,,,Overview,,,Previous:,CGI,,Next:,API,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Deployment Options", "url": "http://flask.pocoo.org/docs/dev/deploying/", "content": ",,,,,Deployment Options \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,Deployment Options,\u00b6,,While lightweight and easy to use,,Flask\u2019s built-in server is not suitable\nfor production,as it doesn\u2019t scale well.  Some of the options available for\nproperly running Flask in production are documented here.,,If you want to deploy your Flask application to a WSGI server not listed here,\nlook up the server documentation about how to use a WSGI app with it.  Just\nremember that your,Flask,application object is the actual WSGI\napplication.,,,Hosted options,\u00b6,,,Deploying Flask on Heroku,,Deploying Flask on OpenShift,,Deploying Flask on Webfaction,,Deploying Flask on Google App Engine,,Deploying Flask on AWS Elastic Beanstalk,,Sharing your Localhost Server with Localtunnel,,Deploying on Azure (IIS),,Deploying on PythonAnywhere,,,,,Self-hosted options,\u00b6,,,,Standalone WSGI Containers,,Gunicorn,,uWSGI,,Gevent,,Twisted Web,,Proxy Setups,,,,uWSGI,,Starting your app with uwsgi,,Configuring nginx,,,,mod_wsgi (Apache),,Installing,mod_wsgi,,Creating a,.wsgi,file,,Configuring Apache,,Troubleshooting,,Support for Automatic Reloading,,Working with Virtual Environments,,,,FastCGI,,Creating a,.fcgi,file,,Configuring Apache,,Configuring lighttpd,,Configuring nginx,,Running FastCGI Processes,,Debugging,,,,CGI,,Creating a,.cgi,file,,Server Setup,,,,,,,,,,,,,,,,,Contents,,,Deployment Options,,Hosted options,,Self-hosted options,,,,,Navigation,,,Overview,,,Previous:,Subclassing Flask,,Next:,Standalone WSGI Containers,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Streaming Contents", "url": "http://flask.pocoo.org/docs/dev/patterns/streaming/", "content": ",,,,,Streaming Contents \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,Streaming Contents,\u00b6,,Sometimes you want to send an enormous amount of data to the client, much\nmore than you want to keep in memory.  When you are generating the data on\nthe fly though, how do you send that back to the client without the\nroundtrip to the filesystem?,,The answer is by using generators and direct responses.,,,Basic Usage,\u00b6,,This is a basic view function that generates a lot of CSV data on the fly.\nThe trick is to have an inner function that uses a generator to generate\ndata and to then invoke that function and pass it to a response object:,,from,,flask,,import,,Response,,@app,.,route,(,'/large.csv',),,def,,generate_large_csv,():,,def,,generate,():,,for,,row,,in,,iter_all_rows,():,,yield,,',',.,join,(,row,),,+,,',\\n,',,return,,Response,(,generate,(),,,mimetype,=,'text/csv',),,,,Each,yield,expression is directly sent to the browser.  Note though\nthat some WSGI middlewares might break streaming, so be careful there in\ndebug environments with profilers and other things you might have enabled.,,,,Streaming from Templates,\u00b6,,The Jinja2 template engine also supports rendering templates piece by\npiece.  This functionality is not directly exposed by Flask because it is\nquite uncommon, but you can easily do it yourself:,,from,,flask,,import,,Response,,def,,stream_template,(,template_name,,,,**,context,):,,app,.,update_template_context,(,context,),,t,,=,,app,.,jinja_env,.,get_template,(,template_name,),,rv,,=,,t,.,stream,(,context,),,rv,.,enable_buffering,(,5,),,return,,rv,,@app,.,route,(,'/my-large-page.html',),,def,,render_large_template,():,,rows,,=,,iter_all_rows,(),,return,,Response,(,stream_template,(,'the_template.html',,,,rows,=,rows,)),,,,The trick here is to get the template object from the Jinja2 environment\non the application and to call,stream(),instead of,render(),which returns a stream object instead of a\nstring.  Since we\u2019re bypassing the Flask template render functions and\nusing the template object itself we have to make sure to update the render\ncontext ourselves by calling,update_template_context(),.\nThe template is then evaluated as the stream is iterated over.  Since each\ntime you do a yield the server will flush the content to the client you\nmight want to buffer up a few items in the template which you can do with,rv.enable_buffering(size),.,5,is a sane default.,,,,Streaming with Context,\u00b6,,,Changelog,,New in version 0.9.,,,Note that when you stream data, the request context is already gone the\nmoment the function executes.  Flask 0.9 provides you with a helper that\ncan keep the request context around during the execution of the\ngenerator:,,from,,flask,,import,,stream_with_context,,,,request,,,,Response,,@app,.,route,(,'/stream',),,def,,streamed_response,():,,def,,generate,():,,yield,,'Hello ',,yield,,request,.,args,[,'name',],,yield,,'!',,return,,Response,(,stream_with_context,(,generate,())),,,,Without the,stream_with_context(),function you would get a,RuntimeError,at that point.,,,,,,,,,,,,,Contents,,,Streaming Contents,,Basic Usage,,Streaming from Templates,,Streaming with Context,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,Adding a favicon,,Next:,Deferred Request Callbacks,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Adding a favicon", "url": "http://flask.pocoo.org/docs/dev/patterns/favicon/", "content": ",,,,,Adding a favicon \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,Adding a favicon,\u00b6,,A \u201cfavicon\u201d is an icon used by browsers for tabs and bookmarks. This helps\nto distinguish your website and to give it a unique brand.,,A common question is how to add a favicon to a Flask application. First, of\ncourse, you need an icon. It should be 16 \u00d7 16 pixels and in the ICO file\nformat. This is not a requirement but a de-facto standard supported by all\nrelevant browsers. Put the icon in your static directory as,favicon.ico,.,,Now, to get browsers to find your icon, the correct way is to add a link\ntag in your HTML. So, for example:,,<,link,,rel,=,\"shortcut icon\",,href,=,\",{{,,url_for,(,'static',,,,filename,=,'favicon.ico',),,}},\",>,,,,That\u2019s all you need for most browsers, however some really old ones do not\nsupport this standard. The old de-facto standard is to serve this file,\nwith this name, at the website root. If your application is not mounted at\nthe root path of the domain you either need to configure the web server to\nserve the icon at the root or if you can\u2019t do that you\u2019re out of luck. If\nhowever your application is the root you can simply route a redirect:,,app,.,add_url_rule,(,'/favicon.ico',,,,redirect_to,=,url_for,(,'static',,,,filename,=,'favicon.ico',)),,,,If you want to save the extra redirect request you can also write a view\nusing,send_from_directory(),:,,import,,os,,from,,flask,,import,,send_from_directory,,@app,.,route,(,'/favicon.ico',),,def,,favicon,():,,return,,send_from_directory,(,os,.,path,.,join,(,app,.,root_path,,,,'static',),,,'favicon.ico',,,,mimetype,=,'image/vnd.microsoft.icon',),,,,We can leave out the explicit mimetype and it will be guessed, but we may\nas well specify it to avoid the extra guessing, as it will always be the\nsame.,,The above will serve the icon via your application and if possible it\u2019s\nbetter to configure your dedicated web server to serve it; refer to the\nweb server\u2019s documentation.,,,See also,\u00b6,,,The,Favicon,article on\nWikipedia,,,,,,,,,,,,,,Contents,,,Adding a favicon,,See also,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,MongoKit in Flask,,Next:,Streaming Contents,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "MongoKit in Flask", "url": "http://flask.pocoo.org/docs/dev/patterns/mongokit/", "content": ",,,,,MongoKit in Flask \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,MongoKit in Flask,\u00b6,,Using a document database rather than a full DBMS gets more common these days.\nThis pattern shows how to use MongoKit, a document mapper library, to\nintegrate with MongoDB.,,This pattern requires a running MongoDB server and the MongoKit library\ninstalled.,,There are two very common ways to use MongoKit.  I will outline each of them\nhere:,,,Declarative,\u00b6,,The default behavior of MongoKit is the declarative one that is based on\ncommon ideas from Django or the SQLAlchemy declarative extension.,,Here an example,app.py,module for your application:,,from,,flask,,import,,Flask,,from,,mongokit,,import,,Connection,,,,Document,,# configuration,,MONGODB_HOST,,=,,'localhost',,MONGODB_PORT,,=,,27017,,# create the little application object,,app,,=,,Flask,(,__name__,),,app,.,config,.,from_object,(,__name__,),,# connect to the database,,connection,,=,,Connection,(,app,.,config,[,'MONGODB_HOST',],,,app,.,config,[,'MONGODB_PORT',]),,,,To define your models, just subclass the,Document,class that is imported\nfrom MongoKit.  If you\u2019ve seen the SQLAlchemy pattern you may wonder why we do\nnot have a session and even do not define a,init_db,function here.  On the\none hand, MongoKit does not have something like a session.  This sometimes\nmakes it more to type but also makes it blazingly fast.  On the other hand,\nMongoDB is schemaless.  This means you can modify the data structure from one\ninsert query to the next without any problem.  MongoKit is just schemaless\ntoo, but implements some validation to ensure data integrity.,,Here is an example document (put this also into,app.py,, e.g.):,,from,,mongokit,,import,,ValidationError,,def,,max_length,(,length,):,,def,,validate,(,value,):,,if,,len,(,value,),,<=,,length,:,,return,,True,,# must have %s in error format string to have mongokit place key in there,,raise,,ValidationError,(,',%s,must be at most,{},characters long',.,format,(,length,)),,return,,validate,,class,,User,(,Document,):,,structure,,=,,{,,'name',:,,unicode,,,,'email',:,,unicode,,,,},,validators,,=,,{,,'name',:,,max_length,(,50,),,,'email',:,,max_length,(,120,),,},,use_dot_notation,,=,,True,,def,,__repr__,(,self,):,,return,,'<User,%r,>',,%,,(,self,.,name,),,# register the User document with our current connection,,connection,.,register,([,User,]),,,,This example shows you how to define your schema (named structure), a\nvalidator for the maximum character length and uses a special MongoKit feature\ncalled,use_dot_notation,.  Per default MongoKit behaves like a python\ndictionary but with,use_dot_notation,set to,True,you can use your\ndocuments like you use models in nearly any other ORM by using dots to\nseparate between attributes.,,You can insert entries into the database like this:,,>>>,from,,yourapplication.database,,import,,connection,,>>>,from,,yourapplication.models,,import,,User,,>>>,collection,,=,,connection,[,'test',],.,users,,>>>,user,,=,,collection,.,User,(),,>>>,user,[,'name',],,=,,u,'admin',,>>>,user,[,'email',],,=,,u,'admin@localhost',,>>>,user,.,save,(),,,,Note that MongoKit is kinda strict with used column types, you must not use a\ncommon,str,type for either,name,or,email,but unicode.,,Querying is simple as well:,,>>>,list,(,collection,.,User,.,find,()),,[<User u'admin'>],,>>>,collection,.,User,.,find_one,({,'name',:,,u,'admin',}),,<User u'admin'>,,,,,,PyMongo Compatibility Layer,\u00b6,,If you just want to use PyMongo, you can do that with MongoKit as well.  You\nmay use this process if you need the best performance to get.  Note that this\nexample does not show how to couple it with Flask, see the above MongoKit code\nfor examples:,,from,,MongoKit,,import,,Connection,,connection,,=,,Connection,(),,,,To insert data you can use the,insert,method.  We have to get a\ncollection first, this is somewhat the same as a table in the SQL world.,,>>>,collection,,=,,connection,[,'test',],.,users,,>>>,user,,=,,{,'name',:,,u,'admin',,,,'email',:,,u,'admin@localhost',},,>>>,collection,.,insert,(,user,),,,,MongoKit will automatically commit for us.,,To query your database, you use the collection directly:,,>>>,list,(,collection,.,find,()),,[{u'_id': ObjectId('4c271729e13823182f000000'), u'name': u'admin', u'email': u'admin@localhost'}],,>>>,collection,.,find_one,({,'name',:,,u,'admin',}),,{u'_id': ObjectId('4c271729e13823182f000000'), u'name': u'admin', u'email': u'admin@localhost'},,,,These results are also dict-like objects:,,>>>,r,,=,,collection,.,find_one,({,'name',:,,u,'admin',}),,>>>,r,[,'email',],,u'admin@localhost',,,,For more information about MongoKit, head over to the,website,.,,,,,,,,,,,,,Contents,,,MongoKit in Flask,,Declarative,,PyMongo Compatibility Layer,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,Lazily Loading Views,,Next:,Adding a favicon,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "MongoKit in Flask", "url": "http://flask.pocoo.org/docs/1.0/patterns/mongokit/", "content": ",,,,,MongoKit in Flask \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,,,,,MongoKit in Flask,\u00b6,,Using a document database rather than a full DBMS gets more common these days.\nThis pattern shows how to use MongoKit, a document mapper library, to\nintegrate with MongoDB.,,This pattern requires a running MongoDB server and the MongoKit library\ninstalled.,,There are two very common ways to use MongoKit.  I will outline each of them\nhere:,,,Declarative,\u00b6,,The default behavior of MongoKit is the declarative one that is based on\ncommon ideas from Django or the SQLAlchemy declarative extension.,,Here an example,app.py,module for your application:,,from,,flask,,import,,Flask,,from,,mongokit,,import,,Connection,,,,Document,,# configuration,,MONGODB_HOST,,=,,'localhost',,MONGODB_PORT,,=,,27017,,# create the little application object,,app,,=,,Flask,(,__name__,),,app,.,config,.,from_object,(,__name__,),,# connect to the database,,connection,,=,,Connection,(,app,.,config,[,'MONGODB_HOST',],,,app,.,config,[,'MONGODB_PORT',]),,,,To define your models, just subclass the,Document,class that is imported\nfrom MongoKit.  If you\u2019ve seen the SQLAlchemy pattern you may wonder why we do\nnot have a session and even do not define a,init_db,function here.  On the\none hand, MongoKit does not have something like a session.  This sometimes\nmakes it more to type but also makes it blazingly fast.  On the other hand,\nMongoDB is schemaless.  This means you can modify the data structure from one\ninsert query to the next without any problem.  MongoKit is just schemaless\ntoo, but implements some validation to ensure data integrity.,,Here is an example document (put this also into,app.py,, e.g.):,,from,,mongokit,,import,,ValidationError,,def,,max_length,(,length,):,,def,,validate,(,value,):,,if,,len,(,value,),,<=,,length,:,,return,,True,,# must have %s in error format string to have mongokit place key in there,,raise,,ValidationError,(,',%s,must be at most,{},characters long',.,format,(,length,)),,return,,validate,,class,,User,(,Document,):,,structure,,=,,{,,'name',:,,unicode,,,,'email',:,,unicode,,,,},,validators,,=,,{,,'name',:,,max_length,(,50,),,,'email',:,,max_length,(,120,),,},,use_dot_notation,,=,,True,,def,,__repr__,(,self,):,,return,,'<User,%r,>',,%,,(,self,.,name,),,# register the User document with our current connection,,connection,.,register,([,User,]),,,,This example shows you how to define your schema (named structure), a\nvalidator for the maximum character length and uses a special MongoKit feature\ncalled,use_dot_notation,.  Per default MongoKit behaves like a python\ndictionary but with,use_dot_notation,set to,True,you can use your\ndocuments like you use models in nearly any other ORM by using dots to\nseparate between attributes.,,You can insert entries into the database like this:,,>>>,from,,yourapplication.database,,import,,connection,,>>>,from,,yourapplication.models,,import,,User,,>>>,collection,,=,,connection,[,'test',],.,users,,>>>,user,,=,,collection,.,User,(),,>>>,user,[,'name',],,=,,u,'admin',,>>>,user,[,'email',],,=,,u,'admin@localhost',,>>>,user,.,save,(),,,,Note that MongoKit is kinda strict with used column types, you must not use a\ncommon,str,type for either,name,or,email,but unicode.,,Querying is simple as well:,,>>>,list,(,collection,.,User,.,find,()),,[<User u'admin'>],,>>>,collection,.,User,.,find_one,({,'name',:,,u,'admin',}),,<User u'admin'>,,,,,,PyMongo Compatibility Layer,\u00b6,,If you just want to use PyMongo, you can do that with MongoKit as well.  You\nmay use this process if you need the best performance to get.  Note that this\nexample does not show how to couple it with Flask, see the above MongoKit code\nfor examples:,,from,,MongoKit,,import,,Connection,,connection,,=,,Connection,(),,,,To insert data you can use the,insert,method.  We have to get a\ncollection first, this is somewhat the same as a table in the SQL world.,,>>>,collection,,=,,connection,[,'test',],.,users,,>>>,user,,=,,{,'name',:,,u,'admin',,,,'email',:,,u,'admin@localhost',},,>>>,collection,.,insert,(,user,),,,,MongoKit will automatically commit for us.,,To query your database, you use the collection directly:,,>>>,list,(,collection,.,find,()),,[{u'_id': ObjectId('4c271729e13823182f000000'), u'name': u'admin', u'email': u'admin@localhost'}],,>>>,collection,.,find_one,({,'name',:,,u,'admin',}),,{u'_id': ObjectId('4c271729e13823182f000000'), u'name': u'admin', u'email': u'admin@localhost'},,,,These results are also dict-like objects:,,>>>,r,,=,,collection,.,find_one,({,'name',:,,u,'admin',}),,>>>,r,[,'email',],,u'admin@localhost',,,,For more information about MongoKit, head over to the,website,.,,,,,,,,,,,,,Contents,,,MongoKit in Flask,,Declarative,,PyMongo Compatibility Layer,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,Lazily Loading Views,,Next:,Adding a favicon,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Lazily Loading Views", "url": "http://flask.pocoo.org/docs/dev/patterns/lazyloading/", "content": ",,,,,Lazily Loading Views \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,Lazily Loading Views,\u00b6,,Flask is usually used with the decorators.  Decorators are simple and you\nhave the URL right next to the function that is called for that specific\nURL.  However there is a downside to this approach: it means all your code\nthat uses decorators has to be imported upfront or Flask will never\nactually find your function.,,This can be a problem if your application has to import quick.  It might\nhave to do that on systems like Google\u2019s App Engine or other systems.  So\nif you suddenly notice that your application outgrows this approach you\ncan fall back to a centralized URL mapping.,,The system that enables having a central URL map is the,add_url_rule(),function.  Instead of using decorators,\nyou have a file that sets up the application with all URLs.,,,Converting to Centralized URL Map,\u00b6,,Imagine the current application looks somewhat like this:,,from,,flask,,import,,Flask,,app,,=,,Flask,(,__name__,),,@app,.,route,(,'/',),,def,,index,():,,pass,,@app,.,route,(,'/user/<username>',),,def,,user,(,username,):,,pass,,,,Then, with the centralized approach you would have one file with the views\n(,views.py,) but without any decorator:,,def,,index,():,,pass,,def,,user,(,username,):,,pass,,,,And then a file that sets up an application which maps the functions to\nURLs:,,from,,flask,,import,,Flask,,from,,yourapplication,,import,,views,,app,,=,,Flask,(,__name__,),,app,.,add_url_rule,(,'/',,,,view_func,=,views,.,index,),,app,.,add_url_rule,(,'/user/<username>',,,,view_func,=,views,.,user,),,,,,,Loading Late,\u00b6,,So far we only split up the views and the routing, but the module is still\nloaded upfront.  The trick is to actually load the view function as needed.\nThis can be accomplished with a helper class that behaves just like a\nfunction but internally imports the real function on first use:,,from,,werkzeug,,import,,import_string,,,,cached_property,,class,,LazyView,(,object,):,,def,,__init__,(,self,,,,import_name,):,,self,.,__module__,,,,self,.,__name__,,=,,import_name,.,rsplit,(,'.',,,,1,),,self,.,import_name,,=,,import_name,,@cached_property,,def,,view,(,self,):,,return,,import_string,(,self,.,import_name,),,def,,__call__,(,self,,,,*,args,,,,**,kwargs,):,,return,,self,.,view,(,*,args,,,,**,kwargs,),,,,What\u2019s important here is is that,__module__,and,__name__,are properly\nset.  This is used by Flask internally to figure out how to name the\nURL rules in case you don\u2019t provide a name for the rule yourself.,,Then you can define your central place to combine the views like this:,,from,,flask,,import,,Flask,,from,,yourapplication.helpers,,import,,LazyView,,app,,=,,Flask,(,__name__,),,app,.,add_url_rule,(,'/',,,,view_func,=,LazyView,(,'yourapplication.views.index',)),,app,.,add_url_rule,(,'/user/<username>',,,,view_func,=,LazyView,(,'yourapplication.views.user',)),,,,You can further optimize this in terms of amount of keystrokes needed to\nwrite this by having a function that calls into,add_url_rule(),by prefixing a string with the project\nname and a dot, and by wrapping,view_func,in a,LazyView,as needed.,,def,,url,(,import_name,,,,url_rules,=,[],,,**,options,):,,view,,=,,LazyView,(,'yourapplication.',,+,,import_name,),,for,,url_rule,,in,,url_rules,:,,app,.,add_url_rule,(,url_rule,,,,view_func,=,view,,,,**,options,),,# add a single route to the index view,,url,(,'views.index',,,,[,'/',]),,# add two routes to a single function endpoint,,url_rules,,=,,[,'/user/',,,'/user/<username>',],,url,(,'views.user',,,,url_rules,),,,,One thing to keep in mind is that before and after request handlers have\nto be in a file that is imported upfront to work properly on the first\nrequest.  The same goes for any kind of remaining decorator.,,,,,,,,,,,,,Contents,,,Lazily Loading Views,,Converting to Centralized URL Map,,Loading Late,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,Custom Error Pages,,Next:,MongoKit in Flask,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Custom Error Pages", "url": "http://flask.pocoo.org/docs/dev/patterns/errorpages/", "content": ",,,,,Custom Error Pages \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,Custom Error Pages,\u00b6,,Flask comes with a handy,abort(),function that aborts a\nrequest with an HTTP error code early.  It will also provide a plain black\nand white error page for you with a basic description, but nothing fancy.,,Depending on the error code it is less or more likely for the user to\nactually see such an error.,,,Common Error Codes,\u00b6,,The following error codes are some that are often displayed to the user,\neven if the application behaves correctly:,,,404 Not Found,,The good old \u201cchap, you made a mistake typing that URL\u201d message.  So\ncommon that even novices to the internet know that 404 means: damn,\nthe thing I was looking for is not there.  It\u2019s a very good idea to\nmake sure there is actually something useful on a 404 page, at least a\nlink back to the index.,,403 Forbidden,,If you have some kind of access control on your website, you will have\nto send a 403 code for disallowed resources.  So make sure the user\nis not lost when they try to access a forbidden resource.,,410 Gone,,Did you know that there the \u201c404 Not Found\u201d has a brother named \u201c410\nGone\u201d?  Few people actually implement that, but the idea is that\nresources that previously existed and got deleted answer with 410\ninstead of 404.  If you are not deleting documents permanently from\nthe database but just mark them as deleted, do the user a favour and\nuse the 410 code instead and display a message that what they were\nlooking for was deleted for all eternity.,,500 Internal Server Error,,Usually happens on programming errors or if the server is overloaded.\nA terribly good idea is to have a nice page there, because your\napplication,will,fail sooner or later (see also:,Application Errors,).,,,,,Error Handlers,\u00b6,,An error handler is a function that returns a response when a type of error is\nraised, similar to how a view is a function that returns a response when a\nrequest URL is matched. It is passed the instance of the error being handled,\nwhich is most likely a,HTTPException,. An error\nhandler for \u201c500 Internal Server Error\u201d will be passed uncaught exceptions in\naddition to explicit 500 errors.,,An error handler is registered with the,errorhandler(),decorator or the,register_error_handler(),method. A handler\ncan be registered for a status code, like 404, or for an exception class.,,The status code of the response will not be set to the handler\u2019s code. Make\nsure to provide the appropriate HTTP status code when returning a response from\na handler.,,A handler for \u201c500 Internal Server Error\u201d will not be used when running in\ndebug mode. Instead, the interactive debugger will be shown.,,Here is an example implementation for a \u201c404 Page Not Found\u201d exception:,,from,,flask,,import,,render_template,,@app,.,errorhandler,(,404,),,def,,page_not_found,(,e,):,,# note that we set the 404 status explicitly,,return,,render_template,(,'404.html',),,,404,,,,When using the,application factory pattern,:,,from,,flask,,import,,Flask,,,,render_template,,def,,page_not_found,(,e,):,,return,,render_template,(,'404.html',),,,404,,def,,create_app,(,config_filename,):,,app,,=,,Flask,(,__name__,),,app,.,register_error_handler,(,404,,,,page_not_found,),,return,,app,,,,An example template might be this:,,{%,,extends,,\"layout.html\",,%},,{%,,block,,title,,%},Page Not Found,{%,,endblock,,%},,{%,,block,,body,,%},,<,h1,>,Page Not Found,</,h1,>,,<,p,>,What you were looking for is just not there.,<,p,><,a,,href,=,\",{{,,url_for,(,'index',),,}},\",>,go somewhere nice,</,a,>,,{%,,endblock,,%},,,,,,,,,,,,,,,Contents,,,Custom Error Pages,,Common Error Codes,,Error Handlers,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,AJAX with jQuery,,Next:,Lazily Loading Views,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "AJAX with jQuery", "url": "http://flask.pocoo.org/docs/dev/patterns/jquery/", "content": ",,,,,AJAX with jQuery \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,AJAX with jQuery,\u00b6,,jQuery,is a small JavaScript library commonly used to simplify working\nwith the DOM and JavaScript in general.  It is the perfect tool to make\nweb applications more dynamic by exchanging JSON between server and\nclient.,,JSON itself is a very lightweight transport format, very similar to how\nPython primitives (numbers, strings, dicts and lists) look like which is\nwidely supported and very easy to parse.  It became popular a few years\nago and quickly replaced XML as transport format in web applications.,,,Loading jQuery,\u00b6,,In order to use jQuery, you have to download it first and place it in the\nstatic folder of your application and then ensure it\u2019s loaded.  Ideally\nyou have a layout template that is used for all pages where you just have\nto add a script statement to the bottom of your,<body>,to load jQuery:,,<,script,,type,=,text/javascript,,src,=,\"{{,,url_for('static', filename='jquery.js') }}\",></,script,>,,,,Another method is using Google\u2019s,AJAX Libraries API,to load jQuery:,,<,script,,src,=,\"//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js\",></,script,>,,<,script,>,window,.,jQuery,,||,,document,.,write,(,'<script src=\"{{,,url_for(',static,', filename=',jquery,.,js,') }}\">\\x3C/script>',)</,script,>,,,,In this case you have to put jQuery into your static folder as a fallback, but it will\nfirst try to load it directly from Google. This has the advantage that your\nwebsite will probably load faster for users if they went to at least one\nother website before using the same jQuery version from Google because it\nwill already be in the browser cache.,,,,Where is My Site?,\u00b6,,Do you know where your application is?  If you are developing the answer\nis quite simple: it\u2019s on localhost port something and directly on the root\nof that server.  But what if you later decide to move your application to\na different location?  For example to,http://example.com/myapp,?  On\nthe server side this never was a problem because we were using the handy,url_for(),function that could answer that question for\nus, but if we are using jQuery we should not hardcode the path to\nthe application but make that dynamic, so how can we do that?,,A simple method would be to add a script tag to our page that sets a\nglobal variable to the prefix to the root of the application.  Something\nlike this:,,<,script,,type,=,text/javascript,>,,$SCRIPT_ROOT,,=,,{{,,request.script_root,|,tojson,|,safe,,}},;,,</,script,>,,,,The,|safe,is necessary in Flask before 0.10 so that Jinja does not\nescape the JSON encoded string with HTML rules.  Usually this would be\nnecessary, but we are inside a,script,block here where different rules\napply.,,,Information for Pros,,In HTML the,script,tag is declared,CDATA,which means that entities\nwill not be parsed.  Everything until,</script>,is handled as script.\nThis also means that there must never be any,</,between the script\ntags.,|tojson,is kind enough to do the right thing here and\nescape slashes for you (,{{,,\"</script>\"|tojson|safe,,}},is rendered as,\"<\\/script>\",).,,In Flask 0.10 it goes a step further and escapes all HTML tags with\nunicode escapes.  This makes it possible for Flask to automatically\nmark the result as HTML safe.,,,,,JSON View Functions,\u00b6,,Now let\u2019s create a server side function that accepts two URL arguments of\nnumbers which should be added together and then sent back to the\napplication in a JSON object.  This is a really ridiculous example and is\nsomething you usually would do on the client side alone, but a simple\nexample that shows how you would use jQuery and Flask nonetheless:,,from,,flask,,import,,Flask,,,,jsonify,,,,render_template,,,,request,,app,,=,,Flask,(,__name__,),,@app,.,route,(,'/_add_numbers',),,def,,add_numbers,():,,a,,=,,request,.,args,.,get,(,'a',,,,0,,,,type,=,int,),,b,,=,,request,.,args,.,get,(,'b',,,,0,,,,type,=,int,),,return,,jsonify,(,result,=,a,,+,,b,),,@app,.,route,(,'/',),,def,,index,():,,return,,render_template,(,'index.html',),,,,As you can see I also added an,index,method here that renders a\ntemplate.  This template will load jQuery as above and have a little form\nwe can add two numbers and a link to trigger the function on the server\nside.,,Note that we are using the,get(),method here\nwhich will never fail.  If the key is missing a default value (here,0,)\nis returned.  Furthermore it can convert values to a specific type (like\nin our case,int,).  This is especially handy for code that is\ntriggered by a script (APIs, JavaScript etc.) because you don\u2019t need\nspecial error reporting in that case.,,,,The HTML,\u00b6,,Your index.html template either has to extend a,layout.html,template with\njQuery loaded and the,$SCRIPT_ROOT,variable set, or do that on the top.\nHere\u2019s the HTML code needed for our little application (,index.html,).\nNotice that we also drop the script directly into the HTML here.  It is\nusually a better idea to have that in a separate script file:,,<,script,,type,=,text/javascript,>,,$,(,function,(),,{,,$,(,'a#calculate',).,bind,(,'click',,,,function,(),,{,,$,.,getJSON,(,$SCRIPT_ROOT,,+,,'/_add_numbers',,,,{,,a,:,,$,(,'input[name=\"a\"]',).,val,(),,,b,:,,$,(,'input[name=\"b\"]',).,val,(),,},,,function,(,data,),,{,,$,(,\"#result\",).,text,(,data,.,result,);,,});,,return,,false,;,,});,,});,,</,script,>,,<,h1,>,jQuery Example,</,h1,>,,<,p,><,input,,type,=,text,,size,=,5,,name,=,a,>,+,<,input,,type,=,text,,size,=,5,,name,=,b,>,=,<,span,,id,=,result,>,?,</,span,>,,<,p,><,a,,href,=,#,,id,=,calculate,>,calculate server side,</,a,>,,,,I won\u2019t go into detail here about how jQuery works, just a very quick\nexplanation of the little bit of code above:,,,$(function(),,{,,...,,}),specifies code that should run once the\nbrowser is done loading the basic parts of the page.,,$('selector'),selects an element and lets you operate on it.,,element.bind('event',,,func),specifies a function that should run\nwhen the user clicked on the element.  If that function returns,false,, the default behavior will not kick in (in this case, navigate\nto the,#,URL).,,$.getJSON(url,,,data,,,func),sends a,GET,request to,url,and will\nsend the contents of the,data,object as query parameters.  Once the\ndata arrived, it will call the given function with the return value as\nargument.  Note that we can use the,$SCRIPT_ROOT,variable here that\nwe set earlier.,,,Check out the,example source,for a full\napplication demonstrating the code on this page, as well as the same\nthing using,XMLHttpRequest,and,fetch,.,,,,,,,,,,,,,Contents,,,AJAX with jQuery,,Loading jQuery,,Where is My Site?,,JSON View Functions,,The HTML,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,Message Flashing,,Next:,Custom Error Pages,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Message Flashing", "url": "http://flask.pocoo.org/docs/dev/patterns/flashing/", "content": ",,,,,Message Flashing \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,Message Flashing,\u00b6,,Good applications and user interfaces are all about feedback.  If the user\ndoes not get enough feedback they will probably end up hating the\napplication.  Flask provides a really simple way to give feedback to a\nuser with the flashing system.  The flashing system basically makes it\npossible to record a message at the end of a request and access it next\nrequest and only next request.  This is usually combined with a layout\ntemplate that does this. Note that browsers and sometimes web servers enforce\na limit on cookie sizes. This means that flashing messages that are too\nlarge for session cookies causes message flashing to fail silently.,,,Simple Flashing,\u00b6,,So here is a full example:,,from,,flask,,import,,Flask,,,,flash,,,,redirect,,,,render_template,,,\\,request,,,,url_for,,app,,=,,Flask,(,__name__,),,app,.,secret_key,,=,,b,'_5#y2L\"F4Q8z,\\n\\xec,]/',,@app,.,route,(,'/',),,def,,index,():,,return,,render_template,(,'index.html',),,@app,.,route,(,'/login',,,,methods,=,[,'GET',,,,'POST',]),,def,,login,():,,error,,=,,None,,if,,request,.,method,,==,,'POST',:,,if,,request,.,form,[,'username',],,!=,,'admin',,or,\\,request,.,form,[,'password',],,!=,,'secret',:,,error,,=,,'Invalid credentials',,else,:,,flash,(,'You were successfully logged in',),,return,,redirect,(,url_for,(,'index',)),,return,,render_template,(,'login.html',,,,error,=,error,),,,,And here is the,layout.html,template which does the magic:,,<!doctype html>,,<,title,>,My Application,</,title,>,,{%,,with,,messages,,=,,get_flashed_messages,(),,%},,{%,,if,,messages,,%},,<,ul,,class,=,flashes,>,,{%,,for,,message,,in,,messages,,%},,<,li,>,{{,,message,,}},</,li,>,,{%,,endfor,,%},,</,ul,>,,{%,,endif,,%},,{%,,endwith,,%},,{%,,block,,body,,%}{%,,endblock,,%},,,,Here is the,index.html,template which inherits from,layout.html,:,,{%,,extends,,\"layout.html\",,%},,{%,,block,,body,,%},,<,h1,>,Overview,</,h1,>,,<,p,>,Do you want to,<,a,,href,=,\",{{,,url_for,(,'login',),,}},\",>,log in?,</,a,>,,{%,,endblock,,%},,,,And here is the,login.html,template which also inherits from,layout.html,:,,{%,,extends,,\"layout.html\",,%},,{%,,block,,body,,%},,<,h1,>,Login,</,h1,>,,{%,,if,,error,,%},,<,p,,class,=,error,><,strong,>,Error:,</,strong,>,,{{,,error,,}},,{%,,endif,,%},,<,form,,method,=,post,>,,<,dl,>,,<,dt,>,Username:,<,dd,><,input,,type,=,text,,name,=,username,,value,=,\",{{,,request.form.username,,}},\",>,,<,dt,>,Password:,<,dd,><,input,,type,=,password,,name,=,password,>,,</,dl,>,,<,p,><,input,,type,=,submit,,value,=,Login,>,,</,form,>,,{%,,endblock,,%},,,,,,Flashing With Categories,\u00b6,,,Changelog,,New in version 0.3.,,,It is also possible to provide categories when flashing a message.  The\ndefault category if nothing is provided is,'message',.  Alternative\ncategories can be used to give the user better feedback.  For example\nerror messages could be displayed with a red background.,,To flash a message with a different category, just use the second argument\nto the,flash(),function:,,flash,(,u,'Invalid password provided',,,,'error',),,,,Inside the template you then have to tell the,get_flashed_messages(),function to also return the\ncategories.  The loop looks slightly different in that situation then:,,{%,,with,,messages,,=,,get_flashed_messages,(,with_categories,=,true,),,%},,{%,,if,,messages,,%},,<,ul,,class,=,flashes,>,,{%,,for,,category,,,,message,,in,,messages,,%},,<,li,,class,=,\",{{,,category,,}},\",>,{{,,message,,}},</,li,>,,{%,,endfor,,%},,</,ul,>,,{%,,endif,,%},,{%,,endwith,,%},,,,This is just one example of how to render these flashed messages.  One\nmight also use the category to add a prefix such as,<strong>Error:</strong>,to the message.,,,,Filtering Flash Messages,\u00b6,,,Changelog,,New in version 0.9.,,,Optionally you can pass a list of categories which filters the results of,get_flashed_messages(),.  This is useful if you wish to\nrender each category in a separate block.,,{%,,with,,errors,,=,,get_flashed_messages,(,category_filter,=[,\"error\",]),,%},,{%,,if,,errors,,%},,<,div,,class,=,\"alert-message block-message error\",>,,<,a,,class,=,\"close\",,href,=,\"#\",>,\u00d7,</,a,>,,<,ul,>,,{%,-,for,,msg,,in,,errors,,%},,<,li,>,{{,,msg,,}},</,li,>,,{%,,endfor,-,%},,</,ul,>,,</,div,>,,{%,,endif,,%},,{%,,endwith,,%},,,,,,,,,,,,,,,Contents,,,Message Flashing,,Simple Flashing,,Flashing With Categories,,Filtering Flash Messages,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,Template Inheritance,,Next:,AJAX with jQuery,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Template Inheritance", "url": "http://flask.pocoo.org/docs/dev/patterns/templateinheritance/", "content": ",,,,,Template Inheritance \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,Template Inheritance,\u00b6,,The most powerful part of Jinja is template inheritance. Template inheritance\nallows you to build a base \u201cskeleton\u201d template that contains all the common\nelements of your site and defines,blocks,that child templates can override.,,Sounds complicated but is very basic. It\u2019s easiest to understand it by starting\nwith an example.,,,Base Template,\u00b6,,This template, which we\u2019ll call,layout.html,, defines a simple HTML skeleton\ndocument that you might use for a simple two-column page. It\u2019s the job of\n\u201cchild\u201d templates to fill the empty blocks with content:,,<!doctype html>,,<,html,>,,<,head,>,,{%,,block,,head,,%},,<,link,,rel,=,\"stylesheet\",,href,=,\",{{,,url_for,(,'static',,,,filename,=,'style.css',),,}},\",>,,<,title,>,{%,,block,,title,,%}{%,,endblock,,%},- My Webpage,</,title,>,,{%,,endblock,,%},,</,head,>,,<,body,>,,<,div,,id,=,\"content\",>,{%,,block,,content,,%}{%,,endblock,,%},</,div,>,,<,div,,id,=,\"footer\",>,,{%,,block,,footer,,%},,&copy;,Copyright 2010 by,<,a,,href,=,\"http://domain.invalid/\",>,you,</,a,>,.,{%,,endblock,,%},,</,div,>,,</,body,>,,</,html,>,,,,In this example, the,{%,,block,,%},tags define four blocks that child templates\ncan fill in. All the,block,tag does is tell the template engine that a\nchild template may override those portions of the template.,,,,Child Template,\u00b6,,A child template might look like this:,,{%,,extends,,\"layout.html\",,%},,{%,,block,,title,,%},Index,{%,,endblock,,%},,{%,,block,,head,,%},,{{,,super,(),,}},,<,style,,type,=,\"text/css\",>,,.,important,,{,,color,:,,#336699,;,,},,</,style,>,,{%,,endblock,,%},,{%,,block,,content,,%},,<,h1,>,Index,</,h1,>,,<,p,,class,=,\"important\",>,Welcome on my awesome homepage.,{%,,endblock,,%},,,,The,{%,,extends,,%},tag is the key here. It tells the template engine that\nthis template \u201cextends\u201d another template.  When the template system evaluates\nthis template, first it locates the parent.  The extends tag must be the\nfirst tag in the template.  To render the contents of a block defined in\nthe parent template, use,{{,,super(),,}},.,,,,,,,,,,,,,Contents,,,Template Inheritance,,Base Template,,Child Template,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,Form Validation with WTForms,,Next:,Message Flashing,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "View Decorators", "url": "http://flask.pocoo.org/docs/1.0/patterns/viewdecorators/", "content": ",,,,,View Decorators \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,,,,,View Decorators,\u00b6,,Python has a really interesting feature called function decorators.  This\nallows some really neat things for web applications.  Because each view in\nFlask is a function, decorators can be used to inject additional\nfunctionality to one or more functions.  The,route(),decorator is the one you probably used already.  But there are use cases\nfor implementing your own decorator.  For instance, imagine you have a\nview that should only be used by people that are logged in.  If a user\ngoes to the site and is not logged in, they should be redirected to the\nlogin page.  This is a good example of a use case where a decorator is an\nexcellent solution.,,,Login Required Decorator,\u00b6,,So let\u2019s implement such a decorator.  A decorator is a function that\nwraps and replaces another function.  Since the original function is\nreplaced, you need to remember to copy the original function\u2019s information\nto the new function.  Use,functools.wraps(),to handle this for you.,,This example assumes that the login page is called,'login',and that\nthe current user is stored in,g.user,and is,None,if there is no-one\nlogged in.,,from,,functools,,import,,wraps,,from,,flask,,import,,g,,,,request,,,,redirect,,,,url_for,,def,,login_required,(,f,):,,@wraps,(,f,),,def,,decorated_function,(,*,args,,,,**,kwargs,):,,if,,g,.,user,,is,,None,:,,return,,redirect,(,url_for,(,'login',,,,next,=,request,.,url,)),,return,,f,(,*,args,,,,**,kwargs,),,return,,decorated_function,,,,To use the decorator, apply it as innermost decorator to a view function.\nWhen applying further decorators, always remember\nthat the,route(),decorator is the outermost.,,@app,.,route,(,'/secret_page',),,@login_required,,def,,secret_page,():,,pass,,,,,Note,,The,next,value will exist in,request.args,after a,GET,request for\nthe login page.  You\u2019ll have to pass it along when sending the,POST,request\nfrom the login form.  You can do this with a hidden input tag, then retrieve it\nfrom,request.form,when logging the user in.,,<,input,,type,=,\"hidden\",,value,=,\"{{ request.args.get('next', '') }}\",/>,,,,,,,Caching Decorator,\u00b6,,Imagine you have a view function that does an expensive calculation and\nbecause of that you would like to cache the generated results for a\ncertain amount of time.  A decorator would be nice for that.  We\u2019re\nassuming you have set up a cache like mentioned in,Caching,.,,Here is an example cache function.  It generates the cache key from a\nspecific prefix (actually a format string) and the current path of the\nrequest.  Notice that we are using a function that first creates the\ndecorator that then decorates the function.  Sounds awful? Unfortunately\nit is a little bit more complex, but the code should still be\nstraightforward to read.,,The decorated function will then work as follows,,,get the unique cache key for the current request base on the current\npath.,,get the value for that key from the cache. If the cache returned\nsomething we will return that value.,,otherwise the original function is called and the return value is\nstored in the cache for the timeout provided (by default 5 minutes).,,,Here the code:,,from,,functools,,import,,wraps,,from,,flask,,import,,request,,def,,cached,(,timeout,=,5,,*,,60,,,,key,=,'view/,%s,',):,,def,,decorator,(,f,):,,@wraps,(,f,),,def,,decorated_function,(,*,args,,,,**,kwargs,):,,cache_key,,=,,key,,%,,request,.,path,,rv,,=,,cache,.,get,(,cache_key,),,if,,rv,,is,,not,,None,:,,return,,rv,,rv,,=,,f,(,*,args,,,,**,kwargs,),,cache,.,set,(,cache_key,,,,rv,,,,timeout,=,timeout,),,return,,rv,,return,,decorated_function,,return,,decorator,,,,Notice that this assumes an instantiated,cache,object is available, see,Caching,for more information.,,,,Templating Decorator,\u00b6,,A common pattern invented by the TurboGears guys a while back is a\ntemplating decorator.  The idea of that decorator is that you return a\ndictionary with the values passed to the template from the view function\nand the template is automatically rendered.  With that, the following\nthree examples do exactly the same:,,@app,.,route,(,'/',),,def,,index,():,,return,,render_template,(,'index.html',,,,value,=,42,),,@app,.,route,(,'/',),,@templated,(,'index.html',),,def,,index,():,,return,,dict,(,value,=,42,),,@app,.,route,(,'/',),,@templated,(),,def,,index,():,,return,,dict,(,value,=,42,),,,,As you can see, if no template name is provided it will use the endpoint\nof the URL map with dots converted to slashes +,'.html',.  Otherwise\nthe provided template name is used.  When the decorated function returns,\nthe dictionary returned is passed to the template rendering function.  If,None,is returned, an empty dictionary is assumed, if something else than\na dictionary is returned we return it from the function unchanged.  That\nway you can still use the redirect function or return simple strings.,,Here is the code for that decorator:,,from,,functools,,import,,wraps,,from,,flask,,import,,request,,,,render_template,,def,,templated,(,template,=,None,):,,def,,decorator,(,f,):,,@wraps,(,f,),,def,,decorated_function,(,*,args,,,,**,kwargs,):,,template_name,,=,,template,,if,,template_name,,is,,None,:,,template_name,,=,,request,.,endpoint,\\,.,replace,(,'.',,,,'/',),,+,,'.html',,ctx,,=,,f,(,*,args,,,,**,kwargs,),,if,,ctx,,is,,None,:,,ctx,,=,,{},,elif,,not,,isinstance,(,ctx,,,,dict,):,,return,,ctx,,return,,render_template,(,template_name,,,,**,ctx,),,return,,decorated_function,,return,,decorator,,,,,,Endpoint Decorator,\u00b6,,When you want to use the werkzeug routing system for more flexibility you\nneed to map the endpoint as defined in the,Rule,to a view function. This is possible with this decorator. For example:,,from,,flask,,import,,Flask,,from,,werkzeug.routing,,import,,Rule,,app,,=,,Flask,(,__name__,),,app,.,url_map,.,add,(,Rule,(,'/',,,,endpoint,=,'index',)),,@app,.,endpoint,(,'index',),,def,,my_index,():,,return,,\"Hello world\",,,,,,,,,,,,,,,Contents,,,View Decorators,,Login Required Decorator,,Caching Decorator,,Templating Decorator,,Endpoint Decorator,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,Caching,,Next:,Form Validation with WTForms,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Deploying with Setuptools", "url": "http://flask.pocoo.org/docs/dev/patterns/distribute/", "content": ",,,,,Deploying with Setuptools \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,Deploying with Setuptools,\u00b6,,Setuptools,, is an extension library that is commonly used to\ndistribute Python libraries and extensions. It extends distutils, a basic\nmodule installation system shipped with Python to also support various more\ncomplex constructs that make larger applications easier to distribute:,,,support for dependencies,: a library or application can declare a\nlist of other libraries it depends on which will be installed\nautomatically for you.,,package registry,: setuptools registers your package with your\nPython installation.  This makes it possible to query information\nprovided by one package from another package.  The best known feature of\nthis system is the entry point support which allows one package to\ndeclare an \u201centry point\u201d that another package can hook into to extend the\nother package.,,installation manager,:,pip,can install other libraries for you.,,,If you have Python 2 (>=2.7.9) or Python 3 (>=3.4) installed from python.org,\nyou will already have pip and setuptools on your system.  Otherwise, you\nwill need to install them yourself.,,Flask itself, and all the libraries you can find on PyPI are distributed with\neither setuptools or distutils.,,In this case we assume your application is called,yourapplication.py,and you are not using a module, but a,package,. If you have not yet converted your application into\na package, head over to the,Larger Applications,pattern to see\nhow this can be done.,,A working deployment with setuptools is the first step into more complex\nand more automated deployment scenarios.  If you want to fully automate\nthe process, also read the,Deploying with Fabric,chapter.,,,Basic Setup Script,\u00b6,,Because you have Flask installed, you have setuptools available on your system.\nFlask already depends upon setuptools.,,Standard disclaimer applies:,you better use a virtualenv,.,,Your setup code always goes into a file named,setup.py,next to your\napplication.  The name of the file is only convention, but because\neverybody will look for a file with that name, you better not change it.,,A basic,setup.py,file for a Flask application looks like this:,,from,,setuptools,,import,,setup,,setup,(,,name,=,'Your Application',,,,version,=,'1.0',,,,long_description,=,__doc__,,,,packages,=,[,'yourapplication',],,,include_package_data,=,True,,,,zip_safe,=,False,,,,install_requires,=,[,'Flask',],,),,,,Please keep in mind that you have to list subpackages explicitly.  If you\nwant setuptools to lookup the packages for you automatically, you can use\nthe,find_packages,function:,,from,,setuptools,,import,,setup,,,,find_packages,,setup,(,,...,,packages,=,find_packages,(),,),,,,Most parameters to the,setup,function should be self explanatory,,include_package_data,and,zip_safe,might not be.,include_package_data,tells setuptools to look for a,MANIFEST.in,file\nand install all the entries that match as package data.  We will use this\nto distribute the static files and templates along with the Python module\n(see,Distributing Resources,).  The,zip_safe,flag can be used to\nforce or prevent zip Archive creation.  In general you probably don\u2019t want\nyour packages to be installed as zip files because some tools do not\nsupport them and they make debugging a lot harder.,,,,Tagging Builds,\u00b6,,It is useful to distinguish between release and development builds. Add a,setup.cfg,file to configure these options.,,[,egg_info,],,tag_build,,=,,.,dev,,tag_date,,=,,1,,[,aliases,],,release,,=,,egg_info,,-,Db,,'',,,,Running,python,,setup.py,,sdist,will create a development package\nwith \u201c.dev\u201d and the current date appended:,flaskr-1.0.dev20160314.tar.gz,.\nRunning,python,,setup.py,,release,,sdist,will create a release package\nwith only the version:,flaskr-1.0.tar.gz,.,,,,Distributing Resources,\u00b6,,If you try to install the package you just created, you will notice that\nfolders like,static,or,templates,are not installed for you.  The\nreason for this is that setuptools does not know which files to add for\nyou.  What you should do, is to create a,MANIFEST.in,file next to your,setup.py,file.  This file lists all the files that should be added to\nyour tarball:,,recursive,-,include,,yourapplication,/,templates,,*,,recursive,-,include,,yourapplication,/,static,,*,,,,Don\u2019t forget that even if you enlist them in your,MANIFEST.in,file, they\nwon\u2019t be installed for you unless you set the,include_package_data,parameter of the,setup,function to,True,!,,,,Declaring Dependencies,\u00b6,,Dependencies are declared in the,install_requires,parameter as a list.\nEach item in that list is the name of a package that should be pulled from\nPyPI on installation.  By default it will always use the most recent\nversion, but you can also provide minimum and maximum version\nrequirements.  Here some examples:,,install_requires,=,[,,'Flask>=0.2',,,,'SQLAlchemy>=0.6',,,,'BrokenPackage>=0.7,<=1.0',,],,,,As mentioned earlier, dependencies are pulled from PyPI.  What if you\nwant to depend on a package that cannot be found on PyPI and won\u2019t be\nbecause it is an internal package you don\u2019t want to share with anyone?\nJust do it as if there was a PyPI entry and provide a list of\nalternative locations where setuptools should look for tarballs:,,dependency_links,=,[,'http://example.com/yourfiles',],,,,Make sure that page has a directory listing and the links on the page are\npointing to the actual tarballs with their correct filenames as this is\nhow setuptools will find the files.  If you have an internal company\nserver that contains the packages, provide the URL to that server.,,,,Installing / Developing,\u00b6,,To install your application (ideally into a virtualenv) just run the,setup.py,script with the,install,parameter.  It will install your\napplication into the virtualenv\u2019s site-packages folder and also download\nand install all dependencies:,,$ python setup.py install,,,If you are developing on the package and also want the requirements to be\ninstalled, you can use the,develop,command instead:,,$ python setup.py develop,,,This has the advantage of just installing a link to the site-packages\nfolder instead of copying the data over.  You can then continue to work on\nthe code without having to run,install,again after each change.,,,,,,,,,,,,,Contents,,,Deploying with Setuptools,,Basic Setup Script,,Tagging Builds,,Distributing Resources,,Declaring Dependencies,,Installing / Developing,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,Using URL Processors,,Next:,Deploying with Fabric,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Form Validation with WTForms", "url": "http://flask.pocoo.org/docs/dev/patterns/wtforms/", "content": ",,,,,Form Validation with WTForms \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,Form Validation with WTForms,\u00b6,,When you have to work with form data submitted by a browser view, code\nquickly becomes very hard to read.  There are libraries out there designed\nto make this process easier to manage.  One of them is,WTForms,which we\nwill handle here.  If you find yourself in the situation of having many\nforms, you might want to give it a try.,,When you are working with WTForms you have to define your forms as classes\nfirst.  I recommend breaking up the application into multiple modules\n(,Larger Applications,) for that and adding a separate module for the\nforms.,,,Getting the most out of WTForms with an Extension,,The,Flask-WTF,extension expands on this pattern and adds a\nfew little helpers that make working with forms and Flask more\nfun.  You can get it from,PyPI,.,,,,The Forms,\u00b6,,This is an example form for a typical registration page:,,from,,wtforms,,import,,Form,,,,BooleanField,,,,StringField,,,,PasswordField,,,,validators,,class,,RegistrationForm,(,Form,):,,username,,=,,StringField,(,'Username',,,,[,validators,.,Length,(,min,=,4,,,,max,=,25,)]),,email,,=,,StringField,(,'Email Address',,,,[,validators,.,Length,(,min,=,6,,,,max,=,35,)]),,password,,=,,PasswordField,(,'New Password',,,,[,,validators,.,DataRequired,(),,,validators,.,EqualTo,(,'confirm',,,,message,=,'Passwords must match',),,]),,confirm,,=,,PasswordField,(,'Repeat Password',),,accept_tos,,=,,BooleanField,(,'I accept the TOS',,,,[,validators,.,DataRequired,()]),,,,,,In the View,\u00b6,,In the view function, the usage of this form looks like this:,,@app,.,route,(,'/register',,,,methods,=,[,'GET',,,,'POST',]),,def,,register,():,,form,,=,,RegistrationForm,(,request,.,form,),,if,,request,.,method,,==,,'POST',,and,,form,.,validate,():,,user,,=,,User,(,form,.,username,.,data,,,,form,.,email,.,data,,,,form,.,password,.,data,),,db_session,.,add,(,user,),,flash,(,'Thanks for registering',),,return,,redirect,(,url_for,(,'login',)),,return,,render_template,(,'register.html',,,,form,=,form,),,,,Notice we\u2019re implying that the view is using SQLAlchemy here\n(,SQLAlchemy in Flask,), but that\u2019s not a requirement, of course.  Adapt\nthe code as necessary.,,Things to remember:,,,create the form from the request,form,value if\nthe data is submitted via the HTTP,POST,method and,args,if the data is submitted as,GET,.,,to validate the data, call the,validate(),method, which will return,True,if the data validates,,False,otherwise.,,to access individual values from the form, access,form.<NAME>.data,.,,,,,Forms in Templates,\u00b6,,Now to the template side.  When you pass the form to the templates, you can\neasily render them there.  Look at the following example template to see\nhow easy this is.  WTForms does half the form generation for us already.\nTo make it even nicer, we can write a macro that renders a field with\nlabel and a list of errors if there are any.,,Here\u2019s an example,_formhelpers.html,template with such a macro:,,{%,,macro,,render_field,(,field,),,%},,<,dt,>,{{,,field.label,,}},,<,dd,>,{{,,field,(**,kwargs,)|,safe,,}},,{%,,if,,field.errors,,%},,<,ul,,class,=,errors,>,,{%,,for,,error,,in,,field.errors,,%},,<,li,>,{{,,error,,}},</,li,>,,{%,,endfor,,%},,</,ul,>,,{%,,endif,,%},,</,dd,>,,{%,,endmacro,,%},,,,This macro accepts a couple of keyword arguments that are forwarded to\nWTForm\u2019s field function, which renders the field for us.  The keyword\narguments will be inserted as HTML attributes.  So, for example, you can\ncall,render_field(form.username,,,class='username'),to add a class to\nthe input element.  Note that WTForms returns standard Python unicode\nstrings, so we have to tell Jinja2 that this data is already HTML-escaped\nwith the,|safe,filter.,,Here is the,register.html,template for the function we used above, which\ntakes advantage of the,_formhelpers.html,template:,,{%,,from,,\"_formhelpers.html\",,import,,render_field,,%},,<,form,,method,=,post,>,,<,dl,>,,{{,,render_field,(,form.username,),,}},,{{,,render_field,(,form.email,),,}},,{{,,render_field,(,form.password,),,}},,{{,,render_field,(,form.confirm,),,}},,{{,,render_field,(,form.accept_tos,),,}},,</,dl,>,,<,p,><,input,,type,=,submit,,value,=,Register,>,,</,form,>,,,,For more information about WTForms, head over to the,WTForms\nwebsite,.,,,,,,,,,,,,,Contents,,,Form Validation with WTForms,,The Forms,,In the View,,Forms in Templates,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,View Decorators,,Next:,Template Inheritance,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Caching", "url": "http://flask.pocoo.org/docs/dev/patterns/caching/", "content": ",,,,,Caching \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,Caching,\u00b6,,When your application runs slow, throw some caches in.  Well, at least\nit\u2019s the easiest way to speed up things.  What does a cache do?  Say you\nhave a function that takes some time to complete but the results would\nstill be good enough if they were 5 minutes old.  So then the idea is that\nyou actually put the result of that calculation into a cache for some\ntime.,,Flask itself does not provide caching for you, but Werkzeug, one of the\nlibraries it is based on, has some very basic cache support.  It supports\nmultiple cache backends, normally you want to use a memcached server.,,,Setting up a Cache,\u00b6,,You create a cache object once and keep it around, similar to how,Flask,objects are created.  If you are using the\ndevelopment server you can create a,SimpleCache,object, that one is a simple\ncache that keeps the item stored in the memory of the Python interpreter:,,from,,werkzeug.contrib.cache,,import,,SimpleCache,,cache,,=,,SimpleCache,(),,,,If you want to use memcached, make sure to have one of the memcache modules\nsupported (you get them from,PyPI,) and a\nmemcached server running somewhere.  This is how you connect to such an\nmemcached server then:,,from,,werkzeug.contrib.cache,,import,,MemcachedCache,,cache,,=,,MemcachedCache,([,'127.0.0.1:11211',]),,,,If you are using App Engine, you can connect to the App Engine memcache\nserver easily:,,from,,werkzeug.contrib.cache,,import,,GAEMemcachedCache,,cache,,=,,GAEMemcachedCache,(),,,,,,Using a Cache,\u00b6,,Now how can one use such a cache?  There are two very important\noperations:,get(),and,set(),.  This is how to use them:,,To get an item from the cache call,get(),with a string as key name.\nIf something is in the cache, it is returned.  Otherwise that function\nwill return,None,:,,rv,,=,,cache,.,get,(,'my-item',),,,,To add items to the cache, use the,set(),method instead.  The first argument is the key and the second the value\nthat should be set.  Also a timeout can be provided after which the cache\nwill automatically remove item.,,Here a full example how this looks like normally:,,def,,get_my_item,():,,rv,,=,,cache,.,get,(,'my-item',),,if,,rv,,is,,None,:,,rv,,=,,calculate_value,(),,cache,.,set,(,'my-item',,,,rv,,,,timeout,=,5,,*,,60,),,return,,rv,,,,,,,,,,,,,,,Contents,,,Caching,,Setting up a Cache,,Using a Cache,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,Uploading Files,,Next:,View Decorators,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "View Decorators", "url": "http://flask.pocoo.org/docs/dev/patterns/viewdecorators/", "content": ",,,,,View Decorators \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,View Decorators,\u00b6,,Python has a really interesting feature called function decorators.  This\nallows some really neat things for web applications.  Because each view in\nFlask is a function, decorators can be used to inject additional\nfunctionality to one or more functions.  The,route(),decorator is the one you probably used already.  But there are use cases\nfor implementing your own decorator.  For instance, imagine you have a\nview that should only be used by people that are logged in.  If a user\ngoes to the site and is not logged in, they should be redirected to the\nlogin page.  This is a good example of a use case where a decorator is an\nexcellent solution.,,,Login Required Decorator,\u00b6,,So let\u2019s implement such a decorator.  A decorator is a function that\nwraps and replaces another function.  Since the original function is\nreplaced, you need to remember to copy the original function\u2019s information\nto the new function.  Use,functools.wraps(),to handle this for you.,,This example assumes that the login page is called,'login',and that\nthe current user is stored in,g.user,and is,None,if there is no-one\nlogged in.,,from,,functools,,import,,wraps,,from,,flask,,import,,g,,,,request,,,,redirect,,,,url_for,,def,,login_required,(,f,):,,@wraps,(,f,),,def,,decorated_function,(,*,args,,,,**,kwargs,):,,if,,g,.,user,,is,,None,:,,return,,redirect,(,url_for,(,'login',,,,next,=,request,.,url,)),,return,,f,(,*,args,,,,**,kwargs,),,return,,decorated_function,,,,To use the decorator, apply it as innermost decorator to a view function.\nWhen applying further decorators, always remember\nthat the,route(),decorator is the outermost.,,@app,.,route,(,'/secret_page',),,@login_required,,def,,secret_page,():,,pass,,,,,Note,,The,next,value will exist in,request.args,after a,GET,request for\nthe login page.  You\u2019ll have to pass it along when sending the,POST,request\nfrom the login form.  You can do this with a hidden input tag, then retrieve it\nfrom,request.form,when logging the user in.,,<,input,,type,=,\"hidden\",,value,=,\"{{ request.args.get('next', '') }}\",/>,,,,,,,Caching Decorator,\u00b6,,Imagine you have a view function that does an expensive calculation and\nbecause of that you would like to cache the generated results for a\ncertain amount of time.  A decorator would be nice for that.  We\u2019re\nassuming you have set up a cache like mentioned in,Caching,.,,Here is an example cache function.  It generates the cache key from a\nspecific prefix (actually a format string) and the current path of the\nrequest.  Notice that we are using a function that first creates the\ndecorator that then decorates the function.  Sounds awful? Unfortunately\nit is a little bit more complex, but the code should still be\nstraightforward to read.,,The decorated function will then work as follows,,,get the unique cache key for the current request base on the current\npath.,,get the value for that key from the cache. If the cache returned\nsomething we will return that value.,,otherwise the original function is called and the return value is\nstored in the cache for the timeout provided (by default 5 minutes).,,,Here the code:,,from,,functools,,import,,wraps,,from,,flask,,import,,request,,def,,cached,(,timeout,=,5,,*,,60,,,,key,=,'view/,%s,',):,,def,,decorator,(,f,):,,@wraps,(,f,),,def,,decorated_function,(,*,args,,,,**,kwargs,):,,cache_key,,=,,key,,%,,request,.,path,,rv,,=,,cache,.,get,(,cache_key,),,if,,rv,,is,,not,,None,:,,return,,rv,,rv,,=,,f,(,*,args,,,,**,kwargs,),,cache,.,set,(,cache_key,,,,rv,,,,timeout,=,timeout,),,return,,rv,,return,,decorated_function,,return,,decorator,,,,Notice that this assumes an instantiated,cache,object is available, see,Caching,for more information.,,,,Templating Decorator,\u00b6,,A common pattern invented by the TurboGears guys a while back is a\ntemplating decorator.  The idea of that decorator is that you return a\ndictionary with the values passed to the template from the view function\nand the template is automatically rendered.  With that, the following\nthree examples do exactly the same:,,@app,.,route,(,'/',),,def,,index,():,,return,,render_template,(,'index.html',,,,value,=,42,),,@app,.,route,(,'/',),,@templated,(,'index.html',),,def,,index,():,,return,,dict,(,value,=,42,),,@app,.,route,(,'/',),,@templated,(),,def,,index,():,,return,,dict,(,value,=,42,),,,,As you can see, if no template name is provided it will use the endpoint\nof the URL map with dots converted to slashes +,'.html',.  Otherwise\nthe provided template name is used.  When the decorated function returns,\nthe dictionary returned is passed to the template rendering function.  If,None,is returned, an empty dictionary is assumed, if something else than\na dictionary is returned we return it from the function unchanged.  That\nway you can still use the redirect function or return simple strings.,,Here is the code for that decorator:,,from,,functools,,import,,wraps,,from,,flask,,import,,request,,,,render_template,,def,,templated,(,template,=,None,):,,def,,decorator,(,f,):,,@wraps,(,f,),,def,,decorated_function,(,*,args,,,,**,kwargs,):,,template_name,,=,,template,,if,,template_name,,is,,None,:,,template_name,,=,,request,.,endpoint,\\,.,replace,(,'.',,,,'/',),,+,,'.html',,ctx,,=,,f,(,*,args,,,,**,kwargs,),,if,,ctx,,is,,None,:,,ctx,,=,,{},,elif,,not,,isinstance,(,ctx,,,,dict,):,,return,,ctx,,return,,render_template,(,template_name,,,,**,ctx,),,return,,decorated_function,,return,,decorator,,,,,,Endpoint Decorator,\u00b6,,When you want to use the werkzeug routing system for more flexibility you\nneed to map the endpoint as defined in the,Rule,to a view function. This is possible with this decorator. For example:,,from,,flask,,import,,Flask,,from,,werkzeug.routing,,import,,Rule,,app,,=,,Flask,(,__name__,),,app,.,url_map,.,add,(,Rule,(,'/',,,,endpoint,=,'index',)),,@app,.,endpoint,(,'index',),,def,,my_index,():,,return,,\"Hello world\",,,,,,,,,,,,,,,Contents,,,View Decorators,,Login Required Decorator,,Caching Decorator,,Templating Decorator,,Endpoint Decorator,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,Caching,,Next:,Form Validation with WTForms,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Uploading Files", "url": "http://flask.pocoo.org/docs/dev/patterns/fileuploads/", "content": ",,,,,Uploading Files \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,Uploading Files,\u00b6,,Ah yes, the good old problem of file uploads.  The basic idea of file\nuploads is actually quite simple.  It basically works like this:,,,A,<form>,tag is marked with,enctype=multipart/form-data,and an,<input,,type=file>,is placed in that form.,,The application accesses the file from the,files,dictionary on the request object.,,use the,save(),method of the file to save\nthe file permanently somewhere on the filesystem.,,,,A Gentle Introduction,\u00b6,,Let\u2019s start with a very basic application that uploads a file to a\nspecific upload folder and displays a file to the user.  Let\u2019s look at the\nbootstrapping code for our application:,,import,,os,,from,,flask,,import,,Flask,,,,flash,,,,request,,,,redirect,,,,url_for,,from,,werkzeug.utils,,import,,secure_filename,,UPLOAD_FOLDER,,=,,'/path/to/the/uploads',,ALLOWED_EXTENSIONS,,=,,set,([,'txt',,,,'pdf',,,,'png',,,,'jpg',,,,'jpeg',,,,'gif',]),,app,,=,,Flask,(,__name__,),,app,.,config,[,'UPLOAD_FOLDER',],,=,,UPLOAD_FOLDER,,,,So first we need a couple of imports.  Most should be straightforward, the,werkzeug.secure_filename(),is explained a little bit later.  The,UPLOAD_FOLDER,is where we will store the uploaded files and the,ALLOWED_EXTENSIONS,is the set of allowed file extensions.,,Why do we limit the extensions that are allowed?  You probably don\u2019t want\nyour users to be able to upload everything there if the server is directly\nsending out the data to the client.  That way you can make sure that users\nare not able to upload HTML files that would cause XSS problems (see,Cross-Site Scripting (XSS),).  Also make sure to disallow,.php,files if the server\nexecutes them, but who has PHP installed on their server, right?  :),,Next the functions that check if an extension is valid and that uploads\nthe file and redirects the user to the URL for the uploaded file:,,def,,allowed_file,(,filename,):,,return,,'.',,in,,filename,,and,\\,filename,.,rsplit,(,'.',,,,1,)[,1,],.,lower,(),,in,,ALLOWED_EXTENSIONS,,@app,.,route,(,'/',,,,methods,=,[,'GET',,,,'POST',]),,def,,upload_file,():,,if,,request,.,method,,==,,'POST',:,,# check if the post request has the file part,,if,,'file',,not,,in,,request,.,files,:,,flash,(,'No file part',),,return,,redirect,(,request,.,url,),,file,,=,,request,.,files,[,'file',],,# if user does not select file, browser also,,# submit an empty part without filename,,if,,file,.,filename,,==,,'',:,,flash,(,'No selected file',),,return,,redirect,(,request,.,url,),,if,,file,,and,,allowed_file,(,file,.,filename,):,,filename,,=,,secure_filename,(,file,.,filename,),,file,.,save,(,os,.,path,.,join,(,app,.,config,[,'UPLOAD_FOLDER',],,,filename,)),,return,,redirect,(,url_for,(,'uploaded_file',,,,filename,=,filename,)),,return,,''',,<!doctype html>,,<title>Upload new File</title>,,<h1>Upload new File</h1>,,<form method=post enctype=multipart/form-data>,,<input type=file name=file>,,<input type=submit value=Upload>,,</form>,,''',,,,So what does that,secure_filename(),function actually do?\nNow the problem is that there is that principle called \u201cnever trust user\ninput\u201d.  This is also true for the filename of an uploaded file.  All\nsubmitted form data can be forged, and filenames can be dangerous.  For\nthe moment just remember: always use that function to secure a filename\nbefore storing it directly on the filesystem.,,,Information for the Pros,,So you\u2019re interested in what that,secure_filename(),function does and what the problem is if you\u2019re not using it?  So just\nimagine someone would send the following information as,filename,to\nyour application:,,filename,,=,,\"../../../../home/username/.bashrc\",,,,Assuming the number of,../,is correct and you would join this with\nthe,UPLOAD_FOLDER,the user might have the ability to modify a file on\nthe server\u2019s filesystem he or she should not modify.  This does require some\nknowledge about how the application looks like, but trust me, hackers\nare patient :),,Now let\u2019s look how that function works:,,>>>,secure_filename,(,'../../../../home/username/.bashrc',),,'home_username_.bashrc',,,,,Now one last thing is missing: the serving of the uploaded files. In the,upload_file(),we redirect the user to,url_for('uploaded_file',,,filename=filename),, that is,,/uploads/filename,.\nSo we write the,uploaded_file(),function to return the file of that name. As\nof Flask 0.5 we can use a function that does that for us:,,from,,flask,,import,,send_from_directory,,@app,.,route,(,'/uploads/<filename>',),,def,,uploaded_file,(,filename,):,,return,,send_from_directory,(,app,.,config,[,'UPLOAD_FOLDER',],,,filename,),,,,Alternatively you can register,uploaded_file,as,build_only,rule and\nuse the,SharedDataMiddleware,.  This also works with\nolder versions of Flask:,,from,,werkzeug,,import,,SharedDataMiddleware,,app,.,add_url_rule,(,'/uploads/<filename>',,,,'uploaded_file',,,,build_only,=,True,),,app,.,wsgi_app,,=,,SharedDataMiddleware,(,app,.,wsgi_app,,,,{,,'/uploads',:,,app,.,config,[,'UPLOAD_FOLDER',],,}),,,,If you now run the application everything should work as expected.,,,,Improving Uploads,\u00b6,,,Changelog,,New in version 0.6.,,,So how exactly does Flask handle uploads?  Well it will store them in the\nwebserver\u2019s memory if the files are reasonable small otherwise in a\ntemporary location (as returned by,tempfile.gettempdir(),).  But how\ndo you specify the maximum file size after which an upload is aborted?  By\ndefault Flask will happily accept file uploads to an unlimited amount of\nmemory, but you can limit that by setting the,MAX_CONTENT_LENGTH,config key:,,from,,flask,,import,,Flask,,,,Request,,app,,=,,Flask,(,__name__,),,app,.,config,[,'MAX_CONTENT_LENGTH',],,=,,16,,*,,1024,,*,,1024,,,,The code above will limit the maximum allowed payload to 16 megabytes.\nIf a larger file is transmitted, Flask will raise a,RequestEntityTooLarge,exception.,,,Connection Reset Issue,,When using the local development server, you may get a connection\nreset error instead of a 413 response. You will get the correct\nstatus response when running the app with a production WSGI server.,,,This feature was added in Flask 0.6 but can be achieved in older versions\nas well by subclassing the request object.  For more information on that\nconsult the Werkzeug documentation on file handling.,,,,Upload Progress Bars,\u00b6,,A while ago many developers had the idea to read the incoming file in\nsmall chunks and store the upload progress in the database to be able to\npoll the progress with JavaScript from the client.  Long story short: the\nclient asks the server every 5 seconds how much it has transmitted\nalready.  Do you realize the irony?  The client is asking for something it\nshould already know.,,,,An Easier Solution,\u00b6,,Now there are better solutions that work faster and are more reliable. There\nare JavaScript libraries like,jQuery,that have form plugins to ease the\nconstruction of progress bar.,,Because the common pattern for file uploads exists almost unchanged in all\napplications dealing with uploads, there is also a Flask extension called,Flask-Uploads,that implements a full fledged upload mechanism with white and\nblacklisting of extensions and more.,,,,,,,,,,,,,Contents,,,Uploading Files,,A Gentle Introduction,,Improving Uploads,,Upload Progress Bars,,An Easier Solution,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,SQLAlchemy in Flask,,Next:,Caching,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Using SQLite 3 with Flask", "url": "http://flask.pocoo.org/docs/dev/patterns/sqlite3/", "content": ",,,,,Using SQLite 3 with Flask \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,Using SQLite 3 with Flask,\u00b6,,In Flask you can easily implement the opening of database connections on\ndemand and closing them when the context dies (usually at the end of the\nrequest).,,Here is a simple example of how you can use SQLite 3 with Flask:,,import,,sqlite3,,from,,flask,,import,,g,,DATABASE,,=,,'/path/to/database.db',,def,,get_db,():,,db,,=,,getattr,(,g,,,,'_database',,,,None,),,if,,db,,is,,None,:,,db,,=,,g,.,_database,,=,,sqlite3,.,connect,(,DATABASE,),,return,,db,,@app,.,teardown_appcontext,,def,,close_connection,(,exception,):,,db,,=,,getattr,(,g,,,,'_database',,,,None,),,if,,db,,is,,not,,None,:,,db,.,close,(),,,,Now, to use the database, the application must either have an active\napplication context (which is always true if there is a request in flight)\nor create an application context itself.  At that point the,get_db,function can be used to get the current database connection.  Whenever the\ncontext is destroyed the database connection will be terminated.,,Note: if you use Flask 0.9 or older you need to use,flask._app_ctx_stack.top,instead of,g,as the,flask.g,object was bound to the request and not application context.,,Example:,,@app,.,route,(,'/',),,def,,index,():,,cur,,=,,get_db,(),.,cursor,(),,...,,,,,Note,,Please keep in mind that the teardown request and appcontext functions\nare always executed, even if a before-request handler failed or was\nnever executed.  Because of this we have to make sure here that the\ndatabase is there before we close it.,,,,Connect on Demand,\u00b6,,The upside of this approach (connecting on first use) is that this will\nonly open the connection if truly necessary.  If you want to use this\ncode outside a request context you can use it in a Python shell by opening\nthe application context by hand:,,with,,app,.,app_context,():,,# now you can use get_db(),,,,,,Easy Querying,\u00b6,,Now in each request handling function you can access,get_db(),to get the\ncurrent open database connection.  To simplify working with SQLite, a\nrow factory function is useful.  It is executed for every result returned\nfrom the database to convert the result.  For instance, in order to get\ndictionaries instead of tuples, this could be inserted into the,get_db,function we created above:,,def,,make_dicts,(,cursor,,,,row,):,,return,,dict,((,cursor,.,description,[,idx,][,0,],,,value,),,for,,idx,,,,value,,in,,enumerate,(,row,)),,db,.,row_factory,,=,,make_dicts,,,,This will make the sqlite3 module return dicts for this database connection, which are much nicer to deal with. Even more simply, we could place this in,get_db,instead:,,db,.,row_factory,,=,,sqlite3,.,Row,,,,This would use Row objects rather than dicts to return the results of queries. These are,namedtuple,s, so we can access them either by index or by key. For example, assuming we have a,sqlite3.Row,called,r,for the rows,id,,,FirstName,,,LastName,, and,MiddleInitial,:,,>>>,# You can get values based on the row's name,,>>>,r,[,'FirstName',],,John,,>>>,# Or, you can get them based on index,,>>>,r,[,1,],,John,,# Row objects are also iterable:,,>>>,for,,value,,in,,r,:,,...,,print,(,value,),,1,,John,,Doe,,M,,,,Additionally, it is a good idea to provide a query function that combines\ngetting the cursor, executing and fetching the results:,,def,,query_db,(,query,,,,args,=,(),,,one,=,False,):,,cur,,=,,get_db,(),.,execute,(,query,,,,args,),,rv,,=,,cur,.,fetchall,(),,cur,.,close,(),,return,,(,rv,[,0,],,if,,rv,,else,,None,),,if,,one,,else,,rv,,,,This handy little function, in combination with a row factory, makes\nworking with the database much more pleasant than it is by just using the\nraw cursor and connection objects.,,Here is how you can use it:,,for,,user,,in,,query_db,(,'select * from users',):,,print,,user,[,'username',],,,'has the id',,,,user,[,'user_id',],,,,Or if you just want a single result:,,user,,=,,query_db,(,'select * from users where username = ?',,,,[,the_username,],,,one,=,True,),,if,,user,,is,,None,:,,print,,'No such user',,else,:,,print,,the_username,,,,'has the id',,,,user,[,'user_id',],,,,To pass variable parts to the SQL statement, use a question mark in the\nstatement and pass in the arguments as a list.  Never directly add them to\nthe SQL statement with string formatting because this makes it possible\nto attack the application using,SQL Injections,.,,,,Initial Schemas,\u00b6,,Relational databases need schemas, so applications often ship a,schema.sql,file that creates the database.  It\u2019s a good idea to provide\na function that creates the database based on that schema.  This function\ncan do that for you:,,def,,init_db,():,,with,,app,.,app_context,():,,db,,=,,get_db,(),,with,,app,.,open_resource,(,'schema.sql',,,,mode,=,'r',),,as,,f,:,,db,.,cursor,(),.,executescript,(,f,.,read,()),,db,.,commit,(),,,,You can then create such a database from the Python shell:,,>>>,from,,yourapplication,,import,,init_db,,>>>,init_db,(),,,,,,,,,,,,,,,Contents,,,Using SQLite 3 with Flask,,Connect on Demand,,Easy Querying,,Initial Schemas,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,Deploying with Fabric,,Next:,SQLAlchemy in Flask,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "SQLAlchemy in Flask", "url": "http://flask.pocoo.org/docs/dev/patterns/sqlalchemy/", "content": ",,,,,SQLAlchemy in Flask \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,SQLAlchemy in Flask,\u00b6,,Many people prefer,SQLAlchemy,for database access.  In this case it\u2019s\nencouraged to use a package instead of a module for your flask application\nand drop the models into a separate module (,Larger Applications,).\nWhile that is not necessary, it makes a lot of sense.,,There are four very common ways to use SQLAlchemy.  I will outline each\nof them here:,,,Flask-SQLAlchemy Extension,\u00b6,,Because SQLAlchemy is a common database abstraction layer and object\nrelational mapper that requires a little bit of configuration effort,\nthere is a Flask extension that handles that for you.  This is recommended\nif you want to get started quickly.,,You can download,Flask-SQLAlchemy,from,PyPI,.,,,,Declarative,\u00b6,,The declarative extension in SQLAlchemy is the most recent method of using\nSQLAlchemy.  It allows you to define tables and models in one go, similar\nto how Django works.  In addition to the following text I recommend the\nofficial documentation on the,declarative,extension.,,Here\u2019s the example,database.py,module for your application:,,from,,sqlalchemy,,import,,create_engine,,from,,sqlalchemy.orm,,import,,scoped_session,,,,sessionmaker,,from,,sqlalchemy.ext.declarative,,import,,declarative_base,,engine,,=,,create_engine,(,'sqlite:////tmp/test.db',,,,convert_unicode,=,True,),,db_session,,=,,scoped_session,(,sessionmaker,(,autocommit,=,False,,,,autoflush,=,False,,,,bind,=,engine,)),,Base,,=,,declarative_base,(),,Base,.,query,,=,,db_session,.,query_property,(),,def,,init_db,():,,# import all modules here that might define models so that,,# they will be registered properly on the metadata.  Otherwise,,# you will have to import them first before calling init_db(),,import,,yourapplication.models,,Base,.,metadata,.,create_all,(,bind,=,engine,),,,,To define your models, just subclass the,Base,class that was created by\nthe code above.  If you are wondering why we don\u2019t have to care about\nthreads here (like we did in the SQLite3 example above with the,g,object): that\u2019s because SQLAlchemy does that for us\nalready with the,scoped_session,.,,To use SQLAlchemy in a declarative way with your application, you just\nhave to put the following code into your application module.  Flask will\nautomatically remove database sessions at the end of the request or\nwhen the application shuts down:,,from,,yourapplication.database,,import,,db_session,,@app,.,teardown_appcontext,,def,,shutdown_session,(,exception,=,None,):,,db_session,.,remove,(),,,,Here is an example model (put this into,models.py,, e.g.):,,from,,sqlalchemy,,import,,Column,,,,Integer,,,,String,,from,,yourapplication.database,,import,,Base,,class,,User,(,Base,):,,__tablename__,,=,,'users',,id,,=,,Column,(,Integer,,,,primary_key,=,True,),,name,,=,,Column,(,String,(,50,),,,unique,=,True,),,email,,=,,Column,(,String,(,120,),,,unique,=,True,),,def,,__init__,(,self,,,,name,=,None,,,,email,=,None,):,,self,.,name,,=,,name,,self,.,email,,=,,email,,def,,__repr__,(,self,):,,return,,'<User,%r,>',,%,,(,self,.,name,),,,,To create the database you can use the,init_db,function:,,>>>,from,,yourapplication.database,,import,,init_db,,>>>,init_db,(),,,,You can insert entries into the database like this:,,>>>,from,,yourapplication.database,,import,,db_session,,>>>,from,,yourapplication.models,,import,,User,,>>>,u,,=,,User,(,'admin',,,,'admin@localhost',),,>>>,db_session,.,add,(,u,),,>>>,db_session,.,commit,(),,,,Querying is simple as well:,,>>>,User,.,query,.,all,(),,[<User u'admin'>],,>>>,User,.,query,.,filter,(,User,.,name,,==,,'admin',),.,first,(),,<User u'admin'>,,,,,,Manual Object Relational Mapping,\u00b6,,Manual object relational mapping has a few upsides and a few downsides\nversus the declarative approach from above.  The main difference is that\nyou define tables and classes separately and map them together.  It\u2019s more\nflexible but a little more to type.  In general it works like the\ndeclarative approach, so make sure to also split up your application into\nmultiple modules in a package.,,Here is an example,database.py,module for your application:,,from,,sqlalchemy,,import,,create_engine,,,,MetaData,,from,,sqlalchemy.orm,,import,,scoped_session,,,,sessionmaker,,engine,,=,,create_engine,(,'sqlite:////tmp/test.db',,,,convert_unicode,=,True,),,metadata,,=,,MetaData,(),,db_session,,=,,scoped_session,(,sessionmaker,(,autocommit,=,False,,,,autoflush,=,False,,,,bind,=,engine,)),,def,,init_db,():,,metadata,.,create_all,(,bind,=,engine,),,,,As in the declarative approach, you need to close the session after\neach request or application context shutdown.  Put this into your\napplication module:,,from,,yourapplication.database,,import,,db_session,,@app,.,teardown_appcontext,,def,,shutdown_session,(,exception,=,None,):,,db_session,.,remove,(),,,,Here is an example table and model (put this into,models.py,):,,from,,sqlalchemy,,import,,Table,,,,Column,,,,Integer,,,,String,,from,,sqlalchemy.orm,,import,,mapper,,from,,yourapplication.database,,import,,metadata,,,,db_session,,class,,User,(,object,):,,query,,=,,db_session,.,query_property,(),,def,,__init__,(,self,,,,name,=,None,,,,email,=,None,):,,self,.,name,,=,,name,,self,.,email,,=,,email,,def,,__repr__,(,self,):,,return,,'<User,%r,>',,%,,(,self,.,name,),,users,,=,,Table,(,'users',,,,metadata,,,,Column,(,'id',,,,Integer,,,,primary_key,=,True,),,,Column,(,'name',,,,String,(,50,),,,unique,=,True,),,,Column,(,'email',,,,String,(,120,),,,unique,=,True,),,),,mapper,(,User,,,,users,),,,,Querying and inserting works exactly the same as in the example above.,,,,SQL Abstraction Layer,\u00b6,,If you just want to use the database system (and SQL) abstraction layer\nyou basically only need the engine:,,from,,sqlalchemy,,import,,create_engine,,,,MetaData,,,,Table,,engine,,=,,create_engine,(,'sqlite:////tmp/test.db',,,,convert_unicode,=,True,),,metadata,,=,,MetaData,(,bind,=,engine,),,,,Then you can either declare the tables in your code like in the examples\nabove, or automatically load them:,,from,,sqlalchemy,,import,,Table,,users,,=,,Table,(,'users',,,,metadata,,,,autoload,=,True,),,,,To insert data you can use the,insert,method.  We have to get a\nconnection first so that we can use a transaction:,,>>>,con,,=,,engine,.,connect,(),,>>>,con,.,execute,(,users,.,insert,(),,,name,=,'admin',,,,email,=,'admin@localhost',),,,,SQLAlchemy will automatically commit for us.,,To query your database, you use the engine directly or use a connection:,,>>>,users,.,select,(,users,.,c,.,id,,==,,1,),.,execute,(),.,first,(),,(1, u'admin', u'admin@localhost'),,,,These results are also dict-like tuples:,,>>>,r,,=,,users,.,select,(,users,.,c,.,id,,==,,1,),.,execute,(),.,first,(),,>>>,r,[,'name',],,u'admin',,,,You can also pass strings of SQL statements to the,execute(),method:,,>>>,engine,.,execute,(,'select * from users where id = :1',,,,[,1,]),.,first,(),,(1, u'admin', u'admin@localhost'),,,,For more information about SQLAlchemy, head over to the,website,.,,,,,,,,,,,,,Contents,,,SQLAlchemy in Flask,,Flask-SQLAlchemy Extension,,Declarative,,Manual Object Relational Mapping,,SQL Abstraction Layer,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,Using SQLite 3 with Flask,,Next:,Uploading Files,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Deploying with Fabric", "url": "http://flask.pocoo.org/docs/dev/patterns/fabric/", "content": ",,,,,Deploying with Fabric \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,Deploying with Fabric,\u00b6,,Fabric,is a tool for Python similar to Makefiles but with the ability\nto execute commands on a remote server.  In combination with a properly\nset up Python package (,Larger Applications,) and a good concept for\nconfigurations (,Configuration Handling,) it is very easy to deploy Flask\napplications to external servers.,,Before we get started, here a quick checklist of things we have to ensure\nupfront:,,,Fabric 1.0 has to be installed locally.  This tutorial assumes the\nlatest version of Fabric.,,The application already has to be a package and requires a working,setup.py,file (,Deploying with Setuptools,).,,In the following example we are using,mod_wsgi,for the remote\nservers.  You can of course use your own favourite server there, but\nfor this example we chose Apache +,mod_wsgi,because it\u2019s very easy\nto setup and has a simple way to reload applications without root\naccess.,,,,Creating the first Fabfile,\u00b6,,A fabfile is what controls what Fabric executes.  It is named,fabfile.py,and executed by the,fab,command.  All the functions defined in that file\nwill show up as,fab,subcommands.  They are executed on one or more\nhosts.  These hosts can be defined either in the fabfile or on the command\nline.  In this case we will add them to the fabfile.,,This is a basic first example that has the ability to upload the current\nsource code to the server and install it into a pre-existing\nvirtual environment:,,from,,fabric.api,,import,,*,,# the user to use for the remote commands,,env,.,user,,=,,'appuser',,# the servers where the commands are executed,,env,.,hosts,,=,,[,'server1.example.com',,,,'server2.example.com',],,def,,pack,():,,# build the package,,local,(,'python setup.py sdist --formats=gztar',,,,capture,=,False,),,def,,deploy,():,,# figure out the package name and version,,dist,,=,,local,(,'python setup.py --fullname',,,,capture,=,True,),.,strip,(),,filename,,=,,',%s,.tar.gz',,%,,dist,,# upload the package to the temporary folder on the server,,put,(,'dist/,%s,',,%,,filename,,,,'/tmp/,%s,',,%,,filename,),,# install the package in the application's virtualenv with pip,,run,(,'/var/www/yourapplication/env/bin/pip install /tmp/,%s,',,%,,filename,),,# remove the uploaded package,,run,(,'rm -r /tmp/,%s,',,%,,filename,),,# touch the .wsgi file to trigger a reload in mod_wsgi,,run,(,'touch /var/www/yourapplication.wsgi',),,,,,,Running Fabfiles,\u00b6,,Now how do you execute that fabfile?  You use the,fab,command.  To\ndeploy the current version of the code on the remote server you would use\nthis command:,,$ fab pack deploy,,,However this requires that our server already has the,/var/www/yourapplication,folder created and,/var/www/yourapplication/env,to be a virtual environment.  Furthermore\nare we not creating the configuration or,.wsgi,file on the server.  So\nhow do we bootstrap a new server into our infrastructure?,,This now depends on the number of servers we want to set up.  If we just\nhave one application server (which the majority of applications will\nhave), creating a command in the fabfile for this is overkill.  But\nobviously you can do that.  In that case you would probably call it,setup,or,bootstrap,and then pass the servername explicitly on the\ncommand line:,,$ fab -H newserver.example.com bootstrap,,,To setup a new server you would roughly do these steps:,,,Create the directory structure in,/var/www,:,,$ mkdir /var/www/yourapplication\n$ cd /var/www/yourapplication\n$ virtualenv --distribute env,,,,Upload a new,application.wsgi,file to the server and the\nconfiguration file for the application (eg:,application.cfg,),,,Create a new Apache config for,yourapplication,and activate it.\nMake sure to activate watching for changes of the,.wsgi,file so\nthat we can automatically reload the application by touching it.\n(See,mod_wsgi (Apache),for more information),,,,So now the question is, where do the,application.wsgi,and,application.cfg,files come from?,,,,The WSGI File,\u00b6,,The WSGI file has to import the application and also to set an environment\nvariable so that the application knows where to look for the config.  This\nis a short example that does exactly that:,,import,,os,,os,.,environ,[,'YOURAPPLICATION_CONFIG',],,=,,'/var/www/yourapplication/application.cfg',,from,,yourapplication,,import,,app,,,,The application itself then has to initialize itself like this to look for\nthe config at that environment variable:,,app,,=,,Flask,(,__name__,),,app,.,config,.,from_object,(,'yourapplication.default_config',),,app,.,config,.,from_envvar,(,'YOURAPPLICATION_CONFIG',),,,,This approach is explained in detail in the,Configuration Handling,section of the\ndocumentation.,,,,The Configuration File,\u00b6,,Now as mentioned above, the application will find the correct\nconfiguration file by looking up the,YOURAPPLICATION_CONFIG,environment\nvariable.  So we have to put the configuration in a place where the\napplication will able to find it.  Configuration files have the unfriendly\nquality of being different on all computers, so you do not version them\nusually.,,A popular approach is to store configuration files for different servers\nin a separate version control repository and check them out on all\nservers.  Then symlink the file that is active for the server into the\nlocation where it\u2019s expected (eg:,/var/www/yourapplication,).,,Either way, in our case here we only expect one or two servers and we can\nupload them ahead of time by hand.,,,,First Deployment,\u00b6,,Now we can do our first deployment.  We have set up the servers so that\nthey have their virtual environments and activated apache configs.  Now we\ncan pack up the application and deploy it:,,$ fab pack deploy,,,Fabric will now connect to all servers and run the commands as written\ndown in the fabfile.  First it will execute pack so that we have our\ntarball ready and then it will execute deploy and upload the source code\nto all servers and install it there.  Thanks to the,setup.py,file we\nwill automatically pull in the required libraries into our virtual\nenvironment.,,,,Next Steps,\u00b6,,From that point onwards there is so much that can be done to make\ndeployment actually fun:,,,Create a,bootstrap,command that initializes new servers.  It could\ninitialize a new virtual environment, setup apache appropriately etc.,,Put configuration files into a separate version control repository\nand symlink the active configs into place.,,You could also put your application code into a repository and check\nout the latest version on the server and then install.  That way you\ncan also easily go back to older versions.,,hook in testing functionality so that you can deploy to an external\nserver and run the test suite.,,,Working with Fabric is fun and you will notice that it\u2019s quite magical to\ntype,fab,,deploy,and see your application being deployed automatically\nto one or more remote servers.,,,,,,,,,,,,,Contents,,,Deploying with Fabric,,Creating the first Fabfile,,Running Fabfiles,,The WSGI File,,The Configuration File,,First Deployment,,Next Steps,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,Deploying with Setuptools,,Next:,Using SQLite 3 with Flask,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Using URL Processors", "url": "http://flask.pocoo.org/docs/dev/patterns/urlprocessors/", "content": ",,,,,Using URL Processors \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,Using URL Processors,\u00b6,,,Changelog,,New in version 0.7.,,,Flask 0.7 introduces the concept of URL processors.  The idea is that you\nmight have a bunch of resources with common parts in the URL that you\ndon\u2019t always explicitly want to provide.  For instance you might have a\nbunch of URLs that have the language code in it but you don\u2019t want to have\nto handle it in every single function yourself.,,URL processors are especially helpful when combined with blueprints.  We\nwill handle both application specific URL processors here as well as\nblueprint specifics.,,,Internationalized Application URLs,\u00b6,,Consider an application like this:,,from,,flask,,import,,Flask,,,,g,,app,,=,,Flask,(,__name__,),,@app,.,route,(,'/<lang_code>/',),,def,,index,(,lang_code,):,,g,.,lang_code,,=,,lang_code,,...,,@app,.,route,(,'/<lang_code>/about',),,def,,about,(,lang_code,):,,g,.,lang_code,,=,,lang_code,,...,,,,This is an awful lot of repetition as you have to handle the language code\nsetting on the,g,object yourself in every single function.\nSure, a decorator could be used to simplify this, but if you want to\ngenerate URLs from one function to another you would have to still provide\nthe language code explicitly which can be annoying.,,For the latter, this is where,url_defaults(),functions\ncome in.  They can automatically inject values into a call for,url_for(),automatically.  The code below checks if the\nlanguage code is not yet in the dictionary of URL values and if the\nendpoint wants a value named,'lang_code',:,,@app,.,url_defaults,,def,,add_language_code,(,endpoint,,,,values,):,,if,,'lang_code',,in,,values,,or,,not,,g,.,lang_code,:,,return,,if,,app,.,url_map,.,is_endpoint_expecting,(,endpoint,,,,'lang_code',):,,values,[,'lang_code',],,=,,g,.,lang_code,,,,The method,is_endpoint_expecting(),of the URL\nmap can be used to figure out if it would make sense to provide a language\ncode for the given endpoint.,,The reverse of that function are,url_value_preprocessor(),s.  They are executed right\nafter the request was matched and can execute code based on the URL\nvalues.  The idea is that they pull information out of the values\ndictionary and put it somewhere else:,,@app,.,url_value_preprocessor,,def,,pull_lang_code,(,endpoint,,,,values,):,,g,.,lang_code,,=,,values,.,pop,(,'lang_code',,,,None,),,,,That way you no longer have to do the,lang_code,assignment to,g,in every function.  You can further improve that by\nwriting your own decorator that prefixes URLs with the language code, but\nthe more beautiful solution is using a blueprint.  Once the,'lang_code',is popped from the values dictionary and it will no longer\nbe forwarded to the view function reducing the code to this:,,from,,flask,,import,,Flask,,,,g,,app,,=,,Flask,(,__name__,),,@app,.,url_defaults,,def,,add_language_code,(,endpoint,,,,values,):,,if,,'lang_code',,in,,values,,or,,not,,g,.,lang_code,:,,return,,if,,app,.,url_map,.,is_endpoint_expecting,(,endpoint,,,,'lang_code',):,,values,[,'lang_code',],,=,,g,.,lang_code,,@app,.,url_value_preprocessor,,def,,pull_lang_code,(,endpoint,,,,values,):,,g,.,lang_code,,=,,values,.,pop,(,'lang_code',,,,None,),,@app,.,route,(,'/<lang_code>/',),,def,,index,():,,...,,@app,.,route,(,'/<lang_code>/about',),,def,,about,():,,...,,,,,,Internationalized Blueprint URLs,\u00b6,,Because blueprints can automatically prefix all URLs with a common string\nit\u2019s easy to automatically do that for every function.  Furthermore\nblueprints can have per-blueprint URL processors which removes a whole lot\nof logic from the,url_defaults(),function because it no\nlonger has to check if the URL is really interested in a,'lang_code',parameter:,,from,,flask,,import,,Blueprint,,,,g,,bp,,=,,Blueprint,(,'frontend',,,,__name__,,,,url_prefix,=,'/<lang_code>',),,@bp,.,url_defaults,,def,,add_language_code,(,endpoint,,,,values,):,,values,.,setdefault,(,'lang_code',,,,g,.,lang_code,),,@bp,.,url_value_preprocessor,,def,,pull_lang_code,(,endpoint,,,,values,):,,g,.,lang_code,,=,,values,.,pop,(,'lang_code',),,@bp,.,route,(,'/',),,def,,index,():,,...,,@bp,.,route,(,'/about',),,def,,about,():,,...,,,,,,,,,,,,,,,Contents,,,Using URL Processors,,Internationalized Application URLs,,Internationalized Blueprint URLs,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,Implementing API Exceptions,,Next:,Deploying with Setuptools,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Implementing API Exceptions", "url": "http://flask.pocoo.org/docs/dev/patterns/apierrors/", "content": ",,,,,Implementing API Exceptions \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,Implementing API Exceptions,\u00b6,,It\u2019s very common to implement RESTful APIs on top of Flask.  One of the\nfirst things that developers run into is the realization that the builtin\nexceptions are not expressive enough for APIs and that the content type of,text/html,they are emitting is not very useful for API consumers.,,The better solution than using,abort,to signal errors for invalid API\nusage is to implement your own exception type and install an error handler\nfor it that produces the errors in the format the user is expecting.,,,Simple Exception Class,\u00b6,,The basic idea is to introduce a new exception that can take a proper\nhuman readable message, a status code for the error and some optional\npayload to give more context for the error.,,This is a simple example:,,from,,flask,,import,,jsonify,,class,,InvalidUsage,(,Exception,):,,status_code,,=,,400,,def,,__init__,(,self,,,,message,,,,status_code,=,None,,,,payload,=,None,):,,Exception,.,__init__,(,self,),,self,.,message,,=,,message,,if,,status_code,,is,,not,,None,:,,self,.,status_code,,=,,status_code,,self,.,payload,,=,,payload,,def,,to_dict,(,self,):,,rv,,=,,dict,(,self,.,payload,,or,,()),,rv,[,'message',],,=,,self,.,message,,return,,rv,,,,A view can now raise that exception with an error message.  Additionally\nsome extra payload can be provided as a dictionary through the,payload,parameter.,,,,Registering an Error Handler,\u00b6,,At that point views can raise that error, but it would immediately result\nin an internal server error.  The reason for this is that there is no\nhandler registered for this error class.  That however is easy to add:,,@app,.,errorhandler,(,InvalidUsage,),,def,,handle_invalid_usage,(,error,):,,response,,=,,jsonify,(,error,.,to_dict,()),,response,.,status_code,,=,,error,.,status_code,,return,,response,,,,,,Usage in Views,\u00b6,,Here is how a view can use that functionality:,,@app,.,route,(,'/foo',),,def,,get_foo,():,,raise,,InvalidUsage,(,'This view is gone',,,,status_code,=,410,),,,,,,,,,,,,,,,Contents,,,Implementing API Exceptions,,Simple Exception Class,,Registering an Error Handler,,Usage in Views,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,Application Dispatching,,Next:,Using URL Processors,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Application Dispatching", "url": "http://flask.pocoo.org/docs/dev/patterns/appdispatch/", "content": ",,,,,Application Dispatching \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,Application Dispatching,\u00b6,,Application dispatching is the process of combining multiple Flask\napplications on the WSGI level.  You can combine not only Flask\napplications but any WSGI application.  This would allow you to run a\nDjango and a Flask application in the same interpreter side by side if\nyou want.  The usefulness of this depends on how the applications work\ninternally.,,The fundamental difference from the,module approach,is that in this case you are running the same or\ndifferent Flask applications that are entirely isolated from each other.\nThey run different configurations and are dispatched on the WSGI level.,,,Working with this Document,\u00b6,,Each of the techniques and examples below results in an,application,object\nthat can be run with any WSGI server.  For production, see,Deployment Options,.\nFor development, Werkzeug provides a builtin server for development available\nat,werkzeug.serving.run_simple(),:,,from,,werkzeug.serving,,import,,run_simple,,run_simple,(,'localhost',,,,5000,,,,application,,,,use_reloader,=,True,),,,,Note that,run_simple,is not intended for\nuse in production.  Use a,full-blown WSGI server,.,,In order to use the interactive debugger, debugging must be enabled both on\nthe application and the simple server. Here is the \u201chello world\u201d example with\ndebugging and,run_simple,:,,from,,flask,,import,,Flask,,from,,werkzeug.serving,,import,,run_simple,,app,,=,,Flask,(,__name__,),,app,.,debug,,=,,True,,@app,.,route,(,'/',),,def,,hello_world,():,,return,,'Hello World!',,if,,__name__,,==,,'__main__',:,,run_simple,(,'localhost',,,,5000,,,,app,,,,use_reloader,=,True,,,,use_debugger,=,True,,,,use_evalex,=,True,),,,,,,Combining Applications,\u00b6,,If you have entirely separated applications and you want them to work next\nto each other in the same Python interpreter process you can take\nadvantage of the,werkzeug.wsgi.DispatcherMiddleware,.  The idea\nhere is that each Flask application is a valid WSGI application and they\nare combined by the dispatcher middleware into a larger one that is\ndispatched based on prefix.,,For example you could have your main application run on,/,and your\nbackend interface on,/backend,:,,from,,werkzeug.wsgi,,import,,DispatcherMiddleware,,from,,frontend_app,,import,,application,,as,,frontend,,from,,backend_app,,import,,application,,as,,backend,,application,,=,,DispatcherMiddleware,(,frontend,,,,{,,'/backend',:,,backend,,}),,,,,,Dispatch by Subdomain,\u00b6,,Sometimes you might want to use multiple instances of the same application\nwith different configurations.  Assuming the application is created inside\na function and you can call that function to instantiate it, that is\nreally easy to implement.  In order to develop your application to support\ncreating new instances in functions have a look at the,Application Factories,pattern.,,A very common example would be creating applications per subdomain.  For\ninstance you configure your webserver to dispatch all requests for all\nsubdomains to your application and you then use the subdomain information\nto create user-specific instances.  Once you have your server set up to\nlisten on all subdomains you can use a very simple WSGI application to do\nthe dynamic application creation.,,The perfect level for abstraction in that regard is the WSGI layer.  You\nwrite your own WSGI application that looks at the request that comes and\ndelegates it to your Flask application.  If that application does not\nexist yet, it is dynamically created and remembered:,,from,,threading,,import,,Lock,,class,,SubdomainDispatcher,(,object,):,,def,,__init__,(,self,,,,domain,,,,create_app,):,,self,.,domain,,=,,domain,,self,.,create_app,,=,,create_app,,self,.,lock,,=,,Lock,(),,self,.,instances,,=,,{},,def,,get_application,(,self,,,,host,):,,host,,=,,host,.,split,(,':',)[,0,],,assert,,host,.,endswith,(,self,.,domain,),,,'Configuration error',,subdomain,,=,,host,[:,-,len,(,self,.,domain,)],.,rstrip,(,'.',),,with,,self,.,lock,:,,app,,=,,self,.,instances,.,get,(,subdomain,),,if,,app,,is,,None,:,,app,,=,,self,.,create_app,(,subdomain,),,self,.,instances,[,subdomain,],,=,,app,,return,,app,,def,,__call__,(,self,,,,environ,,,,start_response,):,,app,,=,,self,.,get_application,(,environ,[,'HTTP_HOST',]),,return,,app,(,environ,,,,start_response,),,,,This dispatcher can then be used like this:,,from,,myapplication,,import,,create_app,,,,get_user_for_subdomain,,from,,werkzeug.exceptions,,import,,NotFound,,def,,make_app,(,subdomain,):,,user,,=,,get_user_for_subdomain,(,subdomain,),,if,,user,,is,,None,:,,# if there is no user for that subdomain we still have,,# to return a WSGI application that handles that request.,,# We can then just return the NotFound() exception as,,# application which will render a default 404 page.,,# You might also redirect the user to the main page then,,return,,NotFound,(),,# otherwise create the application for the specific user,,return,,create_app,(,user,),,application,,=,,SubdomainDispatcher,(,'example.com',,,,make_app,),,,,,,Dispatch by Path,\u00b6,,Dispatching by a path on the URL is very similar.  Instead of looking at\nthe,Host,header to figure out the subdomain one simply looks at the\nrequest path up to the first slash:,,from,,threading,,import,,Lock,,from,,werkzeug.wsgi,,import,,pop_path_info,,,,peek_path_info,,class,,PathDispatcher,(,object,):,,def,,__init__,(,self,,,,default_app,,,,create_app,):,,self,.,default_app,,=,,default_app,,self,.,create_app,,=,,create_app,,self,.,lock,,=,,Lock,(),,self,.,instances,,=,,{},,def,,get_application,(,self,,,,prefix,):,,with,,self,.,lock,:,,app,,=,,self,.,instances,.,get,(,prefix,),,if,,app,,is,,None,:,,app,,=,,self,.,create_app,(,prefix,),,if,,app,,is,,not,,None,:,,self,.,instances,[,prefix,],,=,,app,,return,,app,,def,,__call__,(,self,,,,environ,,,,start_response,):,,app,,=,,self,.,get_application,(,peek_path_info,(,environ,)),,if,,app,,is,,not,,None,:,,pop_path_info,(,environ,),,else,:,,app,,=,,self,.,default_app,,return,,app,(,environ,,,,start_response,),,,,The big difference between this and the subdomain one is that this one\nfalls back to another application if the creator function returns,None,:,,from,,myapplication,,import,,create_app,,,,default_app,,,,get_user_for_prefix,,def,,make_app,(,prefix,):,,user,,=,,get_user_for_prefix,(,prefix,),,if,,user,,is,,not,,None,:,,return,,create_app,(,user,),,application,,=,,PathDispatcher,(,default_app,,,,make_app,),,,,,,,,,,,,,,,Contents,,,Application Dispatching,,Working with this Document,,Combining Applications,,Dispatch by Subdomain,,Dispatch by Path,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,Application Factories,,Next:,Implementing API Exceptions,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Application Factories", "url": "http://flask.pocoo.org/docs/dev/patterns/appfactories/", "content": ",,,,,Application Factories \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,Application Factories,\u00b6,,If you are already using packages and blueprints for your application\n(,Modular Applications with Blueprints,) there are a couple of really nice ways to further improve\nthe experience.  A common pattern is creating the application object when\nthe blueprint is imported.  But if you move the creation of this object\ninto a function, you can then create multiple instances of this app later.,,So why would you want to do this?,,,Testing.  You can have instances of the application with different\nsettings to test every case.,,Multiple instances.  Imagine you want to run different versions of the\nsame application.  Of course you could have multiple instances with\ndifferent configs set up in your webserver, but if you use factories,\nyou can have multiple instances of the same application running in the\nsame application process which can be handy.,,,So how would you then actually implement that?,,,Basic Factories,\u00b6,,The idea is to set up the application in a function.  Like this:,,def,,create_app,(,config_filename,):,,app,,=,,Flask,(,__name__,),,app,.,config,.,from_pyfile,(,config_filename,),,from,,yourapplication.model,,import,,db,,db,.,init_app,(,app,),,from,,yourapplication.views.admin,,import,,admin,,from,,yourapplication.views.frontend,,import,,frontend,,app,.,register_blueprint,(,admin,),,app,.,register_blueprint,(,frontend,),,return,,app,,,,The downside is that you cannot use the application object in the blueprints\nat import time.  You can however use it from within a request.  How do you\nget access to the application with the config?  Use,current_app,:,,from,,flask,,import,,current_app,,,,Blueprint,,,,render_template,,admin,,=,,Blueprint,(,'admin',,,,__name__,,,,url_prefix,=,'/admin',),,@admin,.,route,(,'/',),,def,,index,():,,return,,render_template,(,current_app,.,config,[,'INDEX_TEMPLATE',]),,,,Here we look up the name of a template in the config.,,,,Factories & Extensions,\u00b6,,It\u2019s preferable to create your extensions and app factories so that the\nextension object does not initially get bound to the application.,,Using,Flask-SQLAlchemy,,\nas an example, you should not do something along those lines:,,def,,create_app,(,config_filename,):,,app,,=,,Flask,(,__name__,),,app,.,config,.,from_pyfile,(,config_filename,),,db,,=,,SQLAlchemy,(,app,),,,,But, rather, in model.py (or equivalent):,,db,,=,,SQLAlchemy,(),,,,and in your application.py (or equivalent):,,def,,create_app,(,config_filename,):,,app,,=,,Flask,(,__name__,),,app,.,config,.,from_pyfile,(,config_filename,),,from,,yourapplication.model,,import,,db,,db,.,init_app,(,app,),,,,Using this design pattern, no application-specific state is stored on the\nextension object, so one extension object can be used for multiple apps.\nFor more information about the design of extensions refer to,Flask Extension Development,.,,,,Using Applications,\u00b6,,To run such an application, you can use the,flask,command:,,export,,FLASK_APP,=,myapp,,flask,,run,,,,Flask will automatically detect the factory (,create_app,or,make_app,)\nin,myapp,. You can also pass arguments to the factory like this:,,export,,FLASK_APP,=,\"myapp:create_app('dev')\",,flask,,run,,,,Then the,create_app,factory in,myapp,is called with the string,'dev',as the argument. See,Command Line Interface,for more detail.,,,,Factory Improvements,\u00b6,,The factory function above is not very clever, but you can improve it.\nThe following changes are straightforward to implement:,,,Make it possible to pass in configuration values for unit tests so that\nyou don\u2019t have to create config files on the filesystem.,,Call a function from a blueprint when the application is setting up so\nthat you have a place to modify attributes of the application (like\nhooking in before/after request handlers etc.),,Add in WSGI middlewares when the application is being created if necessary.,,,,,,,,,,,,,,Contents,,,Application Factories,,Basic Factories,,Factories & Extensions,,Using Applications,,Factory Improvements,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,Larger Applications,,Next:,Application Dispatching,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Larger Applications", "url": "http://flask.pocoo.org/docs/dev/patterns/packages/", "content": ",,,,,Larger Applications \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,Larger Applications,\u00b6,,For larger applications it\u2019s a good idea to use a package instead of a\nmodule.  That is quite simple.  Imagine a small application looks like\nthis:,,/,yourapplication,,yourapplication,.,py,,/,static,,style,.,css,,/,templates,,layout,.,html,,index,.,html,,login,.,html,,...,,,,The,tutorial,is structured this way, see the,example code,.,,,Simple Packages,\u00b6,,To convert that into a larger one, just create a new folder,yourapplication,inside the existing one and move everything below it.\nThen rename,yourapplication.py,to,__init__.py,.  (Make sure to delete\nall,.pyc,files first, otherwise things would most likely break),,You should then end up with something like that:,,/,yourapplication,,/,yourapplication,,__init__,.,py,,/,static,,style,.,css,,/,templates,,layout,.,html,,index,.,html,,login,.,html,,...,,,,But how do you run your application now?  The naive,python,,yourapplication/__init__.py,will not work.  Let\u2019s just say that Python\ndoes not want modules in packages to be the startup file.  But that is not\na big problem, just add a new file called,setup.py,next to the inner,yourapplication,folder with the following contents:,,from,,setuptools,,import,,setup,,setup,(,,name,=,'yourapplication',,,,packages,=,[,'yourapplication',],,,include_package_data,=,True,,,,install_requires,=,[,,'flask',,,,],,,),,,,In order to run the application you need to export an environment variable\nthat tells Flask where to find the application instance:,,export,,FLASK_APP,=,yourapplication,,,,If you are outside of the project directory make sure to provide the exact\npath to your application directory. Similarly you can turn on the\ndevelopment features like this:,,export,,FLASK_ENV,=,development,,,,In order to install and run the application you need to issue the following\ncommands:,,pip,,install,,-,e,,.,,flask,,run,,,,What did we gain from this?  Now we can restructure the application a bit\ninto multiple modules.  The only thing you have to remember is the\nfollowing quick checklist:,,,the,Flask,application object creation has to be in the,__init__.py,file.  That way each module can import it safely and the,__name__,variable will resolve to the correct package.,,all the view functions (the ones with a,route(),decorator on top) have to be imported in the,__init__.py,file.\nNot the object itself, but the module it is in. Import the view module,after the application object is created,.,,,Here\u2019s an example,__init__.py,:,,from,,flask,,import,,Flask,,app,,=,,Flask,(,__name__,),,import,,yourapplication.views,,,,And this is what,views.py,would look like:,,from,,yourapplication,,import,,app,,@app,.,route,(,'/',),,def,,index,():,,return,,'Hello World!',,,,You should then end up with something like that:,,/,yourapplication,,setup,.,py,,/,yourapplication,,__init__,.,py,,views,.,py,,/,static,,style,.,css,,/,templates,,layout,.,html,,index,.,html,,login,.,html,,...,,,,,Circular Imports,,Every Python programmer hates them, and yet we just added some:\ncircular imports (That\u2019s when two modules depend on each other.  In this\ncase,views.py,depends on,__init__.py,).  Be advised that this is a\nbad idea in general but here it is actually fine.  The reason for this is\nthat we are not actually using the views in,__init__.py,and just\nensuring the module is imported and we are doing that at the bottom of\nthe file.,,There are still some problems with that approach but if you want to use\ndecorators there is no way around that.  Check out the,Becoming Big,section for some inspiration how to deal with that.,,,,,Working with Blueprints,\u00b6,,If you have larger applications it\u2019s recommended to divide them into\nsmaller groups where each group is implemented with the help of a\nblueprint.  For a gentle introduction into this topic refer to the,Modular Applications with Blueprints,chapter of the documentation.,,,,,,,,,,,,,Contents,,,Larger Applications,,Simple Packages,,Working with Blueprints,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,Patterns for Flask,,Next:,Application Factories,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Working with the Shell", "url": "http://flask.pocoo.org/docs/dev/shell/", "content": ",,,,,Working with the Shell \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,Working with the Shell,\u00b6,,,Changelog,,New in version 0.3.,,,One of the reasons everybody loves Python is the interactive shell.  It\nbasically allows you to execute Python commands in real time and\nimmediately get results back.  Flask itself does not come with an\ninteractive shell, because it does not require any specific setup upfront,\njust import your application and start playing around.,,There are however some handy helpers to make playing around in the shell a\nmore pleasant experience.  The main issue with interactive console\nsessions is that you\u2019re not triggering a request like a browser does which\nmeans that,g,,,request,and others are not\navailable.  But the code you want to test might depend on them, so what\ncan you do?,,This is where some helper functions come in handy.  Keep in mind however\nthat these functions are not only there for interactive shell usage, but\nalso for unittesting and other situations that require a faked request\ncontext.,,Generally it\u2019s recommended that you read the,The Request Context,chapter of the documentation first.,,,Command Line Interface,\u00b6,,Starting with Flask 0.11 the recommended way to work with the shell is the,flask,,shell,command which does a lot of this automatically for you.\nFor instance the shell is automatically initialized with a loaded\napplication context.,,For more information see,Command Line Interface,.,,,,Creating a Request Context,\u00b6,,The easiest way to create a proper request context from the shell is by\nusing the,test_request_context,method which creates\nus a,RequestContext,:,,>>>,ctx,,=,,app,.,test_request_context,(),,,,Normally you would use the,with,statement to make this request object\nactive, but in the shell it\u2019s easier to use the,push(),and,pop(),methods by hand:,,>>>,ctx,.,push,(),,,,From that point onwards you can work with the request object until you\ncall,pop,:,,>>>,ctx,.,pop,(),,,,,,Firing Before/After Request,\u00b6,,By just creating a request context, you still don\u2019t have run the code that\nis normally run before a request.  This might result in your database\nbeing unavailable if you are connecting to the database in a\nbefore-request callback or the current user not being stored on the,g,object etc.,,This however can easily be done yourself.  Just call,preprocess_request(),:,,>>>,ctx,,=,,app,.,test_request_context,(),,>>>,ctx,.,push,(),,>>>,app,.,preprocess_request,(),,,,Keep in mind that the,preprocess_request(),function\nmight return a response object, in that case just ignore it.,,To shutdown a request, you need to trick a bit before the after request\nfunctions (triggered by,process_response(),) operate on\na response object:,,>>>,app,.,process_response,(,app,.,response_class,()),,<Response 0 bytes [200 OK]>,,>>>,ctx,.,pop,(),,,,The functions registered as,teardown_request(),are\nautomatically called when the context is popped.  So this is the perfect\nplace to automatically tear down resources that were needed by the request\ncontext (such as database connections).,,,,Further Improving the Shell Experience,\u00b6,,If you like the idea of experimenting in a shell, create yourself a module\nwith stuff you want to star import into your interactive session.  There\nyou could also define some more helper methods for common things such as\ninitializing the database, dropping tables etc.,,Just put them into a module (like,shelltools,) and import from there:,,>>>,from,,shelltools,,import,,*,,,,,,,,,,,,,,,Contents,,,Working with the Shell,,Command Line Interface,,Creating a Request Context,,Firing Before/After Request,,Further Improving the Shell Experience,,,,,Navigation,,,Overview,,,Previous:,Development Server,,Next:,Patterns for Flask,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Development Server", "url": "http://flask.pocoo.org/docs/dev/server/", "content": ",,,,,Development Server \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,Development Server,\u00b6,,Starting with Flask 0.11 there are multiple built-in ways to run a\ndevelopment server.  The best one is the,flask,command line utility\nbut you can also continue using the,Flask.run(),method.,,,Command Line,\u00b6,,The,flask,command line script (,Command Line Interface,) is strongly\nrecommended for development because it provides a superior reload\nexperience due to how it loads the application.  The basic usage is like\nthis:,,$ export FLASK_APP=my_application\n$ export FLASK_ENV=development\n$ flask run,,,This enables the development environment, including the interactive\ndebugger and reloader, and then starts the server on,http://localhost:5000/,.,,The individual features of the server can be controlled by passing more\narguments to the,run,option. For instance the reloader can be\ndisabled:,,$ flask run --no-reload,,,,Note,,Prior to Flask 1.0 the,FLASK_ENV,environment variable was\nnot supported and you needed to enable debug mode by exporting,FLASK_DEBUG=1,. This can still be used to control debug mode, but\nyou should prefer setting the development environment as shown\nabove.,,,,,In Code,\u00b6,,The alternative way to start the application is through the,Flask.run(),method.  This will immediately launch a local server\nexactly the same way the,flask,script does.,,Example:,,if,,__name__,,==,,'__main__',:,,app,.,run,(),,,,This works well for the common case but it does not work well for\ndevelopment which is why from Flask 0.11 onwards the,flask,method is recommended.  The reason for this is that due to how the reload\nmechanism works there are some bizarre side-effects (like executing\ncertain code twice, sometimes crashing without message or dying when a\nsyntax or import error happens).,,It is however still a perfectly valid method for invoking a non automatic\nreloading application.,,,,,,,,,,,,,Contents,,,Development Server,,Command Line,,In Code,,,,,Navigation,,,Overview,,,Previous:,Command Line Interface,,Next:,Working with the Shell,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Command Line Interface", "url": "http://flask.pocoo.org/docs/dev/cli/", "content": ",,,,,Command Line Interface \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,Command Line Interface,\u00b6,,Installing Flask installs the,flask,script, a,Click,command line\ninterface, in your virtualenv. Executed from the terminal, this script gives\naccess to built-in, extension, and application-defined commands. The,--help,option will give more information about any commands and options.,,,Application Discovery,\u00b6,,The,flask,command is installed by Flask, not your application; it must be\ntold where to find your application in order to use it. The,FLASK_APP,environment variable is used to specify how to load the application.,,Unix Bash (Linux, Mac, etc.):,,$ export FLASK_APP=hello\n$ flask run,,,Windows CMD:,,>,,set,,FLASK_APP,=,hello,,>,,flask,,run,,,,Windows PowerShell:,,> $env:FLASK_APP = \"hello\"\n> flask run,,,While,FLASK_APP,supports a variety of options for specifying your\napplication, most use cases should be simple. Here are the typical values:,,,(nothing),,The file,wsgi.py,is imported, automatically detecting an app\n(,app,). This provides an easy way to create an app from a factory with\nextra arguments.,,FLASK_APP=hello,,The name is imported, automatically detecting an app (,app,) or factory\n(,create_app,).,,,,FLASK_APP,has three parts: an optional path that sets the current working\ndirectory, a Python file or dotted import path, and an optional variable\nname of the instance or factory. If the name is a factory, it can optionally\nbe followed by arguments in parentheses. The following values demonstrate these\nparts:,,,FLASK_APP=src/hello,,Sets the current working directory to,src,then imports,hello,.,,FLASK_APP=hello.web,,Imports the path,hello.web,.,,FLASK_APP=hello:app2,,Uses the,app2,Flask instance in,hello,.,,FLASK_APP=\"hello:create_app('dev')\",,The,create_app,factory in,hello,is called with the string,'dev',as the argument.,,,If,FLASK_APP,is not set, the command will look for a file called,wsgi.py,or,app.py,and try to detect an application instance or\nfactory.,,Within the given import, the command looks for an application instance named,app,or,application,, then any application instance. If no instance is\nfound, the command looks for a factory function named,create_app,or,make_app,that returns an instance.,,When calling an application factory, if the factory takes an argument named,info,, then the,ScriptInfo,instance is passed as a keyword\nargument. If parentheses follow the factory name, their contents are parsed\nas Python literals and passes as arguments to the function. This means that\nstrings must still be in quotes.,,,,Run the Development Server,\u00b6,,The,run,command will start the development server. It\nreplaces the,Flask.run(),method in most cases.,,$ flask run\n * Serving Flask app \"hello\"\n * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit),,,,Warning,,Do not use this command to run your application in production.\nOnly use the development server during development. The development server\nis provided for convenience, but is not designed to be particularly secure,\nstable, or efficient. See,Deployment Options,for how to run in production.,,,,,Open a Shell,\u00b6,,To explore the data in your application, you can start an interactive Python\nshell with the,shell,command. An application\ncontext will be active, and the app instance will be imported.,,$ flask shell\nPython 3.6.2 (default, Jul 20 2017, 03:52:27)\n[GCC 7.1.1 20170630] on linux\nApp: example\nInstance: /home/user/Projects/hello/instance\n>>>,,,Use,shell_context_processor(),to add other automatic imports.,,,,Environments,\u00b6,,,Changelog,,New in version 1.0.,,,The environment in which the Flask app runs is set by the,FLASK_ENV,environment variable. If not set it defaults to,production,. The other recognized environment is,development,.\nFlask and extensions may choose to enable behaviors based on the\nenvironment.,,If the env is set to,development,, the,flask,command will enable\ndebug mode and,flask,,run,will enable the interactive debugger and\nreloader.,,$ FLASK_ENV=development flask run\n * Serving Flask app \"hello\"\n * Environment: development\n * Debug mode: on\n * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n * Restarting with inotify reloader\n * Debugger is active!\n * Debugger PIN: 223-456-919,,,,,Debug Mode,\u00b6,,Debug mode will be enabled when,FLASK_ENV,is,development,,\nas described above. If you want to control debug mode separately, use,FLASK_DEBUG,. The value,1,enables it,,0,disables it.,,,,Environment Variables From dotenv,\u00b6,,Rather than setting,FLASK_APP,each time you open a new terminal, you can\nuse Flask\u2019s dotenv support to set environment variables automatically.,,If,python-dotenv,is installed, running the,flask,command will set\nenvironment variables defined in the files,.env,and,.flaskenv,.\nThis can be used to avoid having to set,FLASK_APP,manually every time you\nopen a new terminal, and to set configuration using environment variables\nsimilar to how some deployment services work.,,Variables set on the command line are used over those set in,.env,,\nwhich are used over those set in,.flaskenv,.,.flaskenv,should be\nused for public variables, such as,FLASK_APP,, while,.env,should not\nbe committed to your repository so that it can set private variables.,,Directories are scanned upwards from the directory you call,flask,from to locate the files. The current working directory will be set to the\nlocation of the file, with the assumption that that is the top level project\ndirectory.,,The files are only loaded by the,flask,command or calling,run(),. If you would like to load these files when running in\nproduction, you should call,load_dotenv(),manually.,,,Setting Command Options,\u00b6,,Click is configured to load default values for command options from\nenvironment variables. The variables use the pattern,FLASK_COMMAND_OPTION,. For example, to set the port for the run\ncommand, instead of,flask,,run,,--port,,8000,:,,export FLASK_RUN_PORT=8000\nflask run\n * Running on http://127.0.0.1:8000/,,,These can be added to the,.flaskenv,file just like,FLASK_APP,to\ncontrol default command options.,,,,Disable dotenv,\u00b6,,The,flask,command will show a message if it detects dotenv files but\npython-dotenv is not installed.,,flask run\n * Tip: There are .env files present. Do \"pip install python-dotenv\" to use them.,,,You can tell Flask not to load dotenv files even when python-dotenv is\ninstalled by setting the,FLASK_SKIP_DOTENV,environment variable.\nThis can be useful if you want to load them manually, or if you\u2019re using\na project runner that loads them already. Keep in mind that the\nenvironment variables must be set before the app loads or it won\u2019t\nconfigure as expected.,,export FLASK_SKIP_DOTENV=1\nflask run,,,,,,Environment Variables From virtualenv,\u00b6,,If you do not want to install dotenv support, you can still set environment\nvariables by adding them to the end of the virtualenv\u2019s,activate,script. Activating the virtualenv will set the variables.,,Unix Bash,,venv/bin/activate,:,,export,,FLASK_APP,=,hello,,,,Windows CMD,,venv\\Scripts\\activate.bat,:,,set,,FLASK_APP,=,hello,,,,It is preferred to use dotenv support over this, since,.flaskenv,can be\ncommitted to the repository so that it works automatically wherever the project\nis checked out.,,,,Custom Commands,\u00b6,,The,flask,command is implemented using,Click,. See that project\u2019s\ndocumentation for full information about writing commands.,,This example adds the command,create_user,that takes the argument,name,.,,import,,click,,from,,flask,,import,,Flask,,app,,=,,Flask,(,__name__,),,@app,.,cli,.,command,(),,@click,.,argument,(,'name',),,def,,create_user,(,name,):,,...,,,,flask,,create_user,,admin,,,,This example adds the same command, but as,user,,create,, a command in a\ngroup. This is useful if you want to organize multiple related commands.,,import,,click,,from,,flask,,import,,Flask,,from,,flask.cli,,import,,AppGroup,,app,,=,,Flask,(,__name__,),,user_cli,,=,,AppGroup,(,'user',),,@user_cli,.,command,(,'create',),,@click,.,argument,(,'name',),,def,,create_user,(,name,):,,...,,app,.,cli,.,add_command,(,user_cli,),,,,flask,,user,,create,,demo,,,,See,Testing CLI Commands,for an overview of how to test your custom\ncommands.,,,Application Context,\u00b6,,Commands added using the Flask app\u2019s,cli,,command(),decorator will be executed with an application\ncontext pushed, so your command and extensions have access to the app and its\nconfiguration. If you create a command using the Click,command(),decorator instead of the Flask decorator, you can use,with_appcontext(),to get the same behavior.,,import,,click,,from,,flask.cli,,import,,with_appcontext,,@click,.,command,,@with_appcontext,,def,,do_work,():,,...,,app,.,cli,.,add_command,(,do_work,),,,,If you\u2019re sure a command doesn\u2019t need the context, you can disable it:,,@app,.,cli,.,command,(,with_appcontext,=,False,),,def,,do_work,():,,...,,,,,,,Plugins,\u00b6,,Flask will automatically load commands specified in the,flask.commands,,entry point,. This is useful for extensions that want to add commands when\nthey are installed. Entry points are specified in,setup.py,,from,,setuptools,,import,,setup,,setup,(,,name,=,'flask-my-extension',,,,...,,,,entry_points,=,{,,'flask.commands',:,,[,,'my-command=flask_my_extension.commands:cli',,],,,},,,),,,,Inside,flask_my_extension/commands.py,you can then export a Click\nobject:,,import,,click,,@click,.,command,(),,def,,cli,():,,...,,,,Once that package is installed in the same virtualenv as your Flask project,\nyou can run,flask,,my-command,to invoke the command.,,,,Custom Scripts,\u00b6,,When you are using the app factory pattern, it may be more convenient to define\nyour own Click script. Instead of using,FLASK_APP,and letting Flask load\nyour application, you can create your own Click object and export it as a,console script,entry point.,,Create an instance of,FlaskGroup,and pass it the factory:,,import,,click,,from,,flask,,import,,Flask,,from,,flask.cli,,import,,FlaskGroup,,def,,create_app,():,,app,,=,,Flask,(,'wiki',),,# other setup,,return,,app,,@click,.,group,(,cls,=,FlaskGroup,,,,create_app,=,create_app,),,def,,cli,():,,\"\"\"Management script for the Wiki application.\"\"\",,,,Define the entry point in,setup.py,:,,from,,setuptools,,import,,setup,,setup,(,,name,=,'flask-my-extension',,,,...,,,,entry_points,=,{,,'console_scripts',:,,[,,'wiki=wiki:cli',,],,,},,,),,,,Install the application in the virtualenv in editable mode and the custom\nscript is available. Note that you don\u2019t need to set,FLASK_APP,.,,$ pip install -e .\n$ wiki run,,,,Errors in Custom Scripts,,When using a custom script, if you introduce an error in your\nmodule-level code, the reloader will fail because it can no longer\nload the entry point.,,The,flask,command, being separate from your code, does not have\nthis issue and is recommended in most cases.,,,,,PyCharm Integration,\u00b6,,Prior to PyCharm 2018.1, the Flask CLI features weren\u2019t yet fully\nintegrated into PyCharm. We have to do a few tweaks to get them working\nsmoothly. These instructions should be similar for any other IDE you\nmight want to use.,,In PyCharm, with your project open, click on,Run,from the menu bar and\ngo to,Edit Configurations,. You\u2019ll be greeted by a screen similar to\nthis:,,,There\u2019s quite a few options to change, but once we\u2019ve done it for one\ncommand, we can easily copy the entire configuration and make a single\ntweak to give us access to other commands, including any custom ones you\nmay implement yourself.,,Click the + (,Add New Configuration,) button and select,Python,. Give\nthe configuration a good descriptive name such as \u201cRun Flask Server\u201d.\nFor the,flask,,run,command, check \u201cSingle instance only\u201d since you\ncan\u2019t run the server more than once at the same time.,,Select,Module name,from the dropdown (,A,) then input,flask,.,,The,Parameters,field (,B,) is set to the CLI command to execute\n(with any arguments). In this example we use,run,, which will run\nthe development server.,,You can skip this next step if you\u2019re using,Environment Variables From dotenv,. We need to\nadd an environment variable (,C,) to identify our application. Click\non the browse button and add an entry with,FLASK_APP,on the left and\nthe Python import or file on the right (,hello,for example).,,Next we need to set the working directory (,D,) to be the folder where\nour application resides.,,If you have installed your project as a package in your virtualenv, you\nmay untick the,PYTHONPATH,options (,E,). This will more accurately\nmatch how you deploy the app later.,,Click,Apply,to save the configuration, or,OK,to save and close the\nwindow. Select the configuration in the main PyCharm window and click\nthe play button next to it to run the server.,,Now that we have a configuration which runs,flask,,run,from within\nPyCharm, we can copy that configuration and alter the,Script,argument\nto run a different CLI command, e.g.,flask,,shell,.,,,,,,,,,,,,,Contents,,,Command Line Interface,,Application Discovery,,Run the Development Server,,Open a Shell,,Environments,,Debug Mode,,Environment Variables From dotenv,,Setting Command Options,,Disable dotenv,,,,Environment Variables From virtualenv,,Custom Commands,,Application Context,,,,Plugins,,Custom Scripts,,PyCharm Integration,,,,,Navigation,,,Overview,,,Previous:,Extensions,,Next:,Development Server,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Extensions", "url": "http://flask.pocoo.org/docs/dev/extensions/", "content": ",,,,,Extensions \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,Extensions,\u00b6,,Extensions are extra packages that add functionality to a Flask\napplication. For example, an extension might add support for sending\nemail or connecting to a database. Some extensions add entire new\nframeworks to help build certain types of applications, like a ReST API.,,,Finding Extensions,\u00b6,,Flask extensions are usually named \u201cFlask-Foo\u201d or \u201cFoo-Flask\u201d. Many\nextensions are listed in the,Extension Registry,, which can be updated\nby extension developers. You can also search PyPI for packages tagged\nwith,Framework :: Flask,.,,,,Using Extensions,\u00b6,,Consult each extension\u2019s documentation for installation, configuration,\nand usage instructions. Generally, extensions pull their own\nconfiguration from,app.config,and are\npassed an application instance during initialization. For example,\nan extension caled \u201cFlask-Foo\u201d might be used like this:,,from,,flask_foo,,import,,Foo,,foo,,=,,Foo,(),,app,,=,,Flask,(,__name__,),,app,.,config,.,update,(,,FOO_BAR,=,'baz',,,,FOO_SPAM,=,'eggs',,,,),,foo,.,init_app,(,app,),,,,,,Building Extensions,\u00b6,,While the,Extension Registry,contains many Flask extensions, you may\nnot find an extension that fits your need. If this is the case, you can\ncreate your own. Read,Flask Extension Development,to develop your own Flask\nextension.,,,,,,,,,,,,,Contents,,,Extensions,,Finding Extensions,,Using Extensions,,Building Extensions,,,,,Navigation,,,Overview,,,Previous:,Modular Applications with Blueprints,,Next:,Command Line Interface,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "mod_wsgi (Apache)", "url": "http://flask.pocoo.org/docs/0.12/deploying/mod_wsgi/", "content": ",,,,,mod_wsgi (Apache) \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,Deployment Options,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,mod_wsgi (Apache),\u00b6,,If you are using the,Apache,webserver, consider using,mod_wsgi,.,,,Watch Out,,Please make sure in advance that any,app.run(),calls you might\nhave in your application file are inside an,if,,__name__,,==,,'__main__':,block or moved to a separate file.  Just make sure it\u2019s\nnot called because this will always start a local WSGI server which\nwe do not want if we deploy that application to mod_wsgi.,,,,Installing,mod_wsgi,\u00b6,,If you don\u2019t have,mod_wsgi,installed yet you have to either install it\nusing a package manager or compile it yourself.  The mod_wsgi,installation instructions,cover source installations on UNIX systems.,,If you are using Ubuntu/Debian you can apt-get it and activate it as\nfollows:,,# apt-get install libapache2-mod-wsgi,,,If you are using a yum based distribution (Fedora, OpenSUSE, etc..) you\ncan install it as follows:,,# yum install mod_wsgi,,,On FreeBSD install,mod_wsgi,by compiling the,www/mod_wsgi,port or by\nusing pkg_add:,,# pkg install ap22-mod_wsgi2,,,If you are using pkgsrc you can install,mod_wsgi,by compiling the,www/ap2-wsgi,package.,,If you encounter segfaulting child processes after the first apache\nreload you can safely ignore them.  Just restart the server.,,,,Creating a,.wsgi,file,\u00b6,,To run your application you need a,yourapplication.wsgi,file.  This file\ncontains the code,mod_wsgi,is executing on startup to get the application\nobject.  The object called,application,in that file is then used as\napplication.,,For most applications the following file should be sufficient:,,from,,yourapplication,,import,,app,,as,,application,,,,If you don\u2019t have a factory function for application creation but a singleton\ninstance you can directly import that one as,application,.,,Store that file somewhere that you will find it again (e.g.:,/var/www/yourapplication,) and make sure that,yourapplication,and all\nthe libraries that are in use are on the python load path.  If you don\u2019t\nwant to install it system wide consider using a,virtual python,instance.  Keep in mind that you will have to actually install your\napplication into the virtualenv as well.  Alternatively there is the\noption to just patch the path in the,.wsgi,file before the import:,,import,,sys,,sys,.,path,.,insert,(,0,,,,'/path/to/the/application',),,,,,,Configuring Apache,\u00b6,,The last thing you have to do is to create an Apache configuration file\nfor your application.  In this example we are telling,mod_wsgi,to\nexecute the application under a different user for security reasons:,,<VirtualHost,,*,>,,ServerName,example.com,WSGIDaemonProcess,yourapplication,user,=user1,group,=group1 threads=5,WSGIScriptAlias,/,/var/www/yourapplication/yourapplication.wsgi,,<Directory,,/var/www/yourapplication,>,,WSGIProcessGroup,yourapplication,WSGIApplicationGroup,%{GLOBAL},Order,deny,allow,Allow,from,all,,</Directory>,,</VirtualHost>,,,,Note: WSGIDaemonProcess isn\u2019t implemented in Windows and Apache will\nrefuse to run with the above configuration. On a Windows system, eliminate those lines:,,<VirtualHost,,*,>,,ServerName,example.com,WSGIScriptAlias,/ C:\\yourdir\\yourapp.wsgi,<Directory,,C:\\yourdir,>,,Order,deny,allow,Allow,from,all,,</Directory>,,</VirtualHost>,,,,Note: There have been some changes in access control configuration for,Apache 2.4,.,,Most notably, the syntax for directory permissions has changed from httpd 2.2,,Order,allow,deny,Allow,from,all,,,,to httpd 2.4 syntax,,Require,,all,granted,,,For more information consult the,mod_wsgi documentation,.,,,,Troubleshooting,\u00b6,,If your application does not run, follow this guide to troubleshoot:,,,Problem:,application does not run, errorlog shows SystemExit ignored,,You have an,app.run(),call in your application file that is not\nguarded by an,if,,__name__,,==,,'__main__':,condition.  Either\nremove that,run(),call from the file and move it\ninto a separate,run.py,file or put it into such an if block.,,Problem:,application gives permission errors,,Probably caused by your application running as the wrong user.  Make\nsure the folders the application needs access to have the proper\nprivileges set and the application runs as the correct user\n(,user,and,group,parameter to the,WSGIDaemonProcess,directive),,Problem:,application dies with an error on print,,Keep in mind that mod_wsgi disallows doing anything with,sys.stdout,and,sys.stderr,.  You can disable this\nprotection from the config by setting the,WSGIRestrictStdout,to,off,:,,WSGIRestrictStdout,,Off,,,,Alternatively you can also replace the standard out in the .wsgi file\nwith a different stream:,,import,,sys,,sys,.,stdout,,=,,sys,.,stderr,,,,,Problem:,accessing resources gives IO errors,,Your application probably is a single .py file you symlinked into\nthe site-packages folder.  Please be aware that this does not work,\ninstead you either have to put the folder into the pythonpath the\nfile is stored in, or convert your application into a package.,,The reason for this is that for non-installed packages, the module\nfilename is used to locate the resources and for symlinks the wrong\nfilename is picked up.,,,,,,Support for Automatic Reloading,\u00b6,,To help deployment tools you can activate support for automatic\nreloading.  Whenever something changes the,.wsgi,file,,mod_wsgi,will\nreload all the daemon processes for us.,,For that, just add the following directive to your,Directory,section:,,WSGIScriptReloading,,On,,,,,,Working with Virtual Environments,\u00b6,,Virtual environments have the advantage that they never install the\nrequired dependencies system wide so you have a better control over what\nis used where.  If you want to use a virtual environment with mod_wsgi\nyou have to modify your,.wsgi,file slightly.,,Add the following lines to the top of your,.wsgi,file:,,activate_this,,=,,'/path/to/env/bin/activate_this.py',,execfile,(,activate_this,,,,dict,(,__file__,=,activate_this,)),,,,For Python 3 add the following lines to the top of your,.wsgi,file:,,activate_this,,=,,'/path/to/env/bin/activate_this.py',,with,,open,(,activate_this,),,as,,file_,:,,exec,(,file_,.,read,(),,,dict,(,__file__,=,activate_this,)),,,,This sets up the load paths according to the settings of the virtual\nenvironment.  Keep in mind that the path has to be absolute.,,,,,,,,,,,,,Contents,,,mod_wsgi (Apache),,Installing,mod_wsgi,,Creating a,.wsgi,file,,Configuring Apache,,Troubleshooting,,Support for Automatic Reloading,,Working with Virtual Environments,,,,,Navigation,,,Overview,,,Deployment Options,,,Previous:,Deployment Options,,Next:,Standalone WSGI Containers,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Becoming Big", "url": "http://flask.pocoo.org/docs/1.0/becomingbig/", "content": ",,,,,Becoming Big \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,,,,,,,,Becoming Big,\u00b6,,Here are your options when growing your codebase or scaling your application.,,,Read the Source.,\u00b6,,Flask started in part to demonstrate how to build your own framework on top of\nexisting well-used tools Werkzeug (WSGI) and Jinja (templating), and as it\ndeveloped, it became useful to a wide audience.  As you grow your codebase,\ndon\u2019t just use Flask \u2013 understand it.  Read the source.  Flask\u2019s code is\nwritten to be read; its documentation is published so you can use its internal\nAPIs.  Flask sticks to documented APIs in upstream libraries, and documents its\ninternal utilities so that you can find the hook points needed for your\nproject.,,,,Hook. Extend.,\u00b6,,The,API,docs are full of available overrides, hook points, and,Signals,. You can provide custom classes for things like the request and\nresponse objects.  Dig deeper on the APIs you use, and look for the\ncustomizations which are available out of the box in a Flask release.  Look for\nways in which your project can be refactored into a collection of utilities and\nFlask extensions.  Explore the many,extensions,in the community, and look for patterns to\nbuild your own extensions if you do not find the tools you need.,,,,Subclass.,\u00b6,,The,Flask,class has many methods designed for subclassing. You\ncan quickly add or customize behavior by subclassing,Flask,(see\nthe linked method docs) and using that subclass wherever you instantiate an\napplication class. This works well with,Application Factories,. See,Subclassing Flask,for an example.,,,,Wrap with middleware.,\u00b6,,The,Application Dispatching,chapter shows in detail how to apply middleware. You\ncan introduce WSGI middleware to wrap your Flask instances and introduce fixes\nand changes at the layer between your Flask application and your HTTP\nserver. Werkzeug includes several,middlewares,.,,,,Fork.,\u00b6,,If none of the above options work, fork Flask.  The majority of code of Flask\nis within Werkzeug and Jinja2.  These libraries do the majority of the work.\nFlask is just the paste that glues those together.  For every project there is\nthe point where the underlying framework gets in the way (due to assumptions\nthe original developers had).  This is natural because if this would not be the\ncase, the framework would be a very complex system to begin with which causes a\nsteep learning curve and a lot of user frustration.,,This is not unique to Flask.  Many people use patched and modified\nversions of their framework to counter shortcomings.  This idea is also\nreflected in the license of Flask.  You don\u2019t have to contribute any\nchanges back if you decide to modify the framework.,,The downside of forking is of course that Flask extensions will most\nlikely break because the new framework has a different import name.\nFurthermore integrating upstream changes can be a complex process,\ndepending on the number of changes.  Because of that, forking should be\nthe very last resort.,,,,Scale like a pro.,\u00b6,,For many web applications the complexity of the code is less an issue than\nthe scaling for the number of users or data entries expected.  Flask by\nitself is only limited in terms of scaling by your application code, the\ndata store you want to use and the Python implementation and webserver you\nare running on.,,Scaling well means for example that if you double the amount of servers\nyou get about twice the performance.  Scaling bad means that if you add a\nnew server the application won\u2019t perform any better or would not even\nsupport a second server.,,There is only one limiting factor regarding scaling in Flask which are\nthe context local proxies.  They depend on context which in Flask is\ndefined as being either a thread, process or greenlet.  If your server\nuses some kind of concurrency that is not based on threads or greenlets,\nFlask will no longer be able to support these global proxies.  However the\nmajority of servers are using either threads, greenlets or separate\nprocesses to achieve concurrency which are all methods well supported by\nthe underlying Werkzeug library.,,,,Discuss with the community.,\u00b6,,The Flask developers keep the framework accessible to users with codebases big\nand small. If you find an obstacle in your way, caused by Flask, don\u2019t hesitate\nto contact the developers on the mailinglist or IRC channel.  The best way for\nthe Flask and Flask extension developers to improve the tools for larger\napplications is getting feedback from users.,,,,,,,,,,,,,Contents,,,Becoming Big,,Read the Source.,,Hook. Extend.,,Subclass.,,Wrap with middleware.,,Fork.,,Scale like a pro.,,Discuss with the community.,,,,,Navigation,,,Overview,,,Previous:,CGI,,Next:,API,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "CGI", "url": "http://flask.pocoo.org/docs/0.12/deploying/cgi/", "content": ",,,,,CGI \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,Deployment Options,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,CGI,\u00b6,,If all other deployment methods do not work, CGI will work for sure.\nCGI is supported by all major servers but usually has a sub-optimal\nperformance.,,This is also the way you can use a Flask application on Google\u2019s,App\nEngine,, where execution happens in a CGI-like environment.,,,Watch Out,,Please make sure in advance that any,app.run(),calls you might\nhave in your application file are inside an,if,,__name__,,==,,'__main__':,block or moved to a separate file.  Just make sure it\u2019s\nnot called because this will always start a local WSGI server which\nwe do not want if we deploy that application to CGI / app engine.,,With CGI, you will also have to make sure that your code does not contain\nany,print,statements, or that,sys.stdout,is overridden by something\nthat doesn\u2019t write into the HTTP response.,,,,Creating a,.cgi,file,\u00b6,,First you need to create the CGI application file.  Let\u2019s call it,yourapplication.cgi,:,,#!/usr/bin/python,,from,,wsgiref.handlers,,import,,CGIHandler,,from,,yourapplication,,import,,app,,CGIHandler,(),.,run,(,app,),,,,,,Server Setup,\u00b6,,Usually there are two ways to configure the server.  Either just copy the,.cgi,into a,cgi-bin,(and use,mod_rewrite,or something similar to\nrewrite the URL) or let the server point to the file directly.,,In Apache for example you can put something like this into the config:,,ScriptAlias,,/app,,/path/to/the/application.cgi,,,,On shared webhosting, though, you might not have access to your Apache config.\nIn this case, a file called,.htaccess,, sitting in the public directory you want\nyour app to be available, works too but the,ScriptAlias,directive won\u2019t\nwork in that case:,,RewriteEngine,,On,,RewriteCond,%{REQUEST_FILENAME} !-f # Don't interfere with static files,RewriteRule,^(.*)$,/path/to/the/application.cgi/,$1 [L],,,For more information consult the documentation of your webserver.,,,,,,,,,,,,,Contents,,,CGI,,Creating a,.cgi,file,,Server Setup,,,,,Navigation,,,Overview,,,Deployment Options,,,Previous:,FastCGI,,Next:,Becoming Big,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Design Decisions in Flask", "url": "http://flask.pocoo.org/docs/dev/design/", "content": ",,,,,Design Decisions in Flask \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,Design Decisions in Flask,\u00b6,,If you are curious why Flask does certain things the way it does and not\ndifferently, this section is for you.  This should give you an idea about\nsome of the design decisions that may appear arbitrary and surprising at\nfirst, especially in direct comparison with other frameworks.,,,The Explicit Application Object,\u00b6,,A Python web application based on WSGI has to have one central callable\nobject that implements the actual application.  In Flask this is an\ninstance of the,Flask,class.  Each Flask application has\nto create an instance of this class itself and pass it the name of the\nmodule, but why can\u2019t Flask do that itself?,,Without such an explicit application object the following code:,,from,,flask,,import,,Flask,,app,,=,,Flask,(,__name__,),,@app,.,route,(,'/',),,def,,index,():,,return,,'Hello World!',,,,Would look like this instead:,,from,,hypothetical_flask,,import,,route,,@route,(,'/',),,def,,index,():,,return,,'Hello World!',,,,There are three major reasons for this.  The most important one is that\nimplicit application objects require that there may only be one instance at\nthe time.  There are ways to fake multiple applications with a single\napplication object, like maintaining a stack of applications, but this\ncauses some problems I won\u2019t outline here in detail.  Now the question is:\nwhen does a microframework need more than one application at the same\ntime?  A good example for this is unittesting.  When you want to test\nsomething it can be very helpful to create a minimal application to test\nspecific behavior.  When the application object is deleted everything it\nallocated will be freed again.,,Another thing that becomes possible when you have an explicit object lying\naround in your code is that you can subclass the base class\n(,Flask,) to alter specific behavior.  This would not be\npossible without hacks if the object were created ahead of time for you\nbased on a class that is not exposed to you.,,But there is another very important reason why Flask depends on an\nexplicit instantiation of that class: the package name.  Whenever you\ncreate a Flask instance you usually pass it,__name__,as package name.\nFlask depends on that information to properly load resources relative\nto your module.  With Python\u2019s outstanding support for reflection it can\nthen access the package to figure out where the templates and static files\nare stored (see,open_resource(),).  Now obviously there\nare frameworks around that do not need any configuration and will still be\nable to load templates relative to your application module.  But they have\nto use the current working directory for that, which is a very unreliable\nway to determine where the application is.  The current working directory\nis process-wide and if you are running multiple applications in one\nprocess (which could happen in a webserver without you knowing) the paths\nwill be off.  Worse: many webservers do not set the working directory to\nthe directory of your application but to the document root which does not\nhave to be the same folder.,,The third reason is \u201cexplicit is better than implicit\u201d.  That object is\nyour WSGI application, you don\u2019t have to remember anything else.  If you\nwant to apply a WSGI middleware, just wrap it and you\u2019re done (though\nthere are better ways to do that so that you do not lose the reference\nto the application object,wsgi_app(),).,,Furthermore this design makes it possible to use a factory function to\ncreate the application which is very helpful for unittesting and similar\nthings (,Application Factories,).,,,,The Routing System,\u00b6,,Flask uses the Werkzeug routing system which was designed to\nautomatically order routes by complexity.  This means that you can declare\nroutes in arbitrary order and they will still work as expected.  This is a\nrequirement if you want to properly implement decorator based routing\nsince decorators could be fired in undefined order when the application is\nsplit into multiple modules.,,Another design decision with the Werkzeug routing system is that routes\nin Werkzeug try to ensure that URLs are unique.  Werkzeug will go quite far\nwith that in that it will automatically redirect to a canonical URL if a route\nis ambiguous.,,,,One Template Engine,\u00b6,,Flask decides on one template engine: Jinja2.  Why doesn\u2019t Flask have a\npluggable template engine interface?  You can obviously use a different\ntemplate engine, but Flask will still configure Jinja2 for you.  While\nthat limitation that Jinja2 is,always,configured will probably go away,\nthe decision to bundle one template engine and use that will not.,,Template engines are like programming languages and each of those engines\nhas a certain understanding about how things work.  On the surface they\nall work the same: you tell the engine to evaluate a template with a set\nof variables and take the return value as string.,,But that\u2019s about where similarities end.  Jinja2 for example has an\nextensive filter system, a certain way to do template inheritance, support\nfor reusable blocks (macros) that can be used from inside templates and\nalso from Python code, uses Unicode for all operations, supports\niterative template rendering, configurable syntax and more.  On the other\nhand an engine like Genshi is based on XML stream evaluation, template\ninheritance by taking the availability of XPath into account and more.\nMako on the other hand treats templates similar to Python modules.,,When it comes to connecting a template engine with an application or\nframework there is more than just rendering templates.  For instance,\nFlask uses Jinja2\u2019s extensive autoescaping support.  Also it provides\nways to access macros from Jinja2 templates.,,A template abstraction layer that would not take the unique features of\nthe template engines away is a science on its own and a too large\nundertaking for a microframework like Flask.,,Furthermore extensions can then easily depend on one template language\nbeing present.  You can easily use your own templating language, but an\nextension could still depend on Jinja itself.,,,,Micro with Dependencies,\u00b6,,Why does Flask call itself a microframework and yet it depends on two\nlibraries (namely Werkzeug and Jinja2).  Why shouldn\u2019t it?  If we look\nover to the Ruby side of web development there we have a protocol very\nsimilar to WSGI.  Just that it\u2019s called Rack there, but besides that it\nlooks very much like a WSGI rendition for Ruby.  But nearly all\napplications in Ruby land do not work with Rack directly, but on top of a\nlibrary with the same name.  This Rack library has two equivalents in\nPython: WebOb (formerly Paste) and Werkzeug.  Paste is still around but\nfrom my understanding it\u2019s sort of deprecated in favour of WebOb.  The\ndevelopment of WebOb and Werkzeug started side by side with similar ideas\nin mind: be a good implementation of WSGI for other applications to take\nadvantage.,,Flask is a framework that takes advantage of the work already done by\nWerkzeug to properly interface WSGI (which can be a complex task at\ntimes).  Thanks to recent developments in the Python package\ninfrastructure, packages with dependencies are no longer an issue and\nthere are very few reasons against having libraries that depend on others.,,,,Thread Locals,\u00b6,,Flask uses thread local objects (context local objects in fact, they\nsupport greenlet contexts as well) for request, session and an extra\nobject you can put your own things on (,g,).  Why is that and\nisn\u2019t that a bad idea?,,Yes it is usually not such a bright idea to use thread locals.  They cause\ntroubles for servers that are not based on the concept of threads and make\nlarge applications harder to maintain.  However Flask is just not designed\nfor large applications or asynchronous servers.  Flask wants to make it\nquick and easy to write a traditional web application.,,Also see the,Becoming Big,section of the documentation for some\ninspiration for larger applications based on Flask.,,,,What Flask is, What Flask is Not,\u00b6,,Flask will never have a database layer.  It will not have a form library\nor anything else in that direction.  Flask itself just bridges to Werkzeug\nto implement a proper WSGI application and to Jinja2 to handle templating.\nIt also binds to a few common standard library packages such as logging.\nEverything else is up for extensions.,,Why is this the case?  Because people have different preferences and\nrequirements and Flask could not meet those if it would force any of this\ninto the core.  The majority of web applications will need a template\nengine in some sort.  However not every application needs a SQL database.,,The idea of Flask is to build a good foundation for all applications.\nEverything else is up to you or extensions.,,,,,,,,,,,,,Contents,,,Design Decisions in Flask,,The Explicit Application Object,,The Routing System,,One Template Engine,,Micro with Dependencies,,Thread Locals,,What Flask is, What Flask is Not,,,,,Navigation,,,Overview,,,Previous:,API,,Next:,HTML/XHTML FAQ,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Design Decisions in Flask", "url": "http://flask.pocoo.org/docs/1.0/design/", "content": ",,,,,Design Decisions in Flask \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,,,,,,,,Design Decisions in Flask,\u00b6,,If you are curious why Flask does certain things the way it does and not\ndifferently, this section is for you.  This should give you an idea about\nsome of the design decisions that may appear arbitrary and surprising at\nfirst, especially in direct comparison with other frameworks.,,,The Explicit Application Object,\u00b6,,A Python web application based on WSGI has to have one central callable\nobject that implements the actual application.  In Flask this is an\ninstance of the,Flask,class.  Each Flask application has\nto create an instance of this class itself and pass it the name of the\nmodule, but why can\u2019t Flask do that itself?,,Without such an explicit application object the following code:,,from,,flask,,import,,Flask,,app,,=,,Flask,(,__name__,),,@app,.,route,(,'/',),,def,,index,():,,return,,'Hello World!',,,,Would look like this instead:,,from,,hypothetical_flask,,import,,route,,@route,(,'/',),,def,,index,():,,return,,'Hello World!',,,,There are three major reasons for this.  The most important one is that\nimplicit application objects require that there may only be one instance at\nthe time.  There are ways to fake multiple applications with a single\napplication object, like maintaining a stack of applications, but this\ncauses some problems I won\u2019t outline here in detail.  Now the question is:\nwhen does a microframework need more than one application at the same\ntime?  A good example for this is unittesting.  When you want to test\nsomething it can be very helpful to create a minimal application to test\nspecific behavior.  When the application object is deleted everything it\nallocated will be freed again.,,Another thing that becomes possible when you have an explicit object lying\naround in your code is that you can subclass the base class\n(,Flask,) to alter specific behavior.  This would not be\npossible without hacks if the object were created ahead of time for you\nbased on a class that is not exposed to you.,,But there is another very important reason why Flask depends on an\nexplicit instantiation of that class: the package name.  Whenever you\ncreate a Flask instance you usually pass it,__name__,as package name.\nFlask depends on that information to properly load resources relative\nto your module.  With Python\u2019s outstanding support for reflection it can\nthen access the package to figure out where the templates and static files\nare stored (see,open_resource(),).  Now obviously there\nare frameworks around that do not need any configuration and will still be\nable to load templates relative to your application module.  But they have\nto use the current working directory for that, which is a very unreliable\nway to determine where the application is.  The current working directory\nis process-wide and if you are running multiple applications in one\nprocess (which could happen in a webserver without you knowing) the paths\nwill be off.  Worse: many webservers do not set the working directory to\nthe directory of your application but to the document root which does not\nhave to be the same folder.,,The third reason is \u201cexplicit is better than implicit\u201d.  That object is\nyour WSGI application, you don\u2019t have to remember anything else.  If you\nwant to apply a WSGI middleware, just wrap it and you\u2019re done (though\nthere are better ways to do that so that you do not lose the reference\nto the application object,wsgi_app(),).,,Furthermore this design makes it possible to use a factory function to\ncreate the application which is very helpful for unittesting and similar\nthings (,Application Factories,).,,,,The Routing System,\u00b6,,Flask uses the Werkzeug routing system which was designed to\nautomatically order routes by complexity.  This means that you can declare\nroutes in arbitrary order and they will still work as expected.  This is a\nrequirement if you want to properly implement decorator based routing\nsince decorators could be fired in undefined order when the application is\nsplit into multiple modules.,,Another design decision with the Werkzeug routing system is that routes\nin Werkzeug try to ensure that URLs are unique.  Werkzeug will go quite far\nwith that in that it will automatically redirect to a canonical URL if a route\nis ambiguous.,,,,One Template Engine,\u00b6,,Flask decides on one template engine: Jinja2.  Why doesn\u2019t Flask have a\npluggable template engine interface?  You can obviously use a different\ntemplate engine, but Flask will still configure Jinja2 for you.  While\nthat limitation that Jinja2 is,always,configured will probably go away,\nthe decision to bundle one template engine and use that will not.,,Template engines are like programming languages and each of those engines\nhas a certain understanding about how things work.  On the surface they\nall work the same: you tell the engine to evaluate a template with a set\nof variables and take the return value as string.,,But that\u2019s about where similarities end.  Jinja2 for example has an\nextensive filter system, a certain way to do template inheritance, support\nfor reusable blocks (macros) that can be used from inside templates and\nalso from Python code, uses Unicode for all operations, supports\niterative template rendering, configurable syntax and more.  On the other\nhand an engine like Genshi is based on XML stream evaluation, template\ninheritance by taking the availability of XPath into account and more.\nMako on the other hand treats templates similar to Python modules.,,When it comes to connecting a template engine with an application or\nframework there is more than just rendering templates.  For instance,\nFlask uses Jinja2\u2019s extensive autoescaping support.  Also it provides\nways to access macros from Jinja2 templates.,,A template abstraction layer that would not take the unique features of\nthe template engines away is a science on its own and a too large\nundertaking for a microframework like Flask.,,Furthermore extensions can then easily depend on one template language\nbeing present.  You can easily use your own templating language, but an\nextension could still depend on Jinja itself.,,,,Micro with Dependencies,\u00b6,,Why does Flask call itself a microframework and yet it depends on two\nlibraries (namely Werkzeug and Jinja2).  Why shouldn\u2019t it?  If we look\nover to the Ruby side of web development there we have a protocol very\nsimilar to WSGI.  Just that it\u2019s called Rack there, but besides that it\nlooks very much like a WSGI rendition for Ruby.  But nearly all\napplications in Ruby land do not work with Rack directly, but on top of a\nlibrary with the same name.  This Rack library has two equivalents in\nPython: WebOb (formerly Paste) and Werkzeug.  Paste is still around but\nfrom my understanding it\u2019s sort of deprecated in favour of WebOb.  The\ndevelopment of WebOb and Werkzeug started side by side with similar ideas\nin mind: be a good implementation of WSGI for other applications to take\nadvantage.,,Flask is a framework that takes advantage of the work already done by\nWerkzeug to properly interface WSGI (which can be a complex task at\ntimes).  Thanks to recent developments in the Python package\ninfrastructure, packages with dependencies are no longer an issue and\nthere are very few reasons against having libraries that depend on others.,,,,Thread Locals,\u00b6,,Flask uses thread local objects (context local objects in fact, they\nsupport greenlet contexts as well) for request, session and an extra\nobject you can put your own things on (,g,).  Why is that and\nisn\u2019t that a bad idea?,,Yes it is usually not such a bright idea to use thread locals.  They cause\ntroubles for servers that are not based on the concept of threads and make\nlarge applications harder to maintain.  However Flask is just not designed\nfor large applications or asynchronous servers.  Flask wants to make it\nquick and easy to write a traditional web application.,,Also see the,Becoming Big,section of the documentation for some\ninspiration for larger applications based on Flask.,,,,What Flask is, What Flask is Not,\u00b6,,Flask will never have a database layer.  It will not have a form library\nor anything else in that direction.  Flask itself just bridges to Werkzeug\nto implement a proper WSGI application and to Jinja2 to handle templating.\nIt also binds to a few common standard library packages such as logging.\nEverything else is up for extensions.,,Why is this the case?  Because people have different preferences and\nrequirements and Flask could not meet those if it would force any of this\ninto the core.  The majority of web applications will need a template\nengine in some sort.  However not every application needs a SQL database.,,The idea of Flask is to build a good foundation for all applications.\nEverything else is up to you or extensions.,,,,,,,,,,,,,Contents,,,Design Decisions in Flask,,The Explicit Application Object,,The Routing System,,One Template Engine,,Micro with Dependencies,,Thread Locals,,What Flask is, What Flask is Not,,,,,Navigation,,,Overview,,,Previous:,API,,Next:,HTML/XHTML FAQ,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Flask Extension Development", "url": "http://flask.pocoo.org/docs/dev/extensiondev/", "content": ",,,,,Flask Extension Development \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,Flask Extension Development,\u00b6,,Flask, being a microframework, often requires some repetitive steps to get\na third party library working.  Because very often these steps could be\nabstracted to support multiple projects the,Flask Extension Registry,was created.,,If you want to create your own Flask extension for something that does not\nexist yet, this guide to extension development will help you get your\nextension running in no time and to feel like users would expect your\nextension to behave.,,,Anatomy of an Extension,\u00b6,,Extensions are all located in a package called,flask_something,where \u201csomething\u201d is the name of the library you want to bridge.  So for\nexample if you plan to add support for a library named,simplexml,to\nFlask, you would name your extension\u2019s package,flask_simplexml,.,,The name of the actual extension (the human readable name) however would\nbe something like \u201cFlask-SimpleXML\u201d.  Make sure to include the name\n\u201cFlask\u201d somewhere in that name and that you check the capitalization.\nThis is how users can then register dependencies to your extension in\ntheir,setup.py,files.,,But what do extensions look like themselves?  An extension has to ensure\nthat it works with multiple Flask application instances at once.  This is\na requirement because many people will use patterns like the,Application Factories,pattern to create their application as needed to aid\nunittests and to support multiple configurations.  Because of that it is\ncrucial that your application supports that kind of behavior.,,Most importantly the extension must be shipped with a,setup.py,file and\nregistered on PyPI.  Also the development checkout link should work so\nthat people can easily install the development version into their\nvirtualenv without having to download the library by hand.,,Flask extensions must be licensed under a BSD, MIT or more liberal license\nin order to be listed in the Flask Extension Registry.  Keep in mind\nthat the Flask Extension Registry is a moderated place and libraries will\nbe reviewed upfront if they behave as required.,,,,\u201cHello Flaskext!\u201d,\u00b6,,So let\u2019s get started with creating such a Flask extension.  The extension\nwe want to create here will provide very basic support for SQLite3.,,First we create the following folder structure:,,flask,-,sqlite3,/,,flask_sqlite3,.,py,,LICENSE,,README,,,,Here\u2019s the contents of the most important files:,,,setup.py,\u00b6,,The next file that is absolutely required is the,setup.py,file which is\nused to install your Flask extension.  The following contents are\nsomething you can work with:,,\"\"\",,Flask-SQLite3,,-------------,,This is the description for that library,,\"\"\",,from,,setuptools,,import,,setup,,setup,(,,name,=,'Flask-SQLite3',,,,version,=,'1.0',,,,url,=,'http://example.com/flask-sqlite3/',,,,license,=,'BSD',,,,author,=,'Your Name',,,,author_email,=,'your-email@example.com',,,,description,=,'Very short description',,,,long_description,=,__doc__,,,,py_modules,=,[,'flask_sqlite3',],,,# if you would be using a package instead use packages instead,,# of py_modules:,,# packages=['flask_sqlite3'],,,zip_safe,=,False,,,,include_package_data,=,True,,,,platforms,=,'any',,,,install_requires,=,[,,'Flask',,],,,classifiers,=,[,,'Environment :: Web Environment',,,,'Intended Audience :: Developers',,,,'License :: OSI Approved :: BSD License',,,,'Operating System :: OS Independent',,,,'Programming Language :: Python',,,,'Topic :: Internet :: WWW/HTTP :: Dynamic Content',,,,'Topic :: Software Development :: Libraries :: Python Modules',,],,),,,,That\u2019s a lot of code but you can really just copy/paste that from existing\nextensions and adapt.,,,,flask_sqlite3.py,\u00b6,,Now this is where your extension code goes.  But how exactly should such\nan extension look like?  What are the best practices?  Continue reading\nfor some insight.,,,,,Initializing Extensions,\u00b6,,Many extensions will need some kind of initialization step.  For example,\nconsider an application that\u2019s currently connecting to SQLite like the\ndocumentation suggests (,Using SQLite 3 with Flask,).  So how does the extension\nknow the name of the application object?,,Quite simple: you pass it to it.,,There are two recommended ways for an extension to initialize:,,initialization functions:,,,If your extension is called,helloworld,you might have a function\ncalled,init_helloworld(app[,,,extra_args]),that initializes the\nextension for that application.  It could attach before / after\nhandlers etc.,,classes:,,,Classes work mostly like initialization functions but can later be\nused to further change the behavior.  For an example look at how the,OAuth extension,works: there is an,OAuth,object that provides\nsome helper functions like,OAuth.remote_app,to create a reference to\na remote application that uses OAuth.,,What to use depends on what you have in mind.  For the SQLite 3 extension\nwe will use the class-based approach because it will provide users with an\nobject that handles opening and closing database connections.,,When designing your classes, it\u2019s important to make them easily reusable\nat the module level. This means the object itself must not under any\ncircumstances store any application specific state and must be shareable\nbetween different applications.,,,,The Extension Code,\u00b6,,Here\u2019s the contents of the,flask_sqlite3.py,for copy/paste:,,import,,sqlite3,,from,,flask,,import,,current_app,,,,_app_ctx_stack,,class,,SQLite3,(,object,):,,def,,__init__,(,self,,,,app,=,None,):,,self,.,app,,=,,app,,if,,app,,is,,not,,None,:,,self,.,init_app,(,app,),,def,,init_app,(,self,,,,app,):,,app,.,config,.,setdefault,(,'SQLITE3_DATABASE',,,,':memory:',),,app,.,teardown_appcontext,(,self,.,teardown,),,def,,connect,(,self,):,,return,,sqlite3,.,connect,(,current_app,.,config,[,'SQLITE3_DATABASE',]),,def,,teardown,(,self,,,,exception,):,,ctx,,=,,_app_ctx_stack,.,top,,if,,hasattr,(,ctx,,,,'sqlite3_db',):,,ctx,.,sqlite3_db,.,close,(),,@property,,def,,connection,(,self,):,,ctx,,=,,_app_ctx_stack,.,top,,if,,ctx,,is,,not,,None,:,,if,,not,,hasattr,(,ctx,,,,'sqlite3_db',):,,ctx,.,sqlite3_db,,=,,self,.,connect,(),,return,,ctx,.,sqlite3_db,,,,So here\u2019s what these lines of code do:,,,The,__init__,method takes an optional app object and, if supplied, will\ncall,init_app,.,,,The,init_app,method exists so that the,SQLite3,object can be\ninstantiated without requiring an app object.  This method supports the\nfactory pattern for creating applications.  The,init_app,will set the\nconfiguration for the database, defaulting to an in memory database if\nno configuration is supplied.  In addition, the,init_app,method attaches\nthe,teardown,handler.,,,Next, we define a,connect,method that opens a database connection.,,,Finally, we add a,connection,property that on first access opens\nthe database connection and stores it on the context.  This is also\nthe recommended way to handling resources: fetch resources lazily the\nfirst time they are used.,,Note here that we\u2019re attaching our database connection to the top\napplication context via,_app_ctx_stack.top,. Extensions should use\nthe top context for storing their own information with a sufficiently\ncomplex name.,,,,So why did we decide on a class-based approach here?  Because using our\nextension looks something like this:,,from,,flask,,import,,Flask,,from,,flask_sqlite3,,import,,SQLite3,,app,,=,,Flask,(,__name__,),,app,.,config,.,from_pyfile,(,'the-config.cfg',),,db,,=,,SQLite3,(,app,),,,,You can then use the database from views like this:,,@app,.,route,(,'/',),,def,,show_all,():,,cur,,=,,db,.,connection,.,cursor,(),,cur,.,execute,(,...,),,,,Likewise if you are outside of a request you can use the database by\npushing an app context:,,with,,app,.,app_context,():,,cur,,=,,db,.,connection,.,cursor,(),,cur,.,execute,(,...,),,,,At the end of the,with,block the teardown handles will be executed\nautomatically.,,Additionally, the,init_app,method is used to support the factory pattern\nfor creating apps:,,db,,=,,Sqlite3,(),,# Then later on.,,app,,=,,create_app,(,'the-config.cfg',),,db,.,init_app,(,app,),,,,Keep in mind that supporting this factory pattern for creating apps is required\nfor approved flask extensions (described below).,,,Note on,init_app,,As you noticed,,init_app,does not assign,app,to,self,.  This\nis intentional!  Class based Flask extensions must only store the\napplication on the object when the application was passed to the\nconstructor.  This tells the extension: I am not interested in using\nmultiple applications.,,When the extension needs to find the current application and it does\nnot have a reference to it, it must either use the,current_app,context local or change the API in a way\nthat you can pass the application explicitly.,,,,,Using _app_ctx_stack,\u00b6,,In the example above, before every request, a,sqlite3_db,variable is\nassigned to,_app_ctx_stack.top,.  In a view function, this variable is\naccessible using the,connection,property of,SQLite3,.  During the\nteardown of a request, the,sqlite3_db,connection is closed.  By using\nthis pattern, the,same,connection to the sqlite3 database is accessible\nto anything that needs it for the duration of the request.,,,,Learn from Others,\u00b6,,This documentation only touches the bare minimum for extension\ndevelopment.  If you want to learn more, it\u2019s a very good idea to check\nout existing extensions on the,Flask Extension Registry,.  If you feel\nlost there is still the,mailinglist,and the,IRC channel,to get some\nideas for nice looking APIs.  Especially if you do something nobody before\nyou did, it might be a very good idea to get some more input.  This not only\ngenerates useful feedback on what people might want from an extension, but\nalso avoids having multiple developers working in isolation on pretty much the\nsame problem.,,Remember: good API design is hard, so introduce your project on the\nmailinglist, and let other developers give you a helping hand with\ndesigning the API.,,The best Flask extensions are extensions that share common idioms for the\nAPI.  And this can only work if collaboration happens early.,,,,Approved Extensions,\u00b6,,Flask also has the concept of approved extensions.  Approved extensions\nare tested as part of Flask itself to ensure extensions do not break on\nnew releases.  These approved extensions are listed on the,Flask\nExtension Registry,and marked appropriately.  If you want your own\nextension to be approved you have to follow these guidelines:,,,An approved Flask extension requires a maintainer. In the event an\nextension author would like to move beyond the project, the project should\nfind a new maintainer including full source hosting transition and PyPI\naccess.  If no maintainer is available, give access to the Flask core team.,,An approved Flask extension must provide exactly one package or module\nnamed,flask_extensionname,.,,It must ship a testing suite that can either be invoked with,make,,test,or,python,,setup.py,,test,.  For test suites invoked with,make,,test,the extension has to ensure that all dependencies for the test\nare installed automatically.  If tests are invoked with,python,,setup.py,,test,, test dependencies can be specified in the,setup.py,file.  The\ntest suite also has to be part of the distribution.,,APIs of approved extensions will be checked for the following\ncharacteristics:,,,,,an approved extension has to support multiple applications\nrunning in the same Python process.,,it must be possible to use the factory pattern for creating\napplications.,,,,,The license must be BSD/MIT/WTFPL licensed.,,The naming scheme for official extensions is,Flask-ExtensionName,or,ExtensionName-Flask,.,,Approved extensions must define all their dependencies in the,setup.py,file unless a dependency cannot be met because it is not\navailable on PyPI.,,The documentation must use the,flask,theme from the,Official\nPallets Themes,.,,The setup.py description (and thus the PyPI description) has to\nlink to the documentation, website (if there is one) and there\nmust be a link to automatically install the development version\n(,PackageName==dev,).,,The,zip_safe,flag in the setup script must be set to,False,,\neven if the extension would be safe for zipping.,,An extension currently has to support Python 3.4 and newer and 2.7.,,,,,,,,,,,,,,Contents,,,Flask Extension Development,,Anatomy of an Extension,,\u201cHello Flaskext!\u201d,,setup.py,,flask_sqlite3.py,,,,Initializing Extensions,,The Extension Code,,Using _app_ctx_stack,,Learn from Others,,Approved Extensions,,,,,Navigation,,,Overview,,,Previous:,Unicode in Flask,,Next:,Pocoo Styleguide,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "None", "url": "http://flask.pocoo.org/community/irc/", "content": "IRC Channel | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/community.png); },,,Flask Community,,,overview,//,docs,//,community,//,extensions,//,donate,,IRC Channel,,The Flask IRC channel is,#pocoo,on irc.freenode.net.\n    Flask shares that channel with other Pocoo projects, so please\n    let the others know that you are talking about Flask when asking\n    a question.,You can use any IRC client to connect to freenode.  If you don't\n    have one yet, pick one from the list:,,Pidgin,, Windows, Linux, OS X,X-Chat,, Linux,mirc,, Windows,colloquy,, OS X,,Alternatively you can also use the freenode web interface to\n    join the IRC channel:,open\n    #pocoo in your browser,.,If you want to read up on older discussions you can access\n    the IRC logs on,https://botbot.me/freenode/pocoo/,.,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/mailinglist/", "content": "Mailinglist | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/mailinglist.png); },,,Flask Mailinglist,,,overview,//,docs,//,community,//,extensions,//,donate,,Mailinglist Information,,There is a mailinglist for Flask hosted on,python.org,that\n    you can use for both user requests and development discussions that may not\n    fit well in a Github issue or StackOverflow question.,You can subscribe or change your subscription options at,https://mail.python.org/mailman/listinfo/flask/,. If you're having\n    problems, don't forget to check your Spam folder.,You can view the list archives at,http://mail.python.org/pipermail/flask/,.,Before July 2015, we used librelist for the mailing list. You can view those\n    archives here:,/mailinglist/archive/,. Just keep in mind any new messages\n    should now be posted to,the python.org\n    Flask mailing list,mentioned above.,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "Flask Extension Development", "url": "http://flask.pocoo.org/docs/1.0/extensiondev/", "content": ",,,,,Flask Extension Development \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,,,,,,,,Flask Extension Development,\u00b6,,Flask, being a microframework, often requires some repetitive steps to get\na third party library working.  Because very often these steps could be\nabstracted to support multiple projects the,Flask Extension Registry,was created.,,If you want to create your own Flask extension for something that does not\nexist yet, this guide to extension development will help you get your\nextension running in no time and to feel like users would expect your\nextension to behave.,,,Anatomy of an Extension,\u00b6,,Extensions are all located in a package called,flask_something,where \u201csomething\u201d is the name of the library you want to bridge.  So for\nexample if you plan to add support for a library named,simplexml,to\nFlask, you would name your extension\u2019s package,flask_simplexml,.,,The name of the actual extension (the human readable name) however would\nbe something like \u201cFlask-SimpleXML\u201d.  Make sure to include the name\n\u201cFlask\u201d somewhere in that name and that you check the capitalization.\nThis is how users can then register dependencies to your extension in\ntheir,setup.py,files.,,But what do extensions look like themselves?  An extension has to ensure\nthat it works with multiple Flask application instances at once.  This is\na requirement because many people will use patterns like the,Application Factories,pattern to create their application as needed to aid\nunittests and to support multiple configurations.  Because of that it is\ncrucial that your application supports that kind of behavior.,,Most importantly the extension must be shipped with a,setup.py,file and\nregistered on PyPI.  Also the development checkout link should work so\nthat people can easily install the development version into their\nvirtualenv without having to download the library by hand.,,Flask extensions must be licensed under a BSD, MIT or more liberal license\nin order to be listed in the Flask Extension Registry.  Keep in mind\nthat the Flask Extension Registry is a moderated place and libraries will\nbe reviewed upfront if they behave as required.,,,,\u201cHello Flaskext!\u201d,\u00b6,,So let\u2019s get started with creating such a Flask extension.  The extension\nwe want to create here will provide very basic support for SQLite3.,,First we create the following folder structure:,,flask,-,sqlite3,/,,flask_sqlite3,.,py,,LICENSE,,README,,,,Here\u2019s the contents of the most important files:,,,setup.py,\u00b6,,The next file that is absolutely required is the,setup.py,file which is\nused to install your Flask extension.  The following contents are\nsomething you can work with:,,\"\"\",,Flask-SQLite3,,-------------,,This is the description for that library,,\"\"\",,from,,setuptools,,import,,setup,,setup,(,,name,=,'Flask-SQLite3',,,,version,=,'1.0',,,,url,=,'http://example.com/flask-sqlite3/',,,,license,=,'BSD',,,,author,=,'Your Name',,,,author_email,=,'your-email@example.com',,,,description,=,'Very short description',,,,long_description,=,__doc__,,,,py_modules,=,[,'flask_sqlite3',],,,# if you would be using a package instead use packages instead,,# of py_modules:,,# packages=['flask_sqlite3'],,,zip_safe,=,False,,,,include_package_data,=,True,,,,platforms,=,'any',,,,install_requires,=,[,,'Flask',,],,,classifiers,=,[,,'Environment :: Web Environment',,,,'Intended Audience :: Developers',,,,'License :: OSI Approved :: BSD License',,,,'Operating System :: OS Independent',,,,'Programming Language :: Python',,,,'Topic :: Internet :: WWW/HTTP :: Dynamic Content',,,,'Topic :: Software Development :: Libraries :: Python Modules',,],,),,,,That\u2019s a lot of code but you can really just copy/paste that from existing\nextensions and adapt.,,,,flask_sqlite3.py,\u00b6,,Now this is where your extension code goes.  But how exactly should such\nan extension look like?  What are the best practices?  Continue reading\nfor some insight.,,,,,Initializing Extensions,\u00b6,,Many extensions will need some kind of initialization step.  For example,\nconsider an application that\u2019s currently connecting to SQLite like the\ndocumentation suggests (,Using SQLite 3 with Flask,).  So how does the extension\nknow the name of the application object?,,Quite simple: you pass it to it.,,There are two recommended ways for an extension to initialize:,,initialization functions:,,,If your extension is called,helloworld,you might have a function\ncalled,init_helloworld(app[,,,extra_args]),that initializes the\nextension for that application.  It could attach before / after\nhandlers etc.,,classes:,,,Classes work mostly like initialization functions but can later be\nused to further change the behavior.  For an example look at how the,OAuth extension,works: there is an,OAuth,object that provides\nsome helper functions like,OAuth.remote_app,to create a reference to\na remote application that uses OAuth.,,What to use depends on what you have in mind.  For the SQLite 3 extension\nwe will use the class-based approach because it will provide users with an\nobject that handles opening and closing database connections.,,When designing your classes, it\u2019s important to make them easily reusable\nat the module level. This means the object itself must not under any\ncircumstances store any application specific state and must be shareable\nbetween different applications.,,,,The Extension Code,\u00b6,,Here\u2019s the contents of the,flask_sqlite3.py,for copy/paste:,,import,,sqlite3,,from,,flask,,import,,current_app,,,,_app_ctx_stack,,class,,SQLite3,(,object,):,,def,,__init__,(,self,,,,app,=,None,):,,self,.,app,,=,,app,,if,,app,,is,,not,,None,:,,self,.,init_app,(,app,),,def,,init_app,(,self,,,,app,):,,app,.,config,.,setdefault,(,'SQLITE3_DATABASE',,,,':memory:',),,app,.,teardown_appcontext,(,self,.,teardown,),,def,,connect,(,self,):,,return,,sqlite3,.,connect,(,current_app,.,config,[,'SQLITE3_DATABASE',]),,def,,teardown,(,self,,,,exception,):,,ctx,,=,,_app_ctx_stack,.,top,,if,,hasattr,(,ctx,,,,'sqlite3_db',):,,ctx,.,sqlite3_db,.,close,(),,@property,,def,,connection,(,self,):,,ctx,,=,,_app_ctx_stack,.,top,,if,,ctx,,is,,not,,None,:,,if,,not,,hasattr,(,ctx,,,,'sqlite3_db',):,,ctx,.,sqlite3_db,,=,,self,.,connect,(),,return,,ctx,.,sqlite3_db,,,,So here\u2019s what these lines of code do:,,,The,__init__,method takes an optional app object and, if supplied, will\ncall,init_app,.,,,The,init_app,method exists so that the,SQLite3,object can be\ninstantiated without requiring an app object.  This method supports the\nfactory pattern for creating applications.  The,init_app,will set the\nconfiguration for the database, defaulting to an in memory database if\nno configuration is supplied.  In addition, the,init_app,method attaches\nthe,teardown,handler.,,,Next, we define a,connect,method that opens a database connection.,,,Finally, we add a,connection,property that on first access opens\nthe database connection and stores it on the context.  This is also\nthe recommended way to handling resources: fetch resources lazily the\nfirst time they are used.,,Note here that we\u2019re attaching our database connection to the top\napplication context via,_app_ctx_stack.top,. Extensions should use\nthe top context for storing their own information with a sufficiently\ncomplex name.,,,,So why did we decide on a class-based approach here?  Because using our\nextension looks something like this:,,from,,flask,,import,,Flask,,from,,flask_sqlite3,,import,,SQLite3,,app,,=,,Flask,(,__name__,),,app,.,config,.,from_pyfile,(,'the-config.cfg',),,db,,=,,SQLite3,(,app,),,,,You can then use the database from views like this:,,@app,.,route,(,'/',),,def,,show_all,():,,cur,,=,,db,.,connection,.,cursor,(),,cur,.,execute,(,...,),,,,Likewise if you are outside of a request you can use the database by\npushing an app context:,,with,,app,.,app_context,():,,cur,,=,,db,.,connection,.,cursor,(),,cur,.,execute,(,...,),,,,At the end of the,with,block the teardown handles will be executed\nautomatically.,,Additionally, the,init_app,method is used to support the factory pattern\nfor creating apps:,,db,,=,,Sqlite3,(),,# Then later on.,,app,,=,,create_app,(,'the-config.cfg',),,db,.,init_app,(,app,),,,,Keep in mind that supporting this factory pattern for creating apps is required\nfor approved flask extensions (described below).,,,Note on,init_app,,As you noticed,,init_app,does not assign,app,to,self,.  This\nis intentional!  Class based Flask extensions must only store the\napplication on the object when the application was passed to the\nconstructor.  This tells the extension: I am not interested in using\nmultiple applications.,,When the extension needs to find the current application and it does\nnot have a reference to it, it must either use the,current_app,context local or change the API in a way\nthat you can pass the application explicitly.,,,,,Using _app_ctx_stack,\u00b6,,In the example above, before every request, a,sqlite3_db,variable is\nassigned to,_app_ctx_stack.top,.  In a view function, this variable is\naccessible using the,connection,property of,SQLite3,.  During the\nteardown of a request, the,sqlite3_db,connection is closed.  By using\nthis pattern, the,same,connection to the sqlite3 database is accessible\nto anything that needs it for the duration of the request.,,,,Learn from Others,\u00b6,,This documentation only touches the bare minimum for extension\ndevelopment.  If you want to learn more, it\u2019s a very good idea to check\nout existing extensions on the,Flask Extension Registry,.  If you feel\nlost there is still the,mailinglist,and the,IRC channel,to get some\nideas for nice looking APIs.  Especially if you do something nobody before\nyou did, it might be a very good idea to get some more input.  This not only\ngenerates useful feedback on what people might want from an extension, but\nalso avoids having multiple developers working in isolation on pretty much the\nsame problem.,,Remember: good API design is hard, so introduce your project on the\nmailinglist, and let other developers give you a helping hand with\ndesigning the API.,,The best Flask extensions are extensions that share common idioms for the\nAPI.  And this can only work if collaboration happens early.,,,,Approved Extensions,\u00b6,,Flask also has the concept of approved extensions.  Approved extensions\nare tested as part of Flask itself to ensure extensions do not break on\nnew releases.  These approved extensions are listed on the,Flask\nExtension Registry,and marked appropriately.  If you want your own\nextension to be approved you have to follow these guidelines:,,,An approved Flask extension requires a maintainer. In the event an\nextension author would like to move beyond the project, the project should\nfind a new maintainer including full source hosting transition and PyPI\naccess.  If no maintainer is available, give access to the Flask core team.,,An approved Flask extension must provide exactly one package or module\nnamed,flask_extensionname,.,,It must ship a testing suite that can either be invoked with,make,,test,or,python,,setup.py,,test,.  For test suites invoked with,make,,test,the extension has to ensure that all dependencies for the test\nare installed automatically.  If tests are invoked with,python,,setup.py,,test,, test dependencies can be specified in the,setup.py,file.  The\ntest suite also has to be part of the distribution.,,APIs of approved extensions will be checked for the following\ncharacteristics:,,,,,an approved extension has to support multiple applications\nrunning in the same Python process.,,it must be possible to use the factory pattern for creating\napplications.,,,,,The license must be BSD/MIT/WTFPL licensed.,,The naming scheme for official extensions is,Flask-ExtensionName,or,ExtensionName-Flask,.,,Approved extensions must define all their dependencies in the,setup.py,file unless a dependency cannot be met because it is not\navailable on PyPI.,,The documentation must use the,flask,theme from the,Official\nPallets Themes,.,,The setup.py description (and thus the PyPI description) has to\nlink to the documentation, website (if there is one) and there\nmust be a link to automatically install the development version\n(,PackageName==dev,).,,The,zip_safe,flag in the setup script must be set to,False,,\neven if the extension would be safe for zipping.,,An extension currently has to support Python 3.4 and newer and 2.7.,,,,,,,,,,,,,,Contents,,,Flask Extension Development,,Anatomy of an Extension,,\u201cHello Flaskext!\u201d,,setup.py,,flask_sqlite3.py,,,,Initializing Extensions,,The Extension Code,,Using _app_ctx_stack,,Learn from Others,,Approved Extensions,,,,,Navigation,,,Overview,,,Previous:,Unicode in Flask,,Next:,Pocoo Styleguide,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Pocoo Styleguide", "url": "http://flask.pocoo.org/docs/dev/styleguide/", "content": ",,,,,Pocoo Styleguide \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,Pocoo Styleguide,\u00b6,,The Pocoo styleguide is the styleguide for all Pocoo Projects, including\nFlask.  This styleguide is a requirement for Patches to Flask and a\nrecommendation for Flask extensions.,,In general the Pocoo Styleguide closely follows,PEP 8,with some small\ndifferences and extensions.,,,General Layout,\u00b6,,,Indentation:,,4 real spaces.  No tabs, no exceptions.,,Maximum line length:,,79 characters with a soft limit for 84 if absolutely necessary.  Try\nto avoid too nested code by cleverly placing,break,,,continue,and,return,statements.,,Continuing long statements:,,To continue a statement you can use backslashes in which case you should\nalign the next line with the last dot or equal sign, or indent four\nspaces:,,this_is_a_very_long,(,function_call,,,,'with many parameters',),\\,.,that_returns_an_object_with_an_attribute,,MyModel,.,query,.,filter,(,MyModel,.,scalar,,>,,120,),\\,.,order_by,(,MyModel,.,name,.,desc,()),\\,.,limit,(,10,),,,,If you break in a statement with parentheses or braces, align to the\nbraces:,,this_is_a_very_long,(,function_call,,,,'with many parameters',,,,23,,,,42,,,,'and even more',),,,,For lists or tuples with many items, break immediately after the\nopening brace:,,items,,=,,[,,'this is the first',,,,'set of items',,,,'with more items',,,,'to come in this line',,,,'like this',,],,,,,Blank lines:,,Top level functions and classes are separated by two lines, everything\nelse by one.  Do not use too many blank lines to separate logical\nsegments in code.  Example:,,def,,hello,(,name,):,,print,,'Hello,%s,!',,%,,name,,def,,goodbye,(,name,):,,print,,'See you,%s,.',,%,,name,,class,,MyClass,(,object,):,,\"\"\"This is a simple docstring\"\"\",,def,,__init__,(,self,,,,name,):,,self,.,name,,=,,name,,def,,get_annoying_name,(,self,):,,return,,self,.,name,.,upper,(),,+,,'!!!!111',,,,,,,,Expressions and Statements,\u00b6,,,General whitespace rules:,,,No whitespace for unary operators that are not words\n(e.g.:,-,,,~,etc.) as well on the inner side of parentheses.,,Whitespace is placed between binary operators.,,,Good:,,exp,,=,,-,1.05,,value,,=,,(,item_value,,/,,item_count,),,*,,offset,,/,,exp,,value,,=,,my_list,[,index,],,value,,=,,my_dict,[,'key',],,,,Bad:,,exp,,=,,-,,1.05,,value,,=,,(,,item_value,,/,,item_count,,),,*,,offset,,/,,exp,,value,,=,,(,item_value,/,item_count,),*,offset,/,exp,,value,=,(,,item_value,/,item_count,,),,*,,offset,/,exp,,value,,=,,my_list,[,,index,,],,value,,=,,my_dict,,[,'key',],,,,,Yoda statements are a no-go:,,Never compare constant with variable, always variable with constant:,,Good:,,if,,method,,==,,'md5',:,,pass,,,,Bad:,,if,,'md5',,==,,method,:,,pass,,,,,Comparisons:,,,against arbitrary types:,==,and,!=,,against singletons with,is,and,is,,not,(eg:,foo,,is,,not,,None,),,never compare something with,True,or,False,(for example never\ndo,foo,,==,,False,, do,not,,foo,instead),,,,Negated containment checks:,,use,foo,,not,,in,,bar,instead of,not,,foo,,in,,bar,,Instance checks:,,isinstance(a,,,C),instead of,type(A),,is,,C,, but try to avoid\ninstance checks in general.  Check for features.,,,,,Naming Conventions,\u00b6,,,Class names:,CamelCase,, with acronyms kept uppercase (,HTTPWriter,and not,HttpWriter,),,Variable names:,lowercase_with_underscores,,Method and function names:,lowercase_with_underscores,,Constants:,UPPERCASE_WITH_UNDERSCORES,,precompiled regular expressions:,name_re,,,Protected members are prefixed with a single underscore.  Double\nunderscores are reserved for mixin classes.,,On classes with keywords, trailing underscores are appended.  Clashes with\nbuiltins are allowed and,must not,be resolved by appending an\nunderline to the variable name.  If the function needs to access a\nshadowed builtin, rebind the builtin to a different name instead.,,,Function and method arguments:,,,class methods:,cls,as first parameter,,instance methods:,self,as first parameter,,lambdas for properties might have the first parameter replaced\nwith,x,like in,display_name,,=,,property(lambda,,x:,,x.real_name,,or,,x.username),,,,,,,Docstrings,\u00b6,,,Docstring conventions:,,All docstrings are formatted with reStructuredText as understood by\nSphinx.  Depending on the number of lines in the docstring, they are\nlaid out differently.  If it\u2019s just one line, the closing triple\nquote is on the same line as the opening, otherwise the text is on\nthe same line as the opening quote and the triple quote that closes\nthe string on its own line:,,def,,foo,():,,\"\"\"This is a simple docstring\"\"\",,def,,bar,():,,\"\"\"This is a longer docstring with so much information in there,,that it spans three lines.  In this case the closing triple quote,,is on its own line.,,\"\"\",,,,,Module header:,,The module header consists of a utf-8 encoding declaration (if non\nASCII letters are used, but it is recommended all the time) and a\nstandard docstring:,,# -*- coding: utf-8 -*-,,\"\"\",,package.module,,~~~~~~~~~~~~~~,,A brief description goes here.,,:copyright: (c) YEAR by AUTHOR.,,:license: LICENSE_NAME, see LICENSE_FILE for more details.,,\"\"\",,,,Please keep in mind that proper copyrights and license files are a\nrequirement for approved Flask extensions.,,,,,,Comments,\u00b6,,Rules for comments are similar to docstrings.  Both are formatted with\nreStructuredText.  If a comment is used to document an attribute, put a\ncolon after the opening pound sign (,#,):,,class,,User,(,object,):,,#: the name of the user as unicode string,,name,,=,,Column,(,String,),,#: the sha1 hash of the password + inline salt,,pw_hash,,=,,Column,(,String,),,,,,,,,,,,,,,,Contents,,,Pocoo Styleguide,,General Layout,,Expressions and Statements,,Naming Conventions,,Docstrings,,Comments,,,,,Navigation,,,Overview,,,Previous:,Flask Extension Development,,Next:,Upgrading to Newer Releases,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Upgrading to Newer Releases", "url": "http://flask.pocoo.org/docs/dev/upgrading/", "content": ",,,,,Upgrading to Newer Releases \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,Upgrading to Newer Releases,\u00b6,,Flask itself is changing like any software is changing over time.  Most of\nthe changes are the nice kind, the kind where you don\u2019t have to change\nanything in your code to profit from a new release.,,However every once in a while there are changes that do require some\nchanges in your code or there are changes that make it possible for you to\nimprove your own code quality by taking advantage of new features in\nFlask.,,This section of the documentation enumerates all the changes in Flask from\nrelease to release and how you can change your code to have a painless\nupdating experience.,,Use the,pip,command to upgrade your existing Flask installation by\nproviding the,--upgrade,parameter:,,$ pip install --upgrade Flask,,,,Version 0.12,\u00b6,,,Changes to send_file,\u00b6,,The,filename,is no longer automatically inferred from file-like objects.\nThis means that the following code will no longer automatically have,X-Sendfile,support, etag generation or MIME-type guessing:,,response,,=,,send_file,(,open,(,'/path/to/file.txt',)),,,,Any of the following is functionally equivalent:,,fname,,=,,'/path/to/file.txt',,# Just pass the filepath directly,,response,,=,,send_file,(,fname,),,# Set the MIME-type and ETag explicitly,,response,,=,,send_file,(,open,(,fname,),,,mimetype,=,'text/plain',),,response,.,set_etag,(,...,),,# Set `attachment_filename` for MIME-type guessing,,# ETag still needs to be manually set,,response,,=,,send_file,(,open,(,fname,),,,attachment_filename,=,fname,),,response,.,set_etag,(,...,),,,,The reason for this is that some file-like objects have an invalid or even\nmisleading,name,attribute. Silently swallowing errors in such cases was not\na satisfying solution.,,Additionally the default of falling back to,application/octet-stream,has\nbeen restricted. If Flask can\u2019t guess one or the user didn\u2019t provide one, the\nfunction fails if no filename information was provided.,,,,,Version 0.11,\u00b6,,0.11 is an odd release in the Flask release cycle because it was supposed\nto be the 1.0 release.  However because there was such a long lead time up\nto the release we decided to push out a 0.11 release first with some\nchanges removed to make the transition easier.  If you have been tracking\nthe master branch which was 1.0 you might see some unexpected changes.,,In case you did track the master branch you will notice that,flask --app,is removed now.  You need to use the environment variable to specify an\napplication.,,,Debugging,\u00b6,,Flask 0.11 removed the,debug_log_format,attribute from Flask\napplications.  Instead the new,LOGGER_HANDLER_POLICY,configuration can\nbe used to disable the default log handlers and custom log handlers can be\nset up.,,,,Error handling,\u00b6,,The behavior of error handlers was changed.\nThe precedence of handlers used to be based on the decoration/call order of,errorhandler(),and,register_error_handler(),, respectively.\nNow the inheritance hierarchy takes precedence and handlers for more\nspecific exception classes are executed instead of more general ones.\nSee,Error handlers,for specifics.,,Trying to register a handler on an instance now raises,ValueError,.,,,Note,,There used to be a logic error allowing you to register handlers\nonly for exception,instances,. This was unintended and plain wrong,\nand therefore was replaced with the intended behavior of registering\nhandlers only using exception classes and HTTP error codes.,,,,,Templating,\u00b6,,The,render_template_string(),function has changed to\nautoescape template variables by default. This better matches the behavior\nof,render_template(),.,,,,Extension imports,\u00b6,,Extension imports of the form,flask.ext.foo,are deprecated, you should use,flask_foo,.,,The old form still works, but Flask will issue a,flask.exthook.ExtDeprecationWarning,for each extension you import the old\nway. We also provide a migration utility called,flask-ext-migrate,that is supposed to\nautomatically rewrite your imports for this.,,,,,Version 0.10,\u00b6,,The biggest change going from 0.9 to 0.10 is that the cookie serialization\nformat changed from pickle to a specialized JSON format.  This change has\nbeen done in order to avoid the damage an attacker can do if the secret\nkey is leaked.  When you upgrade you will notice two major changes: all\nsessions that were issued before the upgrade are invalidated and you can\nonly store a limited amount of types in the session.  The new sessions are\nby design much more restricted to only allow JSON with a few small\nextensions for tuples and strings with HTML markup.,,In order to not break people\u2019s sessions it is possible to continue using\nthe old session system by using the,Flask-OldSessions,extension.,,Flask also started storing the,flask.g,object on the application\ncontext instead of the request context.  This change should be transparent\nfor you but it means that you now can store things on the,g,object\nwhen there is no request context yet but an application context.  The old,flask.Flask.request_globals_class,attribute was renamed to,flask.Flask.app_ctx_globals_class,.,,,,Version 0.9,\u00b6,,The behavior of returning tuples from a function was simplified.  If you\nreturn a tuple it no longer defines the arguments for the response object\nyou\u2019re creating, it\u2019s now always a tuple in the form,(response,,,status,,,headers),where at least one item has to be provided.  If you depend on\nthe old behavior, you can add it easily by subclassing Flask:,,class,,TraditionalFlask,(,Flask,):,,def,,make_response,(,self,,,,rv,):,,if,,isinstance,(,rv,,,,tuple,):,,return,,self,.,response_class,(,*,rv,),,return,,Flask,.,make_response,(,self,,,,rv,),,,,If you maintain an extension that was using,_request_ctx_stack,before, please consider changing to,_app_ctx_stack,if it makes\nsense for your extension.  For instance, the app context stack makes sense for\nextensions which connect to databases.  Using the app context stack instead of\nthe request context stack will make extensions more readily handle use cases\noutside of requests.,,,,Version 0.8,\u00b6,,Flask introduced a new session interface system.  We also noticed that\nthere was a naming collision between,flask.session,the module that\nimplements sessions and,flask.session,which is the global session\nobject.  With that introduction we moved the implementation details for\nthe session system into a new module called,flask.sessions,.  If you\nused the previously undocumented session support we urge you to upgrade.,,If invalid JSON data was submitted Flask will now raise a,BadRequest,exception instead of letting the\ndefault,ValueError,bubble up.  This has the advantage that you no\nlonger have to handle that error to avoid an internal server error showing\nup for the user.  If you were catching this down explicitly in the past\nas,ValueError,you will need to change this.,,Due to a bug in the test client Flask 0.7 did not trigger teardown\nhandlers when the test client was used in a with statement.  This was\nsince fixed but might require some changes in your test suites if you\nrelied on this behavior.,,,,Version 0.7,\u00b6,,In Flask 0.7 we cleaned up the code base internally a lot and did some\nbackwards incompatible changes that make it easier to implement larger\napplications with Flask.  Because we want to make upgrading as easy as\npossible we tried to counter the problems arising from these changes by\nproviding a script that can ease the transition.,,The script scans your whole application and generates a unified diff with\nchanges it assumes are safe to apply.  However as this is an automated\ntool it won\u2019t be able to find all use cases and it might miss some.  We\ninternally spread a lot of deprecation warnings all over the place to make\nit easy to find pieces of code that it was unable to upgrade.,,We strongly recommend that you hand review the generated patchfile and\nonly apply the chunks that look good.,,If you are using git as version control system for your project we\nrecommend applying the patch with,path,,-p1,,<,,patchfile.diff,and then\nusing the interactive commit feature to only apply the chunks that look\ngood.,,To apply the upgrade script do the following:,,,Download the script:,flask-07-upgrade.py,,,Run it in the directory of your application:,,python,,flask,-,07,-,upgrade,.,py,,>,,patchfile,.,diff,,,,,Review the generated patchfile.,,,Apply the patch:,,patch,,-,p1,,<,,patchfile,.,diff,,,,,If you were using per-module template folders you need to move some\ntemplates around.  Previously if you had a folder named,templates,next to a blueprint named,admin,the implicit template path\nautomatically was,admin/index.html,for a template file called,templates/index.html,.  This no longer is the case.  Now you need\nto name the template,templates/admin/index.html,.  The tool will\nnot detect this so you will have to do that on your own.,,,,Please note that deprecation warnings are disabled by default starting\nwith Python 2.7.  In order to see the deprecation warnings that might be\nemitted you have to enabled them with the,warnings,module.,,If you are working with windows and you lack the,patch,command line\nutility you can get it as part of various Unix runtime environments for\nwindows including cygwin, msysgit or ming32.  Also source control systems\nlike svn, hg or git have builtin support for applying unified diffs as\ngenerated by the tool.  Check the manual of your version control system\nfor more information.,,,Bug in Request Locals,\u00b6,,Due to a bug in earlier implementations the request local proxies now\nraise a,RuntimeError,instead of an,AttributeError,when they\nare unbound.  If you caught these exceptions with,AttributeError,before, you should catch them with,RuntimeError,now.,,Additionally the,send_file(),function is now issuing\ndeprecation warnings if you depend on functionality that will be removed\nin Flask 0.11.  Previously it was possible to use etags and mimetypes\nwhen file objects were passed.  This was unreliable and caused issues\nfor a few setups.  If you get a deprecation warning, make sure to\nupdate your application to work with either filenames there or disable\netag attaching and attach them yourself.,,Old code:,,return,,send_file,(,my_file_object,),,return,,send_file,(,my_file_object,),,,,New code:,,return,,send_file,(,my_file_object,,,,add_etags,=,False,),,,,,,Upgrading to new Teardown Handling,\u00b6,,We streamlined the behavior of the callbacks for request handling.  For\nthings that modify the response the,after_request(),decorators continue to work as expected, but for things that absolutely\nmust happen at the end of request we introduced the new,teardown_request(),decorator.  Unfortunately that\nchange also made after-request work differently under error conditions.\nIt\u2019s not consistently skipped if exceptions happen whereas previously it\nmight have been called twice to ensure it is executed at the end of the\nrequest.,,If you have database connection code that looks like this:,,@app,.,after_request,,def,,after_request,(,response,):,,g,.,db,.,close,(),,return,,response,,,,You are now encouraged to use this instead:,,@app,.,teardown_request,,def,,after_request,(,exception,):,,if,,hasattr,(,g,,,,'db',):,,g,.,db,.,close,(),,,,On the upside this change greatly improves the internal code flow and\nmakes it easier to customize the dispatching and error handling.  This\nmakes it now a lot easier to write unit tests as you can prevent closing\ndown of database connections for a while.  You can take advantage of the\nfact that the teardown callbacks are called when the response context is\nremoved from the stack so a test can query the database after request\nhandling:,,with,,app,.,test_client,(),,as,,client,:,,resp,,=,,client,.,get,(,'/',),,# g.db is still bound if there is such a thing,,# and here it's gone,,,,,,Manual Error Handler Attaching,\u00b6,,While it is still possible to attach error handlers to,Flask.error_handlers,it\u2019s discouraged to do so and in fact\ndeprecated.  In general we no longer recommend custom error handler\nattaching via assignments to the underlying dictionary due to the more\ncomplex internal handling to support arbitrary exception classes and\nblueprints.  See,Flask.errorhandler(),for more information.,,The proper upgrade is to change this:,,app,.,error_handlers,[,403,],,=,,handle_error,,,,Into this:,,app,.,register_error_handler,(,403,,,,handle_error,),,,,Alternatively you should just attach the function with a decorator:,,@app,.,errorhandler,(,403,),,def,,handle_error,(,e,):,,...,,,,(Note that,register_error_handler(),is new in Flask 0.7),,,,Blueprint Support,\u00b6,,Blueprints replace the previous concept of \u201cModules\u201d in Flask.  They\nprovide better semantics for various features and work better with large\napplications.  The update script provided should be able to upgrade your\napplications automatically, but there might be some cases where it fails\nto upgrade.  What changed?,,,Blueprints need explicit names.  Modules had an automatic name\nguessing scheme where the shortname for the module was taken from the\nlast part of the import module.  The upgrade script tries to guess\nthat name but it might fail as this information could change at\nruntime.,,Blueprints have an inverse behavior for,url_for(),.  Previously,.foo,told,url_for(),that it should look for the endpoint,foo,on the application.  Now it means \u201crelative to current module\u201d.\nThe script will inverse all calls to,url_for(),automatically for\nyou.  It will do this in a very eager way so you might end up with\nsome unnecessary leading dots in your code if you\u2019re not using\nmodules.,,Blueprints do not automatically provide static folders.  They will\nalso no longer automatically export templates from a folder called,templates,next to their location however but it can be enabled from\nthe constructor.  Same with static files: if you want to continue\nserving static files you need to tell the constructor explicitly the\npath to the static folder (which can be relative to the blueprint\u2019s\nmodule path).,,Rendering templates was simplified.  Now the blueprints can provide\ntemplate folders which are added to a general template searchpath.\nThis means that you need to add another subfolder with the blueprint\u2019s\nname into that folder if you want,blueprintname/template.html,as\nthe template name.,,,If you continue to use the,Module,object which is deprecated, Flask will\nrestore the previous behavior as good as possible.  However we strongly\nrecommend upgrading to the new blueprints as they provide a lot of useful\nimprovement such as the ability to attach a blueprint multiple times,\nblueprint specific error handlers and a lot more.,,,,,Version 0.6,\u00b6,,Flask 0.6 comes with a backwards incompatible change which affects the\norder of after-request handlers.  Previously they were called in the order\nof the registration, now they are called in reverse order.  This change\nwas made so that Flask behaves more like people expected it to work and\nhow other systems handle request pre- and post-processing.  If you\ndepend on the order of execution of post-request functions, be sure to\nchange the order.,,Another change that breaks backwards compatibility is that context\nprocessors will no longer override values passed directly to the template\nrendering function.  If for example,request,is as variable passed\ndirectly to the template, the default context processor will not override\nit with the current request object.  This makes it easier to extend\ncontext processors later to inject additional variables without breaking\nexisting template not expecting them.,,,,Version 0.5,\u00b6,,Flask 0.5 is the first release that comes as a Python package instead of a\nsingle module.  There were a couple of internal refactoring so if you\ndepend on undocumented internal details you probably have to adapt the\nimports.,,The following changes may be relevant to your application:,,,autoescaping no longer happens for all templates.  Instead it is\nconfigured to only happen on files ending with,.html,,,.htm,,,.xml,and,.xhtml,.  If you have templates with different\nextensions you should override the,select_jinja_autoescape(),method.,,Flask no longer supports zipped applications in this release.  This\nfunctionality might come back in future releases if there is demand\nfor this feature.  Removing support for this makes the Flask internal\ncode easier to understand and fixes a couple of small issues that make\ndebugging harder than necessary.,,The,create_jinja_loader,function is gone.  If you want to customize\nthe Jinja loader now, use the,create_jinja_environment(),method instead.,,,,,Version 0.4,\u00b6,,For application developers there are no changes that require changes in\nyour code.  In case you are developing on a Flask extension however, and\nthat extension has a unittest-mode you might want to link the activation\nof that mode to the new,TESTING,flag.,,,,Version 0.3,\u00b6,,Flask 0.3 introduces configuration support and logging as well as\ncategories for flashing messages.  All these are features that are 100%\nbackwards compatible but you might want to take advantage of them.,,,Configuration Support,\u00b6,,The configuration support makes it easier to write any kind of application\nthat requires some sort of configuration.  (Which most likely is the case\nfor any application out there).,,If you previously had code like this:,,app,.,debug,,=,,DEBUG,,app,.,secret_key,,=,,SECRET_KEY,,,,You no longer have to do that, instead you can just load a configuration\ninto the config object.  How this works is outlined in,Configuration Handling,.,,,,Logging Integration,\u00b6,,Flask now configures a logger for you with some basic and useful defaults.\nIf you run your application in production and want to profit from\nautomatic error logging, you might be interested in attaching a proper log\nhandler.  Also you can start logging warnings and errors into the logger\nwhen appropriately.  For more information on that, read,Application Errors,.,,,,Categories for Flash Messages,\u00b6,,Flash messages can now have categories attached.  This makes it possible\nto render errors, warnings or regular messages differently for example.\nThis is an opt-in feature because it requires some rethinking in the code.,,Read all about that in the,Message Flashing,pattern.,,,,,,,,,,,,,,Contents,,,Upgrading to Newer Releases,,Version 0.12,,Changes to send_file,,,,Version 0.11,,Debugging,,Error handling,,Templating,,Extension imports,,,,Version 0.10,,Version 0.9,,Version 0.8,,Version 0.7,,Bug in Request Locals,,Upgrading to new Teardown Handling,,Manual Error Handler Attaching,,Blueprint Support,,,,Version 0.6,,Version 0.5,,Version 0.4,,Version 0.3,,Configuration Support,,Logging Integration,,Categories for Flash Messages,,,,,,,Navigation,,,Overview,,,Previous:,Pocoo Styleguide,,Next:,Flask Changelog,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Upgrading to Newer Releases", "url": "http://flask.pocoo.org/docs/1.0/upgrading/", "content": ",,,,,Upgrading to Newer Releases \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,,,,,,,,Upgrading to Newer Releases,\u00b6,,Flask itself is changing like any software is changing over time.  Most of\nthe changes are the nice kind, the kind where you don\u2019t have to change\nanything in your code to profit from a new release.,,However every once in a while there are changes that do require some\nchanges in your code or there are changes that make it possible for you to\nimprove your own code quality by taking advantage of new features in\nFlask.,,This section of the documentation enumerates all the changes in Flask from\nrelease to release and how you can change your code to have a painless\nupdating experience.,,Use the,pip,command to upgrade your existing Flask installation by\nproviding the,--upgrade,parameter:,,$ pip install --upgrade Flask,,,,Version 0.12,\u00b6,,,Changes to send_file,\u00b6,,The,filename,is no longer automatically inferred from file-like objects.\nThis means that the following code will no longer automatically have,X-Sendfile,support, etag generation or MIME-type guessing:,,response,,=,,send_file,(,open,(,'/path/to/file.txt',)),,,,Any of the following is functionally equivalent:,,fname,,=,,'/path/to/file.txt',,# Just pass the filepath directly,,response,,=,,send_file,(,fname,),,# Set the MIME-type and ETag explicitly,,response,,=,,send_file,(,open,(,fname,),,,mimetype,=,'text/plain',),,response,.,set_etag,(,...,),,# Set `attachment_filename` for MIME-type guessing,,# ETag still needs to be manually set,,response,,=,,send_file,(,open,(,fname,),,,attachment_filename,=,fname,),,response,.,set_etag,(,...,),,,,The reason for this is that some file-like objects have an invalid or even\nmisleading,name,attribute. Silently swallowing errors in such cases was not\na satisfying solution.,,Additionally the default of falling back to,application/octet-stream,has\nbeen restricted. If Flask can\u2019t guess one or the user didn\u2019t provide one, the\nfunction fails if no filename information was provided.,,,,,Version 0.11,\u00b6,,0.11 is an odd release in the Flask release cycle because it was supposed\nto be the 1.0 release.  However because there was such a long lead time up\nto the release we decided to push out a 0.11 release first with some\nchanges removed to make the transition easier.  If you have been tracking\nthe master branch which was 1.0 you might see some unexpected changes.,,In case you did track the master branch you will notice that,flask --app,is removed now.  You need to use the environment variable to specify an\napplication.,,,Debugging,\u00b6,,Flask 0.11 removed the,debug_log_format,attribute from Flask\napplications.  Instead the new,LOGGER_HANDLER_POLICY,configuration can\nbe used to disable the default log handlers and custom log handlers can be\nset up.,,,,Error handling,\u00b6,,The behavior of error handlers was changed.\nThe precedence of handlers used to be based on the decoration/call order of,errorhandler(),and,register_error_handler(),, respectively.\nNow the inheritance hierarchy takes precedence and handlers for more\nspecific exception classes are executed instead of more general ones.\nSee,Error handlers,for specifics.,,Trying to register a handler on an instance now raises,ValueError,.,,,Note,,There used to be a logic error allowing you to register handlers\nonly for exception,instances,. This was unintended and plain wrong,\nand therefore was replaced with the intended behavior of registering\nhandlers only using exception classes and HTTP error codes.,,,,,Templating,\u00b6,,The,render_template_string(),function has changed to\nautoescape template variables by default. This better matches the behavior\nof,render_template(),.,,,,Extension imports,\u00b6,,Extension imports of the form,flask.ext.foo,are deprecated, you should use,flask_foo,.,,The old form still works, but Flask will issue a,flask.exthook.ExtDeprecationWarning,for each extension you import the old\nway. We also provide a migration utility called,flask-ext-migrate,that is supposed to\nautomatically rewrite your imports for this.,,,,,Version 0.10,\u00b6,,The biggest change going from 0.9 to 0.10 is that the cookie serialization\nformat changed from pickle to a specialized JSON format.  This change has\nbeen done in order to avoid the damage an attacker can do if the secret\nkey is leaked.  When you upgrade you will notice two major changes: all\nsessions that were issued before the upgrade are invalidated and you can\nonly store a limited amount of types in the session.  The new sessions are\nby design much more restricted to only allow JSON with a few small\nextensions for tuples and strings with HTML markup.,,In order to not break people\u2019s sessions it is possible to continue using\nthe old session system by using the,Flask-OldSessions,extension.,,Flask also started storing the,flask.g,object on the application\ncontext instead of the request context.  This change should be transparent\nfor you but it means that you now can store things on the,g,object\nwhen there is no request context yet but an application context.  The old,flask.Flask.request_globals_class,attribute was renamed to,flask.Flask.app_ctx_globals_class,.,,,,Version 0.9,\u00b6,,The behavior of returning tuples from a function was simplified.  If you\nreturn a tuple it no longer defines the arguments for the response object\nyou\u2019re creating, it\u2019s now always a tuple in the form,(response,,,status,,,headers),where at least one item has to be provided.  If you depend on\nthe old behavior, you can add it easily by subclassing Flask:,,class,,TraditionalFlask,(,Flask,):,,def,,make_response,(,self,,,,rv,):,,if,,isinstance,(,rv,,,,tuple,):,,return,,self,.,response_class,(,*,rv,),,return,,Flask,.,make_response,(,self,,,,rv,),,,,If you maintain an extension that was using,_request_ctx_stack,before, please consider changing to,_app_ctx_stack,if it makes\nsense for your extension.  For instance, the app context stack makes sense for\nextensions which connect to databases.  Using the app context stack instead of\nthe request context stack will make extensions more readily handle use cases\noutside of requests.,,,,Version 0.8,\u00b6,,Flask introduced a new session interface system.  We also noticed that\nthere was a naming collision between,flask.session,the module that\nimplements sessions and,flask.session,which is the global session\nobject.  With that introduction we moved the implementation details for\nthe session system into a new module called,flask.sessions,.  If you\nused the previously undocumented session support we urge you to upgrade.,,If invalid JSON data was submitted Flask will now raise a,BadRequest,exception instead of letting the\ndefault,ValueError,bubble up.  This has the advantage that you no\nlonger have to handle that error to avoid an internal server error showing\nup for the user.  If you were catching this down explicitly in the past\nas,ValueError,you will need to change this.,,Due to a bug in the test client Flask 0.7 did not trigger teardown\nhandlers when the test client was used in a with statement.  This was\nsince fixed but might require some changes in your test suites if you\nrelied on this behavior.,,,,Version 0.7,\u00b6,,In Flask 0.7 we cleaned up the code base internally a lot and did some\nbackwards incompatible changes that make it easier to implement larger\napplications with Flask.  Because we want to make upgrading as easy as\npossible we tried to counter the problems arising from these changes by\nproviding a script that can ease the transition.,,The script scans your whole application and generates a unified diff with\nchanges it assumes are safe to apply.  However as this is an automated\ntool it won\u2019t be able to find all use cases and it might miss some.  We\ninternally spread a lot of deprecation warnings all over the place to make\nit easy to find pieces of code that it was unable to upgrade.,,We strongly recommend that you hand review the generated patchfile and\nonly apply the chunks that look good.,,If you are using git as version control system for your project we\nrecommend applying the patch with,path,,-p1,,<,,patchfile.diff,and then\nusing the interactive commit feature to only apply the chunks that look\ngood.,,To apply the upgrade script do the following:,,,Download the script:,flask-07-upgrade.py,,,Run it in the directory of your application:,,python,,flask,-,07,-,upgrade,.,py,,>,,patchfile,.,diff,,,,,Review the generated patchfile.,,,Apply the patch:,,patch,,-,p1,,<,,patchfile,.,diff,,,,,If you were using per-module template folders you need to move some\ntemplates around.  Previously if you had a folder named,templates,next to a blueprint named,admin,the implicit template path\nautomatically was,admin/index.html,for a template file called,templates/index.html,.  This no longer is the case.  Now you need\nto name the template,templates/admin/index.html,.  The tool will\nnot detect this so you will have to do that on your own.,,,,Please note that deprecation warnings are disabled by default starting\nwith Python 2.7.  In order to see the deprecation warnings that might be\nemitted you have to enabled them with the,warnings,module.,,If you are working with windows and you lack the,patch,command line\nutility you can get it as part of various Unix runtime environments for\nwindows including cygwin, msysgit or ming32.  Also source control systems\nlike svn, hg or git have builtin support for applying unified diffs as\ngenerated by the tool.  Check the manual of your version control system\nfor more information.,,,Bug in Request Locals,\u00b6,,Due to a bug in earlier implementations the request local proxies now\nraise a,RuntimeError,instead of an,AttributeError,when they\nare unbound.  If you caught these exceptions with,AttributeError,before, you should catch them with,RuntimeError,now.,,Additionally the,send_file(),function is now issuing\ndeprecation warnings if you depend on functionality that will be removed\nin Flask 0.11.  Previously it was possible to use etags and mimetypes\nwhen file objects were passed.  This was unreliable and caused issues\nfor a few setups.  If you get a deprecation warning, make sure to\nupdate your application to work with either filenames there or disable\netag attaching and attach them yourself.,,Old code:,,return,,send_file,(,my_file_object,),,return,,send_file,(,my_file_object,),,,,New code:,,return,,send_file,(,my_file_object,,,,add_etags,=,False,),,,,,,Upgrading to new Teardown Handling,\u00b6,,We streamlined the behavior of the callbacks for request handling.  For\nthings that modify the response the,after_request(),decorators continue to work as expected, but for things that absolutely\nmust happen at the end of request we introduced the new,teardown_request(),decorator.  Unfortunately that\nchange also made after-request work differently under error conditions.\nIt\u2019s not consistently skipped if exceptions happen whereas previously it\nmight have been called twice to ensure it is executed at the end of the\nrequest.,,If you have database connection code that looks like this:,,@app,.,after_request,,def,,after_request,(,response,):,,g,.,db,.,close,(),,return,,response,,,,You are now encouraged to use this instead:,,@app,.,teardown_request,,def,,after_request,(,exception,):,,if,,hasattr,(,g,,,,'db',):,,g,.,db,.,close,(),,,,On the upside this change greatly improves the internal code flow and\nmakes it easier to customize the dispatching and error handling.  This\nmakes it now a lot easier to write unit tests as you can prevent closing\ndown of database connections for a while.  You can take advantage of the\nfact that the teardown callbacks are called when the response context is\nremoved from the stack so a test can query the database after request\nhandling:,,with,,app,.,test_client,(),,as,,client,:,,resp,,=,,client,.,get,(,'/',),,# g.db is still bound if there is such a thing,,# and here it's gone,,,,,,Manual Error Handler Attaching,\u00b6,,While it is still possible to attach error handlers to,Flask.error_handlers,it\u2019s discouraged to do so and in fact\ndeprecated.  In general we no longer recommend custom error handler\nattaching via assignments to the underlying dictionary due to the more\ncomplex internal handling to support arbitrary exception classes and\nblueprints.  See,Flask.errorhandler(),for more information.,,The proper upgrade is to change this:,,app,.,error_handlers,[,403,],,=,,handle_error,,,,Into this:,,app,.,register_error_handler,(,403,,,,handle_error,),,,,Alternatively you should just attach the function with a decorator:,,@app,.,errorhandler,(,403,),,def,,handle_error,(,e,):,,...,,,,(Note that,register_error_handler(),is new in Flask 0.7),,,,Blueprint Support,\u00b6,,Blueprints replace the previous concept of \u201cModules\u201d in Flask.  They\nprovide better semantics for various features and work better with large\napplications.  The update script provided should be able to upgrade your\napplications automatically, but there might be some cases where it fails\nto upgrade.  What changed?,,,Blueprints need explicit names.  Modules had an automatic name\nguessing scheme where the shortname for the module was taken from the\nlast part of the import module.  The upgrade script tries to guess\nthat name but it might fail as this information could change at\nruntime.,,Blueprints have an inverse behavior for,url_for(),.  Previously,.foo,told,url_for(),that it should look for the endpoint,foo,on the application.  Now it means \u201crelative to current module\u201d.\nThe script will inverse all calls to,url_for(),automatically for\nyou.  It will do this in a very eager way so you might end up with\nsome unnecessary leading dots in your code if you\u2019re not using\nmodules.,,Blueprints do not automatically provide static folders.  They will\nalso no longer automatically export templates from a folder called,templates,next to their location however but it can be enabled from\nthe constructor.  Same with static files: if you want to continue\nserving static files you need to tell the constructor explicitly the\npath to the static folder (which can be relative to the blueprint\u2019s\nmodule path).,,Rendering templates was simplified.  Now the blueprints can provide\ntemplate folders which are added to a general template searchpath.\nThis means that you need to add another subfolder with the blueprint\u2019s\nname into that folder if you want,blueprintname/template.html,as\nthe template name.,,,If you continue to use the,Module,object which is deprecated, Flask will\nrestore the previous behavior as good as possible.  However we strongly\nrecommend upgrading to the new blueprints as they provide a lot of useful\nimprovement such as the ability to attach a blueprint multiple times,\nblueprint specific error handlers and a lot more.,,,,,Version 0.6,\u00b6,,Flask 0.6 comes with a backwards incompatible change which affects the\norder of after-request handlers.  Previously they were called in the order\nof the registration, now they are called in reverse order.  This change\nwas made so that Flask behaves more like people expected it to work and\nhow other systems handle request pre- and post-processing.  If you\ndepend on the order of execution of post-request functions, be sure to\nchange the order.,,Another change that breaks backwards compatibility is that context\nprocessors will no longer override values passed directly to the template\nrendering function.  If for example,request,is as variable passed\ndirectly to the template, the default context processor will not override\nit with the current request object.  This makes it easier to extend\ncontext processors later to inject additional variables without breaking\nexisting template not expecting them.,,,,Version 0.5,\u00b6,,Flask 0.5 is the first release that comes as a Python package instead of a\nsingle module.  There were a couple of internal refactoring so if you\ndepend on undocumented internal details you probably have to adapt the\nimports.,,The following changes may be relevant to your application:,,,autoescaping no longer happens for all templates.  Instead it is\nconfigured to only happen on files ending with,.html,,,.htm,,,.xml,and,.xhtml,.  If you have templates with different\nextensions you should override the,select_jinja_autoescape(),method.,,Flask no longer supports zipped applications in this release.  This\nfunctionality might come back in future releases if there is demand\nfor this feature.  Removing support for this makes the Flask internal\ncode easier to understand and fixes a couple of small issues that make\ndebugging harder than necessary.,,The,create_jinja_loader,function is gone.  If you want to customize\nthe Jinja loader now, use the,create_jinja_environment(),method instead.,,,,,Version 0.4,\u00b6,,For application developers there are no changes that require changes in\nyour code.  In case you are developing on a Flask extension however, and\nthat extension has a unittest-mode you might want to link the activation\nof that mode to the new,TESTING,flag.,,,,Version 0.3,\u00b6,,Flask 0.3 introduces configuration support and logging as well as\ncategories for flashing messages.  All these are features that are 100%\nbackwards compatible but you might want to take advantage of them.,,,Configuration Support,\u00b6,,The configuration support makes it easier to write any kind of application\nthat requires some sort of configuration.  (Which most likely is the case\nfor any application out there).,,If you previously had code like this:,,app,.,debug,,=,,DEBUG,,app,.,secret_key,,=,,SECRET_KEY,,,,You no longer have to do that, instead you can just load a configuration\ninto the config object.  How this works is outlined in,Configuration Handling,.,,,,Logging Integration,\u00b6,,Flask now configures a logger for you with some basic and useful defaults.\nIf you run your application in production and want to profit from\nautomatic error logging, you might be interested in attaching a proper log\nhandler.  Also you can start logging warnings and errors into the logger\nwhen appropriately.  For more information on that, read,Application Errors,.,,,,Categories for Flash Messages,\u00b6,,Flash messages can now have categories attached.  This makes it possible\nto render errors, warnings or regular messages differently for example.\nThis is an opt-in feature because it requires some rethinking in the code.,,Read all about that in the,Message Flashing,pattern.,,,,,,,,,,,,,,Contents,,,Upgrading to Newer Releases,,Version 0.12,,Changes to send_file,,,,Version 0.11,,Debugging,,Error handling,,Templating,,Extension imports,,,,Version 0.10,,Version 0.9,,Version 0.8,,Version 0.7,,Bug in Request Locals,,Upgrading to new Teardown Handling,,Manual Error Handler Attaching,,Blueprint Support,,,,Version 0.6,,Version 0.5,,Version 0.4,,Version 0.3,,Configuration Support,,Logging Integration,,Categories for Flash Messages,,,,,,,Navigation,,,Overview,,,Previous:,Pocoo Styleguide,,Next:,Flask Changelog,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Modular Applications with Blueprints", "url": "http://flask.pocoo.org/docs/dev/blueprints/", "content": ",,,,,Modular Applications with Blueprints \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,Modular Applications with Blueprints,\u00b6,,,Changelog,,New in version 0.7.,,,Flask uses a concept of,blueprints,for making application components and\nsupporting common patterns within an application or across applications.\nBlueprints can greatly simplify how large applications work and provide a\ncentral means for Flask extensions to register operations on applications.\nA,Blueprint,object works similarly to a,Flask,application object, but it is not actually an application.  Rather it is a,blueprint,of how to construct or extend an application.,,,Why Blueprints?,\u00b6,,Blueprints in Flask are intended for these cases:,,,Factor an application into a set of blueprints.  This is ideal for\nlarger applications; a project could instantiate an application object,\ninitialize several extensions, and register a collection of blueprints.,,Register a blueprint on an application at a URL prefix and/or subdomain.\nParameters in the URL prefix/subdomain become common view arguments\n(with defaults) across all view functions in the blueprint.,,Register a blueprint multiple times on an application with different URL\nrules.,,Provide template filters, static files, templates, and other utilities\nthrough blueprints.  A blueprint does not have to implement applications\nor view functions.,,Register a blueprint on an application for any of these cases when\ninitializing a Flask extension.,,,A blueprint in Flask is not a pluggable app because it is not actually an\napplication \u2013 it\u2019s a set of operations which can be registered on an\napplication, even multiple times.  Why not have multiple application\nobjects?  You can do that (see,Application Dispatching,), but your applications\nwill have separate configs and will be managed at the WSGI layer.,,Blueprints instead provide separation at the Flask level, share\napplication config, and can change an application object as necessary with\nbeing registered. The downside is that you cannot unregister a blueprint\nonce an application was created without having to destroy the whole\napplication object.,,,,The Concept of Blueprints,\u00b6,,The basic concept of blueprints is that they record operations to execute\nwhen registered on an application.  Flask associates view functions with\nblueprints when dispatching requests and generating URLs from one endpoint\nto another.,,,,My First Blueprint,\u00b6,,This is what a very basic blueprint looks like.  In this case we want to\nimplement a blueprint that does simple rendering of static templates:,,from,,flask,,import,,Blueprint,,,,render_template,,,,abort,,from,,jinja2,,import,,TemplateNotFound,,simple_page,,=,,Blueprint,(,'simple_page',,,,__name__,,,,template_folder,=,'templates',),,@simple_page,.,route,(,'/',,,,defaults,=,{,'page',:,,'index',}),,@simple_page,.,route,(,'/<page>',),,def,,show,(,page,):,,try,:,,return,,render_template,(,'pages/,%s,.html',,%,,page,),,except,,TemplateNotFound,:,,abort,(,404,),,,,When you bind a function with the help of the,@simple_page.route,decorator the blueprint will record the intention of registering the\nfunction,show,on the application when it\u2019s later registered.\nAdditionally it will prefix the endpoint of the function with the\nname of the blueprint which was given to the,Blueprint,constructor (in this case also,simple_page,).,,,,Registering Blueprints,\u00b6,,So how do you register that blueprint?  Like this:,,from,,flask,,import,,Flask,,from,,yourapplication.simple_page,,import,,simple_page,,app,,=,,Flask,(,__name__,),,app,.,register_blueprint,(,simple_page,),,,,If you check the rules registered on the application, you will find\nthese:,,[,<,Rule,,'/static/<filename>',,(,HEAD,,,,OPTIONS,,,,GET,),,->,,static,>,,,,<,Rule,,'/<page>',,(,HEAD,,,,OPTIONS,,,,GET,),,->,,simple_page,.,show,>,,,,<,Rule,,'/',,(,HEAD,,,,OPTIONS,,,,GET,),,->,,simple_page,.,show,>,],,,,The first one is obviously from the application itself for the static\nfiles.  The other two are for the,show,function of the,simple_page,blueprint.  As you can see, they are also prefixed with the name of the\nblueprint and separated by a dot (,.,).,,Blueprints however can also be mounted at different locations:,,app,.,register_blueprint,(,simple_page,,,,url_prefix,=,'/pages',),,,,And sure enough, these are the generated rules:,,[,<,Rule,,'/static/<filename>',,(,HEAD,,,,OPTIONS,,,,GET,),,->,,static,>,,,,<,Rule,,'/pages/<page>',,(,HEAD,,,,OPTIONS,,,,GET,),,->,,simple_page,.,show,>,,,,<,Rule,,'/pages/',,(,HEAD,,,,OPTIONS,,,,GET,),,->,,simple_page,.,show,>,],,,,On top of that you can register blueprints multiple times though not every\nblueprint might respond properly to that.  In fact it depends on how the\nblueprint is implemented if it can be mounted more than once.,,,,Blueprint Resources,\u00b6,,Blueprints can provide resources as well.  Sometimes you might want to\nintroduce a blueprint only for the resources it provides.,,,Blueprint Resource Folder,\u00b6,,Like for regular applications, blueprints are considered to be contained\nin a folder.  While multiple blueprints can originate from the same folder,\nit does not have to be the case and it\u2019s usually not recommended.,,The folder is inferred from the second argument to,Blueprint,which\nis usually,__name__,.  This argument specifies what logical Python\nmodule or package corresponds to the blueprint.  If it points to an actual\nPython package that package (which is a folder on the filesystem) is the\nresource folder.  If it\u2019s a module, the package the module is contained in\nwill be the resource folder.  You can access the,Blueprint.root_path,property to see what the resource folder is:,,>>>,simple_page,.,root_path,,'/Users/username/TestProject/yourapplication',,,,To quickly open sources from this folder you can use the,open_resource(),function:,,with,,simple_page,.,open_resource,(,'static/style.css',),,as,,f,:,,code,,=,,f,.,read,(),,,,,,Static Files,\u00b6,,A blueprint can expose a folder with static files by providing the path\nto the folder on the filesystem with the,static_folder,argument.\nIt is either an absolute path or relative to the blueprint\u2019s location:,,admin,,=,,Blueprint,(,'admin',,,,__name__,,,,static_folder,=,'static',),,,,By default the rightmost part of the path is where it is exposed on the\nweb. This can be changed with the,static_url_path,argument. Because the\nfolder is called,static,here it will be available at the,url_prefix,of the blueprint +,/static,. If the blueprint\nhas the prefix,/admin,, the static URL will be,/admin/static,.,,The endpoint is named,blueprint_name.static,. You can generate URLs\nto it with,url_for(),like you would with the static folder of the\napplication:,,url_for,(,'admin.static',,,,filename,=,'style.css',),,,,However, if the blueprint does not have a,url_prefix,, it is not\npossible to access the blueprint\u2019s static folder. This is because the\nURL would be,/static,in this case, and the application\u2019s,/static,route takes precedence. Unlike template folders, blueprint static\nfolders are not searched if the file does not exist in the application\nstatic folder.,,,,Templates,\u00b6,,If you want the blueprint to expose templates you can do that by providing\nthe,template_folder,parameter to the,Blueprint,constructor:,,admin,,=,,Blueprint,(,'admin',,,,__name__,,,,template_folder,=,'templates',),,,,For static files, the path can be absolute or relative to the blueprint\nresource folder.,,The template folder is added to the search path of templates but with a lower\npriority than the actual application\u2019s template folder. That way you can\neasily override templates that a blueprint provides in the actual application.\nThis also means that if you don\u2019t want a blueprint template to be accidentally\noverridden, make sure that no other blueprint or actual application template\nhas the same relative path. When multiple blueprints provide the same relative\ntemplate path the first blueprint registered takes precedence over the others.,,So if you have a blueprint in the folder,yourapplication/admin,and you\nwant to render the template,'admin/index.html',and you have provided,templates,as a,template_folder,you will have to create a file like\nthis:,yourapplication/admin/templates/admin/index.html,. The reason\nfor the extra,admin,folder is to avoid getting our template overridden\nby a template named,index.html,in the actual application template\nfolder.,,To further reiterate this: if you have a blueprint named,admin,and you\nwant to render a template called,index.html,which is specific to this\nblueprint, the best idea is to lay out your templates like this:,,yourpackage,/,,blueprints,/,,admin,/,,templates,/,,admin,/,,index,.,html,,__init__,.,py,,,,And then when you want to render the template, use,admin/index.html,as\nthe name to look up the template by.  If you encounter problems loading\nthe correct templates enable the,EXPLAIN_TEMPLATE_LOADING,config\nvariable which will instruct Flask to print out the steps it goes through\nto locate templates on every,render_template,call.,,,,,Building URLs,\u00b6,,If you want to link from one page to another you can use the,url_for(),function just like you normally would do just that you\nprefix the URL endpoint with the name of the blueprint and a dot (,.,):,,url_for,(,'admin.index',),,,,Additionally if you are in a view function of a blueprint or a rendered\ntemplate and you want to link to another endpoint of the same blueprint,\nyou can use relative redirects by prefixing the endpoint with a dot only:,,url_for,(,'.index',),,,,This will link to,admin.index,for instance in case the current request\nwas dispatched to any other admin blueprint endpoint.,,,,Error Handlers,\u00b6,,Blueprints support the errorhandler decorator just like the,Flask,application object, so it is easy to make Blueprint-specific custom error\npages.,,Here is an example for a \u201c404 Page Not Found\u201d exception:,,@simple_page,.,errorhandler,(,404,),,def,,page_not_found,(,e,):,,return,,render_template,(,'pages/404.html',),,,,Most errorhandlers will simply work as expected; however, there is a caveat\nconcerning handlers for 404 and 405 exceptions.  These errorhandlers are only\ninvoked from an appropriate,raise,statement or a call to,abort,in another\nof the blueprint\u2019s view functions; they are not invoked by, e.g., an invalid URL\naccess.  This is because the blueprint does not \u201cown\u201d a certain URL space, so\nthe application instance has no way of knowing which blueprint errorhandler it\nshould run if given an invalid URL.  If you would like to execute different\nhandling strategies for these errors based on URL prefixes, they may be defined\nat the application level using the,request,proxy object:,,@app,.,errorhandler,(,404,),,@app,.,errorhandler,(,405,),,def,,_handle_api_error,(,ex,):,,if,,request,.,path,.,startswith,(,'/api/',):,,return,,jsonify_error,(,ex,),,else,:,,return,,ex,,,,More information on error handling see,Custom Error Pages,.,,,,,,,,,,,,,Contents,,,Modular Applications with Blueprints,,Why Blueprints?,,The Concept of Blueprints,,My First Blueprint,,Registering Blueprints,,Blueprint Resources,,Blueprint Resource Folder,,Static Files,,Templates,,,,Building URLs,,Error Handlers,,,,,Navigation,,,Overview,,,Previous:,The Request Context,,Next:,Extensions,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "The Request Context", "url": "http://flask.pocoo.org/docs/dev/reqcontext/", "content": ",,,,,The Request Context \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,The Request Context,\u00b6,,The request context keeps track of the request-level data during a\nrequest. Rather than passing the request object to each function that\nruns during a request, the,request,and,session,proxies\nare accessed instead.,,This is similar to the,The Application Context,, which keeps track of the\napplication-level data independent of a request. A corresponding\napplication context is pushed when a request context is pushed.,,,Purpose of the Context,\u00b6,,When the,Flask,application handles a request, it creates a,Request,object based on the environment it received from the\nWSGI server. Because a,worker,(thread, process, or coroutine depending\non the server) handles only one request at a time, the request data can\nbe considered global to that worker during that request. Flask uses the\nterm,context local,for this.,,Flask automatically,pushes,a request context when handling a request.\nView functions, error handlers, and other functions that run during a\nrequest will have access to the,request,proxy, which points to\nthe request object for the current request.,,,,Lifetime of the Context,\u00b6,,When a Flask application begins handling a request, it pushes a request\ncontext, which also pushes an,The Application Context,. When the request ends\nit pops the request context then the application context.,,The context is unique to each thread (or other worker type).,request,cannot be passed to another thread, the other thread\nwill have a different context stack and will not know about the request\nthe parent thread was pointing to.,,Context locals are implemented in Werkzeug. See,Context Locals,for more information on how this works internally.,,,,Manually Push a Context,\u00b6,,If you try to access,request,, or anything that uses it, outside\na request context, you\u2019ll get this error message:,,RuntimeError: Working outside of request context.,,This typically means that you attempted to use functionality that,,needed an active HTTP request. Consult the documentation on testing,,for information about how to avoid this problem.,,,,This should typically only happen when testing code that expects an\nactive request. One option is to use the,test,,client,to simulate a full request. Or\nyou can use,test_request_context(),in a,with,block, and\neverything that runs in the block will have access to,request,,\npopulated with your test data.,,def,,generate_report,(,year,):,,format,,=,,request,.,args,.,get,(,'format',),,...,,with,,app,.,test_request_context,(,,'/make_report/2017',,,,data,=,{,'format',:,,'short',}):,,generate_report,(),,,,If you see that error somewhere else in your code not related to\ntesting, it most likely indicates that you should move that code into a\nview function.,,For information on how to use the request context from the interactive\nPython shell, see,Working with the Shell,.,,,,How the Context Works,\u00b6,,The,Flask.wsgi_app(),method is called to handle each request. It\nmanages the contexts during the request. Internally, the request and\napplication contexts work as stacks,,_request_ctx_stack,and,_app_ctx_stack,. When contexts are pushed onto the stack, the\nproxies that depend on them are available and point at information from\nthe top context on the stack.,,When the request starts, a,RequestContext,is created and\npushed, which creates and pushes an,AppContext,first if\na context for that application is not already the top context. While\nthese contexts are pushed, the,current_app,,,g,,,request,, and,session,proxies are available to the\noriginal thread handling the request.,,Because the contexts are stacks, other contexts may be pushed to change\nthe proxies during a request. While this is not a common pattern, it\ncan be used in advanced applications to, for example, do internal\nredirects or chain different applications together.,,After the request is dispatched and a response is generated and sent,\nthe request context is popped, which then pops the application context.\nImmediately before they are popped, the,teardown_request(),and,teardown_appcontext(),functions are are executed. These\nexecute even if an unhandled exception occurred during dispatch.,,,,Callbacks and Errors,\u00b6,,Flask dispatches a request in multiple stages which can affect the\nrequest, response, and how errors are handled. The contexts are active\nduring all of these stages.,,A,Blueprint,can add handlers for these events that are specific\nto the blueprint. The handlers for a blueprint will run if the blueprint\nowns the route that matches the request.,,,Before each request,,before_request(),functions are\ncalled. If one of these functions return a value, the other\nfunctions are skipped. The return value is treated as the response\nand the view function is not called.,,If the,before_request(),functions did not return a\nresponse, the view function for the matched route is called and\nreturns a response.,,The return value of the view is converted into an actual response\nobject and passed to the,after_request(),functions. Each function returns a modified or new response object.,,After the response is returned, the contexts are popped, which calls\nthe,teardown_request(),and,teardown_appcontext(),functions. These functions are\ncalled even if an unhandled exception was raised at any point above.,,,If an exception is raised before the teardown functions, Flask tries to\nmatch it with an,errorhandler(),function to handle the\nexception and return a response. If no error handler is found, or the\nhandler itself raises an exception, Flask returns a generic,500,,Internal,,Server,,Error,response. The teardown functions are still\ncalled, and are passed the exception object.,,If debug mode is enabled, unhandled exceptions are not converted to a,500,response and instead are propagated to the WSGI server. This\nallows the development server to present the interactive debugger with\nthe traceback.,,,Teardown Callbacks,\u00b6,,The teardown callbacks are independent of the request dispatch, and are\ninstead called by the contexts when they are popped. The functions are\ncalled even if there is an unhandled exception during dispatch, and for\nmanually pushed contexts. This means there is no guarantee that any\nother parts of the request dispatch have run first. Be sure to write\nthese functions in a way that does not depend on other callbacks and\nwill not fail.,,During testing, it can be useful to defer popping the contexts after the\nrequest ends, so that their data can be accessed in the test function.\nUsing the,test_client(),as a,with,block to preserve the\ncontexts until the with block exits.,,from,,flask,,import,,Flask,,,,request,,app,,=,,Flask,(,__name__,),,@app.route,(,'/',),,def,,hello,():,,print,(,'during view',),,return,,'Hello, World!',,@app.teardown_request,,def,,show_teardown,(,exception,):,,print,(,'after with block',),,with,,app,.,test_request_context,():,,print,(,'during with block',),,# teardown functions are called after the context with block exits,,with,,app,.,test_client,():,,client,.,get,(,'/',),,# the contexts are not popped even though the request ended,,print,(,request,.,path,),,# the contexts are popped and teardown functions are called after,,# the client with block exists,,,,,,Signals,\u00b6,,If,signals_available,is true, the following signals are\nsent:,,,request_started,is sent before the,before_request(),functions are called.,,request_finished,is sent after the,after_request(),functions are called.,,got_request_exception,is sent when an exception begins to\nbe handled, but before an,errorhandler(),is looked up or\ncalled.,,request_tearing_down,is sent after the,teardown_request(),functions are called.,,,,,,Context Preservation on Error,\u00b6,,At the end of a request, the request context is popped and all data\nassociated with it is destroyed. If an error occurs during development,\nit is useful to delay destroying the data for debugging purposes.,,When the development server is running in development mode (the,FLASK_ENV,environment variable is set to,'development',), the\nerror and data will be preserved and shown in the interactive debugger.,,This behavior can be controlled with the,PRESERVE_CONTEXT_ON_EXCEPTION,config. As described above, it\ndefaults to,True,in the development environment.,,Do not enable,PRESERVE_CONTEXT_ON_EXCEPTION,in production, as it\nwill cause your application to leak memory on exceptions.,,,,Notes On Proxies,\u00b6,,Some of the objects provided by Flask are proxies to other objects. The\nproxies are accessed in the same way for each worker thread, but\npoint to the unique object bound to each worker behind the scenes as\ndescribed on this page.,,Most of the time you don\u2019t have to care about that, but there are some\nexceptions where it is good to know that this object is an actual proxy:,,,The proxy objects cannot fake their type as the actual object types.\nIf you want to perform instance checks, you have to do that on the\nobject being proxied.,,If the specific object reference is important, for example for\nsending,Signals,or passing data to a background thread.,,,If you need to access the underlying object that is proxied, use the,_get_current_object(),method:,,app,,=,,current_app,.,_get_current_object,(),,my_signal,.,send,(,app,),,,,,,,,,,,,,,,Contents,,,The Request Context,,Purpose of the Context,,Lifetime of the Context,,Manually Push a Context,,How the Context Works,,Callbacks and Errors,,Teardown Callbacks,,Signals,,,,Context Preservation on Error,,Notes On Proxies,,,,,Navigation,,,Overview,,,Previous:,The Application Context,,Next:,Modular Applications with Blueprints,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "The Application Context", "url": "http://flask.pocoo.org/docs/dev/appcontext/", "content": ",,,,,The Application Context \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,The Application Context,\u00b6,,The application context keeps track of the application-level data during\na request, CLI command, or other activity. Rather than passing the\napplication around to each function, the,current_app,and,g,proxies are accessed instead.,,This is similar to the,The Request Context,, which keeps track of\nrequest-level data during a request. A corresponding application context\nis pushed when a request context is pushed.,,,Purpose of the Context,\u00b6,,The,Flask,application object has attributes, such as,config,, that are useful to access within views and,CLI commands,. However, importing the,app,instance\nwithin the modules in your project is prone to circular import issues.\nWhen using the,app factory pattern,or\nwriting reusable,blueprints,or,extensions,there won\u2019t be an,app,instance to\nimport at all.,,Flask solves this issue with the,application context,. Rather than\nreferring to an,app,directly, you use the the,current_app,proxy, which points to the application handling the current activity.,,Flask automatically,pushes,an application context when handling a\nrequest. View functions, error handlers, and other functions that run\nduring a request will have access to,current_app,.,,Flask will also automatically push an app context when running CLI\ncommands registered with,Flask.cli,using,@app.cli.command(),.,,,,Lifetime of the Context,\u00b6,,The application context is created and destroyed as necessary. When a\nFlask application begins handling a request, it pushes an application\ncontext and a,request context,. When the request\nends it pops the request context then the application context.\nTypically, an application context will have the same lifetime as a\nrequest.,,See,The Request Context,for more information about how the contexts work\nand the full lifecycle of a request.,,,,Manually Push a Context,\u00b6,,If you try to access,current_app,, or anything that uses it,\noutside an application context, you\u2019ll get this error message:,,RuntimeError: Working outside of application context.,,This typically means that you attempted to use functionality that,,needed to interface with the current application object in some way.,,To solve this, set up an application context with app.app_context().,,,,If you see that error while configuring your application, such as when\ninitializing an extension, you can push a context manually since you\nhave direct access to the,app,. Use,app_context(),in a,with,block, and everything that runs in the block will have access\nto,current_app,.,,def,,create_app,():,,app,,=,,Flask,(,__name__,),,with,,app,.,app_context,():,,init_db,(),,return,,app,,,,If you see that error somewhere else in your code not related to\nconfiguring the application, it most likely indicates that you should\nmove that code into a view function or CLI command.,,,,Storing Data,\u00b6,,The application context is a good place to store common data during a\nrequest or CLI command. Flask provides the,g,,object,for this\npurpose. It is a simple namespace object that has the same lifetime as\nan application context.,,,Note,,The,g,name stands for \u201cglobal\u201d, but that is referring to the\ndata being global,within a context,. The data on,g,is lost\nafter the context ends, and it is not an appropriate place to store\ndata between requests. Use the,session,or a database to\nstore data across requests.,,,A common use for,g,is to manage resources during a request.,,,get_X(),creates resource,X,if it does not exist, caching it\nas,g.X,.,,teardown_X(),closes or otherwise deallocates the resource if it\nexists. It is registered as a,teardown_appcontext(),handler.,,,For example, you can manage a database connection using this pattern:,,from,,flask,,import,,g,,def,,get_db,():,,if,,'db',,not,,in,,g,:,,g,.,db,,=,,connect_to_database,(),,return,,g,.,db,,@app,.,teardown_appcontext,,def,,teardown_db,():,,db,,=,,g,.,pop,(,'db',,,,None,),,if,,db,,is,,not,,None,:,,db,.,close,(),,,,During a request, every call to,get_db(),will return the same\nconnection, and it will be closed automatically at the end of the\nrequest.,,You can use,LocalProxy,to make a new context\nlocal from,get_db(),:,,from,,werkzeug.local,,import,,LocalProxy,,db,,=,,LocalProxy,(,get_db,),,,,Accessing,db,will call,get_db,internally, in the same way that,current_app,works.,,,If you\u2019re writing an extension,,g,should be reserved for user\ncode. You may store internal data on the context itself, but be sure to\nuse a sufficiently unique name. The current context is accessed with,_app_ctx_stack.top,. For more information see,Flask Extension Development,.,,,,Events and Signals,\u00b6,,The application will call functions registered with,teardown_appcontext(),when the application context is\npopped.,,If,signals_available,is true, the following signals are\nsent:,appcontext_pushed,,,appcontext_tearing_down,, and,appcontext_popped,.,,,,,,,,,,,,,Contents,,,The Application Context,,Purpose of the Context,,Lifetime of the Context,,Manually Push a Context,,Storing Data,,Events and Signals,,,,,Navigation,,,Overview,,,Previous:,Pluggable Views,,Next:,The Request Context,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Pluggable Views", "url": "http://flask.pocoo.org/docs/dev/views/", "content": ",,,,,Pluggable Views \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,Pluggable Views,\u00b6,,,Changelog,,New in version 0.7.,,,Flask 0.7 introduces pluggable views inspired by the generic views from\nDjango which are based on classes instead of functions.  The main\nintention is that you can replace parts of the implementations and this\nway have customizable pluggable views.,,,Basic Principle,\u00b6,,Consider you have a function that loads a list of objects from the\ndatabase and renders into a template:,,@app,.,route,(,'/users/',),,def,,show_users,(,page,):,,users,,=,,User,.,query,.,all,(),,return,,render_template,(,'users.html',,,,users,=,users,),,,,This is simple and flexible, but if you want to provide this view in a\ngeneric fashion that can be adapted to other models and templates as well\nyou might want more flexibility.  This is where pluggable class-based\nviews come into place.  As the first step to convert this into a class\nbased view you would do this:,,from,,flask.views,,import,,View,,class,,ShowUsers,(,View,):,,def,,dispatch_request,(,self,):,,users,,=,,User,.,query,.,all,(),,return,,render_template,(,'users.html',,,,objects,=,users,),,app,.,add_url_rule,(,'/users/',,,,view_func,=,ShowUsers,.,as_view,(,'show_users',)),,,,As you can see what you have to do is to create a subclass of,flask.views.View,and implement,dispatch_request(),.  Then we have to convert that\nclass into an actual view function by using the,as_view(),class method.  The string you pass to\nthat function is the name of the endpoint that view will then have.  But\nthis by itself is not helpful, so let\u2019s refactor the code a bit:,,from,,flask.views,,import,,View,,class,,ListView,(,View,):,,def,,get_template_name,(,self,):,,raise,,NotImplementedError,(),,def,,render_template,(,self,,,,context,):,,return,,render_template,(,self,.,get_template_name,(),,,**,context,),,def,,dispatch_request,(,self,):,,context,,=,,{,'objects',:,,self,.,get_objects,()},,return,,self,.,render_template,(,context,),,class,,UserView,(,ListView,):,,def,,get_template_name,(,self,):,,return,,'users.html',,def,,get_objects,(,self,):,,return,,User,.,query,.,all,(),,,,This of course is not that helpful for such a small example, but it\u2019s good\nenough to explain the basic principle.  When you have a class-based view\nthe question comes up what,self,points to.  The way this works is that\nwhenever the request is dispatched a new instance of the class is created\nand the,dispatch_request(),method is called with\nthe parameters from the URL rule.  The class itself is instantiated with\nthe parameters passed to the,as_view(),function.\nFor instance you can write a class like this:,,class,,RenderTemplateView,(,View,):,,def,,__init__,(,self,,,,template_name,):,,self,.,template_name,,=,,template_name,,def,,dispatch_request,(,self,):,,return,,render_template,(,self,.,template_name,),,,,And then you can register it like this:,,app,.,add_url_rule,(,'/about',,,,view_func,=,RenderTemplateView,.,as_view,(,,'about_page',,,,template_name,=,'about.html',)),,,,,,Method Hints,\u00b6,,Pluggable views are attached to the application like a regular function by\neither using,route(),or better,add_url_rule(),.  That however also means that you would\nhave to provide the names of the HTTP methods the view supports when you\nattach this.  In order to move that information to the class you can\nprovide a,methods,attribute that has this\ninformation:,,class,,MyView,(,View,):,,methods,,=,,[,'GET',,,,'POST',],,def,,dispatch_request,(,self,):,,if,,request,.,method,,==,,'POST',:,,...,,...,,app,.,add_url_rule,(,'/myview',,,,view_func,=,MyView,.,as_view,(,'myview',)),,,,,,Method Based Dispatching,\u00b6,,For RESTful APIs it\u2019s especially helpful to execute a different function\nfor each HTTP method.  With the,flask.views.MethodView,you can\neasily do that.  Each HTTP method maps to a function with the same name\n(just in lowercase):,,from,,flask.views,,import,,MethodView,,class,,UserAPI,(,MethodView,):,,def,,get,(,self,):,,users,,=,,User,.,query,.,all,(),,...,,def,,post,(,self,):,,user,,=,,User,.,from_form_data,(,request,.,form,),,...,,app,.,add_url_rule,(,'/users/',,,,view_func,=,UserAPI,.,as_view,(,'users',)),,,,That way you also don\u2019t have to provide the,methods,attribute.  It\u2019s automatically set based\non the methods defined in the class.,,,,Decorating Views,\u00b6,,Since the view class itself is not the view function that is added to the\nrouting system it does not make much sense to decorate the class itself.\nInstead you either have to decorate the return value of,as_view(),by hand:,,def,,user_required,(,f,):,,\"\"\"Checks whether user is logged in or raises error 401.\"\"\",,def,,decorator,(,*,args,,,,**,kwargs,):,,if,,not,,g,.,user,:,,abort,(,401,),,return,,f,(,*,args,,,,**,kwargs,),,return,,decorator,,view,,=,,user_required,(,UserAPI,.,as_view,(,'users',)),,app,.,add_url_rule,(,'/users/',,,,view_func,=,view,),,,,Starting with Flask 0.8 there is also an alternative way where you can\nspecify a list of decorators to apply in the class declaration:,,class,,UserAPI,(,MethodView,):,,decorators,,=,,[,user_required,],,,,Due to the implicit self from the caller\u2019s perspective you cannot use\nregular view decorators on the individual methods of the view however,\nkeep this in mind.,,,,Method Views for APIs,\u00b6,,Web APIs are often working very closely with HTTP verbs so it makes a lot\nof sense to implement such an API based on the,MethodView,.  That said, you will notice that the API\nwill require different URL rules that go to the same method view most of\nthe time.  For instance consider that you are exposing a user object on\nthe web:,,,,,,,,,URL,,Method,,Description,,,/users/,,GET,,Gives a list of all users,,,/users/,,POST,,Creates a new user,,,/users/<id>,,GET,,Shows a single user,,,/users/<id>,,PUT,,Updates a single user,,,/users/<id>,,DELETE,,Deletes a single user,,,,,So how would you go about doing that with the,MethodView,?  The trick is to take advantage of the\nfact that you can provide multiple rules to the same view.,,Let\u2019s assume for the moment the view would look like this:,,class,,UserAPI,(,MethodView,):,,def,,get,(,self,,,,user_id,):,,if,,user_id,,is,,None,:,,# return a list of users,,pass,,else,:,,# expose a single user,,pass,,def,,post,(,self,):,,# create a new user,,pass,,def,,delete,(,self,,,,user_id,):,,# delete a single user,,pass,,def,,put,(,self,,,,user_id,):,,# update a single user,,pass,,,,So how do we hook this up with the routing system?  By adding two rules\nand explicitly mentioning the methods for each:,,user_view,,=,,UserAPI,.,as_view,(,'user_api',),,app,.,add_url_rule,(,'/users/',,,,defaults,=,{,'user_id',:,,None,},,,view_func,=,user_view,,,,methods,=,[,'GET',,]),,app,.,add_url_rule,(,'/users/',,,,view_func,=,user_view,,,,methods,=,[,'POST',,]),,app,.,add_url_rule,(,'/users/<int:user_id>',,,,view_func,=,user_view,,,,methods,=,[,'GET',,,,'PUT',,,,'DELETE',]),,,,If you have a lot of APIs that look similar you can refactor that\nregistration code:,,def,,register_api,(,view,,,,endpoint,,,,url,,,,pk,=,'id',,,,pk_type,=,'int',):,,view_func,,=,,view,.,as_view,(,endpoint,),,app,.,add_url_rule,(,url,,,,defaults,=,{,pk,:,,None,},,,view_func,=,view_func,,,,methods,=,[,'GET',,]),,app,.,add_url_rule,(,url,,,,view_func,=,view_func,,,,methods,=,[,'POST',,]),,app,.,add_url_rule,(,',%s,<,%s,:,%s,>',,%,,(,url,,,,pk_type,,,,pk,),,,view_func,=,view_func,,,,methods,=,[,'GET',,,,'PUT',,,,'DELETE',]),,register_api,(,UserAPI,,,,'user_api',,,,'/users/',,,,pk,=,'user_id',),,,,,,,,,,,,,,,Contents,,,Pluggable Views,,Basic Principle,,Method Hints,,Method Based Dispatching,,Decorating Views,,Method Views for APIs,,,,,Navigation,,,Overview,,,Previous:,Signals,,Next:,The Application Context,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Signals", "url": "http://flask.pocoo.org/docs/dev/signals/", "content": ",,,,,Signals \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,Signals,\u00b6,,,Changelog,,New in version 0.6.,,,Starting with Flask 0.6, there is integrated support for signalling in\nFlask.  This support is provided by the excellent,blinker,library and\nwill gracefully fall back if it is not available.,,What are signals?  Signals help you decouple applications by sending\nnotifications when actions occur elsewhere in the core framework or\nanother Flask extensions.  In short, signals allow certain senders to\nnotify subscribers that something happened.,,Flask comes with a couple of signals and other extensions might provide\nmore.  Also keep in mind that signals are intended to notify subscribers\nand should not encourage subscribers to modify data.  You will notice that\nthere are signals that appear to do the same thing like some of the\nbuiltin decorators do (eg:,request_started,is very similar\nto,before_request(),).  However, there are differences in\nhow they work.  The core,before_request(),handler, for\nexample, is executed in a specific order and is able to abort the request\nearly by returning a response.  In contrast all signal handlers are\nexecuted in undefined order and do not modify any data.,,The big advantage of signals over handlers is that you can safely\nsubscribe to them for just a split second.  These temporary\nsubscriptions are helpful for unit testing for example.  Say you want to\nknow what templates were rendered as part of a request: signals allow you\nto do exactly that.,,,Subscribing to Signals,\u00b6,,To subscribe to a signal, you can use the,connect(),method of a signal.  The first\nargument is the function that should be called when the signal is emitted,\nthe optional second argument specifies a sender.  To unsubscribe from a\nsignal, you can use the,disconnect(),method.,,For all core Flask signals, the sender is the application that issued the\nsignal.  When you subscribe to a signal, be sure to also provide a sender\nunless you really want to listen for signals from all applications.  This is\nespecially true if you are developing an extension.,,For example, here is a helper context manager that can be used in a unit test\nto determine which templates were rendered and what variables were passed\nto the template:,,from,,flask,,import,,template_rendered,,from,,contextlib,,import,,contextmanager,,@contextmanager,,def,,captured_templates,(,app,):,,recorded,,=,,[],,def,,record,(,sender,,,,template,,,,context,,,,**,extra,):,,recorded,.,append,((,template,,,,context,)),,template_rendered,.,connect,(,record,,,,app,),,try,:,,yield,,recorded,,finally,:,,template_rendered,.,disconnect,(,record,,,,app,),,,,This can now easily be paired with a test client:,,with,,captured_templates,(,app,),,as,,templates,:,,rv,,=,,app,.,test_client,(),.,get,(,'/',),,assert,,rv,.,status_code,,==,,200,,assert,,len,(,templates,),,==,,1,,template,,,,context,,=,,templates,[,0,],,assert,,template,.,name,,==,,'index.html',,assert,,len,(,context,[,'items',]),,==,,10,,,,Make sure to subscribe with an extra,**extra,argument so that your\ncalls don\u2019t fail if Flask introduces new arguments to the signals.,,All the template rendering in the code issued by the application,app,in the body of the,with,block will now be recorded in the,templates,variable.  Whenever a template is rendered, the template object as well as\ncontext are appended to it.,,Additionally there is a convenient helper method\n(,connected_to(),)  that allows you to\ntemporarily subscribe a function to a signal with a context manager on\nits own.  Because the return value of the context manager cannot be\nspecified that way, you have to pass the list in as an argument:,,from,,flask,,import,,template_rendered,,def,,captured_templates,(,app,,,,recorded,,,,**,extra,):,,def,,record,(,sender,,,,template,,,,context,):,,recorded,.,append,((,template,,,,context,)),,return,,template_rendered,.,connected_to,(,record,,,,app,),,,,The example above would then look like this:,,templates,,=,,[],,with,,captured_templates,(,app,,,,templates,,,,**,extra,):,,...,,template,,,,context,,=,,templates,[,0,],,,,,Blinker API Changes,,The,connected_to(),method arrived in Blinker\nwith version 1.1.,,,,,Creating Signals,\u00b6,,If you want to use signals in your own application, you can use the\nblinker library directly.  The most common use case are named signals in a\ncustom,Namespace,..  This is what is recommended\nmost of the time:,,from,,blinker,,import,,Namespace,,my_signals,,=,,Namespace,(),,,,Now you can create new signals like this:,,model_saved,,=,,my_signals,.,signal,(,'model-saved',),,,,The name for the signal here makes it unique and also simplifies\ndebugging.  You can access the name of the signal with the,name,attribute.,,,For Extension Developers,,If you are writing a Flask extension and you want to gracefully degrade for\nmissing blinker installations, you can do so by using the,flask.signals.Namespace,class.,,,,,Sending Signals,\u00b6,,If you want to emit a signal, you can do so by calling the,send(),method.  It accepts a sender as first\nargument and optionally some keyword arguments that are forwarded to the\nsignal subscribers:,,class,,Model,(,object,):,,...,,def,,save,(,self,):,,model_saved,.,send,(,self,),,,,Try to always pick a good sender.  If you have a class that is emitting a\nsignal, pass,self,as sender.  If you are emitting a signal from a random\nfunction, you can pass,current_app._get_current_object(),as sender.,,,Passing Proxies as Senders,,Never pass,current_app,as sender to a signal.  Use,current_app._get_current_object(),instead.  The reason for this is\nthat,current_app,is a proxy and not the real application\nobject.,,,,,Signals and Flask\u2019s Request Context,\u00b6,,Signals fully support,The Request Context,when receiving signals.\nContext-local variables are consistently available between,request_started,and,request_finished,, so you can\nrely on,flask.g,and others as needed.  Note the limitations described\nin,Sending Signals,and the,request_tearing_down,signal.,,,,Decorator Based Signal Subscriptions,\u00b6,,With Blinker 1.1 you can also easily subscribe to signals by using the new,connect_via(),decorator:,,from,,flask,,import,,template_rendered,,@template_rendered,.,connect_via,(,app,),,def,,when_template_rendered,(,sender,,,,template,,,,context,,,,**,extra,):,,print,,'Template,%s,is rendered with,%s,',,%,,(,template,.,name,,,,context,),,,,,,Core Signals,\u00b6,,Take a look at,Signals,for a list of all builtin signals.,,,,,,,,,,,,,Contents,,,Signals,,Subscribing to Signals,,Creating Signals,,Sending Signals,,Signals and Flask\u2019s Request Context,,Decorator Based Signal Subscriptions,,Core Signals,,,,,Navigation,,,Overview,,,Previous:,Configuration Handling,,Next:,Pluggable Views,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Configuration Handling", "url": "http://flask.pocoo.org/docs/dev/config/", "content": ",,,,,Configuration Handling \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,Configuration Handling,\u00b6,,Applications need some kind of configuration.  There are different settings\nyou might want to change depending on the application environment like\ntoggling the debug mode, setting the secret key, and other such\nenvironment-specific things.,,The way Flask is designed usually requires the configuration to be\navailable when the application starts up.  You can hardcode the\nconfiguration in the code, which for many small applications is not\nactually that bad, but there are better ways.,,Independent of how you load your config, there is a config object\navailable which holds the loaded configuration values:\nThe,config,attribute of the,Flask,object.  This is the place where Flask itself puts certain configuration\nvalues and also where extensions can put their configuration values.  But\nthis is also where you can have your own configuration.,,,Configuration Basics,\u00b6,,The,config,is actually a subclass of a dictionary and\ncan be modified just like any dictionary:,,app,,=,,Flask,(,__name__,),,app,.,config,[,'TESTING',],,=,,True,,,,Certain configuration values are also forwarded to the,Flask,object so you can read and write them from there:,,app,.,testing,,=,,True,,,,To update multiple keys at once you can use the,dict.update(),method:,,app,.,config,.,update,(,,TESTING,=,True,,,,SECRET_KEY,=,b,'_5#y2L\"F4Q8z,\\n\\xec,]/',,),,,,,,Environment and Debug Features,\u00b6,,The,ENV,and,DEBUG,config values are special because they\nmay behave inconsistently if changed after the app has begun setting up.\nIn order to set the environment and debug mode reliably, Flask uses\nenvironment variables.,,The environment is used to indicate to Flask, extensions, and other\nprograms, like Sentry, what context Flask is running in. It is\ncontrolled with the,FLASK_ENV,environment variable and\ndefaults to,production,.,,Setting,FLASK_ENV,to,development,will enable debug mode.,flask,,run,will use the interactive debugger and reloader by default\nin debug mode. To control this separately from the environment, use the,FLASK_DEBUG,flag.,,,Changelog,,Changed in version 1.0:,Added,FLASK_ENV,to control the environment separately\nfrom debug mode. The development environment enables debug mode.,,,To switch Flask to the development environment and enable debug mode,\nset,FLASK_ENV,:,,$ export FLASK_ENV=development\n$ flask run,,,(On Windows, use,set,instead of,export,.),,Using the environment variables as described above is recommended. While\nit is possible to set,ENV,and,DEBUG,in your config or\ncode, this is strongly discouraged. They can\u2019t be read early by the,flask,command, and some systems or extensions may have already\nconfigured themselves based on a previous value.,,,,Builtin Configuration Values,\u00b6,,The following configuration values are used internally by Flask:,,,,ENV,\u00b6,,What environment the app is running in. Flask and extensions may\nenable behaviors based on the environment, such as enabling debug\nmode. The,env,attribute maps to this config\nkey. This is set by the,FLASK_ENV,environment variable and\nmay not behave as expected if set in code.,,Do not enable development when deploying in production.,,Default:,'production',,,Changelog,,New in version 1.0.,,,,,,DEBUG,\u00b6,,Whether debug mode is enabled. When using,flask,,run,to start the\ndevelopment server, an interactive debugger will be shown for\nunhandled exceptions, and the server will be reloaded when code\nchanges. The,debug,attribute maps to this\nconfig key. This is enabled when,ENV,is,'development',and is overridden by the,FLASK_DEBUG,environment variable. It\nmay not behave as expected if set in code.,,Do not enable debug mode when deploying in production.,,Default:,True,if,ENV,is,'development',, or,False,otherwise.,,,,,TESTING,\u00b6,,Enable testing mode. Exceptions are propagated rather than handled by the\nthe app\u2019s error handlers. Extensions may also change their behavior to\nfacilitate easier testing. You should enable this in your own tests.,,Default:,False,,,,,PROPAGATE_EXCEPTIONS,\u00b6,,Exceptions are re-raised rather than being handled by the app\u2019s error\nhandlers. If not set, this is implicitly true if,TESTING,or,DEBUG,is enabled.,,Default:,None,,,,,PRESERVE_CONTEXT_ON_EXCEPTION,\u00b6,,Don\u2019t pop the request context when an exception occurs. If not set, this\nis true if,DEBUG,is true. This allows debuggers to introspect the\nrequest data on errors, and should normally not need to be set directly.,,Default:,None,,,,,TRAP_HTTP_EXCEPTIONS,\u00b6,,If there is no handler for an,HTTPException,-type exception, re-raise it\nto be handled by the interactive debugger instead of returning it as a\nsimple error response.,,Default:,False,,,,,TRAP_BAD_REQUEST_ERRORS,\u00b6,,Trying to access a key that doesn\u2019t exist from request dicts like,args,and,form,will return a 400 Bad Request error page. Enable this to treat\nthe error as an unhandled exception instead so that you get the interactive\ndebugger. This is a more specific version of,TRAP_HTTP_EXCEPTIONS,. If\nunset, it is enabled in debug mode.,,Default:,None,,,,,SECRET_KEY,\u00b6,,A secret key that will be used for securely signing the session cookie\nand can be used for any other security related needs by extensions or your\napplication. It should be a long random string of bytes, although unicode\nis accepted too. For example, copy the output of this to your config:,,python,,-,c,,'import os; print(os.urandom(16))',,b,'_5#y2L\"F4Q8z,\\n\\xec,]/',,,,Do not reveal the secret key when posting questions or committing code.,,Default:,None,,,,,SESSION_COOKIE_NAME,\u00b6,,The name of the session cookie. Can be changed in case you already have a\ncookie with the same name.,,Default:,'session',,,,,SESSION_COOKIE_DOMAIN,\u00b6,,The domain match rule that the session cookie will be valid for. If not\nset, the cookie will be valid for all subdomains of,SERVER_NAME,.\nIf,False,, the cookie\u2019s domain will not be set.,,Default:,None,,,,,SESSION_COOKIE_PATH,\u00b6,,The path that the session cookie will be valid for. If not set, the cookie\nwill be valid underneath,APPLICATION_ROOT,or,/,if that is not set.,,Default:,None,,,,,SESSION_COOKIE_HTTPONLY,\u00b6,,Browsers will not allow JavaScript access to cookies marked as \u201cHTTP only\u201d\nfor security.,,Default:,True,,,,,SESSION_COOKIE_SECURE,\u00b6,,Browsers will only send cookies with requests over HTTPS if the cookie is\nmarked \u201csecure\u201d. The application must be served over HTTPS for this to make\nsense.,,Default:,False,,,,,SESSION_COOKIE_SAMESITE,\u00b6,,Restrict how cookies are sent with requests from external sites. Can\nbe set to,'Lax',(recommended) or,'Strict',.\nSee,Set-Cookie options,.,,Default:,None,,,Changelog,,New in version 1.0.,,,,,,PERMANENT_SESSION_LIFETIME,\u00b6,,If,session.permanent,is true, the cookie\u2019s expiration will be set this\nnumber of seconds in the future. Can either be a,datetime.timedelta,or an,int,.,,Flask\u2019s default cookie implementation validates that the cryptographic\nsignature is not older than this value.,,Default:,timedelta(days=31),(,2678400,seconds),,,,,SESSION_REFRESH_EACH_REQUEST,\u00b6,,Control whether the cookie is sent with every response when,session.permanent,is true. Sending the cookie every time (the default)\ncan more reliably keep the session from expiring, but uses more bandwidth.\nNon-permanent sessions are not affected.,,Default:,True,,,,,USE_X_SENDFILE,\u00b6,,When serving files, set the,X-Sendfile,header instead of serving the\ndata with Flask. Some web servers, such as Apache, recognize this and serve\nthe data more efficiently. This only makes sense when using such a server.,,Default:,False,,,,,SEND_FILE_MAX_AGE_DEFAULT,\u00b6,,When serving files, set the cache control max age to this number of\nseconds.  Can either be a,datetime.timedelta,or an,int,.\nOverride this value on a per-file basis using,get_send_file_max_age(),on the application or blueprint.,,Default:,timedelta(hours=12),(,43200,seconds),,,,,SERVER_NAME,\u00b6,,Inform the application what host and port it is bound to. Required\nfor subdomain route matching support.,,If set, will be used for the session cookie domain if,SESSION_COOKIE_DOMAIN,is not set. Modern web browsers will\nnot allow setting cookies for domains without a dot. To use a domain\nlocally, add any names that should route to the app to your,hosts,file.,,127.0,.,0.1,,localhost,.,dev,,,,If set,,url_for,can generate external URLs with only an application\ncontext instead of a request context.,,Default:,None,,,,,APPLICATION_ROOT,\u00b6,,Inform the application what path it is mounted under by the application /\nweb server.,,Will be used for the session cookie path if,SESSION_COOKIE_PATH,is not\nset.,,Default:,'/',,,,,PREFERRED_URL_SCHEME,\u00b6,,Use this scheme for generating external URLs when not in a request context.,,Default:,'http',,,,,MAX_CONTENT_LENGTH,\u00b6,,Don\u2019t read more than this many bytes from the incoming request data. If not\nset and the request does not specify a,CONTENT_LENGTH,, no data will be\nread for security.,,Default:,None,,,,,JSON_AS_ASCII,\u00b6,,Serialize objects to ASCII-encoded JSON. If this is disabled, the JSON\nwill be returned as a Unicode string, or encoded as,UTF-8,by,jsonify,. This has security implications when rendering the JSON in\nto JavaScript in templates, and should typically remain enabled.,,Default:,True,,,,,JSON_SORT_KEYS,\u00b6,,Sort the keys of JSON objects alphabetically. This is useful for caching\nbecause it ensures the data is serialized the same way no matter what\nPython\u2019s hash seed is. While not recommended, you can disable this for a\npossible performance improvement at the cost of caching.,,Default:,True,,,,,JSONIFY_PRETTYPRINT_REGULAR,\u00b6,,jsonify,responses will be output with newlines, spaces, and indentation\nfor easier reading by humans. Always enabled in debug mode.,,Default:,False,,,,,JSONIFY_MIMETYPE,\u00b6,,The mimetype of,jsonify,responses.,,Default:,'application/json',,,,,TEMPLATES_AUTO_RELOAD,\u00b6,,Reload templates when they are changed. If not set, it will be enabled in\ndebug mode.,,Default:,None,,,,,EXPLAIN_TEMPLATE_LOADING,\u00b6,,Log debugging information tracing how a template file was loaded. This can\nbe useful to figure out why a template was not loaded or the wrong file\nappears to be loaded.,,Default:,False,,,,,MAX_COOKIE_SIZE,\u00b6,,Warn if cookie headers are larger than this many bytes. Defaults to,4093,. Larger cookies may be silently ignored by browsers. Set to,0,to disable the warning.,,,,Changelog,,Changed in version 1.0:,LOGGER_NAME,and,LOGGER_HANDLER_POLICY,were removed. See,Logging,for information about configuration.,,Added,ENV,to reflect the,FLASK_ENV,environment\nvariable.,,Added,SESSION_COOKIE_SAMESITE,to control the session\ncookie\u2019s,SameSite,option.,,Added,MAX_COOKIE_SIZE,to control a warning from Werkzeug.,,,,New in version 0.11:,SESSION_REFRESH_EACH_REQUEST,,,TEMPLATES_AUTO_RELOAD,,,LOGGER_HANDLER_POLICY,,,EXPLAIN_TEMPLATE_LOADING,,,,New in version 0.10:,JSON_AS_ASCII,,,JSON_SORT_KEYS,,,JSONIFY_PRETTYPRINT_REGULAR,,,,New in version 0.9:,PREFERRED_URL_SCHEME,,,,New in version 0.8:,TRAP_BAD_REQUEST_ERRORS,,,TRAP_HTTP_EXCEPTIONS,,,APPLICATION_ROOT,,,SESSION_COOKIE_DOMAIN,,,SESSION_COOKIE_PATH,,,SESSION_COOKIE_HTTPONLY,,,SESSION_COOKIE_SECURE,,,,New in version 0.7:,PROPAGATE_EXCEPTIONS,,,PRESERVE_CONTEXT_ON_EXCEPTION,,,,New in version 0.6:,MAX_CONTENT_LENGTH,,,,New in version 0.5:,SERVER_NAME,,,,New in version 0.4:,LOGGER_NAME,,,,,Configuring from Files,\u00b6,,Configuration becomes more useful if you can store it in a separate file,\nideally located outside the actual application package. This makes\npackaging and distributing your application possible via various package\nhandling tools (,Deploying with Setuptools,) and finally modifying the\nconfiguration file afterwards.,,So a common pattern is this:,,app,,=,,Flask,(,__name__,),,app,.,config,.,from_object,(,'yourapplication.default_settings',),,app,.,config,.,from_envvar,(,'YOURAPPLICATION_SETTINGS',),,,,This first loads the configuration from the,yourapplication.default_settings,module and then overrides the values\nwith the contents of the file the,YOURAPPLICATION_SETTINGS,environment variable points to.  This environment variable can be set on\nLinux or OS X with the export command in the shell before starting the\nserver:,,$ export YOURAPPLICATION_SETTINGS=/path/to/settings.cfg\n$ python run-app.py\n * Running on http://127.0.0.1:5000/\n * Restarting with reloader...,,,On Windows systems use the,set,builtin instead:,,>,set,,YOURAPPLICATION_SETTINGS,=,\\,path,\\,to,\\,settings,.,cfg,,,,The configuration files themselves are actual Python files.  Only values\nin uppercase are actually stored in the config object later on.  So make\nsure to use uppercase letters for your config keys.,,Here is an example of a configuration file:,,# Example configuration,,DEBUG,,=,,False,,SECRET_KEY,,=,,b,'_5#y2L\"F4Q8z,\\n\\xec,]/',,,,Make sure to load the configuration very early on, so that extensions have\nthe ability to access the configuration when starting up.  There are other\nmethods on the config object as well to load from individual files.  For a\ncomplete reference, read the,Config,object\u2019s\ndocumentation.,,,,Configuring from Environment Variables,\u00b6,,In addition to pointing to configuration files using environment variables, you\nmay find it useful (or necessary) to control your configuration values directly\nfrom the environment.,,Environment variables can be set on Linux or OS X with the export command in\nthe shell before starting the server:,,$ export SECRET_KEY='5f352379324c22463451387a0aec5d2f'\n$ export DEBUG=False\n$ python run-app.py\n * Running on http://127.0.0.1:5000/\n * Restarting with reloader...,,,On Windows systems use the,set,builtin instead:,,>,set,,SECRET_KEY,=,'5f352379324c22463451387a0aec5d2f',,>,set,,DEBUG,=,False,,,,While this approach is straightforward to use, it is important to remember that\nenvironment variables are strings \u2013 they are not automatically deserialized\ninto Python types.,,Here is an example of a configuration file that uses environment variables:,,# Example configuration,,import,,os,,ENVIRONMENT_DEBUG,,=,,os,.,environ,.,get,(,\"DEBUG\",,,,default,=,False,),,if,,ENVIRONMENT_DEBUG,.,lower,(),,in,,(,\"f\",,,,\"false\",):,,ENVIRONMENT_DEBUG,,=,,False,,DEBUG,,=,,ENVIRONMENT_DEBUG,,SECRET_KEY,,=,,os,.,environ,.,get,(,\"SECRET_KEY\",,,,default,=,None,),,if,,not,,SECRET_KEY,:,,raise,,ValueError,(,\"No secret key set for Flask application\",),,,,Notice that any value besides an empty string will be interpreted as a boolean,True,value in Python, which requires care if an environment explicitly sets\nvalues intended to be,False,.,,Make sure to load the configuration very early on, so that extensions have the\nability to access the configuration when starting up.  There are other methods\non the config object as well to load from individual files.  For a complete\nreference, read the,Config,class documentation.,,,,Configuration Best Practices,\u00b6,,The downside with the approach mentioned earlier is that it makes testing\na little harder.  There is no single 100% solution for this problem in\ngeneral, but there are a couple of things you can keep in mind to improve\nthat experience:,,,Create your application in a function and register blueprints on it.\nThat way you can create multiple instances of your application with\ndifferent configurations attached which makes unittesting a lot\neasier.  You can use this to pass in configuration as needed.,,Do not write code that needs the configuration at import time.  If you\nlimit yourself to request-only accesses to the configuration you can\nreconfigure the object later on as needed.,,,,,Development / Production,\u00b6,,Most applications need more than one configuration.  There should be at\nleast separate configurations for the production server and the one used\nduring development.  The easiest way to handle this is to use a default\nconfiguration that is always loaded and part of the version control, and a\nseparate configuration that overrides the values as necessary as mentioned\nin the example above:,,app,,=,,Flask,(,__name__,),,app,.,config,.,from_object,(,'yourapplication.default_settings',),,app,.,config,.,from_envvar,(,'YOURAPPLICATION_SETTINGS',),,,,Then you just have to add a separate,config.py,file and export,YOURAPPLICATION_SETTINGS=/path/to/config.py,and you are done.  However\nthere are alternative ways as well.  For example you could use imports or\nsubclassing.,,What is very popular in the Django world is to make the import explicit in\nthe config file by adding,from,,yourapplication.default_settings,,import,,*,to the top of the file and then overriding the changes by hand.\nYou could also inspect an environment variable like,YOURAPPLICATION_MODE,and set that to,production,,,development,etc\nand import different hardcoded files based on that.,,An interesting pattern is also to use classes and inheritance for\nconfiguration:,,class,,Config,(,object,):,,DEBUG,,=,,False,,TESTING,,=,,False,,DATABASE_URI,,=,,'sqlite:///:memory:',,class,,ProductionConfig,(,Config,):,,DATABASE_URI,,=,,'mysql://user@localhost/foo',,class,,DevelopmentConfig,(,Config,):,,DEBUG,,=,,True,,class,,TestingConfig,(,Config,):,,TESTING,,=,,True,,,,To enable such a config you just have to call into,from_object(),:,,app,.,config,.,from_object,(,'configmodule.ProductionConfig',),,,,There are many different ways and it\u2019s up to you how you want to manage\nyour configuration files.  However here a list of good recommendations:,,,Keep a default configuration in version control.  Either populate the\nconfig with this default configuration or import it in your own\nconfiguration files before overriding values.,,Use an environment variable to switch between the configurations.\nThis can be done from outside the Python interpreter and makes\ndevelopment and deployment much easier because you can quickly and\neasily switch between different configs without having to touch the\ncode at all.  If you are working often on different projects you can\neven create your own script for sourcing that activates a virtualenv\nand exports the development configuration for you.,,Use a tool like,fabric,in production to push code and\nconfigurations separately to the production server(s).  For some\ndetails about how to do that, head over to the,Deploying with Fabric,pattern.,,,,,Instance Folders,\u00b6,,,Changelog,,New in version 0.8.,,,Flask 0.8 introduces instance folders.  Flask for a long time made it\npossible to refer to paths relative to the application\u2019s folder directly\n(via,Flask.root_path,).  This was also how many developers loaded\nconfigurations stored next to the application.  Unfortunately however this\nonly works well if applications are not packages in which case the root\npath refers to the contents of the package.,,With Flask 0.8 a new attribute was introduced:,Flask.instance_path,.  It refers to a new concept called the\n\u201cinstance folder\u201d.  The instance folder is designed to not be under\nversion control and be deployment specific.  It\u2019s the perfect place to\ndrop things that either change at runtime or configuration files.,,You can either explicitly provide the path of the instance folder when\ncreating the Flask application or you can let Flask autodetect the\ninstance folder.  For explicit configuration use the,instance_path,parameter:,,app,,=,,Flask,(,__name__,,,,instance_path,=,'/path/to/instance/folder',),,,,Please keep in mind that this path,must,be absolute when provided.,,If the,instance_path,parameter is not provided the following default\nlocations are used:,,,Uninstalled module:,,/,myapp,.,py,,/,instance,,,,,Uninstalled package:,,/,myapp,,/,__init__,.,py,,/,instance,,,,,Installed module or package:,,$PREFIX/lib/python2.X/site-packages/myapp\n$PREFIX/var/myapp-instance,,,$PREFIX,is the prefix of your Python installation.  This can be,/usr,or the path to your virtualenv.  You can print the value of,sys.prefix,to see what the prefix is set to.,,,,Since the config object provided loading of configuration files from\nrelative filenames we made it possible to change the loading via filenames\nto be relative to the instance path if wanted.  The behavior of relative\npaths in config files can be flipped between \u201crelative to the application\nroot\u201d (the default) to \u201crelative to instance folder\u201d via the,instance_relative_config,switch to the application constructor:,,app,,=,,Flask,(,__name__,,,,instance_relative_config,=,True,),,,,Here is a full example of how to configure Flask to preload the config\nfrom a module and then override the config from a file in the config\nfolder if it exists:,,app,,=,,Flask,(,__name__,,,,instance_relative_config,=,True,),,app,.,config,.,from_object,(,'yourapplication.default_settings',),,app,.,config,.,from_pyfile,(,'application.cfg',,,,silent,=,True,),,,,The path to the instance folder can be found via the,Flask.instance_path,.  Flask also provides a shortcut to open a\nfile from the instance folder with,Flask.open_instance_resource(),.,,Example usage for both:,,filename,,=,,os,.,path,.,join,(,app,.,instance_path,,,,'application.cfg',),,with,,open,(,filename,),,as,,f,:,,config,,=,,f,.,read,(),,# or via open_instance_resource:,,with,,app,.,open_instance_resource,(,'application.cfg',),,as,,f,:,,config,,=,,f,.,read,(),,,,,,,,,,,,,,,Contents,,,Configuration Handling,,Configuration Basics,,Environment and Debug Features,,Builtin Configuration Values,,Configuring from Files,,Configuring from Environment Variables,,Configuration Best Practices,,Development / Production,,Instance Folders,,,,,Navigation,,,Overview,,,Previous:,Logging,,Next:,Signals,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Logging", "url": "http://flask.pocoo.org/docs/dev/logging/", "content": ",,,,,Logging \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,Logging,\u00b6,,Flask uses standard Python,logging,. All Flask-related messages are\nlogged under the,'flask',logger namespace.,Flask.logger,returns the logger named,'flask.app',, and can be used to log messages for your application.,,@app,.,route,(,'/login',,,,methods,=,[,'POST',]),,def,,login,():,,user,,=,,get_user,(,request,.,form,[,'username',]),,if,,user,.,check_password,(,request,.,form,[,'password',]):,,login_user,(,user,),,app,.,logger,.,info,(,',%s,logged in successfully',,,,user,.,username,),,return,,redirect,(,url_for,(,'index',)),,else,:,,app,.,logger,.,info,(,',%s,failed to log in',,,,user,.,username,),,abort,(,401,),,,,,Basic Configuration,\u00b6,,When you want to configure logging for your project, you should do it as soon\nas possible when the program starts. If,app.logger,is accessed before logging is configured, it will add a default handler. If\npossible, configure logging before creating the application object.,,This example uses,dictConfig(),to create a logging\nconfiguration similar to Flask\u2019s default, except for all logs:,,from,,logging.config,,import,,dictConfig,,dictConfig,({,,'version',:,,1,,,,'formatters',:,,{,'default',:,,{,,'format',:,,'[,%(asctime)s,],%(levelname)s,in,%(module)s,:,%(message)s,',,,,}},,,'handlers',:,,{,'wsgi',:,,{,,'class',:,,'logging.StreamHandler',,,,'stream',:,,'ext://flask.logging.wsgi_errors_stream',,,,'formatter',:,,'default',,}},,,'root',:,,{,,'level',:,,'INFO',,,,'handlers',:,,[,'wsgi',],,},,}),,app,,=,,Flask,(,__name__,),,,,,Default Configuration,\u00b6,,If you do not configure logging yourself, Flask will add a,StreamHandler,to,app.logger,automatically. During requests, it will write to the stream specified by the\nWSGI server in,environ['wsgi.errors'],(which is usually,sys.stderr,). Outside a request, it will log to,sys.stderr,.,,,,Removing the Default Handler,\u00b6,,If you configured logging after accessing,app.logger,, and need to remove the default\nhandler, you can import and remove it:,,from,,flask.logging,,import,,default_handler,,app,.,logger,.,removeHandler,(,default_handler,),,,,,,,Email Errors to Admins,\u00b6,,When running the application on a remote server for production, you probably\nwon\u2019t be looking at the log messages very often. The WSGI server will probably\nsend log messages to a file, and you\u2019ll only check that file if a user tells\nyou something went wrong.,,To be proactive about discovering and fixing bugs, you can configure a,logging.handlers.SMTPHandler,to send an email when errors and higher\nare logged.,,import,,logging,,from,,logging.handlers,,import,,SMTPHandler,,mail_handler,,=,,SMTPHandler,(,,mailhost,=,'127.0.0.1',,,,fromaddr,=,'server-error@example.com',,,,toaddrs,=,[,'admin@example.com',],,,subject,=,'Application Error',,),,mail_handler,.,setLevel,(,logging,.,ERROR,),,mail_handler,.,setFormatter,(,logging,.,Formatter,(,,'[,%(asctime)s,],%(levelname)s,in,%(module)s,:,%(message)s,',,)),,if,,not,,app,.,debug,:,,app,.,logger,.,addHandler,(,mail_handler,),,,,This requires that you have an SMTP server set up on the same server. See the\nPython docs for more information about configuring the handler.,,,,Injecting Request Information,\u00b6,,Seeing more information about the request, such as the IP address, may help\ndebugging some errors. You can subclass,logging.Formatter,to inject\nyour own fields that can be used in messages. You can change the formatter for\nFlask\u2019s default handler, the mail handler defined above, or any other\nhandler.,,from,,flask,,import,,request,,from,,flask.logging,,import,,default_handler,,class,,RequestFormatter,(,logging,.,Formatter,):,,def,,format,(,self,,,,record,):,,record,.,url,,=,,request,.,url,,record,.,remote_addr,,=,,request,.,remote_addr,,return,,super,(,RequestFormatter,,,,self,),.,format,(,record,),,formatter,,=,,RequestFormatter,(,,'[,%(asctime)s,],%(remote_addr)s,requested,%(url)s,\\n,',,',%(levelname)s,in,%(module)s,:,%(message)s,',,),,default_handler,.,setFormatter,(,formatter,),,mail_handler,.,setFormatter,(,formatter,),,,,,,Other Libraries,\u00b6,,Other libraries may use logging extensively, and you want to see relevant\nmessages from those logs too. The simplest way to do this is to add handlers\nto the root logger instead of only the app logger.,,from,,flask.logging,,import,,default_handler,,root,,=,,logging,.,getLogger,(),,root,.,addHandler,(,default_handler,),,root,.,addHandler,(,mail_handler,),,,,Depending on your project, it may be more useful to configure each logger you\ncare about separately, instead of configuring only the root logger.,,for,,logger,,in,,(,,app,.,logger,,,,logging,.,getLogger,(,'sqlalchemy',),,,logging,.,getLogger,(,'other_package',),,,):,,logger,.,addHandler,(,default_handler,),,logger,.,addHandler,(,mail_handler,),,,,,Werkzeug,\u00b6,,Werkzeug logs basic request/response information to the,'werkzeug',logger.\nIf the root logger has no handlers configured, Werkzeug adds a,StreamHandler,to its logger.,,,,Flask Extensions,\u00b6,,Depending on the situation, an extension may choose to log to,app.logger,or its own named logger. Consult each\nextension\u2019s documentation for details.,,,,,,,,,,,,,,Contents,,,Logging,,Basic Configuration,,Default Configuration,,Removing the Default Handler,,,,Email Errors to Admins,,Injecting Request Information,,Other Libraries,,Werkzeug,,Flask Extensions,,,,,,,Navigation,,,Overview,,,Previous:,Application Errors,,Next:,Configuration Handling,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Application Errors", "url": "http://flask.pocoo.org/docs/dev/errorhandling/", "content": ",,,,,Application Errors \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,Application Errors,\u00b6,,,Changelog,,New in version 0.3.,,,Applications fail, servers fail.  Sooner or later you will see an exception\nin production.  Even if your code is 100% correct, you will still see\nexceptions from time to time.  Why?  Because everything else involved will\nfail.  Here are some situations where perfectly fine code can lead to server\nerrors:,,,the client terminated the request early and the application was still\nreading from the incoming data,,the database server was overloaded and could not handle the query,,a filesystem is full,,a harddrive crashed,,a backend server overloaded,,a programming error in a library you are using,,network connection of the server to another system failed,,,And that\u2019s just a small sample of issues you could be facing.  So how do we\ndeal with that sort of problem?  By default if your application runs in\nproduction mode, Flask will display a very simple page for you and log the\nexception to the,logger,.,,But there is more you can do, and we will cover some better setups to deal\nwith errors.,,,Error Logging Tools,\u00b6,,Sending error mails, even if just for critical ones, can become\noverwhelming if enough users are hitting the error and log files are\ntypically never looked at. This is why we recommend using,Sentry,for dealing with application errors.  It\u2019s\navailable as an Open Source project,on GitHub,and is also available as a,hosted version,which you can try for free. Sentry\naggregates duplicate errors, captures the full stack trace and local\nvariables for debugging, and sends you mails based on new errors or\nfrequency thresholds.,,To use Sentry you need to install the,raven,client with extra,flask,dependencies:,,$ pip install raven[flask],,,And then add this to your Flask app:,,from,,raven.contrib.flask,,import,,Sentry,,sentry,,=,,Sentry,(,app,,,,dsn,=,'YOUR_DSN_HERE',),,,,Or if you are using factories you can also init it later:,,from,,raven.contrib.flask,,import,,Sentry,,sentry,,=,,Sentry,(,dsn,=,'YOUR_DSN_HERE',),,def,,create_app,():,,app,,=,,Flask,(,__name__,),,sentry,.,init_app,(,app,),,...,,return,,app,,,,The,YOUR_DSN_HERE,value needs to be replaced with the DSN value you get\nfrom your Sentry installation.,,Afterwards failures are automatically reported to Sentry and from there\nyou can receive error notifications.,,,,Error handlers,\u00b6,,You might want to show custom error pages to the user when an error occurs.\nThis can be done by registering error handlers.,,An error handler is a normal view function that return a response, but instead\nof being registered for a route, it is registered for an exception or HTTP\nstatus code that would is raised while trying to handle a request.,,,Registering,\u00b6,,Register handlers by decorating a function with,errorhandler(),. Or use,register_error_handler(),to register the function later.\nRemember to set the error code when returning the response.,,@app,.,errorhandler,(,werkzeug,.,exceptions,.,BadRequest,),,def,,handle_bad_request,(,e,):,,return,,'bad request!',,,,400,,# or, without the decorator,,app,.,register_error_handler,(,400,,,,handle_bad_request,),,,,werkzeug.exceptions.HTTPException,subclasses like,BadRequest,and their HTTP codes are interchangeable\nwhen registering handlers. (,BadRequest.code,,==,,400,),,Non-standard HTTP codes cannot be registered by code because they are not known\nby Werkzeug. Instead, define a subclass of,HTTPException,with the appropriate code and\nregister and raise that exception class.,,class,,InsufficientStorage,(,werkzeug,.,exceptions,.,HTTPException,):,,code,,=,,507,,description,,=,,'Not enough storage space.',,app,.,register_error_handler,(,InsuffcientStorage,,,,handle_507,),,raise,,InsufficientStorage,(),,,,Handlers can be registered for any exception class, not just,HTTPException,subclasses or HTTP status\ncodes. Handlers can be registered for a specific class, or for all subclasses\nof a parent class.,,,,Handling,\u00b6,,When an exception is caught by Flask while handling a request, it is first\nlooked up by code. If no handler is registered for the code, it is looked up\nby its class hierarchy; the most specific handler is chosen. If no handler is\nregistered,,HTTPException,subclasses show a\ngeneric message about their code, while other exceptions are converted to a\ngeneric 500 Internal Server Error.,,For example, if an instance of,ConnectionRefusedError,is raised, and a handler\nis registered for,ConnectionError,and,ConnectionRefusedError,,\nthe more specific,ConnectionRefusedError,handler is called with the\nexception instance to generate the response.,,Handlers registered on the blueprint take precedence over those registered\nglobally on the application, assuming a blueprint is handling the request that\nraises the exception. However, the blueprint cannot handle 404 routing errors\nbecause the 404 occurs at the routing level before the blueprint can be\ndetermined.,,,Changelog,,Changed in version 0.11:,Handlers are prioritized by specificity of the exception classes they are\nregistered for instead of the order they are registered in.,,,,,,Logging,\u00b6,,See,Logging,for information on how to log exceptions, such as by\nemailing them to admins.,,,,,Debugging Application Errors,\u00b6,,For production applications, configure your application with logging and\nnotifications as described in,Application Errors,.  This section provides\npointers when debugging deployment configuration and digging deeper with a\nfull-featured Python debugger.,,,When in Doubt, Run Manually,\u00b6,,Having problems getting your application configured for production?  If you\nhave shell access to your host, verify that you can run your application\nmanually from the shell in the deployment environment.  Be sure to run under\nthe same user account as the configured deployment to troubleshoot permission\nissues.  You can use Flask\u2019s builtin development server with,debug=True,on\nyour production host, which is helpful in catching configuration issues, but,be sure to do this temporarily in a controlled environment.,Do not run in\nproduction with,debug=True,.,,,,Working with Debuggers,\u00b6,,To dig deeper, possibly to trace code execution, Flask provides a debugger out\nof the box (see,Debug Mode,).  If you would like to use another Python\ndebugger, note that debuggers interfere with each other.  You have to set some\noptions in order to use your favorite debugger:,,,debug,- whether to enable debug mode and catch exceptions,,use_debugger,- whether to use the internal Flask debugger,,use_reloader,- whether to reload and fork the process on exception,,,debug,must be True (i.e., exceptions must be caught) in order for the other\ntwo options to have any value.,,If you\u2019re using Aptana/Eclipse for debugging you\u2019ll need to set both,use_debugger,and,use_reloader,to False.,,A possible useful pattern for configuration is to set the following in your\nconfig.yaml (change the block as appropriate for your application, of course):,,FLASK,:,,DEBUG,:,,True,,DEBUG_WITH_APTANA,:,,True,,,,Then in your application\u2019s entry-point (main.py), you could have something like:,,if,,__name__,,==,,\"__main__\",:,,# To allow aptana to receive errors, set use_debugger=False,,app,,=,,create_app,(,config,=,\"config.yaml\",),,if,,app,.,debug,:,,use_debugger,,=,,True,,try,:,,# Disable Flask's debugger if external debugger is requested,,use_debugger,,=,,not,(,app,.,config,.,get,(,'DEBUG_WITH_APTANA',)),,except,:,,pass,,app,.,run,(,use_debugger,=,use_debugger,,,,debug,=,app,.,debug,,,,use_reloader,=,use_debugger,,,,host,=,'0.0.0.0',),,,,,,,,,,,,,,,Contents,,,Application Errors,,Error Logging Tools,,Error handlers,,Registering,,Handling,,,,Logging,,,,Debugging Application Errors,,When in Doubt, Run Manually,,Working with Debuggers,,,,,Navigation,,,Overview,,,Previous:,Testing Flask Applications,,Next:,Logging,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "None", "url": "http://flask.pocoo.org/", "content": "Welcome | Flask (A Python Microframework),,,,,,h1 { margin: 0 0 30px 0; background: url(/static/logo.png) no-repeat center; height: 165px; }\n    h1 span, p.tagline { display: none; },,$(function() {\n      $('h1').bind('mousedown contextmenu', function(event) {\n        if (event.button != 2)\n          return;\n        var box = $('div.logohint');\n        if (!box.is(':visible'))\n          box.animate({'height': 'show', 'opacity': 'show'}, 100);\n        event.preventDefault();\n        event.returnValue = false;\n        return false;\n      });\n    });,,,Welcome,,because sometimes a pocket knife is not enough,,Are you interested in the logo?  We have it available in large versions so\n      please if you use it head over to the,logo\n      page,for the logo and the usage guidelines.,Quicklinks:,PNG,and,EPS,,,,overview,//,docs,//,community,//,extensions,//,donate,,Flask is a microframework for Python based on Werkzeug, Jinja 2 and good intentions.\n    And before you ask: It's,BSD licensed,!,,,Latest Version:,,1.0.2,,Flask is Fun,,from flask import Flask\napp = Flask(__name__),@app.route(\"/\")\ndef hello():\n    return \"Hello World!\",,And Easy to Setup,,$,pip install Flask,$,FLASK_APP=hello.py flask run,* Running on http://localhost:5000/,,,Interested?,,,Download latest release,(1.0.2),Read the documentation,,Join the mailinglist,,Fork it on github,,Add issues and feature requests,,,What\u2019s in the Box?,,,built-in development server and,debugger,,integrated,unit testing support,,RESTful,request dispatching,,uses,Jinja2 templating,,support for,secure cookies,(client side sessions),100%,WSGI 1.0,compliant,Unicode based,extensively,documented,,,What do Flask Apps look like?,,If you are looking for some example code of applications written with Flask,\n    have a look at the sources of the examples on github:,,flaskr,\u2014 a microblog,this website,\u2014 static pages + mailinglist archives,,Contribute,,Found a bug? Have a good idea for improving Flask? Head over to,Flask's github,page and\n    create a new ticket or fork.  If you just want to chat with fellow\n    developers, visit,the IRC\n    channel,or join,the mailinglist,.  You can also directly add issues and feature\n    requests to the,issue tracker,.,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "Security Considerations", "url": "http://flask.pocoo.org/docs/1.0/security/", "content": ",,,,,Security Considerations \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,,,,,,,,Security Considerations,\u00b6,,Web applications usually face all kinds of security problems and it\u2019s very\nhard to get everything right.  Flask tries to solve a few of these things\nfor you, but there are a couple more you have to take care of yourself.,,,Cross-Site Scripting (XSS),\u00b6,,Cross site scripting is the concept of injecting arbitrary HTML (and with\nit JavaScript) into the context of a website.  To remedy this, developers\nhave to properly escape text so that it cannot include arbitrary HTML\ntags.  For more information on that have a look at the Wikipedia article\non,Cross-Site Scripting,.,,Flask configures Jinja2 to automatically escape all values unless\nexplicitly told otherwise.  This should rule out all XSS problems caused\nin templates, but there are still other places where you have to be\ncareful:,,,generating HTML without the help of Jinja2,,calling,Markup,on data submitted by users,,sending out HTML from uploaded files, never do that, use the,Content-Disposition:,,attachment,header to prevent that problem.,,sending out textfiles from uploaded files.  Some browsers are using\ncontent-type guessing based on the first few bytes so users could\ntrick a browser to execute HTML.,,,Another thing that is very important are unquoted attributes.  While\nJinja2 can protect you from XSS issues by escaping HTML, there is one\nthing it cannot protect you from: XSS by attribute injection.  To counter\nthis possible attack vector, be sure to always quote your attributes with\neither double or single quotes when using Jinja expressions in them:,,<,input,,value,=,\",{{,,value,,}},\",>,,,,Why is this necessary?  Because if you would not be doing that, an\nattacker could easily inject custom JavaScript handlers.  For example an\nattacker could inject this piece of HTML+JavaScript:,,onmouseover=alert(document.cookie),,,When the user would then move with the mouse over the input, the cookie\nwould be presented to the user in an alert window.  But instead of showing\nthe cookie to the user, a good attacker might also execute any other\nJavaScript code.  In combination with CSS injections the attacker might\neven make the element fill out the entire page so that the user would\njust have to have the mouse anywhere on the page to trigger the attack.,,There is one class of XSS issues that Jinja\u2019s escaping does not protect\nagainst. The,a,tag\u2019s,href,attribute can contain a,javascript:,URI,\nwhich the browser will execute when clicked if not secured properly.,,<,a,,href,=,\"{{ value }}\",>,click here,</,a,>,,<,a,,href,=,\"javascript:alert('unsafe');\",>,click here,</,a,>,,,,To prevent this, you\u2019ll need to set the,Content Security Policy (CSP),response header.,,,,Cross-Site Request Forgery (CSRF),\u00b6,,Another big problem is CSRF.  This is a very complex topic and I won\u2019t\noutline it here in detail just mention what it is and how to theoretically\nprevent it.,,If your authentication information is stored in cookies, you have implicit\nstate management.  The state of \u201cbeing logged in\u201d is controlled by a\ncookie, and that cookie is sent with each request to a page.\nUnfortunately that includes requests triggered by 3rd party sites.  If you\ndon\u2019t keep that in mind, some people might be able to trick your\napplication\u2019s users with social engineering to do stupid things without\nthem knowing.,,Say you have a specific URL that, when you sent,POST,requests to will\ndelete a user\u2019s profile (say,http://example.com/user/delete,).  If an\nattacker now creates a page that sends a post request to that page with\nsome JavaScript they just have to trick some users to load that page and\ntheir profiles will end up being deleted.,,Imagine you were to run Facebook with millions of concurrent users and\nsomeone would send out links to images of little kittens.  When users\nwould go to that page, their profiles would get deleted while they are\nlooking at images of fluffy cats.,,How can you prevent that?  Basically for each request that modifies\ncontent on the server you would have to either use a one-time token and\nstore that in the cookie,and,also transmit it with the form data.\nAfter receiving the data on the server again, you would then have to\ncompare the two tokens and ensure they are equal.,,Why does Flask not do that for you?  The ideal place for this to happen is\nthe form validation framework, which does not exist in Flask.,,,,JSON Security,\u00b6,,In Flask 0.10 and lower,,jsonify(),did not serialize top-level\narrays to JSON. This was because of a security vulnerability in ECMAScript 4.,,ECMAScript 5 closed this vulnerability, so only extremely old browsers are\nstill vulnerable. All of these browsers have,other more serious\nvulnerabilities,, so\nthis behavior was changed and,jsonify(),now supports serializing\narrays.,,,,Security Headers,\u00b6,,Browsers recognize various response headers in order to control security. We\nrecommend reviewing each of the headers below for use in your application.\nThe,Flask-Talisman,extension can be used to manage HTTPS and the security\nheaders for you.,,,HTTP Strict Transport Security (HSTS),\u00b6,,Tells the browser to convert all HTTP requests to HTTPS, preventing\nman-in-the-middle (MITM) attacks.,,response,.,headers,[,'Strict-Transport-Security',],,=,,'max-age=31536000; includeSubDomains',,,,,https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security,,,,,Content Security Policy (CSP),\u00b6,,Tell the browser where it can load various types of resource from. This header\nshould be used whenever possible, but requires some work to define the correct\npolicy for your site. A very strict policy would be:,,response,.,headers,[,'Content-Security-Policy',],,=,,\"default-src 'self'\",,,,,https://csp.withgoogle.com/docs/index.html,,https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy,,,,,X-Content-Type-Options,\u00b6,,Forces the browser to honor the response content type instead of trying to\ndetect it, which can be abused to generate a cross-site scripting (XSS)\nattack.,,response,.,headers,[,'X-Content-Type-Options',],,=,,'nosniff',,,,,https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options,,,,,X-Frame-Options,\u00b6,,Prevents external sites from embedding your site in an,iframe,. This\nprevents a class of attacks where clicks in the outer frame can be translated\ninvisibly to clicks on your page\u2019s elements. This is also known as\n\u201cclickjacking\u201d.,,response,.,headers,[,'X-Frame-Options',],,=,,'SAMEORIGIN',,,,,https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options,,,,,X-XSS-Protection,\u00b6,,The browser will try to prevent reflected XSS attacks by not loading the page\nif the request contains something that looks like JavaScript and the response\ncontains the same data.,,response,.,headers,[,'X-XSS-Protection',],,=,,'1; mode=block',,,,,https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection,,,,,Set-Cookie options,\u00b6,,These options can be added to a,Set-Cookie,header to improve their\nsecurity. Flask has configuration options to set these on the session cookie.\nThey can be set on other cookies too.,,,Secure,limits cookies to HTTPS traffic only.,,HttpOnly,protects the contents of cookies from being read with\nJavaScript.,,SameSite,restricts how cookies are sent with requests from\nexternal sites. Can be set to,'Lax',(recommended) or,'Strict',.,Lax,prevents sending cookies with CSRF-prone requests from\nexternal sites, such as submitting a form.,Strict,prevents sending\ncookies with all external requests, including following regular links.,,,app,.,config,.,update,(,,SESSION_COOKIE_SECURE,=,True,,,,SESSION_COOKIE_HTTPONLY,=,True,,,,SESSION_COOKIE_SAMESITE,=,'Lax',,,,),,response,.,set_cookie,(,'username',,,,'flask',,,,secure,=,True,,,,httponly,=,True,,,,samesite,=,'Lax',),,,,Specifying,Expires,or,Max-Age,options, will remove the cookie after\nthe given time, or the current time plus the age, respectively. If neither\noption is set, the cookie will be removed when the browser is closed.,,# cookie expires after 10 minutes,,response,.,set_cookie,(,'snakes',,,,'3',,,,max_age,=,600,),,,,For the session cookie, if,session.permanent,is set, then,PERMANENT_SESSION_LIFETIME,is used to set the expiration.\nFlask\u2019s default cookie implementation validates that the cryptographic\nsignature is not older than this value. Lowering this value may help mitigate\nreplay attacks, where intercepted cookies can be sent at a later time.,,app,.,config,.,update,(,,PERMANENT_SESSION_LIFETIME,=,600,,),,@app,.,route,(,'/login',,,,methods,=,[,'POST',]),,def,,login,():,,...,,session,.,clear,(),,session,[,'user_id',],,=,,user,.,id,,session,.,permanent,,=,,True,,...,,,,Use,itsdangerous.TimedSerializer,to sign and validate other cookie\nvalues (or any values that need secure signatures).,,,https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies,,https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie,,,,,HTTP Public Key Pinning (HPKP),\u00b6,,This tells the browser to authenticate with the server using only the specific\ncertificate key to prevent MITM attacks.,,,Warning,,Be careful when enabling this, as it is very difficult to undo if you set up\nor upgrade your key incorrectly.,,,,https://developer.mozilla.org/en-US/docs/Web/HTTP/Public_Key_Pinning,,,,,,,,,,,,,,,Contents,,,Security Considerations,,Cross-Site Scripting (XSS),,Cross-Site Request Forgery (CSRF),,JSON Security,,Security Headers,,HTTP Strict Transport Security (HSTS),,Content Security Policy (CSP),,X-Content-Type-Options,,X-Frame-Options,,X-XSS-Protection,,Set-Cookie options,,HTTP Public Key Pinning (HPKP),,,,,,,Navigation,,,Overview,,,Previous:,HTML/XHTML FAQ,,Next:,Unicode in Flask,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Unicode in Flask", "url": "http://flask.pocoo.org/docs/dev/unicode/", "content": ",,,,,Unicode in Flask \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,Unicode in Flask,\u00b6,,Flask, like Jinja2 and Werkzeug, is totally Unicode based when it comes to\ntext.  Not only these libraries, also the majority of web related Python\nlibraries that deal with text.  If you don\u2019t know Unicode so far, you\nshould probably read,The Absolute Minimum Every Software Developer\nAbsolutely, Positively Must Know About Unicode and Character Sets,.  This part of the\ndocumentation just tries to cover the very basics so that you have a\npleasant experience with Unicode related things.,,,Automatic Conversion,\u00b6,,Flask has a few assumptions about your application (which you can change\nof course) that give you basic and painless Unicode support:,,,the encoding for text on your website is UTF-8,,internally you will always use Unicode exclusively for text except\nfor literal strings with only ASCII character points.,,encoding and decoding happens whenever you are talking over a protocol\nthat requires bytes to be transmitted.,,,So what does this mean to you?,,HTTP is based on bytes.  Not only the protocol, also the system used to\naddress documents on servers (so called URIs or URLs).  However HTML which\nis usually transmitted on top of HTTP supports a large variety of\ncharacter sets and which ones are used, are transmitted in an HTTP header.\nTo not make this too complex Flask just assumes that if you are sending\nUnicode out you want it to be UTF-8 encoded.  Flask will do the encoding\nand setting of the appropriate headers for you.,,The same is true if you are talking to databases with the help of\nSQLAlchemy or a similar ORM system.  Some databases have a protocol that\nalready transmits Unicode and if they do not, SQLAlchemy or your other ORM\nshould take care of that.,,,,The Golden Rule,\u00b6,,So the rule of thumb: if you are not dealing with binary data, work with\nUnicode.  What does working with Unicode in Python 2.x mean?,,,as long as you are using ASCII charpoints only (basically numbers,\nsome special characters of latin letters without umlauts or anything\nfancy) you can use regular string literals (,'Hello,,World',).,,if you need anything else than ASCII in a string you have to mark\nthis string as Unicode string by prefixing it with a lowercase,u,.\n(like,u'H\u00e4nsel,,und,,Gretel',),,if you are using non-Unicode characters in your Python files you have\nto tell Python which encoding your file uses.  Again, I recommend\nUTF-8 for this purpose.  To tell the interpreter your encoding you can\nput the,#,,-*-,,coding:,,utf-8,,-*-,into the first or second line of\nyour Python source file.,,Jinja is configured to decode the template files from UTF-8.  So make\nsure to tell your editor to save the file as UTF-8 there as well.,,,,,Encoding and Decoding Yourself,\u00b6,,If you are talking with a filesystem or something that is not really based\non Unicode you will have to ensure that you decode properly when working\nwith Unicode interface.  So for example if you want to load a file on the\nfilesystem and embed it into a Jinja2 template you will have to decode it\nfrom the encoding of that file.  Here the old problem that text files do\nnot specify their encoding comes into play.  So do yourself a favour and\nlimit yourself to UTF-8 for text files as well.,,Anyways.  To load such a file with Unicode you can use the built-in,str.decode(),method:,,def,,read_file,(,filename,,,,charset,=,'utf-8',):,,with,,open,(,filename,,,,'r',),,as,,f,:,,return,,f,.,read,(),.,decode,(,charset,),,,,To go from Unicode into a specific charset such as UTF-8 you can use the,unicode.encode(),method:,,def,,write_file,(,filename,,,,contents,,,,charset,=,'utf-8',):,,with,,open,(,filename,,,,'w',),,as,,f,:,,f,.,write,(,contents,.,encode,(,charset,)),,,,,,Configuring Editors,\u00b6,,Most editors save as UTF-8 by default nowadays but in case your editor is\nnot configured to do this you have to change it.  Here some common ways to\nset your editor to store as UTF-8:,,,Vim: put,set,,enc=utf-8,to your,.vimrc,file.,,,Emacs: either use an encoding cookie or put this into your,.emacs,file:,,(,prefer,-,coding,-,system,,'utf-8),,(,setq,,default,-,buffer,-,file,-,coding,-,system,,'utf-8),,,,,Notepad++:,,,Go to,Settings -> Preferences \u2026,,Select the \u201cNew Document/Default Directory\u201d tab,,Select \u201cUTF-8 without BOM\u201d as encoding,,,It is also recommended to use the Unix newline format, you can select\nit in the same panel but this is not a requirement.,,,,,,,,,,,,,,,Contents,,,Unicode in Flask,,Automatic Conversion,,The Golden Rule,,Encoding and Decoding Yourself,,Configuring Editors,,,,,Navigation,,,Overview,,,Previous:,Security Considerations,,Next:,Flask Extension Development,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Unicode in Flask", "url": "http://flask.pocoo.org/docs/1.0/unicode/", "content": ",,,,,Unicode in Flask \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,,,,,,,,Unicode in Flask,\u00b6,,Flask, like Jinja2 and Werkzeug, is totally Unicode based when it comes to\ntext.  Not only these libraries, also the majority of web related Python\nlibraries that deal with text.  If you don\u2019t know Unicode so far, you\nshould probably read,The Absolute Minimum Every Software Developer\nAbsolutely, Positively Must Know About Unicode and Character Sets,.  This part of the\ndocumentation just tries to cover the very basics so that you have a\npleasant experience with Unicode related things.,,,Automatic Conversion,\u00b6,,Flask has a few assumptions about your application (which you can change\nof course) that give you basic and painless Unicode support:,,,the encoding for text on your website is UTF-8,,internally you will always use Unicode exclusively for text except\nfor literal strings with only ASCII character points.,,encoding and decoding happens whenever you are talking over a protocol\nthat requires bytes to be transmitted.,,,So what does this mean to you?,,HTTP is based on bytes.  Not only the protocol, also the system used to\naddress documents on servers (so called URIs or URLs).  However HTML which\nis usually transmitted on top of HTTP supports a large variety of\ncharacter sets and which ones are used, are transmitted in an HTTP header.\nTo not make this too complex Flask just assumes that if you are sending\nUnicode out you want it to be UTF-8 encoded.  Flask will do the encoding\nand setting of the appropriate headers for you.,,The same is true if you are talking to databases with the help of\nSQLAlchemy or a similar ORM system.  Some databases have a protocol that\nalready transmits Unicode and if they do not, SQLAlchemy or your other ORM\nshould take care of that.,,,,The Golden Rule,\u00b6,,So the rule of thumb: if you are not dealing with binary data, work with\nUnicode.  What does working with Unicode in Python 2.x mean?,,,as long as you are using ASCII charpoints only (basically numbers,\nsome special characters of latin letters without umlauts or anything\nfancy) you can use regular string literals (,'Hello,,World',).,,if you need anything else than ASCII in a string you have to mark\nthis string as Unicode string by prefixing it with a lowercase,u,.\n(like,u'H\u00e4nsel,,und,,Gretel',),,if you are using non-Unicode characters in your Python files you have\nto tell Python which encoding your file uses.  Again, I recommend\nUTF-8 for this purpose.  To tell the interpreter your encoding you can\nput the,#,,-*-,,coding:,,utf-8,,-*-,into the first or second line of\nyour Python source file.,,Jinja is configured to decode the template files from UTF-8.  So make\nsure to tell your editor to save the file as UTF-8 there as well.,,,,,Encoding and Decoding Yourself,\u00b6,,If you are talking with a filesystem or something that is not really based\non Unicode you will have to ensure that you decode properly when working\nwith Unicode interface.  So for example if you want to load a file on the\nfilesystem and embed it into a Jinja2 template you will have to decode it\nfrom the encoding of that file.  Here the old problem that text files do\nnot specify their encoding comes into play.  So do yourself a favour and\nlimit yourself to UTF-8 for text files as well.,,Anyways.  To load such a file with Unicode you can use the built-in,str.decode(),method:,,def,,read_file,(,filename,,,,charset,=,'utf-8',):,,with,,open,(,filename,,,,'r',),,as,,f,:,,return,,f,.,read,(),.,decode,(,charset,),,,,To go from Unicode into a specific charset such as UTF-8 you can use the,unicode.encode(),method:,,def,,write_file,(,filename,,,,contents,,,,charset,=,'utf-8',):,,with,,open,(,filename,,,,'w',),,as,,f,:,,f,.,write,(,contents,.,encode,(,charset,)),,,,,,Configuring Editors,\u00b6,,Most editors save as UTF-8 by default nowadays but in case your editor is\nnot configured to do this you have to change it.  Here some common ways to\nset your editor to store as UTF-8:,,,Vim: put,set,,enc=utf-8,to your,.vimrc,file.,,,Emacs: either use an encoding cookie or put this into your,.emacs,file:,,(,prefer,-,coding,-,system,,'utf-8),,(,setq,,default,-,buffer,-,file,-,coding,-,system,,'utf-8),,,,,Notepad++:,,,Go to,Settings -> Preferences \u2026,,Select the \u201cNew Document/Default Directory\u201d tab,,Select \u201cUTF-8 without BOM\u201d as encoding,,,It is also recommended to use the Unix newline format, you can select\nit in the same panel but this is not a requirement.,,,,,,,,,,,,,,,Contents,,,Unicode in Flask,,Automatic Conversion,,The Golden Rule,,Encoding and Decoding Yourself,,Configuring Editors,,,,,Navigation,,,Overview,,,Previous:,Security Considerations,,Next:,Flask Extension Development,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Pocoo Styleguide", "url": "http://flask.pocoo.org/docs/1.0/styleguide/", "content": ",,,,,Pocoo Styleguide \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,,,,,,,,Pocoo Styleguide,\u00b6,,The Pocoo styleguide is the styleguide for all Pocoo Projects, including\nFlask.  This styleguide is a requirement for Patches to Flask and a\nrecommendation for Flask extensions.,,In general the Pocoo Styleguide closely follows,PEP 8,with some small\ndifferences and extensions.,,,General Layout,\u00b6,,,Indentation:,,4 real spaces.  No tabs, no exceptions.,,Maximum line length:,,79 characters with a soft limit for 84 if absolutely necessary.  Try\nto avoid too nested code by cleverly placing,break,,,continue,and,return,statements.,,Continuing long statements:,,To continue a statement you can use backslashes in which case you should\nalign the next line with the last dot or equal sign, or indent four\nspaces:,,this_is_a_very_long,(,function_call,,,,'with many parameters',),\\,.,that_returns_an_object_with_an_attribute,,MyModel,.,query,.,filter,(,MyModel,.,scalar,,>,,120,),\\,.,order_by,(,MyModel,.,name,.,desc,()),\\,.,limit,(,10,),,,,If you break in a statement with parentheses or braces, align to the\nbraces:,,this_is_a_very_long,(,function_call,,,,'with many parameters',,,,23,,,,42,,,,'and even more',),,,,For lists or tuples with many items, break immediately after the\nopening brace:,,items,,=,,[,,'this is the first',,,,'set of items',,,,'with more items',,,,'to come in this line',,,,'like this',,],,,,,Blank lines:,,Top level functions and classes are separated by two lines, everything\nelse by one.  Do not use too many blank lines to separate logical\nsegments in code.  Example:,,def,,hello,(,name,):,,print,,'Hello,%s,!',,%,,name,,def,,goodbye,(,name,):,,print,,'See you,%s,.',,%,,name,,class,,MyClass,(,object,):,,\"\"\"This is a simple docstring\"\"\",,def,,__init__,(,self,,,,name,):,,self,.,name,,=,,name,,def,,get_annoying_name,(,self,):,,return,,self,.,name,.,upper,(),,+,,'!!!!111',,,,,,,,Expressions and Statements,\u00b6,,,General whitespace rules:,,,No whitespace for unary operators that are not words\n(e.g.:,-,,,~,etc.) as well on the inner side of parentheses.,,Whitespace is placed between binary operators.,,,Good:,,exp,,=,,-,1.05,,value,,=,,(,item_value,,/,,item_count,),,*,,offset,,/,,exp,,value,,=,,my_list,[,index,],,value,,=,,my_dict,[,'key',],,,,Bad:,,exp,,=,,-,,1.05,,value,,=,,(,,item_value,,/,,item_count,,),,*,,offset,,/,,exp,,value,,=,,(,item_value,/,item_count,),*,offset,/,exp,,value,=,(,,item_value,/,item_count,,),,*,,offset,/,exp,,value,,=,,my_list,[,,index,,],,value,,=,,my_dict,,[,'key',],,,,,Yoda statements are a no-go:,,Never compare constant with variable, always variable with constant:,,Good:,,if,,method,,==,,'md5',:,,pass,,,,Bad:,,if,,'md5',,==,,method,:,,pass,,,,,Comparisons:,,,against arbitrary types:,==,and,!=,,against singletons with,is,and,is,,not,(eg:,foo,,is,,not,,None,),,never compare something with,True,or,False,(for example never\ndo,foo,,==,,False,, do,not,,foo,instead),,,,Negated containment checks:,,use,foo,,not,,in,,bar,instead of,not,,foo,,in,,bar,,Instance checks:,,isinstance(a,,,C),instead of,type(A),,is,,C,, but try to avoid\ninstance checks in general.  Check for features.,,,,,Naming Conventions,\u00b6,,,Class names:,CamelCase,, with acronyms kept uppercase (,HTTPWriter,and not,HttpWriter,),,Variable names:,lowercase_with_underscores,,Method and function names:,lowercase_with_underscores,,Constants:,UPPERCASE_WITH_UNDERSCORES,,precompiled regular expressions:,name_re,,,Protected members are prefixed with a single underscore.  Double\nunderscores are reserved for mixin classes.,,On classes with keywords, trailing underscores are appended.  Clashes with\nbuiltins are allowed and,must not,be resolved by appending an\nunderline to the variable name.  If the function needs to access a\nshadowed builtin, rebind the builtin to a different name instead.,,,Function and method arguments:,,,class methods:,cls,as first parameter,,instance methods:,self,as first parameter,,lambdas for properties might have the first parameter replaced\nwith,x,like in,display_name,,=,,property(lambda,,x:,,x.real_name,,or,,x.username),,,,,,,Docstrings,\u00b6,,,Docstring conventions:,,All docstrings are formatted with reStructuredText as understood by\nSphinx.  Depending on the number of lines in the docstring, they are\nlaid out differently.  If it\u2019s just one line, the closing triple\nquote is on the same line as the opening, otherwise the text is on\nthe same line as the opening quote and the triple quote that closes\nthe string on its own line:,,def,,foo,():,,\"\"\"This is a simple docstring\"\"\",,def,,bar,():,,\"\"\"This is a longer docstring with so much information in there,,that it spans three lines.  In this case the closing triple quote,,is on its own line.,,\"\"\",,,,,Module header:,,The module header consists of a utf-8 encoding declaration (if non\nASCII letters are used, but it is recommended all the time) and a\nstandard docstring:,,# -*- coding: utf-8 -*-,,\"\"\",,package.module,,~~~~~~~~~~~~~~,,A brief description goes here.,,:copyright: (c) YEAR by AUTHOR.,,:license: LICENSE_NAME, see LICENSE_FILE for more details.,,\"\"\",,,,Please keep in mind that proper copyrights and license files are a\nrequirement for approved Flask extensions.,,,,,,Comments,\u00b6,,Rules for comments are similar to docstrings.  Both are formatted with\nreStructuredText.  If a comment is used to document an attribute, put a\ncolon after the opening pound sign (,#,):,,class,,User,(,object,):,,#: the name of the user as unicode string,,name,,=,,Column,(,String,),,#: the sha1 hash of the password + inline salt,,pw_hash,,=,,Column,(,String,),,,,,,,,,,,,,,,Contents,,,Pocoo Styleguide,,General Layout,,Expressions and Statements,,Naming Conventions,,Docstrings,,Comments,,,,,Navigation,,,Overview,,,Previous:,Flask Extension Development,,Next:,Upgrading to Newer Releases,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Python 3 Support", "url": "http://flask.pocoo.org/docs/dev/python3/", "content": ",,,Python 3 Support \u2014 Flask Documentation (0.13-dev),,,,var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../',\n        VERSION:     '0.13.dev',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };,,,,,,,,,,,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask Documentation (0.13-dev),\u00bb,,,,,Warning:,This is the documentation for the development version of Flask,,,,,,Python 3 Support,\u00b6,,Flask, its dependencies, and most Flask extensions support Python 3.\nYou should start using Python 3 for your next project,\nbut there are a few things to be aware of.,,You need to use Python 3.3 or higher.  3.2 and older are,not,supported.,,You should use the latest versions of all Flask-related packages.\nFlask 0.10 and Werkzeug 0.9 were the first versions to introduce Python 3 support.,,Python 3 changed how unicode and bytes are handled, which complicates how low\nlevel code handles HTTP data.  This mainly affects WSGI middleware interacting\nwith the WSGI,environ,data.  Werkzeug wraps that information in high-level\nhelpers, so encoding issues should not affect you.,,The majority of the upgrade work is in the lower-level libraries like\nFlask and Werkzeug, not the high-level application code.\nFor example, all of the examples in the Flask repository work on both Python 2 and 3\nand did not require a single line of code changed.,,,,,,,,,Versions,,,Development,,(unstable),,Flask 0.12.x,,(stable),,Flask 0.11.x,,Flask 0.10.x,,,,,Related Topics,,,Documentation overview,,Previous:,Pocoo Styleguide,,Next:,Upgrading to Newer Releases,,,,,Quick search,,,,,,,,,,,\u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using,Sphinx,.,,"},
{"name": "Security Considerations", "url": "http://flask.pocoo.org/docs/dev/security/", "content": ",,,,,Security Considerations \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,Security Considerations,\u00b6,,Web applications usually face all kinds of security problems and it\u2019s very\nhard to get everything right.  Flask tries to solve a few of these things\nfor you, but there are a couple more you have to take care of yourself.,,,Cross-Site Scripting (XSS),\u00b6,,Cross site scripting is the concept of injecting arbitrary HTML (and with\nit JavaScript) into the context of a website.  To remedy this, developers\nhave to properly escape text so that it cannot include arbitrary HTML\ntags.  For more information on that have a look at the Wikipedia article\non,Cross-Site Scripting,.,,Flask configures Jinja2 to automatically escape all values unless\nexplicitly told otherwise.  This should rule out all XSS problems caused\nin templates, but there are still other places where you have to be\ncareful:,,,generating HTML without the help of Jinja2,,calling,Markup,on data submitted by users,,sending out HTML from uploaded files, never do that, use the,Content-Disposition:,,attachment,header to prevent that problem.,,sending out textfiles from uploaded files.  Some browsers are using\ncontent-type guessing based on the first few bytes so users could\ntrick a browser to execute HTML.,,,Another thing that is very important are unquoted attributes.  While\nJinja2 can protect you from XSS issues by escaping HTML, there is one\nthing it cannot protect you from: XSS by attribute injection.  To counter\nthis possible attack vector, be sure to always quote your attributes with\neither double or single quotes when using Jinja expressions in them:,,<,input,,value,=,\",{{,,value,,}},\",>,,,,Why is this necessary?  Because if you would not be doing that, an\nattacker could easily inject custom JavaScript handlers.  For example an\nattacker could inject this piece of HTML+JavaScript:,,onmouseover=alert(document.cookie),,,When the user would then move with the mouse over the input, the cookie\nwould be presented to the user in an alert window.  But instead of showing\nthe cookie to the user, a good attacker might also execute any other\nJavaScript code.  In combination with CSS injections the attacker might\neven make the element fill out the entire page so that the user would\njust have to have the mouse anywhere on the page to trigger the attack.,,There is one class of XSS issues that Jinja\u2019s escaping does not protect\nagainst. The,a,tag\u2019s,href,attribute can contain a,javascript:,URI,\nwhich the browser will execute when clicked if not secured properly.,,<,a,,href,=,\"{{ value }}\",>,click here,</,a,>,,<,a,,href,=,\"javascript:alert('unsafe');\",>,click here,</,a,>,,,,To prevent this, you\u2019ll need to set the,Content Security Policy (CSP),response header.,,,,Cross-Site Request Forgery (CSRF),\u00b6,,Another big problem is CSRF.  This is a very complex topic and I won\u2019t\noutline it here in detail just mention what it is and how to theoretically\nprevent it.,,If your authentication information is stored in cookies, you have implicit\nstate management.  The state of \u201cbeing logged in\u201d is controlled by a\ncookie, and that cookie is sent with each request to a page.\nUnfortunately that includes requests triggered by 3rd party sites.  If you\ndon\u2019t keep that in mind, some people might be able to trick your\napplication\u2019s users with social engineering to do stupid things without\nthem knowing.,,Say you have a specific URL that, when you sent,POST,requests to will\ndelete a user\u2019s profile (say,http://example.com/user/delete,).  If an\nattacker now creates a page that sends a post request to that page with\nsome JavaScript they just have to trick some users to load that page and\ntheir profiles will end up being deleted.,,Imagine you were to run Facebook with millions of concurrent users and\nsomeone would send out links to images of little kittens.  When users\nwould go to that page, their profiles would get deleted while they are\nlooking at images of fluffy cats.,,How can you prevent that?  Basically for each request that modifies\ncontent on the server you would have to either use a one-time token and\nstore that in the cookie,and,also transmit it with the form data.\nAfter receiving the data on the server again, you would then have to\ncompare the two tokens and ensure they are equal.,,Why does Flask not do that for you?  The ideal place for this to happen is\nthe form validation framework, which does not exist in Flask.,,,,JSON Security,\u00b6,,In Flask 0.10 and lower,,jsonify(),did not serialize top-level\narrays to JSON. This was because of a security vulnerability in ECMAScript 4.,,ECMAScript 5 closed this vulnerability, so only extremely old browsers are\nstill vulnerable. All of these browsers have,other more serious\nvulnerabilities,, so\nthis behavior was changed and,jsonify(),now supports serializing\narrays.,,,,Security Headers,\u00b6,,Browsers recognize various response headers in order to control security. We\nrecommend reviewing each of the headers below for use in your application.\nThe,Flask-Talisman,extension can be used to manage HTTPS and the security\nheaders for you.,,,HTTP Strict Transport Security (HSTS),\u00b6,,Tells the browser to convert all HTTP requests to HTTPS, preventing\nman-in-the-middle (MITM) attacks.,,response,.,headers,[,'Strict-Transport-Security',],,=,,'max-age=31536000; includeSubDomains',,,,,https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security,,,,,Content Security Policy (CSP),\u00b6,,Tell the browser where it can load various types of resource from. This header\nshould be used whenever possible, but requires some work to define the correct\npolicy for your site. A very strict policy would be:,,response,.,headers,[,'Content-Security-Policy',],,=,,\"default-src 'self'\",,,,,https://csp.withgoogle.com/docs/index.html,,https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy,,,,,X-Content-Type-Options,\u00b6,,Forces the browser to honor the response content type instead of trying to\ndetect it, which can be abused to generate a cross-site scripting (XSS)\nattack.,,response,.,headers,[,'X-Content-Type-Options',],,=,,'nosniff',,,,,https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options,,,,,X-Frame-Options,\u00b6,,Prevents external sites from embedding your site in an,iframe,. This\nprevents a class of attacks where clicks in the outer frame can be translated\ninvisibly to clicks on your page\u2019s elements. This is also known as\n\u201cclickjacking\u201d.,,response,.,headers,[,'X-Frame-Options',],,=,,'SAMEORIGIN',,,,,https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options,,,,,X-XSS-Protection,\u00b6,,The browser will try to prevent reflected XSS attacks by not loading the page\nif the request contains something that looks like JavaScript and the response\ncontains the same data.,,response,.,headers,[,'X-XSS-Protection',],,=,,'1; mode=block',,,,,https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection,,,,,Set-Cookie options,\u00b6,,These options can be added to a,Set-Cookie,header to improve their\nsecurity. Flask has configuration options to set these on the session cookie.\nThey can be set on other cookies too.,,,Secure,limits cookies to HTTPS traffic only.,,HttpOnly,protects the contents of cookies from being read with\nJavaScript.,,SameSite,restricts how cookies are sent with requests from\nexternal sites. Can be set to,'Lax',(recommended) or,'Strict',.,Lax,prevents sending cookies with CSRF-prone requests from\nexternal sites, such as submitting a form.,Strict,prevents sending\ncookies with all external requests, including following regular links.,,,app,.,config,.,update,(,,SESSION_COOKIE_SECURE,=,True,,,,SESSION_COOKIE_HTTPONLY,=,True,,,,SESSION_COOKIE_SAMESITE,=,'Lax',,,,),,response,.,set_cookie,(,'username',,,,'flask',,,,secure,=,True,,,,httponly,=,True,,,,samesite,=,'Lax',),,,,Specifying,Expires,or,Max-Age,options, will remove the cookie after\nthe given time, or the current time plus the age, respectively. If neither\noption is set, the cookie will be removed when the browser is closed.,,# cookie expires after 10 minutes,,response,.,set_cookie,(,'snakes',,,,'3',,,,max_age,=,600,),,,,For the session cookie, if,session.permanent,is set, then,PERMANENT_SESSION_LIFETIME,is used to set the expiration.\nFlask\u2019s default cookie implementation validates that the cryptographic\nsignature is not older than this value. Lowering this value may help mitigate\nreplay attacks, where intercepted cookies can be sent at a later time.,,app,.,config,.,update,(,,PERMANENT_SESSION_LIFETIME,=,600,,),,@app,.,route,(,'/login',,,,methods,=,[,'POST',]),,def,,login,():,,...,,session,.,clear,(),,session,[,'user_id',],,=,,user,.,id,,session,.,permanent,,=,,True,,...,,,,Use,itsdangerous.TimedSerializer,to sign and validate other cookie\nvalues (or any values that need secure signatures).,,,https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies,,https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie,,,,,HTTP Public Key Pinning (HPKP),\u00b6,,This tells the browser to authenticate with the server using only the specific\ncertificate key to prevent MITM attacks.,,,Warning,,Be careful when enabling this, as it is very difficult to undo if you set up\nor upgrade your key incorrectly.,,,,https://developer.mozilla.org/en-US/docs/Web/HTTP/Public_Key_Pinning,,,,,,,,,,,,,,,Contents,,,Security Considerations,,Cross-Site Scripting (XSS),,Cross-Site Request Forgery (CSRF),,JSON Security,,Security Headers,,HTTP Strict Transport Security (HSTS),,Content Security Policy (CSP),,X-Content-Type-Options,,X-Frame-Options,,X-XSS-Protection,,Set-Cookie options,,HTTP Public Key Pinning (HPKP),,,,,,,Navigation,,,Overview,,,Previous:,HTML/XHTML FAQ,,Next:,Unicode in Flask,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "License", "url": "http://flask.pocoo.org/docs/1.0/license/", "content": ",,,,,License \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,,,,,,,,License,\u00b6,,Flask is licensed under a three clause BSD License.  It basically means:\ndo whatever you want with it as long as the copyright in Flask sticks\naround, the conditions are not modified and the disclaimer is present.\nFurthermore you must not use the names of the authors to promote derivatives\nof the software without written consent.,,The full license text can be found below (,Flask License,).  For the\ndocumentation and artwork different licenses apply.,,,Authors,\u00b6,,Flask is developed and maintained by the Pallets team and community\ncontributors. It was created by Armin Ronacher. The core maintainers\nare:,,,David Lord (davidism),,Adrian M\u00f6nnich (ThiefMaster),,Armin Ronacher (mitsuhiko),,Marcus Unterwaditzer (untitaker),,,A full list of contributors is available from git with:,,git,,shortlog,,-,sne,,,,,,General License Definitions,\u00b6,,The following section contains the full license texts for Flask and the\ndocumentation.,,,\u201cAUTHORS\u201d hereby refers to all the authors listed in the,Authors,section.,,The \u201c,Flask License,\u201d applies to all the source code shipped as\npart of Flask (Flask itself as well as the examples and the unittests)\nas well as documentation.,,The \u201c,Flask Artwork License,\u201d applies to the project\u2019s Horn-Logo.,,,,,Flask License,\u00b6,,Copyright \u00a9 2010 by the Pallets team.,,Some rights reserved.,,Redistribution and use in source and binary forms of the software as\nwell as documentation, with or without modification, are permitted\nprovided that the following conditions are met:,,,Redistributions of source code must retain the above copyright notice,\nthis list of conditions and the following disclaimer.,,Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.,,Neither the name of the copyright holder nor the names of its\ncontributors may be used to endorse or promote products derived from\nthis software without specific prior written permission.,,,THIS SOFTWARE AND DOCUMENTATION IS PROVIDED BY THE COPYRIGHT HOLDERS AND\nCONTRIBUTORS \u201cAS IS\u201d AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,\nBUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\nFITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\nCOPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\nINCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\nNOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\nUSE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHIS SOFTWARE AND DOCUMENTATION, EVEN IF ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGE.,,,,Flask Artwork License,\u00b6,,Copyright (c) 2010 by Armin Ronacher.,,Some rights reserved.,,This logo or a modified version may be used by anyone to refer to the\nFlask project, but does not indicate endorsement by the project.,,Redistribution and use in source (the SVG file) and binary forms (rendered\nPNG files etc.) of the image, with or without modification, are permitted\nprovided that the following conditions are met:,,,Redistributions of source code must retain the above copyright\nnotice and this list of conditions.,,The names of the contributors to the Flask software (see AUTHORS) may\nnot be used to endorse or promote products derived from this software\nwithout specific prior written permission.,,,Note: we would appreciate that you make the image a link to,http://flask.pocoo.org/,if you use it on a web page.,,,,,,,,,,,,,Contents,,,License,,Authors,,General License Definitions,,Flask License,,Flask Artwork License,,,,,Navigation,,,Overview,,,Previous:,Flask Changelog,,Next:,How to contribute to Flask,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Keep Developing!", "url": "http://flask.pocoo.org/docs/dev/tutorial/next/", "content": ",,,,,Keep Developing! \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,Tutorial,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,Keep Developing!,\u00b6,,You\u2019ve learned about quite a few Flask and Python concepts throughout\nthe tutorial. Go back and review the tutorial and compare your code with\nthe steps you took to get there. Compare your project to the,example project,, which might look a bit\ndifferent due to the step-by-step nature of the tutorial.,,There\u2019s a lot more to Flask than what you\u2019ve seen so far. Even so,\nyou\u2019re now equipped to start developing your own web applications. Check\nout the,Quickstart,for an overview of what Flask can do, then\ndive into the docs to keep learning. Flask uses,Jinja,,,Click,,,Werkzeug,, and,ItsDangerous,behind the scenes, and they all have\ntheir own documentation too. You\u2019ll also be interested in,Extensions,which make tasks like working with the database or\nvalidating form data easier and more powerful.,,If you want to keep developing your Flaskr project, here are some ideas\nfor what to try next:,,,A detail view to show a single post. Click a post\u2019s title to go to\nits page.,,Like / unlike a post.,,Comments.,,Tags. Clicking a tag shows all the posts with that tag.,,A search box that filters the index page by name.,,Paged display. Only show 5 posts per page.,,Upload an image to go along with a post.,,Format posts using Markdown.,,An RSS feed of new posts.,,,Have fun and make awesome applications!,,,,,,,,,,,Navigation,,,Overview,,,Tutorial,,,Previous:,Deploy to Production,,Next:,Templates,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Deploy to Production", "url": "http://flask.pocoo.org/docs/dev/tutorial/deploy/", "content": ",,,,,Deploy to Production \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,Tutorial,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,Deploy to Production,\u00b6,,This part of the tutorial assumes you have a server that you want to\ndeploy your application to. It gives an overview of how to create the\ndistribution file and install it, but won\u2019t go into specifics about\nwhat server or software to use. You can set up a new environment on your\ndevelopment computer to try out the instructions below, but probably\nshouldn\u2019t use it for hosting a real public application. See,Deployment Options,for a list of many different ways to host your\napplication.,,,Build and Install,\u00b6,,When you want to deploy your application elsewhere, you build a\ndistribution file. The current standard for Python distribution is the,wheel,format, with the,.whl,extension. Make sure the wheel library\nis installed first:,,pip install wheel,,,Running,setup.py,with Python gives you a command line tool to issue\nbuild-related commands. The,bdist_wheel,command will build a wheel\ndistribution file.,,python setup.py bdist_wheel,,,You can find the file in,dist/flaskr-1.0.0-py3-none-any.whl,. The\nfile name is the name of the project, the version, and some tags about\nthe file can install.,,Copy this file to another machine,,set up a new virtualenv,, then install the\nfile with,pip,.,,pip install flaskr-1.0.0-py3-none-any.whl,,,Pip will install your project along with its dependencies.,,Since this is a different machine, you need to run,init-db,again to\ncreate the database in the instance folder.,,export FLASK_APP=flaskr\nflask init-db,,,When Flask detects that it\u2019s installed (not in editable mode), it uses\na different directory for the instance folder. You can find it at,venv/var/flaskr-instance,instead.,,,,Configure the Secret Key,\u00b6,,In the beginning of the tutorial that you gave a default value for,SECRET_KEY,. This should be changed to some random bytes in\nproduction. Otherwise, attackers could use the public,'dev',key to\nmodify the session cookie, or anything else that uses the secret key.,,You can use the following command to output a random secret key:,,python -c 'import os; print(os.urandom(16))'\n\nb'_5#y2L\"F4Q8z\\n\\xec]/',,,Create the,config.py,file in the instance folder, which the factory\nwill read from if it exists. Copy the generated value into it.,,,venv/var/flaskr-instance/config.py,\u00b6,,SECRET_KEY,,=,,b,'_5#y2L\"F4Q8z,\\n\\xec,]/',,,,,You can also set any other necessary configuration here, although,SECRET_KEY,is the only one needed for Flaskr.,,,,Run with a Production Server,\u00b6,,When running publicly rather than in development, you should not use the\nbuilt-in development server (,flask,,run,). The development server is\nprovided by Werkzeug for convenience, but is not designed to be\nparticularly efficient, stable, or secure.,,Instead, use a production WSGI server. For example, to use,Waitress,,\nfirst install it in the virtual environment:,,pip install waitress,,,You need to tell Waitress about your application, but it doesn\u2019t use,FLASK_APP,like,flask,,run,does. You need to tell it to import and\ncall the application factory to get an application object.,,waitress-serve --call 'flaskr:create_app'\n\nServing on http://0.0.0.0:8080,,,See,Deployment Options,for a list of many different ways to host\nyour application. Waitress is just an example, chosen for the tutorial\nbecause it supports both Windows and Linux. There are many more WSGI\nservers and deployment options that you may choose for your project.,,Continue to,Keep Developing!,.,,,,,,,,,,,,,Contents,,,Deploy to Production,,Build and Install,,Configure the Secret Key,,Run with a Production Server,,,,,Navigation,,,Overview,,,Tutorial,,,Previous:,Test Coverage,,Next:,Keep Developing!,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Test Coverage", "url": "http://flask.pocoo.org/docs/dev/tutorial/tests/", "content": ",,,,,Test Coverage \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,Tutorial,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,Test Coverage,\u00b6,,Writing unit tests for your application lets you check that the code\nyou wrote works the way you expect. Flask provides a test client that\nsimulates requests to the application and returns the response data.,,You should test as much of your code as possible. Code in functions only\nruns when the function is called, and code in branches, such as,if,blocks, only runs when the condition is met. You want to make sure that\neach function is tested with data that covers each branch.,,The closer you get to 100% coverage, the more comfortable you can be\nthat making a change won\u2019t unexpectedly change other behavior. However,\n100% coverage doesn\u2019t guarantee that your application doesn\u2019t have bugs.\nIn particular, it doesn\u2019t test how the user interacts with the\napplication in the browser. Despite this, test coverage is an important\ntool to use during development.,,,Note,,This is being introduced late in the tutorial, but in your future\nprojects you should test as you develop.,,,You\u2019ll use,pytest,and,coverage,to test and measure your code.\nInstall them both:,,pip install pytest coverage,,,,Setup and Fixtures,\u00b6,,The test code is located in the,tests,directory. This directory is,next to,the,flaskr,package, not inside it. The,tests/conftest.py,file contains setup functions called,fixtures,that each test will use. Tests are in Python modules that start with,test_,, and each test function in those modules also starts with,test_,.,,Each test will create a new temporary database file and populate some\ndata that will be used in the tests. Write a SQL file to insert that\ndata.,,,tests/data.sql,\u00b6,,INSERT,,INTO,,user,,(,username,,,,password,),,VALUES,,(,'test',,,,'pbkdf2:sha256:50000$TCI4GzcX$0de171a4f4dac32e3364c7ddc7c14f3e2fa61f2d17574483f7ffbb431b4acb2f',),,,(,'other',,,,'pbkdf2:sha256:50000$kJPKsz6N$d2d4784f1b030a9761f5ccaeeaca413f27f2ecb76d6168407af962ddce849f79',);,,INSERT,,INTO,,post,,(,title,,,,body,,,,author_id,,,,created,),,VALUES,,(,'test title',,,,'test',,||,,x,'0a',,||,,'body',,,,1,,,,'2018-01-01 00:00:00',);,,,,,The,app,fixture will call the factory and pass,test_config,to\nconfigure the application and database for testing instead of using your\nlocal development configuration.,,,tests/conftest.py,\u00b6,,import,,os,,import,,tempfile,,import,,pytest,,from,,flaskr,,import,,create_app,,from,,flaskr.db,,import,,get_db,,,,init_db,,with,,open,(,os,.,path,.,join,(,os,.,path,.,dirname,(,__file__,),,,'data.sql',),,,'rb',),,as,,f,:,,_data_sql,,=,,f,.,read,(),.,decode,(,'utf8',),,@pytest.fixture,,def,,app,():,,db_fd,,,,db_path,,=,,tempfile,.,mkstemp,(),,app,,=,,create_app,({,,'TESTING',:,,True,,,,'DATABASE',:,,db_path,,,,}),,with,,app,.,app_context,():,,init_db,(),,get_db,(),.,executescript,(,_data_sql,),,yield,,app,,os,.,close,(,db_fd,),,os,.,unlink,(,db_path,),,@pytest.fixture,,def,,client,(,app,):,,return,,app,.,test_client,(),,@pytest.fixture,,def,,runner,(,app,):,,return,,app,.,test_cli_runner,(),,,,,tempfile.mkstemp(),creates and opens a temporary file, returning\nthe file object and the path to it. The,DATABASE,path is\noverridden so it points to this temporary path instead of the instance\nfolder. After setting the path, the database tables are created and the\ntest data is inserted. After the test is over, the temporary file is\nclosed and removed.,,TESTING,tells Flask that the app is in test mode. Flask changes\nsome internal behavior so it\u2019s easier to test, and other extensions can\nalso use the flag to make testing them easier.,,The,client,fixture calls,app.test_client(),with the application\nobject created by the,app,fixture. Tests will use the client to make\nrequests to the application without running the server.,,The,runner,fixture is similar to,client,.,app.test_cli_runner(),creates a runner\nthat can call the Click commands registered with the application.,,Pytest uses fixtures by matching their function names with the names\nof arguments in the test functions. For example, the,test_hello,function you\u2019ll write next takes a,client,argument. Pytest matches\nthat with the,client,fixture function, calls it, and passes the\nreturned value to the test function.,,,,Factory,\u00b6,,There\u2019s not much to test about the factory itself. Most of the code will\nbe executed for each test already, so if something fails the other tests\nwill notice.,,The only behavior that can change is passing test config. If config is\nnot passed, there should be some default configuration, otherwise the\nconfiguration should be overridden.,,,tests/test_factory.py,\u00b6,,from,,flaskr,,import,,create_app,,def,,test_config,():,,assert,,not,,create_app,(),.,testing,,assert,,create_app,({,'TESTING',:,,True,}),.,testing,,def,,test_hello,(,client,):,,response,,=,,client,.,get,(,'/hello',),,assert,,response,.,data,,==,,b,'Hello, World!',,,,,You added the,hello,route as an example when writing the factory at\nthe beginning of the tutorial. It returns \u201cHello, World!\u201d, so the test\nchecks that the response data matches.,,,,Database,\u00b6,,Within an application context,,get_db,should return the same\nconnection each time it\u2019s called. After the context, the connection\nshould be closed.,,,tests/test_db.py,\u00b6,,import,,sqlite3,,import,,pytest,,from,,flaskr.db,,import,,get_db,,def,,test_get_close_db,(,app,):,,with,,app,.,app_context,():,,db,,=,,get_db,(),,assert,,db,,is,,get_db,(),,with,,pytest,.,raises,(,sqlite3,.,ProgrammingError,),,as,,e,:,,db,.,execute,(,'SELECT 1',),,assert,,'closed',,in,,str,(,e,),,,,,The,init-db,command should call the,init_db,function and output\na message.,,,tests/test_db.py,\u00b6,,def,,test_init_db_command,(,runner,,,,monkeypatch,):,,class,,Recorder,(,object,):,,called,,=,,False,,def,,fake_init_db,():,,Recorder,.,called,,=,,True,,monkeypatch,.,setattr,(,'flaskr.db.init_db',,,,fake_init_db,),,result,,=,,runner,.,invoke,(,args,=,[,'init-db',]),,assert,,'Initialized',,in,,result,.,output,,assert,,Recorder,.,called,,,,,This test uses Pytest\u2019s,monkeypatch,fixture to replace the,init_db,function with one that records that it\u2019s been called. The,runner,fixture you wrote above is used to call the,init-db,command by name.,,,,Authentication,\u00b6,,For most of the views, a user needs to be logged in. The easiest way to\ndo this in tests is to make a,POST,request to the,login,view\nwith the client. Rather than writing that out every time, you can write\na class with methods to do that, and use a fixture to pass it the client\nfor each test.,,,tests/conftest.py,\u00b6,,class,,AuthActions,(,object,):,,def,,__init__,(,self,,,,client,):,,self,.,_client,,=,,client,,def,,login,(,self,,,,username,=,'test',,,,password,=,'test',):,,return,,self,.,_client,.,post,(,,'/auth/login',,,,data,=,{,'username',:,,username,,,,'password',:,,password,},,),,def,,logout,(,self,):,,return,,self,.,_client,.,get,(,'/auth/logout',),,@pytest.fixture,,def,,auth,(,client,):,,return,,AuthActions,(,client,),,,,,With the,auth,fixture, you can call,auth.login(),in a test to\nlog in as the,test,user, which was inserted as part of the test\ndata in the,app,fixture.,,The,register,view should render successfully on,GET,. On,POST,with valid form data, it should redirect to the login URL and the user\u2019s\ndata should be in the database. Invalid data should display error\nmessages.,,,tests/test_auth.py,\u00b6,,import,,pytest,,from,,flask,,import,,g,,,,session,,from,,flaskr.db,,import,,get_db,,def,,test_register,(,client,,,,app,):,,assert,,client,.,get,(,'/auth/register',),.,status_code,,==,,200,,response,,=,,client,.,post,(,,'/auth/register',,,,data,=,{,'username',:,,'a',,,,'password',:,,'a',},,),,assert,,'http://localhost/auth/login',,==,,response,.,headers,[,'Location',],,with,,app,.,app_context,():,,assert,,get_db,(),.,execute,(,,\"select * from user where username = 'a'\",,,,),.,fetchone,(),,is,,not,,None,,@pytest.mark.parametrize,((,'username',,,,'password',,,,'message',),,,(,,(,'',,,,'',,,,b,'Username is required.',),,,(,'a',,,,'',,,,b,'Password is required.',),,,(,'test',,,,'test',,,,b,'already registered',),,,)),,def,,test_register_validate_input,(,client,,,,username,,,,password,,,,message,):,,response,,=,,client,.,post,(,,'/auth/register',,,,data,=,{,'username',:,,username,,,,'password',:,,password,},,),,assert,,message,,in,,response,.,data,,,,,client.get(),makes a,GET,request\nand returns the,Response,object returned by Flask. Similarly,,client.post(),makes a,POST,request, converting the,data,dict into form data.,,To test that the page renders successfully, a simple request is made and\nchecked for a,200,,OK,,status_code,. If\nrendering failed, Flask would return a,500,,Internal,,Server,,Error,code.,,headers,will have a,Location,header with the login\nURL when the register view redirects to the login view.,,data,contains the body of the response as bytes. If\nyou expect a certain value to render on the page, check that it\u2019s in,data,. Bytes must be compared to bytes. If you want to compare\nUnicode text, use,get_data(as_text=True),instead.,,pytest.mark.parametrize,tells Pytest to run the same test function\nwith different arguments. You use it here to test different invalid\ninput and error messages without writing the same code three times.,,The tests for the,login,view are very similar to those for,register,. Rather than testing the data in the database,,session,should have,user_id,set after logging in.,,,tests/test_auth.py,\u00b6,,def,,test_login,(,client,,,,auth,):,,assert,,client,.,get,(,'/auth/login',),.,status_code,,==,,200,,response,,=,,auth,.,login,(),,assert,,response,.,headers,[,'Location',],,==,,'http://localhost/',,with,,client,:,,client,.,get,(,'/',),,assert,,session,[,'user_id',],,==,,1,,assert,,g,.,user,[,'username',],,==,,'test',,@pytest.mark.parametrize,((,'username',,,,'password',,,,'message',),,,(,,(,'a',,,,'test',,,,b,'Incorrect username.',),,,(,'test',,,,'a',,,,b,'Incorrect password.',),,,)),,def,,test_login_validate_input,(,auth,,,,username,,,,password,,,,message,):,,response,,=,,auth,.,login,(,username,,,,password,),,assert,,message,,in,,response,.,data,,,,,Using,client,in a,with,block allows accessing context variables\nsuch as,session,after the response is returned. Normally,\naccessing,session,outside of a request would raise an error.,,Testing,logout,is the opposite of,login,.,session,should\nnot contain,user_id,after logging out.,,,tests/test_auth.py,\u00b6,,def,,test_logout,(,client,,,,auth,):,,auth,.,login,(),,with,,client,:,,auth,.,logout,(),,assert,,'user_id',,not,,in,,session,,,,,,,Blog,\u00b6,,All the blog views use the,auth,fixture you wrote earlier. Call,auth.login(),and subsequent requests from the client will be logged\nin as the,test,user.,,The,index,view should display information about the post that was\nadded with the test data. When logged in as the author, there should be\na link to edit the post.,,You can also test some more authentication behavior while testing the,index,view. When not logged in, each page shows links to log in or\nregister. When logged in, there\u2019s a link to log out.,,,tests/test_blog.py,\u00b6,,import,,pytest,,from,,flaskr.db,,import,,get_db,,def,,test_index,(,client,,,,auth,):,,response,,=,,client,.,get,(,'/',),,assert,,b,\"Log In\",,in,,response,.,data,,assert,,b,\"Register\",,in,,response,.,data,,auth,.,login,(),,response,,=,,client,.,get,(,'/',),,assert,,b,'Log Out',,in,,response,.,data,,assert,,b,'test title',,in,,response,.,data,,assert,,b,'by test on 2018-01-01',,in,,response,.,data,,assert,,b,'test,\\n,body',,in,,response,.,data,,assert,,b,'href=\"/1/update\"',,in,,response,.,data,,,,,A user must be logged in to access the,create,,,update,, and,delete,views. The logged in user must be the author of the post to\naccess,update,and,delete,, otherwise a,403,,Forbidden,status\nis returned. If a,post,with the given,id,doesn\u2019t exist,,update,and,delete,should return,404,,Not,,Found,.,,,tests/test_blog.py,\u00b6,,@pytest.mark.parametrize,(,'path',,,,(,,'/create',,,,'/1/update',,,,'/1/delete',,,,)),,def,,test_login_required,(,client,,,,path,):,,response,,=,,client,.,post,(,path,),,assert,,response,.,headers,[,'Location',],,==,,'http://localhost/auth/login',,def,,test_author_required,(,app,,,,client,,,,auth,):,,# change the post author to another user,,with,,app,.,app_context,():,,db,,=,,get_db,(),,db,.,execute,(,'UPDATE post SET author_id = 2 WHERE id = 1',),,db,.,commit,(),,auth,.,login,(),,# current user can't modify other user's post,,assert,,client,.,post,(,'/1/update',),.,status_code,,==,,403,,assert,,client,.,post,(,'/1/delete',),.,status_code,,==,,403,,# current user doesn't see edit link,,assert,,b,'href=\"/1/update\"',,not,,in,,client,.,get,(,'/',),.,data,,@pytest.mark.parametrize,(,'path',,,,(,,'/2/update',,,,'/2/delete',,,,)),,def,,test_exists_required,(,client,,,,auth,,,,path,):,,auth,.,login,(),,assert,,client,.,post,(,path,),.,status_code,,==,,404,,,,,The,create,and,update,views should render and return a,200,,OK,status for a,GET,request. When valid data is sent in a,POST,request,,create,should insert the new post data into the\ndatabase, and,update,should modify the existing data. Both pages\nshould show an error message on invalid data.,,,tests/test_blog.py,\u00b6,,def,,test_create,(,client,,,,auth,,,,app,):,,auth,.,login,(),,assert,,client,.,get,(,'/create',),.,status_code,,==,,200,,client,.,post,(,'/create',,,,data,=,{,'title',:,,'created',,,,'body',:,,'',}),,with,,app,.,app_context,():,,db,,=,,get_db,(),,count,,=,,db,.,execute,(,'SELECT COUNT(id) FROM post',),.,fetchone,()[,0,],,assert,,count,,==,,2,,def,,test_update,(,client,,,,auth,,,,app,):,,auth,.,login,(),,assert,,client,.,get,(,'/1/update',),.,status_code,,==,,200,,client,.,post,(,'/1/update',,,,data,=,{,'title',:,,'updated',,,,'body',:,,'',}),,with,,app,.,app_context,():,,db,,=,,get_db,(),,post,,=,,db,.,execute,(,'SELECT * FROM post WHERE id = 1',),.,fetchone,(),,assert,,post,[,'title',],,==,,'updated',,@pytest.mark.parametrize,(,'path',,,,(,,'/create',,,,'/1/update',,,,)),,def,,test_create_update_validate,(,client,,,,auth,,,,path,):,,auth,.,login,(),,response,,=,,client,.,post,(,path,,,,data,=,{,'title',:,,'',,,,'body',:,,'',}),,assert,,b,'Title is required.',,in,,response,.,data,,,,,The,delete,view should redirect to the index URL and the post should\nno longer exist in the database.,,,tests/test_blog.py,\u00b6,,def,,test_delete,(,client,,,,auth,,,,app,):,,auth,.,login,(),,response,,=,,client,.,post,(,'/1/delete',),,assert,,response,.,headers,[,'Location',],,==,,'http://localhost/',,with,,app,.,app_context,():,,db,,=,,get_db,(),,post,,=,,db,.,execute,(,'SELECT * FROM post WHERE id = 1',),.,fetchone,(),,assert,,post,,is,,None,,,,,,,Running the Tests,\u00b6,,Some extra configuration, which is not required but makes running\ntests with coverage less verbose, can be added to the project\u2019s,setup.cfg,file.,,,setup.cfg,\u00b6,,[tool:pytest]\ntestpaths = tests\n\n[coverage:run]\nbranch = True\nsource =\n    flaskr,,,,To run the tests, use the,pytest,command. It will find and run all\nthe test functions you\u2019ve written.,,pytest\n\n========================= test session starts ==========================\nplatform linux -- Python 3.6.4, pytest-3.5.0, py-1.5.3, pluggy-0.6.0\nrootdir: /home/user/Projects/flask-tutorial, inifile: setup.cfg\ncollected 23 items\n\ntests/test_auth.py ........                                      [ 34%]\ntests/test_blog.py ............                                  [ 86%]\ntests/test_db.py ..                                              [ 95%]\ntests/test_factory.py ..                                         [100%]\n\n====================== 24 passed in 0.64 seconds =======================,,,If any tests fail, pytest will show the error that was raised. You can\nrun,pytest,,-v,to get a list of each test function rather than dots.,,To measure the code coverage of your tests, use the,coverage,command\nto run pytest instead of running it directly.,,coverage run -m pytest,,,You can either view a simple coverage report in the terminal:,,coverage report\n\nName                 Stmts   Miss Branch BrPart  Cover\n------------------------------------------------------\nflaskr/__init__.py      21      0      2      0   100%\nflaskr/auth.py          54      0     22      0   100%\nflaskr/blog.py          54      0     16      0   100%\nflaskr/db.py            24      0      4      0   100%\n------------------------------------------------------\nTOTAL                  153      0     44      0   100%,,,An HTML report allows you to see which lines were covered in each file:,,coverage html,,,This generates files in the,htmlcov,directory. Open,htmlcov/index.html,in your browser to see the report.,,Continue to,Deploy to Production,.,,,,,,,,,,,,,Contents,,,Test Coverage,,Setup and Fixtures,,Factory,,Database,,Authentication,,Blog,,Running the Tests,,,,,Navigation,,,Overview,,,Tutorial,,,Previous:,Make the Project Installable,,Next:,Deploy to Production,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Make the Project Installable", "url": "http://flask.pocoo.org/docs/dev/tutorial/install/", "content": ",,,,,Make the Project Installable \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,Tutorial,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,Make the Project Installable,\u00b6,,Making your project installable means that you can build a,distribution,file and install that in another environment, just like\nyou installed Flask in your project\u2019s environment. This makes deploying\nyour project the same as installing any other library, so you\u2019re using\nall the standard Python tools to manage everything.,,Installing also comes with other benefits that might not be obvious from\nthe tutorial or as a new Python user, including:,,,Currently, Python and Flask understand how to use the,flaskr,package only because you\u2019re running from your project\u2019s directory.\nInstalling means you can import it no matter where you run from.,,You can manage your project\u2019s dependencies just like other packages\ndo, so,pip,,install,,yourproject.whl,installs them.,,Test tools can isolate your test environment from your development\nenvironment.,,,,Note,,This is being introduced late in the tutorial, but in your future\nprojects you should always start with this.,,,,Describe the Project,\u00b6,,The,setup.py,file describes your project and the files that belong\nto it.,,,setup.py,\u00b6,,from,,setuptools,,import,,find_packages,,,,setup,,setup,(,,name,=,'flaskr',,,,version,=,'1.0.0',,,,packages,=,find_packages,(),,,include_package_data,=,True,,,,zip_safe,=,False,,,,install_requires,=,[,,'flask',,,,],,,),,,,,packages,tells Python what package directories (and the Python files\nthey contain) to include.,find_packages(),finds these directories\nautomatically so you don\u2019t have to type them out. To include other\nfiles, such as the static and templates directories,,include_package_data,is set. Python needs another file named,MANIFEST.in,to tell what this other data is.,,,MANIFEST.in,\u00b6,,include flaskr/schema.sql\ngraft flaskr/static\ngraft flaskr/templates\nglobal-exclude *.pyc,,,,This tells Python to copy everything in the,static,and,templates,directories, and the,schema.sql,file, but to exclude all bytecode\nfiles.,,See the,official packaging guide,for another explanation of the files\nand options used.,,,,Install the Project,\u00b6,,Use,pip,to install your project in the virtual environment.,,pip install -e .,,,This tells pip to find,setup.py,in the current directory and install\nit in,editable,or,development,mode. Editable mode means that as you\nmake changes to your local code, you\u2019ll only need to re-install if you\nchange the metadata about the project, such as its dependencies.,,You can observe that the project is now installed with,pip,,list,.,,pip list\n\nPackage        Version   Location\n-------------- --------- ----------------------------------\nclick          6.7\nFlask          1.0\nflaskr         1.0.0     /home/user/Projects/flask-tutorial\nitsdangerous   0.24\nJinja2         2.10\nMarkupSafe     1.0\npip            9.0.3\nsetuptools     39.0.1\nWerkzeug       0.14.1\nwheel          0.30.0,,,Nothing changes from how you\u2019ve been running your project so far.,FLASK_APP,is still set to,flaskr,and,flask,,run,still runs\nthe application.,,Continue to,Test Coverage,.,,,,,,,,,,,,,Contents,,,Make the Project Installable,,Describe the Project,,Install the Project,,,,,Navigation,,,Overview,,,Tutorial,,,Previous:,Blog Blueprint,,Next:,Test Coverage,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Blog Blueprint", "url": "http://flask.pocoo.org/docs/dev/tutorial/blog/", "content": ",,,,,Blog Blueprint \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,Tutorial,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,Blog Blueprint,\u00b6,,You\u2019ll use the same techniques you learned about when writing the\nauthentication blueprint to write the blog blueprint. The blog should\nlist all posts, allow logged in users to create posts, and allow the\nauthor of a post to edit or delete it.,,As you implement each view, keep the development server running. As you\nsave your changes, try going to the URL in your browser and testing them\nout.,,,The Blueprint,\u00b6,,Define the blueprint and register it in the application factory.,,,flaskr/blog.py,\u00b6,,from,,flask,,import,,(,,Blueprint,,,,flash,,,,g,,,,redirect,,,,render_template,,,,request,,,,url_for,,),,from,,werkzeug.exceptions,,import,,abort,,from,,flaskr.auth,,import,,login_required,,from,,flaskr.db,,import,,get_db,,bp,,=,,Blueprint,(,'blog',,,,__name__,),,,,,Import and register the blueprint from the factory using,app.register_blueprint(),. Place the\nnew code at the end of the factory function before returning the app.,,,flaskr/__init__.py,\u00b6,,def,,create_app,():,,app,,=,,...,,# existing code omitted,,from,,.,,import,,blog,,app,.,register_blueprint,(,blog,.,bp,),,app,.,add_url_rule,(,'/',,,,endpoint,=,'index',),,return,,app,,,,,Unlike the auth blueprint, the blog blueprint does not have a,url_prefix,. So the,index,view will be at,/,, the,create,view at,/create,, and so on. The blog is the main feature of Flaskr,\nso it makes sense that the blog index will be the main index.,,However, the endpoint for the,index,view defined below will be,blog.index,. Some of the authentication views referred to a plain,index,endpoint.,app.add_url_rule(),associates the endpoint name,'index',with the,/,url so that,url_for('index'),or,url_for('blog.index'),will both work,\ngenerating the same,/,URL either way.,,In another application you might give the blog blueprint a,url_prefix,and define a separate,index,view in the application\nfactory, similar to the,hello,view. Then the,index,and,blog.index,endpoints and URLs would be different.,,,,Index,\u00b6,,The index will show all of the posts, most recent first. A,JOIN,is\nused so that the author information from the,user,table is\navailable in the result.,,,flaskr/blog.py,\u00b6,,@bp.route,(,'/',),,def,,index,():,,db,,=,,get_db,(),,posts,,=,,db,.,execute,(,,'SELECT p.id, title, body, created, author_id, username',,' FROM post p JOIN user u ON p.author_id = u.id',,' ORDER BY created DESC',,),.,fetchall,(),,return,,render_template,(,'blog/index.html',,,,posts,=,posts,),,,,,,flaskr/templates/blog/index.html,\u00b6,,{%,,extends,,'base.html',,%},,{%,,block,,header,,%},,<,h1,>,{%,,block,,title,,%},Posts,{%,,endblock,,%},</,h1,>,,{%,,if,,g.user,,%},,<,a,,class,=,\"action\",,href,=,\",{{,,url_for,(,'blog.create',),,}},\",>,New,</,a,>,,{%,,endif,,%},,{%,,endblock,,%},,{%,,block,,content,,%},,{%,,for,,post,,in,,posts,,%},,<,article,,class,=,\"post\",>,,<,header,>,,<,div,>,,<,h1,>,{{,,post,[,'title',],,}},</,h1,>,,<,div,,class,=,\"about\",>,by,{{,,post,[,'username',],,}},on,{{,,post,[,'created',],.strftime,(,'%Y-%m-%d',),,}},</,div,>,,</,div,>,,{%,,if,,g.user,[,'id',],,==,,post,[,'author_id',],,%},,<,a,,class,=,\"action\",,href,=,\",{{,,url_for,(,'blog.update',,,,id,=,post,[,'id',]),,}},\",>,Edit,</,a,>,,{%,,endif,,%},,</,header,>,,<,p,,class,=,\"body\",>,{{,,post,[,'body',],,}},</,p,>,,</,article,>,,{%,,if,,not,,loop,.last,,%},,<,hr,>,,{%,,endif,,%},,{%,,endfor,,%},,{%,,endblock,,%},,,,,When a user is logged in, the,header,block adds a link to the,create,view. When the user is the author of a post, they\u2019ll see an\n\u201cEdit\u201d link to the,update,view for that post.,loop.last,is a\nspecial variable available inside,Jinja for loops,. It\u2019s used to\ndisplay a line after each post except the last one, to visually separate\nthem.,,,,Create,\u00b6,,The,create,view works the same as the auth,register,view. Either\nthe form is displayed, or the posted data is validated and the post is\nadded to the database or an error is shown.,,The,login_required,decorator you wrote earlier is used on the blog\nviews. A user must be logged in to visit these views, otherwise they\nwill be redirected to the login page.,,,flaskr/blog.py,\u00b6,,@bp.route,(,'/create',,,,methods,=,(,'GET',,,,'POST',)),,@login_required,,def,,create,():,,if,,request,.,method,,==,,'POST',:,,title,,=,,request,.,form,[,'title',],,body,,=,,request,.,form,[,'body',],,error,,=,,None,,if,,not,,title,:,,error,,=,,'Title is required.',,if,,error,,is,,not,,None,:,,flash,(,error,),,else,:,,db,,=,,get_db,(),,db,.,execute,(,,'INSERT INTO post (title, body, author_id)',,' VALUES (?, ?, ?)',,,,(,title,,,,body,,,,g,.,user,[,'id',]),,),,db,.,commit,(),,return,,redirect,(,url_for,(,'blog.index',)),,return,,render_template,(,'blog/create.html',),,,,,,flaskr/templates/blog/create.html,\u00b6,,{%,,extends,,'base.html',,%},,{%,,block,,header,,%},,<,h1,>,{%,,block,,title,,%},New Post,{%,,endblock,,%},</,h1,>,,{%,,endblock,,%},,{%,,block,,content,,%},,<,form,,method,=,\"post\",>,,<,label,,for,=,\"title\",>,Title,</,label,>,,<,input,,name,=,\"title\",,id,=,\"title\",,value,=,\",{{,,request.form,[,'title',],,}},\",,required,>,,<,label,,for,=,\"body\",>,Body,</,label,>,,<,textarea,,name,=,\"body\",,id,=,\"body\",>,{{,,request.form,[,'body',],,}},</,textarea,>,,<,input,,type,=,\"submit\",,value,=,\"Save\",>,,</,form,>,,{%,,endblock,,%},,,,,,,Update,\u00b6,,Both the,update,and,delete,views will need to fetch a,post,by,id,and check if the author matches the logged in user. To avoid\nduplicating code, you can write a function to get the,post,and call\nit from each view.,,,flaskr/blog.py,\u00b6,,def,,get_post,(,id,,,,check_author,=,True,):,,post,,=,,get_db,(),.,execute,(,,'SELECT p.id, title, body, created, author_id, username',,' FROM post p JOIN user u ON p.author_id = u.id',,' WHERE p.id = ?',,,,(,id,,),,),.,fetchone,(),,if,,post,,is,,None,:,,abort,(,404,,,,\"Post id {0} doesn't exist.\",.,format,(,id,)),,if,,check_author,,and,,post,[,'author_id',],,!=,,g,.,user,[,'id',]:,,abort,(,403,),,return,,post,,,,,abort(),will raise a special exception that returns an HTTP status\ncode. It takes an optional message to show with the error, otherwise a\ndefault message is used.,404,means \u201cNot Found\u201d, and,403,means\n\u201cForbidden\u201d. (,401,means \u201cUnauthorized\u201d, but you redirect to the\nlogin page instead of returning that status.),,The,check_author,argument is defined so that the function can be\nused to get a,post,without checking the author. This would be useful\nif you wrote a view to show an individual post on a page, where the user\ndoesn\u2019t matter because they\u2019re not modifying the post.,,,flaskr/blog.py,\u00b6,,@bp.route,(,'/<int:id>/update',,,,methods,=,(,'GET',,,,'POST',)),,@login_required,,def,,update,(,id,):,,post,,=,,get_post,(,id,),,if,,request,.,method,,==,,'POST',:,,title,,=,,request,.,form,[,'title',],,body,,=,,request,.,form,[,'body',],,error,,=,,None,,if,,not,,title,:,,error,,=,,'Title is required.',,if,,error,,is,,not,,None,:,,flash,(,error,),,else,:,,db,,=,,get_db,(),,db,.,execute,(,,'UPDATE post SET title = ?, body = ?',,' WHERE id = ?',,,,(,title,,,,body,,,,id,),,),,db,.,commit,(),,return,,redirect,(,url_for,(,'blog.index',)),,return,,render_template,(,'blog/update.html',,,,post,=,post,),,,,,Unlike the views you\u2019ve written so far, the,update,function takes\nan argument,,id,. That corresponds to the,<int:id>,in the route.\nA real URL will look like,/1/update,. Flask will capture the,1,,\nensure it\u2019s an,int,, and pass it as the,id,argument. If you\ndon\u2019t specify,int:,and instead do,<id>,, it will be a string.\nTo generate a URL to the update page,,url_for(),needs to be passed\nthe,id,so it knows what to fill in:,url_for('blog.update',,,id=post['id']),. This is also in the,index.html,file above.,,The,create,and,update,views look very similar. The main\ndifference is that the,update,view uses a,post,object and an,UPDATE,query instead of an,INSERT,. With some clever refactoring,\nyou could use one view and template for both actions, but for the\ntutorial it\u2019s clearer to keep them separate.,,,flaskr/templates/blog/update.html,\u00b6,,{%,,extends,,'base.html',,%},,{%,,block,,header,,%},,<,h1,>,{%,,block,,title,,%},Edit \",{{,,post,[,'title',],,}},\",{%,,endblock,,%},</,h1,>,,{%,,endblock,,%},,{%,,block,,content,,%},,<,form,,method,=,\"post\",>,,<,label,,for,=,\"title\",>,Title,</,label,>,,<,input,,name,=,\"title\",,id,=,\"title\",,value,=,\",{{,,request.form,[,'title',],,or,,post,[,'title',],,}},\",,required,>,,<,label,,for,=,\"body\",>,Body,</,label,>,,<,textarea,,name,=,\"body\",,id,=,\"body\",>,{{,,request.form,[,'body',],,or,,post,[,'body',],,}},</,textarea,>,,<,input,,type,=,\"submit\",,value,=,\"Save\",>,,</,form,>,,<,hr,>,,<,form,,action,=,\",{{,,url_for,(,'blog.delete',,,,id,=,post,[,'id',]),,}},\",,method,=,\"post\",>,,<,input,,class,=,\"danger\",,type,=,\"submit\",,value,=,\"Delete\",,onclick,=,\"return confirm('Are you sure?');\",>,,</,form,>,,{%,,endblock,,%},,,,,This template has two forms. The first posts the edited data to the\ncurrent page (,/<id>/update,). The other form contains only a button\nand specifies an,action,attribute that posts to the delete view\ninstead. The button uses some JavaScript to show a confirmation dialog\nbefore submitting.,,The pattern,{{,,request.form['title'],,or,,post['title'],,}},is used to\nchoose what data appears in the form. When the form hasn\u2019t been\nsubmitted, the original,post,data appears, but if invalid form data\nwas posted you want to display that so the user can fix the error, so,request.form,is used instead.,request,is another variable\nthat\u2019s automatically available in templates.,,,,Delete,\u00b6,,The delete view doesn\u2019t have its own template, the delete button is part\nof,update.html,and posts to the,/<id>/delete,URL. Since there\nis no template, it will only handle the,POST,method then redirect\nto the,index,view.,,,flaskr/blog.py,\u00b6,,@bp.route,(,'/<int:id>/delete',,,,methods,=,(,'POST',,)),,@login_required,,def,,delete,(,id,):,,get_post,(,id,),,db,,=,,get_db,(),,db,.,execute,(,'DELETE FROM post WHERE id = ?',,,,(,id,,)),,db,.,commit,(),,return,,redirect,(,url_for,(,'blog.index',)),,,,,Congratulations, you\u2019ve now finished writing your application! Take some\ntime to try out everything in the browser. However, there\u2019s still more\nto do before the project is complete.,,Continue to,Make the Project Installable,.,,,,,,,,,,,,,Contents,,,Blog Blueprint,,The Blueprint,,Index,,Create,,Update,,Delete,,,,,Navigation,,,Overview,,,Tutorial,,,Previous:,Static Files,,Next:,Make the Project Installable,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Static Files", "url": "http://flask.pocoo.org/docs/dev/tutorial/static/", "content": ",,,,,Static Files \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,Tutorial,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,Static Files,\u00b6,,The authentication views and templates work, but they look very plain\nright now. Some,CSS,can be added to add style to the HTML layout you\nconstructed. The style won\u2019t change, so it\u2019s a,static,file rather than\na template.,,Flask automatically adds a,static,view that takes a path relative\nto the,flaskr/static,directory and serves it. The,base.html,template already has a link to the,style.css,file:,,{{,,url_for,(,'static',,,,filename,=,'style.css',),,}},,,,Besides CSS, other types of static files might be files with JavaScript\nfunctions, or a logo image. They are all placed under the,flaskr/static,directory and referenced with,url_for('static',,,filename='...'),.,,This tutorial isn\u2019t focused on how to write CSS, so you can just copy\nthe following into the,flaskr/static/style.css,file:,,,flaskr/static/style.css,\u00b6,,html,,{,,font-family,:,,sans-serif,;,,background,:,,#eee,;,,padding,:,,1,rem,;,,},,body,,{,,max-width,:,,960,px,;,,margin,:,,0,,auto,;,,background,:,,white,;,,},,h1,,{,,font-family,:,,serif,;,,color,:,,#377ba8,;,,margin,:,,1,rem,,0,;,,},,a,,{,,color,:,,#377ba8,;,,},,hr,,{,,border,:,,none,;,,border-top,:,,1,px,,solid,,lightgray,;,,},,nav,,{,,background,:,,lightgray,;,,display,:,,flex,;,,align-items,:,,center,;,,padding,:,,0,,0.5,rem,;,,},,nav,,h1,,{,,flex,:,,auto,;,,margin,:,,0,;,,},,nav,,h1,,a,,{,,text-decoration,:,,none,;,,padding,:,,0.25,rem,,0.5,rem,;,,},,nav,,ul,,{,,display,:,,flex,;,,list-style,:,,none,;,,margin,:,,0,;,,padding,:,,0,;,,},,nav,,ul,,li,,a,,,,nav,,ul,,li,,span,,,,header,,.,action,,{,,display,:,,block,;,,padding,:,,0.5,rem,;,,},,.,content,,{,,padding,:,,0,,1,rem,,1,rem,;,,},,.,content,,>,,header,,{,,border-bottom,:,,1,px,,solid,,lightgray,;,,display,:,,flex,;,,align-items,:,,flex-end,;,,},,.,content,,>,,header,,h1,,{,,flex,:,,auto,;,,margin,:,,1,rem,,0,,0.25,rem,,0,;,,},,.,flash,,{,,margin,:,,1,em,,0,;,,padding,:,,1,em,;,,background,:,,#cae6f6,;,,border,:,,1,px,,solid,,#377ba8,;,,},,.,post,,>,,header,,{,,display,:,,flex,;,,align-items,:,,flex-end,;,,font-size,:,,0.85,em,;,,},,.,post,,>,,header,,>,,div,:,first-of-type,,{,,flex,:,,auto,;,,},,.,post,,>,,header,,h1,,{,,font-size,:,,1.5,em,;,,margin-bottom,:,,0,;,,},,.,post,,.,about,,{,,color,:,,slategray,;,,font-style,:,,italic,;,,},,.,post,,.,body,,{,,white-space,:,,pre-line,;,,},,.,content,:,last-child,,{,,margin-bottom,:,,0,;,,},,.,content,,form,,{,,margin,:,,1,em,,0,;,,display,:,,flex,;,,flex-direction,:,,column,;,,},,.,content,,label,,{,,font-weight,:,,bold,;,,margin-bottom,:,,0.5,em,;,,},,.,content,,input,,,,.,content,,textarea,,{,,margin-bottom,:,,1,em,;,,},,.,content,,textarea,,{,,min-height,:,,12,em,;,,resize,:,,vertical,;,,},,input,.,danger,,{,,color,:,,#cc2f2e,;,,},,input,[,type,=,submit,],,{,,align-self,:,,start,;,,min-width,:,,10,em,;,,},,,,,You can find a less compact version of,style.css,in the,example code,.,,Go to,http://127.0.0.1:5000/auth/login,and the page should look like the\nscreenshot below.,,,You can read more about CSS from,Mozilla\u2019s documentation,. If\nyou change a static file, refresh the browser page. If the change\ndoesn\u2019t show up, try clearing your browser\u2019s cache.,,Continue to,Blog Blueprint,.,,,,,,,,,,,Navigation,,,Overview,,,Tutorial,,,Previous:,Templates,,Next:,Blog Blueprint,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Define and Access the Database", "url": "http://flask.pocoo.org/docs/dev/tutorial/database/", "content": ",,,,,Define and Access the Database \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,Tutorial,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,Define and Access the Database,\u00b6,,The application will use a,SQLite,database to store users and posts.\nPython comes with built-in support for SQLite in the,sqlite3,module.,,SQLite is convenient because it doesn\u2019t require setting up a separate\ndatabase server and is built-in to Python. However, if concurrent\nrequests try to write to the database at the same time, they will slow\ndown as each write happens sequentially. Small applications won\u2019t notice\nthis. Once you become big, you may want to switch to a different\ndatabase.,,The tutorial doesn\u2019t go into detail about SQL. If you are not familiar\nwith it, the SQLite docs describe the,language,.,,,Connect to the Database,\u00b6,,The first thing to do when working with a SQLite database (and most\nother Python database libraries) is to create a connection to it. Any\nqueries and operations are performed using the connection, which is\nclosed after the work is finished.,,In web applications this connection is typically tied to the request. It\nis created at some point when handling a request, and closed before the\nresponse is sent.,,,flaskr/db.py,\u00b6,,import,,sqlite3,,import,,click,,from,,flask,,import,,current_app,,,,g,,from,,flask.cli,,import,,with_appcontext,,def,,get_db,():,,if,,'db',,not,,in,,g,:,,g,.,db,,=,,sqlite3,.,connect,(,,current_app,.,config,[,'DATABASE',],,,detect_types,=,sqlite3,.,PARSE_DECLTYPES,,),,g,.,db,.,row_factory,,=,,sqlite3,.,Row,,return,,g,.,db,,def,,close_db,(,e,=,None,):,,db,,=,,g,.,pop,(,'db',,,,None,),,if,,db,,is,,not,,None,:,,db,.,close,(),,,,,g,is a special object that is unique for each request. It is\nused to store data that might be accessed by multiple functions during\nthe request. The connection is stored and reused instead of creating a\nnew connection if,get_db,is called a second time in the same\nrequest.,,current_app,is another special object that points to the Flask\napplication handling the request. Since you used an application factory,\nthere is no application object when writing the rest of your code.,get_db,will be called when the application has been created and is\nhandling a request, so,current_app,can be used.,,sqlite3.connect(),establishes a connection to the file pointed at\nby the,DATABASE,configuration key. This file doesn\u2019t have to exist\nyet, and won\u2019t until you initialize the database later.,,sqlite3.Row,tells the connection to return rows that behave\nlike dicts. This allows accessing the columns by name.,,close_db,checks if a connection was created by checking if,g.db,was set. If the connection exists, it is closed. Further down you will\ntell your application about the,close_db,function in the application\nfactory so that it is called after each request.,,,,Create the Tables,\u00b6,,In SQLite, data is stored in,tables,and,columns,. These need to be\ncreated before you can store and retrieve data. Flaskr will store users\nin the,user,table, and posts in the,post,table. Create a file\nwith the SQL commands needed to create empty tables:,,,flaskr/schema.sql,\u00b6,,DROP,,TABLE,,IF,,EXISTS,,user,;,,DROP,,TABLE,,IF,,EXISTS,,post,;,,CREATE,,TABLE,,user,,(,,id,,INTEGER,,PRIMARY,,KEY,,AUTOINCREMENT,,,,username,,TEXT,,UNIQUE,,NOT,,NULL,,,,password,,TEXT,,NOT,,NULL,,);,,CREATE,,TABLE,,post,,(,,id,,INTEGER,,PRIMARY,,KEY,,AUTOINCREMENT,,,,author_id,,INTEGER,,NOT,,NULL,,,,created,,TIMESTAMP,,NOT,,NULL,,DEFAULT,,CURRENT_TIMESTAMP,,,,title,,TEXT,,NOT,,NULL,,,,body,,TEXT,,NOT,,NULL,,,,FOREIGN,,KEY,,(,author_id,),,REFERENCES,,user,,(,id,),,);,,,,,Add the Python functions that will run these SQL commands to the,db.py,file:,,,flaskr/db.py,\u00b6,,def,,init_db,():,,db,,=,,get_db,(),,with,,current_app,.,open_resource,(,'schema.sql',),,as,,f,:,,db,.,executescript,(,f,.,read,(),.,decode,(,'utf8',)),,@click.command,(,'init-db',),,@with_appcontext,,def,,init_db_command,():,,\"\"\"Clear the existing data and create new tables.\"\"\",,init_db,(),,click,.,echo,(,'Initialized the database.',),,,,,open_resource(),opens a file relative to\nthe,flaskr,package, which is useful since you won\u2019t necessarily know\nwhere that location is when deploying the application later.,get_db,returns a database connection, which is used to execute the commands\nread from the file.,,click.command(),defines a command line command called,init-db,that calls the,init_db,function and shows a success message to the\nuser. You can read,Command Line Interface,to learn more about writing commands.,,,,Register with the Application,\u00b6,,The,close_db,and,init_db_command,functions need to be registered\nwith the application instance, otherwise they won\u2019t be used by the\napplication. However, since you\u2019re using a factory function, that\ninstance isn\u2019t available when writing the functions. Instead, write a\nfunction that takes an application and does the registration.,,,flaskr/db.py,\u00b6,,def,,init_app,(,app,):,,app,.,teardown_appcontext,(,close_db,),,app,.,cli,.,add_command,(,init_db_command,),,,,,app.teardown_appcontext(),tells\nFlask to call that function when cleaning up after returning the\nresponse.,,app.cli.add_command(),adds a new\ncommand that can be called with the,flask,command.,,Import and call this function from the factory. Place the new code at\nthe end of the factory function before returning the app.,,,flaskr/__init__.py,\u00b6,,def,,create_app,():,,app,,=,,...,,# existing code omitted,,from,,.,,import,,db,,db,.,init_app,(,app,),,return,,app,,,,,,,Initialize the Database File,\u00b6,,Now that,init-db,has been registered with the app, it can be called\nusing the,flask,command, similar to the,run,command from the\nprevious page.,,,Note,,If you\u2019re still running the server from the previous page, you can\neither stop the server, or run this command in a new terminal. If\nyou use a new terminal, remember to change to your project directory\nand activate the env as described in,Activate the environment,.\nYou\u2019ll also need to set,FLASK_APP,and,FLASK_ENV,as shown on\nthe previous page.,,,Run the,init-db,command:,,flask init-db\nInitialized the database.,,,There will now be a,flaskr.sqlite,file in the,instance,folder in\nyour project.,,Continue to,Blueprints and Views,.,,,,,,,,,,,,,Contents,,,Define and Access the Database,,Connect to the Database,,Create the Tables,,Register with the Application,,Initialize the Database File,,,,,Navigation,,,Overview,,,Tutorial,,,Previous:,Application Setup,,Next:,Blueprints and Views,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Application Setup", "url": "http://flask.pocoo.org/docs/dev/tutorial/factory/", "content": ",,,,,Application Setup \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,Tutorial,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,Application Setup,\u00b6,,A Flask application is an instance of the,Flask,class.\nEverything about the application, such as configuration and URLs, will\nbe registered with this class.,,The most straightforward way to create a Flask application is to create\na global,Flask,instance directly at the top of your code, like\nhow the \u201cHello, World!\u201d example did on the previous page. While this is\nsimple and useful in some cases, it can cause some tricky issues as the\nproject grows.,,Instead of creating a,Flask,instance globally, you will create\nit inside a function. This function is known as the,application\nfactory,. Any configuration, registration, and other setup the\napplication needs will happen inside the function, then the application\nwill be returned.,,,The Application Factory,\u00b6,,It\u2019s time to start coding! Create the,flaskr,directory and add the,__init__.py,file. The,__init__.py,serves double duty: it will\ncontain the application factory, and it tells Python that the,flaskr,directory should be treated as a package.,,mkdir flaskr,,,,flaskr/__init__.py,\u00b6,,import,,os,,from,,flask,,import,,Flask,,def,,create_app,(,test_config,=,None,):,,# create and configure the app,,app,,=,,Flask,(,__name__,,,,instance_relative_config,=,True,),,app,.,config,.,from_mapping,(,,SECRET_KEY,=,'dev',,,,DATABASE,=,os,.,path,.,join,(,app,.,instance_path,,,,'flaskr.sqlite',),,,),,if,,test_config,,is,,None,:,,# load the instance config, if it exists, when not testing,,app,.,config,.,from_pyfile,(,'config.py',,,,silent,=,True,),,else,:,,# load the test config if passed in,,app,.,config,.,from_mapping,(,test_config,),,# ensure the instance folder exists,,try,:,,os,.,makedirs,(,app,.,instance_path,),,except,,OSError,:,,pass,,# a simple page that says hello,,@app.route,(,'/hello',),,def,,hello,():,,return,,'Hello, World!',,return,,app,,,,,create_app,is the application factory function. You\u2019ll add to it\nlater in the tutorial, but it already does a lot.,,,app,,=,,Flask(__name__,,,instance_relative_config=True),creates the,Flask,instance.,,__name__,is the name of the current Python module. The app\nneeds to know where it\u2019s located to set up some paths, and,__name__,is a convenient way to tell it that.,,instance_relative_config=True,tells the app that\nconfiguration files are relative to the,instance folder,. The instance folder\nis located outside the,flaskr,package and can hold local\ndata that shouldn\u2019t be committed to version control, such as\nconfiguration secrets and the database file.,,,,app.config.from_mapping(),sets\nsome default configuration that the app will use:,,SECRET_KEY,is used by Flask and extensions to keep data\nsafe. It\u2019s set to,'dev',to provide a convenient value\nduring development, but it should be overridden with a random\nvalue when deploying.,,DATABASE,is the path where the SQLite database file will be\nsaved. It\u2019s under,app.instance_path,, which is the\npath that Flask has chosen for the instance folder. You\u2019ll learn\nmore about the database in the next section.,,,,app.config.from_pyfile(),overrides\nthe default configuration with values taken from the,config.py,file in the instance folder if it exists. For example, when\ndeploying, this can be used to set a real,SECRET_KEY,.,,test_config,can also be passed to the factory, and will be\nused instead of the instance configuration. This is so the tests\nyou\u2019ll write later in the tutorial can be configured\nindependently of any development values you have configured.,,,,os.makedirs(),ensures that,app.instance_path,exists. Flask\ndoesn\u2019t create the instance folder automatically, but it needs to be\ncreated because your project will create the SQLite database file\nthere.,,@app.route(),creates a simple route so you can\nsee the application working before getting into the rest of the\ntutorial. It creates a connection between the URL,/hello,and a\nfunction that returns a response, the string,'Hello,,,World!',in\nthis case.,,,,,Run The Application,\u00b6,,Now you can run your application using the,flask,command. From the\nterminal, tell Flask where to find your application, then run it in\ndevelopment mode.,,Development mode shows an interactive debugger whenever a page raises an\nexception, and restarts the server whenever you make changes to the\ncode. You can leave it running and just reload the browser page as you\nfollow the tutorial.,,For Linux and Mac:,,export FLASK_APP=flaskr\nexport FLASK_ENV=development\nflask run,,,For Windows cmd, use,set,instead of,export,:,,set FLASK_APP=flaskr\nset FLASK_ENV=development\nflask run,,,For Windows PowerShell, use,$env:,instead of,export,:,,$env:FLASK_APP = \"flaskr\"\n$env:FLASK_ENV = \"development\"\nflask run,,,You\u2019ll see output similar to this:,,* Serving Flask app \"flaskr\"\n* Environment: development\n* Debug mode: on\n* Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n* Restarting with stat\n* Debugger is active!\n* Debugger PIN: 855-212-761,,,Visit,http://127.0.0.1:5000/hello,in a browser and you should see the\n\u201cHello, World!\u201d message. Congratulations, you\u2019re now running your Flask\nweb application!,,Continue to,Define and Access the Database,.,,,,,,,,,,,,,Contents,,,Application Setup,,The Application Factory,,Run The Application,,,,,Navigation,,,Overview,,,Tutorial,,,Previous:,Project Layout,,Next:,Define and Access the Database,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Project Layout", "url": "http://flask.pocoo.org/docs/dev/tutorial/layout/", "content": ",,,,,Project Layout \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,Tutorial,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,Project Layout,\u00b6,,Create a project directory and enter it:,,mkdir flask-tutorial\ncd flask-tutorial,,,Then follow the,installation instructions,to set\nup a Python virtual environment and install Flask for your project.,,The tutorial will assume you\u2019re working from the,flask-tutorial,directory from now on. The file names at the top of each code block are\nrelative to this directory.,,,A Flask application can be as simple as a single file.,,,hello.py,\u00b6,,from,,flask,,import,,Flask,,app,,=,,Flask,(,__name__,),,@app.route,(,'/',),,def,,hello,():,,return,,'Hello, World!',,,,,However, as a project get bigger, it becomes overwhelming to keep all\nthe code in one file. Python projects use,packages,to organize code\ninto multiple modules that can be imported where needed, and the\ntutorial will do this as well.,,The project directory will contain:,,,flaskr/,, a Python package containing your application code and\nfiles.,,tests/,, a directory containing test modules.,,venv/,, a Python virtual environment where Flask and other\ndependencies are installed.,,Installation files telling Python how to install your project.,,Version control config, such as,git,. You should make a habit of\nusing some type of version control for all your projects, no matter\nthe size.,,Any other project files you might add in the future.,,,By the end, your project layout will look like this:,,/home/user/Projects/flask-tutorial\n\u251c\u2500\u2500 flaskr/\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 db.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 schema.sql\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 auth.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 blog.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 templates/\n\u2502\u00a0\u00a0 \u2502   \u251c\u2500\u2500 base.html\n\u2502\u00a0\u00a0 \u2502   \u251c\u2500\u2500 auth/\n\u2502\u00a0\u00a0 \u2502   \u2502\u00a0\u00a0 \u251c\u2500\u2500 login.html\n\u2502\u00a0\u00a0 \u2502   \u2502\u00a0\u00a0 \u2514\u2500\u2500 register.html\n\u2502\u00a0\u00a0 \u2502   \u2514\u2500\u2500 blog/\n\u2502\u00a0\u00a0 \u2502       \u251c\u2500\u2500 create.html\n\u2502\u00a0\u00a0 \u2502       \u251c\u2500\u2500 index.html\n\u2502\u00a0\u00a0 \u2502       \u2514\u2500\u2500 update.html\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 static/\n\u2502\u00a0\u00a0  \u00a0\u00a0 \u2514\u2500\u2500 style.css\n\u251c\u2500\u2500 tests/\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 conftest.py\n\u2502 \u00a0 \u251c\u2500\u2500 data.sql\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 test_factory.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 test_db.py\n\u2502\u00a0  \u251c\u2500\u2500 test_auth.py\n\u2502\u00a0  \u2514\u2500\u2500 test_blog.py\n\u251c\u2500\u2500 venv/\n\u251c\u2500\u2500 setup.py\n\u2514\u2500\u2500 MANIFEST.in,,,If you\u2019re using version control, the following files that are generated\nwhile running your project should be ignored. There may be other files\nbased on the editor you use. In general, ignore files that you didn\u2019t\nwrite. For example, with git:,,,.gitignore,\u00b6,,venv/\n\n*.pyc\n__pycache__/\n\ninstance/\n\n.pytest_cache/\n.coverage\nhtmlcov/\n\ndist/\nbuild/\n*.egg-info/,,,,Continue to,Application Setup,.,,,,,,,,,,,Navigation,,,Overview,,,Tutorial,,,Previous:,Tutorial,,Next:,Application Setup,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Patterns for Flask", "url": "http://flask.pocoo.org/docs/dev/patterns/", "content": ",,,,,Patterns for Flask \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,Patterns for Flask,\u00b6,,Certain things are common enough that the chances are high you will find\nthem in most web applications.  For example quite a lot of applications\nare using relational databases and user authentication.  In that case,\nchances are they will open a database connection at the beginning of the\nrequest and get the information of the currently logged in user.  At the\nend of the request, the database connection is closed again.,,There are more user contributed snippets and patterns in the,Flask\nSnippet Archives,.,,,,Larger Applications,,Simple Packages,,Working with Blueprints,,,,Application Factories,,Basic Factories,,Factories & Extensions,,Using Applications,,Factory Improvements,,,,Application Dispatching,,Working with this Document,,Combining Applications,,Dispatch by Subdomain,,Dispatch by Path,,,,Implementing API Exceptions,,Simple Exception Class,,Registering an Error Handler,,Usage in Views,,,,Using URL Processors,,Internationalized Application URLs,,Internationalized Blueprint URLs,,,,Deploying with Setuptools,,Basic Setup Script,,Tagging Builds,,Distributing Resources,,Declaring Dependencies,,Installing / Developing,,,,Deploying with Fabric,,Creating the first Fabfile,,Running Fabfiles,,The WSGI File,,The Configuration File,,First Deployment,,Next Steps,,,,Using SQLite 3 with Flask,,Connect on Demand,,Easy Querying,,Initial Schemas,,,,SQLAlchemy in Flask,,Flask-SQLAlchemy Extension,,Declarative,,Manual Object Relational Mapping,,SQL Abstraction Layer,,,,Uploading Files,,A Gentle Introduction,,Improving Uploads,,Upload Progress Bars,,An Easier Solution,,,,Caching,,Setting up a Cache,,Using a Cache,,,,View Decorators,,Login Required Decorator,,Caching Decorator,,Templating Decorator,,Endpoint Decorator,,,,Form Validation with WTForms,,The Forms,,In the View,,Forms in Templates,,,,Template Inheritance,,Base Template,,Child Template,,,,Message Flashing,,Simple Flashing,,Flashing With Categories,,Filtering Flash Messages,,,,AJAX with jQuery,,Loading jQuery,,Where is My Site?,,JSON View Functions,,The HTML,,,,Custom Error Pages,,Common Error Codes,,Error Handlers,,,,Lazily Loading Views,,Converting to Centralized URL Map,,Loading Late,,,,MongoKit in Flask,,Declarative,,PyMongo Compatibility Layer,,,,Adding a favicon,,See also,,,,Streaming Contents,,Basic Usage,,Streaming from Templates,,Streaming with Context,,,,Deferred Request Callbacks,,Adding HTTP Method Overrides,,Request Content Checksums,,Celery Background Tasks,,Install,,Configure,,An example task,,Run a worker,,,,Subclassing Flask,,,,,,,,,,,,,Navigation,,,Overview,,,Previous:,Working with the Shell,,Next:,Larger Applications,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Tutorial", "url": "http://flask.pocoo.org/docs/dev/tutorial/", "content": ",,,,,Tutorial \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,Tutorial,\u00b6,,,Contents:,,,Project Layout,,Application Setup,,Define and Access the Database,,Blueprints and Views,,Templates,,Static Files,,Blog Blueprint,,Make the Project Installable,,Test Coverage,,Deploy to Production,,Keep Developing!,,,,This tutorial will walk you through creating a basic blog application\ncalled Flaskr. Users will be able to register, log in, create posts,\nand edit or delete their own posts. You will be able to package and\ninstall the application on other computers.,,,It\u2019s assumed that you\u2019re already familiar with Python. The,official\ntutorial,in the Python docs is a great way to learn or review first.,,While it\u2019s designed to give a good starting point, the tutorial doesn\u2019t\ncover all of Flask\u2019s features. Check out the,Quickstart,for an\noverview of what Flask can do, then dive into the docs to find out more.\nThe tutorial only uses what\u2019s provided by Flask and Python. In another\nproject, you might decide to use,Extensions,or other libraries to\nmake some tasks simpler.,,,Flask is flexible. It doesn\u2019t require you to use any particular project\nor code layout. However, when first starting, it\u2019s helpful to use a more\nstructured approach. This means that the tutorial will require a bit of\nboilerplate up front, but it\u2019s done to avoid many common pitfalls that\nnew developers encounter, and it creates a project that\u2019s easy to expand\non. Once you become more comfortable with Flask, you can step out of\nthis structure and take full advantage of Flask\u2019s flexibility.,,,The tutorial project is available as an example in the Flask\nrepository,, if you want to compare your project\nwith the final product as you follow the tutorial.,,Continue to,Project Layout,.,,,,,,,,,,,Navigation,,,Overview,,,Previous:,Quickstart,,Next:,Project Layout,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Quickstart", "url": "http://flask.pocoo.org/docs/dev/quickstart/", "content": ",,,,,Quickstart \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,Quickstart,\u00b6,,Eager to get started?  This page gives a good introduction to Flask.  It\nassumes you already have Flask installed.  If you do not, head over to the,Installation,section.,,,A Minimal Application,\u00b6,,A minimal Flask application looks something like this:,,from,,flask,,import,,Flask,,app,,=,,Flask,(,__name__,),,@app,.,route,(,'/',),,def,,hello_world,():,,return,,'Hello, World!',,,,So what did that code do?,,,First we imported the,Flask,class.  An instance of this\nclass will be our WSGI application.,,Next we create an instance of this class. The first argument is the name of\nthe application\u2019s module or package.  If you are using a single module (as\nin this example), you should use,__name__,because depending on if it\u2019s\nstarted as application or imported as module the name will be different\n(,'__main__',versus the actual import name). This is needed so that\nFlask knows where to look for templates, static files, and so on. For more\ninformation have a look at the,Flask,documentation.,,We then use the,route(),decorator to tell Flask what URL\nshould trigger our function.,,The function is given a name which is also used to generate URLs for that\nparticular function, and returns the message we want to display in the\nuser\u2019s browser.,,,Just save it as,hello.py,or something similar. Make sure to not call\nyour application,flask.py,because this would conflict with Flask\nitself.,,To run the application you can either use the,flask,command or\npython\u2019s,-m,switch with Flask.  Before you can do that you need\nto tell your terminal the application to work with by exporting the,FLASK_APP,environment variable:,,$ export FLASK_APP=hello.py\n$ flask run\n * Running on http://127.0.0.1:5000/,,,If you are on Windows, the environment variable syntax depends on command line\ninterpreter. On Command Prompt:,,C,:,\\,path,\\,to,\\,app,>,set,,FLASK_APP,=,hello,.,py,,,,And on PowerShell:,,PS C:\\path\\to\\app> $env:FLASK_APP = \"hello.py\",,,Alternatively you can use,python -m flask,:,,$ export FLASK_APP=hello.py\n$ python -m flask run\n * Running on http://127.0.0.1:5000/,,,This launches a very simple builtin server, which is good enough for testing\nbut probably not what you want to use in production. For deployment options see,Deployment Options,.,,Now head over to,http://127.0.0.1:5000/,, and you\nshould see your hello world greeting.,,,Externally Visible Server,,If you run the server you will notice that the server is only accessible\nfrom your own computer, not from any other in the network.  This is the\ndefault because in debugging mode a user of the application can execute\narbitrary Python code on your computer.,,If you have the debugger disabled or trust the users on your network,\nyou can make the server publicly available simply by adding,--host=0.0.0.0,to the command line:,,flask,,run,,--,host,=,0.0,.,0.0,,,,This tells your operating system to listen on all public IPs.,,,,,What to do if the Server does not Start,\u00b6,,In case the,python -m flask,fails or,flask,does not exist,\nthere are multiple reasons this might be the case.  First of all you need\nto look at the error message.,,,Old Version of Flask,\u00b6,,Versions of Flask older than 0.11 use to have different ways to start the\napplication.  In short, the,flask,command did not exist, and\nneither did,python -m flask,.  In that case you have two options:\neither upgrade to newer Flask versions or have a look at the,Development Server,docs to see the alternative method for running a server.,,,,Invalid Import Name,\u00b6,,The,FLASK_APP,environment variable is the name of the module to import at,flask run,. In case that module is incorrectly named you will get an\nimport error upon start (or if debug is enabled when you navigate to the\napplication). It will tell you what it tried to import and why it failed.,,The most common reason is a typo or because you did not actually create an,app,object.,,,,,Debug Mode,\u00b6,,(Want to just log errors and stack traces? See,Application Errors,),,The,flask,script is nice to start a local development server, but\nyou would have to restart it manually after each change to your code.\nThat is not very nice and Flask can do better.  If you enable debug\nsupport the server will reload itself on code changes, and it will also\nprovide you with a helpful debugger if things go wrong.,,To enable all development features (including debug mode) you can export\nthe,FLASK_ENV,environment variable and set it to,development,before running the server:,,$ export FLASK_ENV=development\n$ flask run,,,(On Windows you need to use,set,instead of,export,.),,This does the following things:,,,it activates the debugger,,it activates the automatic reloader,,it enables the debug mode on the Flask application.,,,You can also control debug mode separately from the environment by\nexporting,FLASK_DEBUG=1,.,,There are more parameters that are explained in the,Development Server,docs.,,,Attention,,Even though the interactive debugger does not work in forking environments\n(which makes it nearly impossible to use on production servers), it still\nallows the execution of arbitrary code. This makes it a major security risk\nand therefore it,must never be used on production machines,.,,,Screenshot of the debugger in action:,,,More information on using the debugger can be found in the,Werkzeug\ndocumentation,.,,Have another debugger in mind? See,Working with Debuggers,.,,,,Routing,\u00b6,,Modern web applications use meaningful URLs to help users. Users are more\nlikely to like a page and come back if the page uses a meaningful URL they can\nremember and use to directly visit a page.,,Use the,route(),decorator to bind a function to a URL.,,@app,.,route,(,'/',),,def,,index,():,,return,,'Index Page',,@app,.,route,(,'/hello',),,def,,hello,():,,return,,'Hello, World',,,,You can do more! You can make parts of the URL dynamic and attach multiple\nrules to a function.,,,Variable Rules,\u00b6,,You can add variable sections to a URL by marking sections with,<variable_name>,. Your function then receives the,<variable_name>,as a keyword argument. Optionally, you can use a converter to specify the type\nof the argument like,<converter:variable_name>,.,,@app,.,route,(,'/user/<username>',),,def,,show_user_profile,(,username,):,,# show the user profile for that user,,return,,'User,%s,',,%,,username,,@app,.,route,(,'/post/<int:post_id>',),,def,,show_post,(,post_id,):,,# show the post with the given id, the id is an integer,,return,,'Post,%d,',,%,,post_id,,@app,.,route,(,'/path/<path:subpath>',),,def,,show_subpath,(,subpath,):,,# show the subpath after /path/,,return,,'Subpath,%s,',,%,,subpath,,,,Converter types:,,,,,,,,string,,(default) accepts any text without a slash,,,int,,accepts positive integers,,,float,,accepts positive floating point values,,,path,,like,string,but also accepts slashes,,,uuid,,accepts UUID strings,,,,,,,Unique URLs / Redirection Behavior,\u00b6,,The following two rules differ in their use of a trailing slash.,,@app,.,route,(,'/projects/',),,def,,projects,():,,return,,'The project page',,@app,.,route,(,'/about',),,def,,about,():,,return,,'The about page',,,,The canonical URL for the,projects,endpoint has a trailing slash.\nIt\u2019s similar to a folder in a file system. If you access the URL without\na trailing slash, Flask redirects you to the canonical URL with the\ntrailing slash.,,The canonical URL for the,about,endpoint does not have a trailing\nslash. It\u2019s similar to the pathname of a file. Accessing the URL with a\ntrailing slash produces a 404 \u201cNot Found\u201d error. This helps keep URLs\nunique for these resources, which helps search engines avoid indexing\nthe same page twice.,,,,URL Building,\u00b6,,To build a URL to a specific function, use the,url_for(),function.\nIt accepts the name of the function as its first argument and any number of\nkeyword arguments, each corresponding to a variable part of the URL rule.\nUnknown variable parts are appended to the URL as query parameters.,,Why would you want to build URLs using the URL reversing function,url_for(),instead of hard-coding them into your templates?,,,Reversing is often more descriptive than hard-coding the URLs.,,,You can change your URLs in one go instead of needing to remember to,,manually change hard-coded URLs.,,,,,URL building handles escaping of special characters and Unicode data,,transparently.,,,,The generated paths are always absolute, avoiding unexpected behavior\nof relative paths in browsers.,,,If your application is placed outside the URL root, for example, in,,/myapplication,instead of,/,,,url_for(),properly\nhandles that for you.,,,,,For example, here we use the,test_request_context(),method\nto try out,url_for(),.,test_request_context(),tells Flask to behave as though it\u2019s handling a request even while we use a\nPython shell. See,Context Locals,.,,from flask import Flask, url_for\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    return 'index'\n\n@app.route('/login')\ndef login():\n    return 'login'\n\n@app.route('/user/<username>')\ndef profile(username):\n    return '{}\\'s profile'.format(username)\n\nwith app.test_request_context():\n    print(url_for('index'))\n    print(url_for('login'))\n    print(url_for('login', next='/'))\n    print(url_for('profile', username='John Doe'))\n\n/\n/login\n/login?next=/\n/user/John%20Doe,,,,,HTTP Methods,\u00b6,,Web applications use different HTTP methods when accessing URLs. You should\nfamiliarize yourself with the HTTP methods as you work with Flask. By default,\na route only answers to,GET,requests. You can use the,methods,argument\nof the,route(),decorator to handle different HTTP methods.,,from,,flask,,import,,request,,@app,.,route,(,'/login',,,,methods,=,[,'GET',,,,'POST',]),,def,,login,():,,if,,request,.,method,,==,,'POST',:,,return,,do_the_login,(),,else,:,,return,,show_the_login_form,(),,,,If,GET,is present, Flask automatically adds support for the,HEAD,method\nand handles,HEAD,requests according to the,HTTP RFC,. Likewise,,OPTIONS,is automatically implemented for you.,,,,,Static Files,\u00b6,,Dynamic web applications also need static files.  That\u2019s usually where\nthe CSS and JavaScript files are coming from.  Ideally your web server is\nconfigured to serve them for you, but during development Flask can do that\nas well.  Just create a folder called,static,in your package or next to\nyour module and it will be available at,/static,on the application.,,To generate URLs for static files, use the special,'static',endpoint name:,,url_for,(,'static',,,,filename,=,'style.css',),,,,The file has to be stored on the filesystem as,static/style.css,.,,,,Rendering Templates,\u00b6,,Generating HTML from within Python is not fun, and actually pretty\ncumbersome because you have to do the HTML escaping on your own to keep\nthe application secure.  Because of that Flask configures the,Jinja2,template engine for you automatically.,,To render a template you can use the,render_template(),method.  All you have to do is provide the name of the template and the\nvariables you want to pass to the template engine as keyword arguments.\nHere\u2019s a simple example of how to render a template:,,from,,flask,,import,,render_template,,@app,.,route,(,'/hello/',),,@app,.,route,(,'/hello/<name>',),,def,,hello,(,name,=,None,):,,return,,render_template,(,'hello.html',,,,name,=,name,),,,,Flask will look for templates in the,templates,folder.  So if your\napplication is a module, this folder is next to that module, if it\u2019s a\npackage it\u2019s actually inside your package:,,Case 1,: a module:,,/,application,.,py,,/,templates,,/,hello,.,html,,,,Case 2,: a package:,,/,application,,/,__init__,.,py,,/,templates,,/,hello,.,html,,,,For templates you can use the full power of Jinja2 templates.  Head over\nto the official,Jinja2 Template Documentation,for more information.,,Here is an example template:,,<!doctype html>,,<,title,>,Hello from Flask,</,title,>,,{%,,if,,name,,%},,<,h1,>,Hello,{{,,name,,}},!,</,h1,>,,{%,,else,,%},,<,h1,>,Hello, World!,</,h1,>,,{%,,endif,,%},,,,Inside templates you also have access to the,request,,,session,and,g,,[1],objects\nas well as the,get_flashed_messages(),function.,,Templates are especially useful if inheritance is used.  If you want to\nknow how that works, head over to the,Template Inheritance,pattern\ndocumentation.  Basically template inheritance makes it possible to keep\ncertain elements on each page (like header, navigation and footer).,,Automatic escaping is enabled, so if,name,contains HTML it will be escaped\nautomatically.  If you can trust a variable and you know that it will be\nsafe HTML (for example because it came from a module that converts wiki\nmarkup to HTML) you can mark it as safe by using the,Markup,class or by using the,|safe,filter in the\ntemplate.  Head over to the Jinja 2 documentation for more examples.,,Here is a basic introduction to how the,Markup,class works:,,>>>,from,,flask,,import,,Markup,,>>>,Markup,(,'<strong>Hello,%s,!</strong>',),,%,,'<blink>hacker</blink>',,Markup(u'<strong>Hello &lt;blink&gt;hacker&lt;/blink&gt;!</strong>'),,>>>,Markup,.,escape,(,'<blink>hacker</blink>',),,Markup(u'&lt;blink&gt;hacker&lt;/blink&gt;'),,>>>,Markup,(,'<em>Marked up</em> &raquo; HTML',),.,striptags,(),,u'Marked up \\xbb HTML',,,,,Changelog,,Changed in version 0.5:,Autoescaping is no longer enabled for all templates.  The following\nextensions for templates trigger autoescaping:,.html,,,.htm,,,.xml,,,.xhtml,.  Templates loaded from a string will have\nautoescaping disabled.,,,,,,[1],Unsure what that,g,object is? It\u2019s something in which\nyou can store information for your own needs, check the documentation of\nthat object (,g,) and the,Using SQLite 3 with Flask,for more\ninformation.,,,,,,Accessing Request Data,\u00b6,,For web applications it\u2019s crucial to react to the data a client sends to\nthe server.  In Flask this information is provided by the global,request,object.  If you have some experience with Python\nyou might be wondering how that object can be global and how Flask\nmanages to still be threadsafe.  The answer is context locals:,,,Context Locals,\u00b6,,,Insider Information,,If you want to understand how that works and how you can implement\ntests with context locals, read this section, otherwise just skip it.,,,Certain objects in Flask are global objects, but not of the usual kind.\nThese objects are actually proxies to objects that are local to a specific\ncontext.  What a mouthful.  But that is actually quite easy to understand.,,Imagine the context being the handling thread.  A request comes in and the\nweb server decides to spawn a new thread (or something else, the\nunderlying object is capable of dealing with concurrency systems other\nthan threads).  When Flask starts its internal request handling it\nfigures out that the current thread is the active context and binds the\ncurrent application and the WSGI environments to that context (thread).\nIt does that in an intelligent way so that one application can invoke another\napplication without breaking.,,So what does this mean to you?  Basically you can completely ignore that\nthis is the case unless you are doing something like unit testing.  You\nwill notice that code which depends on a request object will suddenly break\nbecause there is no request object.  The solution is creating a request\nobject yourself and binding it to the context.  The easiest solution for\nunit testing is to use the,test_request_context(),context manager.  In combination with the,with,statement it will bind a\ntest request so that you can interact with it.  Here is an example:,,from,,flask,,import,,request,,with,,app,.,test_request_context,(,'/hello',,,,method,=,'POST',):,,# now you can do something with the request until the,,# end of the with block, such as basic assertions:,,assert,,request,.,path,,==,,'/hello',,assert,,request,.,method,,==,,'POST',,,,The other possibility is passing a whole WSGI environment to the,request_context(),method:,,from,,flask,,import,,request,,with,,app,.,request_context,(,environ,):,,assert,,request,.,method,,==,,'POST',,,,,,The Request Object,\u00b6,,The request object is documented in the API section and we will not cover\nit here in detail (see,Request,). Here is a broad overview of\nsome of the most common operations.  First of all you have to import it from\nthe,flask,module:,,from,,flask,,import,,request,,,,The current request method is available by using the,method,attribute.  To access form data (data\ntransmitted in a,POST,or,PUT,request) you can use the,form,attribute.  Here is a full example of the two\nattributes mentioned above:,,@app,.,route,(,'/login',,,,methods,=,[,'POST',,,,'GET',]),,def,,login,():,,error,,=,,None,,if,,request,.,method,,==,,'POST',:,,if,,valid_login,(,request,.,form,[,'username',],,,request,.,form,[,'password',]):,,return,,log_the_user_in,(,request,.,form,[,'username',]),,else,:,,error,,=,,'Invalid username/password',,# the code below is executed if the request method,,# was GET or the credentials were invalid,,return,,render_template,(,'login.html',,,,error,=,error,),,,,What happens if the key does not exist in the,form,attribute?  In that\ncase a special,KeyError,is raised.  You can catch it like a\nstandard,KeyError,but if you don\u2019t do that, a HTTP 400 Bad Request\nerror page is shown instead.  So for many situations you don\u2019t have to\ndeal with that problem.,,To access parameters submitted in the URL (,?key=value,) you can use the,args,attribute:,,searchword,,=,,request,.,args,.,get,(,'key',,,,'',),,,,We recommend accessing URL parameters with,get,or by catching the,KeyError,because users might change the URL and presenting them a 400\nbad request page in that case is not user friendly.,,For a full list of methods and attributes of the request object, head over\nto the,Request,documentation.,,,,File Uploads,\u00b6,,You can handle uploaded files with Flask easily.  Just make sure not to\nforget to set the,enctype=\"multipart/form-data\",attribute on your HTML\nform, otherwise the browser will not transmit your files at all.,,Uploaded files are stored in memory or at a temporary location on the\nfilesystem.  You can access those files by looking at the,files,attribute on the request object.  Each\nuploaded file is stored in that dictionary.  It behaves just like a\nstandard Python,file,object, but it also has a,save(),method that allows you to store that\nfile on the filesystem of the server.  Here is a simple example showing how\nthat works:,,from,,flask,,import,,request,,@app,.,route,(,'/upload',,,,methods,=,[,'GET',,,,'POST',]),,def,,upload_file,():,,if,,request,.,method,,==,,'POST',:,,f,,=,,request,.,files,[,'the_file',],,f,.,save,(,'/var/www/uploads/uploaded_file.txt',),,...,,,,If you want to know how the file was named on the client before it was\nuploaded to your application, you can access the,filename,attribute.  However please keep in\nmind that this value can be forged so never ever trust that value.  If you\nwant to use the filename of the client to store the file on the server,\npass it through the,secure_filename(),function that\nWerkzeug provides for you:,,from,,flask,,import,,request,,from,,werkzeug.utils,,import,,secure_filename,,@app,.,route,(,'/upload',,,,methods,=,[,'GET',,,,'POST',]),,def,,upload_file,():,,if,,request,.,method,,==,,'POST',:,,f,,=,,request,.,files,[,'the_file',],,f,.,save,(,'/var/www/uploads/',,+,,secure_filename,(,f,.,filename,)),,...,,,,For some better examples, checkout the,Uploading Files,pattern.,,,,Cookies,\u00b6,,To access cookies you can use the,cookies,attribute.  To set cookies you can use the,set_cookie,method of response objects.  The,cookies,attribute of request objects is a\ndictionary with all the cookies the client transmits.  If you want to use\nsessions, do not use the cookies directly but instead use the,Sessions,in Flask that add some security on top of cookies for you.,,Reading cookies:,,from,,flask,,import,,request,,@app,.,route,(,'/',),,def,,index,():,,username,,=,,request,.,cookies,.,get,(,'username',),,# use cookies.get(key) instead of cookies[key] to not get a,,# KeyError if the cookie is missing.,,,,Storing cookies:,,from,,flask,,import,,make_response,,@app,.,route,(,'/',),,def,,index,():,,resp,,=,,make_response,(,render_template,(,...,)),,resp,.,set_cookie,(,'username',,,,'the username',),,return,,resp,,,,Note that cookies are set on response objects.  Since you normally\njust return strings from the view functions Flask will convert them into\nresponse objects for you.  If you explicitly want to do that you can use\nthe,make_response(),function and then modify it.,,Sometimes you might want to set a cookie at a point where the response\nobject does not exist yet.  This is possible by utilizing the,Deferred Request Callbacks,pattern.,,For this also see,About Responses,.,,,,,Redirects and Errors,\u00b6,,To redirect a user to another endpoint, use the,redirect(),function; to abort a request early with an error code, use the,abort(),function:,,from,,flask,,import,,abort,,,,redirect,,,,url_for,,@app,.,route,(,'/',),,def,,index,():,,return,,redirect,(,url_for,(,'login',)),,@app,.,route,(,'/login',),,def,,login,():,,abort,(,401,),,this_is_never_executed,(),,,,This is a rather pointless example because a user will be redirected from\nthe index to a page they cannot access (401 means access denied) but it\nshows how that works.,,By default a black and white error page is shown for each error code.  If\nyou want to customize the error page, you can use the,errorhandler(),decorator:,,from,,flask,,import,,render_template,,@app,.,errorhandler,(,404,),,def,,page_not_found,(,error,):,,return,,render_template,(,'page_not_found.html',),,,404,,,,Note the,404,after the,render_template(),call.  This\ntells Flask that the status code of that page should be 404 which means\nnot found.  By default 200 is assumed which translates to: all went well.,,See,Error handlers,for more details.,,,,About Responses,\u00b6,,The return value from a view function is automatically converted into a\nresponse object for you.  If the return value is a string it\u2019s converted\ninto a response object with the string as response body, a,200,,OK,status code and a,text/html,mimetype.  The logic that Flask applies to\nconverting return values into response objects is as follows:,,,If a response object of the correct type is returned it\u2019s directly\nreturned from the view.,,If it\u2019s a string, a response object is created with that data and the\ndefault parameters.,,If a tuple is returned the items in the tuple can provide extra\ninformation.  Such tuples have to be in the form,(response,,,status,,,headers),or,(response,,,headers),where at least one item has\nto be in the tuple.  The,status,value will override the status code\nand,headers,can be a list or dictionary of additional header values.,,If none of that works, Flask will assume the return value is a\nvalid WSGI application and convert that into a response object.,,,If you want to get hold of the resulting response object inside the view\nyou can use the,make_response(),function.,,Imagine you have a view like this:,,@app,.,errorhandler,(,404,),,def,,not_found,(,error,):,,return,,render_template,(,'error.html',),,,404,,,,You just need to wrap the return expression with,make_response(),and get the response object to modify it, then\nreturn it:,,@app,.,errorhandler,(,404,),,def,,not_found,(,error,):,,resp,,=,,make_response,(,render_template,(,'error.html',),,,404,),,resp,.,headers,[,'X-Something',],,=,,'A value',,return,,resp,,,,,,Sessions,\u00b6,,In addition to the request object there is also a second object called,session,which allows you to store information specific to a\nuser from one request to the next.  This is implemented on top of cookies\nfor you and signs the cookies cryptographically.  What this means is that\nthe user could look at the contents of your cookie but not modify it,\nunless they know the secret key used for signing.,,In order to use sessions you have to set a secret key.  Here is how\nsessions work:,,from,,flask,,import,,Flask,,,,session,,,,redirect,,,,url_for,,,,escape,,,,request,,app,,=,,Flask,(,__name__,),,# Set the secret key to some random bytes. Keep this really secret!,,app,.,secret_key,,=,,b,'_5#y2L\"F4Q8z,\\n\\xec,]/',,@app,.,route,(,'/',),,def,,index,():,,if,,'username',,in,,session,:,,return,,'Logged in as,%s,',,%,,escape,(,session,[,'username',]),,return,,'You are not logged in',,@app,.,route,(,'/login',,,,methods,=,[,'GET',,,,'POST',]),,def,,login,():,,if,,request,.,method,,==,,'POST',:,,session,[,'username',],,=,,request,.,form,[,'username',],,return,,redirect,(,url_for,(,'index',)),,return,,''',,<form method=\"post\">,,<p><input type=text name=username>,,<p><input type=submit value=Login>,,</form>,,''',,@app,.,route,(,'/logout',),,def,,logout,():,,# remove the username from the session if it's there,,session,.,pop,(,'username',,,,None,),,return,,redirect,(,url_for,(,'index',)),,,,The,escape(),mentioned here does escaping for you if you are\nnot using the template engine (as in this example).,,,How to generate good secret keys,,A secret key should be as random as possible. Your operating system has\nways to generate pretty random data based on a cryptographic random\ngenerator. Use the following command to quickly generate a value for,Flask.secret_key,(or,SECRET_KEY,):,,$ python -c 'import os; print(os.urandom(16))'\nb'_5#y2L\"F4Q8z\\n\\xec]/',,,,A note on cookie-based sessions: Flask will take the values you put into the\nsession object and serialize them into a cookie.  If you are finding some\nvalues do not persist across requests, cookies are indeed enabled, and you are\nnot getting a clear error message, check the size of the cookie in your page\nresponses compared to the size supported by web browsers.,,Besides the default client-side based sessions, if you want to handle\nsessions on the server-side instead, there are several\nFlask extensions that support this.,,,,Message Flashing,\u00b6,,Good applications and user interfaces are all about feedback.  If the user\ndoes not get enough feedback they will probably end up hating the\napplication.  Flask provides a really simple way to give feedback to a\nuser with the flashing system.  The flashing system basically makes it\npossible to record a message at the end of a request and access it on the next\n(and only the next) request.  This is usually combined with a layout\ntemplate to expose the message.,,To flash a message use the,flash(),method, to get hold of the\nmessages you can use,get_flashed_messages(),which is also\navailable in the templates.  Check out the,Message Flashing,for a full example.,,,,Logging,\u00b6,,,Changelog,,New in version 0.3.,,,Sometimes you might be in a situation where you deal with data that\nshould be correct, but actually is not.  For example you may have some client-side\ncode that sends an HTTP request to the server but it\u2019s obviously\nmalformed.  This might be caused by a user tampering with the data, or the\nclient code failing.  Most of the time it\u2019s okay to reply with,400,,Bad,,Request,in that situation, but sometimes that won\u2019t do and the code has\nto continue working.,,You may still want to log that something fishy happened.  This is where\nloggers come in handy.  As of Flask 0.3 a logger is preconfigured for you\nto use.,,Here are some example log calls:,,app,.,logger,.,debug,(,'A value for debugging',),,app,.,logger,.,warning,(,'A warning occurred (,%d,apples)',,,,42,),,app,.,logger,.,error,(,'An error occurred',),,,,The attached,logger,is a standard logging,Logger,, so head over to the official,logging\ndocumentation,for more\ninformation.,,Read more on,Application Errors,.,,,,Hooking in WSGI Middlewares,\u00b6,,If you want to add a WSGI middleware to your application you can wrap the\ninternal WSGI application.  For example if you want to use one of the\nmiddlewares from the Werkzeug package to work around bugs in lighttpd, you\ncan do it like this:,,from,,werkzeug.contrib.fixers,,import,,LighttpdCGIRootFix,,app,.,wsgi_app,,=,,LighttpdCGIRootFix,(,app,.,wsgi_app,),,,,,,Using Flask Extensions,\u00b6,,Extensions are packages that help you accomplish common tasks. For\nexample, Flask-SQLAlchemy provides SQLAlchemy support that makes it simple\nand easy to use with Flask.,,For more on Flask extensions, have a look at,Extensions,.,,,,Deploying to a Web Server,\u00b6,,Ready to deploy your new Flask app? Go to,Deployment Options,.,,,,,,,,,,,,,Contents,,,Quickstart,,A Minimal Application,,What to do if the Server does not Start,,Old Version of Flask,,Invalid Import Name,,,,Debug Mode,,Routing,,Variable Rules,,Unique URLs / Redirection Behavior,,URL Building,,HTTP Methods,,,,Static Files,,Rendering Templates,,Accessing Request Data,,Context Locals,,The Request Object,,File Uploads,,Cookies,,,,Redirects and Errors,,About Responses,,Sessions,,Message Flashing,,Logging,,Hooking in WSGI Middlewares,,Using Flask Extensions,,Deploying to a Web Server,,,,,Navigation,,,Overview,,,Previous:,Installation,,Next:,Tutorial,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Installation", "url": "http://flask.pocoo.org/docs/dev/installation/", "content": ",,,,,Installation \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,Installation,\u00b6,,,Python Version,\u00b6,,We recommend using the latest version of Python 3. Flask supports Python 3.4\nand newer, Python 2.7, and PyPy.,,,,Dependencies,\u00b6,,These distributions will be installed automatically when installing Flask.,,,Werkzeug,implements WSGI, the standard Python interface between\napplications and servers.,,Jinja,is a template language that renders the pages your application\nserves.,,MarkupSafe,comes with Jinja. It escapes untrusted input when rendering\ntemplates to avoid injection attacks.,,ItsDangerous,securely signs data to ensure its integrity. This is used\nto protect Flask\u2019s session cookie.,,Click,is a framework for writing command line applications. It provides\nthe,flask,command and allows adding custom management commands.,,,,Optional dependencies,\u00b6,,These distributions will not be installed automatically. Flask will detect and\nuse them if you install them.,,,Blinker,provides support for,Signals,.,,SimpleJSON,is a fast JSON implementation that is compatible with\nPython\u2019s,json,module. It is preferred for JSON operations if it is\ninstalled.,,python-dotenv,enables support for,Environment Variables From dotenv,when running,flask,commands.,,Watchdog,provides a faster, more efficient reloader for the development\nserver.,,,,,,Virtual environments,\u00b6,,Use a virtual environment to manage the dependencies for your project, both in\ndevelopment and in production.,,What problem does a virtual environment solve? The more Python projects you\nhave, the more likely it is that you need to work with different versions of\nPython libraries, or even Python itself. Newer versions of libraries for one\nproject can break compatibility in another project.,,Virtual environments are independent groups of Python libraries, one for each\nproject. Packages installed for one project will not affect other projects or\nthe operating system\u2019s packages.,,Python 3 comes bundled with the,venv,module to create virtual\nenvironments. If you\u2019re using a modern version of Python, you can continue on\nto the next section.,,If you\u2019re using Python 2, see,Install virtualenv,first.,,,Create an environment,\u00b6,,Create a project folder and a,venv,folder within:,,mkdir myproject,cd,myproject\npython3 -m venv venv,,,On Windows:,,py -3 -m venv venv,,,If you needed to install virtualenv because you are on an older version of\nPython, use the following command instead:,,virtualenv venv,,,On Windows:,,\\Python27\\Scripts\\virtualenv.exe venv,,,,,Activate the environment,\u00b6,,Before you work on your project, activate the corresponding environment:,,. venv/bin/activate,,,On Windows:,,venv\\Scripts\\activate,,,Your shell prompt will change to show the name of the activated environment.,,,,,Install Flask,\u00b6,,Within the activated environment, use the following command to install Flask:,,pip install Flask,,,,Living on the edge,\u00b6,,If you want to work with the latest Flask code before it\u2019s released, install or\nupdate the code from the master branch:,,pip install -U https://github.com/pallets/flask/archive/master.tar.gz,,,,,,Install virtualenv,\u00b6,,If you are using Python 2, the venv module is not available. Instead,\ninstall,virtualenv,.,,On Linux, virtualenv is provided by your package manager:,,# Debian, Ubuntu,sudo apt-get install python-virtualenv,# CentOS, Fedora,sudo yum install python-virtualenv,# Arch,sudo pacman -S python-virtualenv,,,If you are on Mac OS X or Windows, download,get-pip.py,, then:,,sudo python2 Downloads/get-pip.py\nsudo python2 -m pip install virtualenv,,,On Windows, as an administrator:,,\\Python27\\python.exe Downloads\\get-pip.py\n\\Python27\\python.exe -m pip install virtualenv,,,Now you can continue to,Create an environment,.,,,,,,,,,,,,,Contents,,,Installation,,Python Version,,Dependencies,,Optional dependencies,,,,Virtual environments,,Create an environment,,Activate the environment,,,,Install Flask,,Living on the edge,,,,Install virtualenv,,,,,Navigation,,,Overview,,,Previous:,Foreword for Experienced Programmers,,Next:,Quickstart,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Foreword", "url": "http://flask.pocoo.org/docs/dev/foreword/", "content": ",,,,,Foreword \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,Foreword,\u00b6,,Read this before you get started with Flask.  This hopefully answers some\nquestions about the purpose and goals of the project, and when you\nshould or should not be using it.,,,What does \u201cmicro\u201d mean?,\u00b6,,\u201cMicro\u201d does not mean that your whole web application has to fit into a single\nPython file (although it certainly can), nor does it mean that Flask is lacking\nin functionality. The \u201cmicro\u201d in microframework means Flask aims to keep the\ncore simple but extensible. Flask won\u2019t make many decisions for you, such as\nwhat database to use. Those decisions that it does make, such as what\ntemplating engine to use, are easy to change.  Everything else is up to you, so\nthat Flask can be everything you need and nothing you don\u2019t.,,By default, Flask does not include a database abstraction layer, form\nvalidation or anything else where different libraries already exist that can\nhandle that. Instead, Flask supports extensions to add such functionality to\nyour application as if it was implemented in Flask itself. Numerous extensions\nprovide database integration, form validation, upload handling, various open\nauthentication technologies, and more. Flask may be \u201cmicro\u201d, but it\u2019s ready for\nproduction use on a variety of needs.,,,,Configuration and Conventions,\u00b6,,Flask has many configuration values, with sensible defaults, and a few\nconventions when getting started.  By convention, templates and static files are\nstored in subdirectories within the application\u2019s Python source tree, with the\nnames,templates,and,static,respectively. While this can be changed, you\nusually don\u2019t have to, especially when getting started.,,,,Growing with Flask,\u00b6,,Once you have Flask up and running, you\u2019ll find a variety of extensions\navailable in the community to integrate your project for production. The Flask\ncore team reviews extensions and ensures approved extensions do not break with\nfuture releases.,,As your codebase grows, you are free to make the design decisions appropriate\nfor your project.  Flask will continue to provide a very simple glue layer to\nthe best that Python has to offer.  You can implement advanced patterns in\nSQLAlchemy or another database tool, introduce non-relational data persistence\nas appropriate, and take advantage of framework-agnostic tools built for WSGI,\nthe Python web interface.,,Flask includes many hooks to customize its behavior. Should you need more\ncustomization, the Flask class is built for subclassing. If you are interested\nin that, check out the,Becoming Big,chapter.  If you are curious about\nthe Flask design principles, head over to the section about,Design Decisions in Flask,.,,Continue to,Installation,, the,Quickstart,, or the,Foreword for Experienced Programmers,.,,,,,,,,,,,,,Contents,,,Foreword,,What does \u201cmicro\u201d mean?,,Configuration and Conventions,,Growing with Flask,,,,,Navigation,,,Overview,,,Previous:,Welcome to Flask,,Next:,Foreword for Experienced Programmers,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Python Module Index", "url": "http://flask.pocoo.org/docs/dev/py-modindex/", "content": ",,,,,Python Module Index \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,Flask 1.1.dev documentation,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,Python Module Index,,,f,,,,,,,f,,,,,flask,,,,,,flask.json,,,,,,flask.json.tag,,,,,,,,,,,,Navigation,,,Overview,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Patterns for Flask", "url": "http://flask.pocoo.org/docs/1.0/patterns/", "content": ",,,,,Patterns for Flask \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,,,,,,,,Patterns for Flask,\u00b6,,Certain things are common enough that the chances are high you will find\nthem in most web applications.  For example quite a lot of applications\nare using relational databases and user authentication.  In that case,\nchances are they will open a database connection at the beginning of the\nrequest and get the information of the currently logged in user.  At the\nend of the request, the database connection is closed again.,,There are more user contributed snippets and patterns in the,Flask\nSnippet Archives,.,,,,Larger Applications,,Simple Packages,,Working with Blueprints,,,,Application Factories,,Basic Factories,,Factories & Extensions,,Using Applications,,Factory Improvements,,,,Application Dispatching,,Working with this Document,,Combining Applications,,Dispatch by Subdomain,,Dispatch by Path,,,,Implementing API Exceptions,,Simple Exception Class,,Registering an Error Handler,,Usage in Views,,,,Using URL Processors,,Internationalized Application URLs,,Internationalized Blueprint URLs,,,,Deploying with Setuptools,,Basic Setup Script,,Tagging Builds,,Distributing Resources,,Declaring Dependencies,,Installing / Developing,,,,Deploying with Fabric,,Creating the first Fabfile,,Running Fabfiles,,The WSGI File,,The Configuration File,,First Deployment,,Next Steps,,,,Using SQLite 3 with Flask,,Connect on Demand,,Easy Querying,,Initial Schemas,,,,SQLAlchemy in Flask,,Flask-SQLAlchemy Extension,,Declarative,,Manual Object Relational Mapping,,SQL Abstraction Layer,,,,Uploading Files,,A Gentle Introduction,,Improving Uploads,,Upload Progress Bars,,An Easier Solution,,,,Caching,,Setting up a Cache,,Using a Cache,,,,View Decorators,,Login Required Decorator,,Caching Decorator,,Templating Decorator,,Endpoint Decorator,,,,Form Validation with WTForms,,The Forms,,In the View,,Forms in Templates,,,,Template Inheritance,,Base Template,,Child Template,,,,Message Flashing,,Simple Flashing,,Flashing With Categories,,Filtering Flash Messages,,,,AJAX with jQuery,,Loading jQuery,,Where is My Site?,,JSON View Functions,,The HTML,,,,Custom Error Pages,,Common Error Codes,,Error Handlers,,,,Lazily Loading Views,,Converting to Centralized URL Map,,Loading Late,,,,MongoKit in Flask,,Declarative,,PyMongo Compatibility Layer,,,,Adding a favicon,,See also,,,,Streaming Contents,,Basic Usage,,Streaming from Templates,,Streaming with Context,,,,Deferred Request Callbacks,,Adding HTTP Method Overrides,,Request Content Checksums,,Celery Background Tasks,,Install,,Configure,,An example task,,Run a worker,,,,Subclassing Flask,,,,,,,,,,,,,Navigation,,,Overview,,,Previous:,Working with the Shell,,Next:,Larger Applications,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Step 0: Creating The Folders", "url": "http://flask.pocoo.org/docs/dev/tutorial/folders/", "content": ",,,Step 0: Creating The Folders \u2014 Flask Documentation (0.13-dev),,,,var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../../',\n        VERSION:     '0.13.dev',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };,,,,,,,,,,,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask Documentation (0.13-dev),\u00bb,,Tutorial,\u00bb,,,,,Warning:,This is the documentation for the development version of Flask,,,,,,Step 0: Creating The Folders,\u00b6,,It is recommended to install your Flask application within a virtualenv. Please\nread the,Installation,section to set up your environment.,,Now that you have installed Flask, you will need to create the folders required\nfor this tutorial. Your directory structure will look like this:,,/,flaskr,,/,flaskr,,/,static,,/,templates,,,,The application will be installed and run as Python package.  This is the\nrecommended way to install and run Flask applications.  You will see exactly\nhow to run,flaskr,later on in this tutorial.,,For now go ahead and create the applications directory structure.  In the next\nfew steps you will be creating the database schema as well as the main module.,,As a quick side note, the files inside of the,static,folder are\navailable to users of the application via HTTP.  This is the place where CSS and\nJavaScript files go.  Inside the,templates,folder, Flask will look for,Jinja2,templates.  You will see examples of this later on.,,For now you should continue with,Step 1: Database Schema,.,,,,,,,,,Versions,,,Development,,(unstable),,Flask 0.12.x,,(stable),,Flask 0.11.x,,Flask 0.10.x,,,,,Related Topics,,,Documentation overview,,Tutorial,,Previous:,Introducing Flaskr,,Next:,Step 1: Database Schema,,,,,,Quick search,,,,,,,,,,,\u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using,Sphinx,.,,"},
{"name": "Step 2: Application Setup Code", "url": "http://flask.pocoo.org/docs/dev/tutorial/setup/", "content": ",,,Step 2: Application Setup Code \u2014 Flask Documentation (0.13-dev),,,,var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../../',\n        VERSION:     '0.13.dev',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };,,,,,,,,,,,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask Documentation (0.13-dev),\u00bb,,Tutorial,\u00bb,,,,,Warning:,This is the documentation for the development version of Flask,,,,,,Step 2: Application Setup Code,\u00b6,,Next, we will create the application module,,flaskr.py,.  Just like the,schema.sql,file you created in the previous step, this file should be\nplaced inside of the,flaskr/flaskr,folder.,,For this tutorial, all the Python code we use will be put into this file\n(except for one line in,__init__.py,, and any testing or optional files you\ndecide to create).,,The first several lines of code in the application module are the needed import\nstatements.  After that there will be a few lines of configuration code.,,For small applications like,flaskr,, it is possible to drop the configuration\ndirectly into the module.  However, a cleaner solution is to create a separate,.py,file, load that, and import the values from there.,,Here are the import statements (in,flaskr.py,):,,import,,os,,import,,sqlite3,,from,,flask,,import,,(,Flask,,,,request,,,,session,,,,g,,,,redirect,,,,url_for,,,,abort,,,,render_template,,,,flash,),,,,The next couple lines will create the actual application instance and\ninitialize it with the config from the same file in,flaskr.py,:,,app,,=,,Flask,(,__name__,),,# create the application instance :),,app,.,config,.,from_object,(,__name__,),,# load config from this file , flaskr.py,,# Load default config and override config from an environment variable,,app,.,config,.,update,(,,DATABASE,=,os,.,path,.,join,(,app,.,root_path,,,,'flaskr.db',),,,SECRET_KEY,=,b,'_5#y2L\"F4Q8z,\\n\\xec,]/',,,,USERNAME,=,'admin',,,,PASSWORD,=,'default',,),,app,.,config,.,from_envvar,(,'FLASKR_SETTINGS',,,,silent,=,True,),,,,In the above code, the,Config,object works similarly to a\ndictionary, so it can be updated with new values.,,,Database Path,,Operating systems know the concept of a current working directory for\neach process.  Unfortunately, you cannot depend on this in web\napplications because you might have more than one application in the\nsame process.,,For this reason the,app.root_path,attribute can be used to\nget the path to the application.  Together with the,os.path,module,\nfiles can then easily be found.  In this example, we place the\ndatabase right next to it.,,For a real-world application, it\u2019s recommended to use,Instance Folders,instead.,,,Usually, it is a good idea to load a separate, environment-specific\nconfiguration file.  Flask allows you to import multiple configurations and it\nwill use the setting defined in the last import.  This enables robust\nconfiguration setups.,from_envvar(),can help achieve\nthis.,,app,.,config,.,from_envvar,(,'FLASKR_SETTINGS',,,,silent,=,True,),,,,If you want to do this (not required for this tutorial) simply define the\nenvironment variable,FLASKR_SETTINGS,that points to a config file\nto be loaded.  The silent switch just tells Flask to not complain if no such\nenvironment key is set.,,In addition to that, you can use the,from_object(),method on the config object and provide it with an import name of a\nmodule.  Flask will then initialize the variable from that module.  Note\nthat in all cases, only variable names that are uppercase are considered.,,The,SECRET_KEY,is needed to keep the client-side sessions secure.\nChoose that key wisely and as hard to guess and complex as possible.,,Lastly, add a method that allows for easy connections to the specified\ndatabase.,,def,,connect_db,():,,\"\"\"Connects to the specific database.\"\"\",,rv,,=,,sqlite3,.,connect,(,app,.,config,[,'DATABASE',]),,rv,.,row_factory,,=,,sqlite3,.,Row,,return,,rv,,,,This can be used to open a connection on request and also from the\ninteractive Python shell or a script.  This will come in handy later.\nYou can create a simple database connection through SQLite and then tell\nit to use the,sqlite3.Row,object to represent rows. This allows\nthe rows to be treated as if they were dictionaries instead of tuples.,,In the next section you will see how to run the application.,,Continue with,Step 3: Installing flaskr as a Package,.,,,,,,,,,Versions,,,Development,,(unstable),,Flask 0.12.x,,(stable),,Flask 0.11.x,,Flask 0.10.x,,,,,Related Topics,,,Documentation overview,,Tutorial,,Previous:,Step 1: Database Schema,,Next:,Step 3: Installing flaskr as a Package,,,,,,Quick search,,,,,,,,,,,\u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using,Sphinx,.,,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/", "content": "Snippets Archive | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Categories,,,APIs and Microformats,(5),Application Structure,(9),Authentication,(4),Database,(9),Decorators,(12),Deployment,(8),Forms,(6),Internationalization,(2),JavaScript,(3),Performance,(2),Security,(5),Sessions,(12),Template Tricks,(11),URLs,(10),Utilities,(28),,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "Step 3: Installing flaskr as a Package", "url": "http://flask.pocoo.org/docs/dev/tutorial/packaging/", "content": ",,,Step 3: Installing flaskr as a Package \u2014 Flask Documentation (0.13-dev),,,,var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../../',\n        VERSION:     '0.13.dev',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };,,,,,,,,,,,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask Documentation (0.13-dev),\u00bb,,Tutorial,\u00bb,,,,,Warning:,This is the documentation for the development version of Flask,,,,,,Step 3: Installing flaskr as a Package,\u00b6,,Flask is now shipped with built-in support for,Click,.  Click provides\nFlask with enhanced and extensible command line utilities.  Later in this\ntutorial you will see exactly how to extend the,flask,command line\ninterface (CLI).,,A useful pattern to manage a Flask application is to install your app\nfollowing the,Python Packaging Guide,.  Presently this involves\ncreating two new files;,setup.py,and,MANIFEST.in,in the\nprojects root directory.  You also need to add an,__init__.py,file to make the,flaskr/flaskr,directory a package.  After these\nchanges, your code structure should be:,,/,flaskr,,/,flaskr,,__init__,.,py,,/,static,,/,templates,,flaskr,.,py,,schema,.,sql,,setup,.,py,,MANIFEST,.,in,,,,Create the,setup.py,file for,flaskr,with the following content:,,from,,setuptools,,import,,setup,,setup,(,,name,=,'flaskr',,,,packages,=,[,'flaskr',],,,include_package_data,=,True,,,,install_requires,=,[,,'flask',,,,],,,),,,,When using setuptools, it is also necessary to specify any special files\nthat should be included in your package (in the,MANIFEST.in,).\nIn this case, the static and templates directories need to be included,\nas well as the schema.,,Create the,MANIFEST.in,and add the following lines:,,graft,,flaskr,/,templates,,graft,,flaskr,/,static,,include,,flaskr,/,schema,.,sql,,,,Next, to simplify locating the application, create the file,,flaskr/__init__.py,containing only the following import statement:,,from,,.flaskr,,import,,app,,,,This import statement brings the application instance into the top-level\nof the application package.  When it is time to run the application, the\nFlask development server needs the location of the app instance.  This\nimport statement simplifies the location process.  Without the above\nimport statement, the export statement a few steps below would need to be,export,,FLASK_APP=flaskr.flaskr,.,,At this point you should be able to install the application.  As usual, it\nis recommended to install your Flask application within a,virtualenv,.\nWith that said, from the,flaskr/,directory, go ahead and install the\napplication with:,,pip,,install,,--,editable,,.,,,,The above installation command assumes that it is run within the projects\nroot directory,,flaskr/,.  The,editable,flag allows editing\nsource code without having to reinstall the Flask app each time you make\nchanges.  The flaskr app is now installed in your virtualenv (see output\nof,pip,,freeze,).,,With that out of the way, you should be able to start up the application.\nDo this on Mac or Linux with the following commands in,flaskr/,:,,export,,FLASK_APP,=,flaskr,,export,,FLASK_DEBUG,=,true,,flask,,run,,,,(In case you are on Windows you need to use,set,instead of,export,).\nThe,FLASK_DEBUG,flag enables or disables the interactive debugger.,Never leave debug mode activated in a production system,, because it will\nallow users to execute code on the server!,,You will see a message telling you that server has started along with\nthe address at which you can access it in a browser.,,When you head over to the server in your browser, you will get a 404 error\nbecause we don\u2019t have any views yet.  That will be addressed a little later,\nbut first, you should get the database working.,,,Externally Visible Server,,Want your server to be publicly available?  Check out the,externally visible server,section for more\ninformation.,,,Continue with,Step 4: Database Connections,.,,,,,,,,,Versions,,,Development,,(unstable),,Flask 0.12.x,,(stable),,Flask 0.11.x,,Flask 0.10.x,,,,,Related Topics,,,Documentation overview,,Tutorial,,Previous:,Step 2: Application Setup Code,,Next:,Step 4: Database Connections,,,,,,Quick search,,,,,,,,,,,\u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using,Sphinx,.,,"},
{"name": "API", "url": "http://flask.pocoo.org/docs/dev/api/", "content": ",,,,,API \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,API,\u00b6,,This part of the documentation covers all the interfaces of Flask.  For\nparts where Flask depends on external libraries, we document the most\nimportant right here and provide links to the canonical documentation.,,,Application Object,\u00b6,,,,class,flask.,Flask,(,import_name,,,static_url_path=None,,,static_folder='static',,,static_host=None,,,host_matching=False,,,subdomain_matching=False,,,template_folder='templates',,,instance_path=None,,,instance_relative_config=False,,,root_path=None,),\u00b6,,The flask object implements a WSGI application and acts as the central\nobject.  It is passed the name of the module or package of the\napplication.  Once it is created it will act as a central registry for\nthe view functions, the URL rules, template configuration and much more.,,The name of the package is used to resolve resources from inside the\npackage or the folder the module is contained in depending on if the\npackage parameter resolves to an actual python package (a folder with\nan,__init__.py,file inside) or a standard module (just a,.py,file).,,For more information about resource loading, see,open_resource(),.,,Usually you create a,Flask,instance in your main module or\nin the,__init__.py,file of your package like this:,,from,,flask,,import,,Flask,,app,,=,,Flask,(,__name__,),,,,,About the First Parameter,,The idea of the first parameter is to give Flask an idea of what\nbelongs to your application.  This name is used to find resources\non the filesystem, can be used by extensions to improve debugging\ninformation and a lot more.,,So it\u2019s important what you provide there.  If you are using a single\nmodule,,__name__,is always the correct value.  If you however are\nusing a package, it\u2019s usually recommended to hardcode the name of\nyour package there.,,For example if your application is defined in,yourapplication/app.py,you should create it with one of the two versions below:,,app,,=,,Flask,(,'yourapplication',),,app,,=,,Flask,(,__name__,.,split,(,'.',)[,0,]),,,,Why is that?  The application will work even with,__name__,, thanks\nto how resources are looked up.  However it will make debugging more\npainful.  Certain extensions can make assumptions based on the\nimport name of your application.  For example the Flask-SQLAlchemy\nextension will look for the code in your application that triggered\nan SQL query in debug mode.  If the import name is not properly set\nup, that debugging information is lost.  (For example it would only\npick up SQL queries in,yourapplication.app,and not,yourapplication.views.frontend,),,,,Changelog,,New in version 1.0:,The,host_matching,and,static_host,parameters were added.,,,,New in version 1.0:,The,subdomain_matching,parameter was added. Subdomain\nmatching needs to be enabled manually now. Setting,SERVER_NAME,does not implicitly enable it.,,,,New in version 0.11:,The,root_path,parameter was added.,,,,New in version 0.8:,The,instance_path,and,instance_relative_config,parameters were\nadded.,,,,New in version 0.7:,The,static_url_path,,,static_folder,, and,template_folder,parameters were added.,,,,,,,Parameters:,,import_name,\u2013 the name of the application package,,static_url_path,\u2013 can be used to specify a different path for the\nstatic files on the web.  Defaults to the name\nof the,static_folder,folder.,,static_folder,\u2013 the folder with static files that should be served\nat,static_url_path,.  Defaults to the,'static',folder in the root path of the application.,,static_host,\u2013 the host to use when adding the static route.\nDefaults to None. Required when using,host_matching=True,with a,static_folder,configured.,,host_matching,\u2013 set,url_map.host_matching,attribute.\nDefaults to False.,,subdomain_matching,\u2013 consider the subdomain relative to,SERVER_NAME,when matching routes. Defaults to False.,,template_folder,\u2013 the folder that contains the templates that should\nbe used by the application.  Defaults to,'templates',folder in the root path of the\napplication.,,instance_path,\u2013 An alternative instance path for the application.\nBy default the folder,'instance',next to the\npackage or module is assumed to be the instance\npath.,,instance_relative_config,\u2013 if set to,True,relative filenames\nfor loading the config are assumed to\nbe relative to the instance path instead\nof the application root.,,root_path,\u2013 Flask by default will automatically calculate the path\nto the root of the application.  In certain situations\nthis cannot be achieved (for instance if the package\nis a Python 3 namespace package) and needs to be\nmanually defined.,,,,,,,,,add_template_filter,(,f,,,name=None,),\u00b6,,Register a custom template filter.  Works exactly like the,template_filter(),decorator.,,,,,,Parameters:,name,\u2013 the optional name of the filter, otherwise the\nfunction name will be used.,,,,,,,,add_template_global,(,f,,,name=None,),\u00b6,,Register a custom template global function. Works exactly like the,template_global(),decorator.,,,Changelog,,New in version 0.10.,,,,,,,Parameters:,name,\u2013 the optional name of the global function, otherwise the\nfunction name will be used.,,,,,,,,add_template_test,(,f,,,name=None,),\u00b6,,Register a custom template test.  Works exactly like the,template_test(),decorator.,,,Changelog,,New in version 0.10.,,,,,,,Parameters:,name,\u2013 the optional name of the test, otherwise the\nfunction name will be used.,,,,,,,,add_url_rule,(,rule,,,endpoint=None,,,view_func=None,,,provide_automatic_options=None,,,**options,),\u00b6,,Connects a URL rule.  Works exactly like the,route(),decorator.  If a view_func is provided it will be registered with the\nendpoint.,,Basically this example:,,@app,.,route,(,'/',),,def,,index,():,,pass,,,,Is equivalent to the following:,,def,,index,():,,pass,,app,.,add_url_rule,(,'/',,,,'index',,,,index,),,,,If the view_func is not provided you will need to connect the endpoint\nto a view function like so:,,app,.,view_functions,[,'index',],,=,,index,,,,Internally,route(),invokes,add_url_rule(),so if you want\nto customize the behavior via subclassing you only need to change\nthis method.,,For more information refer to,URL Route Registrations,.,,,Changelog,,Changed in version 0.6:,OPTIONS,is added automatically as method.,,,,Changed in version 0.2:,view_func,parameter added.,,,,,,,Parameters:,,rule,\u2013 the URL rule as string,,endpoint,\u2013 the endpoint for the registered URL rule.  Flask\nitself assumes the name of the view function as\nendpoint,,view_func,\u2013 the function to call when serving a request to the\nprovided endpoint,,provide_automatic_options,\u2013 controls whether the,OPTIONS,method should be added automatically. This can also be controlled\nby setting the,view_func.provide_automatic_options,,=,,False,before adding the rule.,,options,\u2013 the options to be forwarded to the underlying,Rule,object.  A change\nto Werkzeug is handling of method options.  methods\nis a list of methods this rule should be limited\nto (,GET,,,POST,etc.).  By default a rule\njust listens for,GET,(and implicitly,HEAD,).\nStarting with Flask 0.6,,OPTIONS,is implicitly\nadded and handled by the standard request handling.,,,,,,,,,,after_request,(,f,),\u00b6,,Register a function to be run after each request.,,Your function must take one parameter, an instance of,response_class,and return a new response object or the\nsame (see,process_response(),).,,As of Flask 0.7 this function might not be executed at the end of the\nrequest in case an unhandled exception occurred.,,,,,after_request_funcs,= None,\u00b6,,A dictionary with lists of functions that should be called after\neach request.  The key of the dictionary is the name of the blueprint\nthis function is active for,,None,for all requests.  This can for\nexample be used to close database connections. To register a function\nhere, use the,after_request(),decorator.,,,,,app_context,(,),\u00b6,,Create an,AppContext,. Use as a,with,block to push the context, which will make,current_app,point at this application.,,An application context is automatically pushed by,RequestContext.push(),when handling a request, and when running a CLI command. Use\nthis to manually create a context outside of these situations.,,with,,app,.,app_context,():,,init_db,(),,,,See,The Application Context,.,,,Changelog,,New in version 0.9.,,,,,,app_ctx_globals_class,\u00b6,,alias of,flask.ctx._AppCtxGlobals,,,,,auto_find_instance_path,(,),\u00b6,,Tries to locate the instance path if it was not provided to the\nconstructor of the application class.  It will basically calculate\nthe path to a folder named,instance,next to your main file or\nthe package.,,,Changelog,,New in version 0.8.,,,,,,before_first_request,(,f,),\u00b6,,Registers a function to be run before the first request to this\ninstance of the application.,,The function will be called without any arguments and its return\nvalue is ignored.,,,Changelog,,New in version 0.8.,,,,,,before_first_request_funcs,= None,\u00b6,,A list of functions that will be called at the beginning of the\nfirst request to this instance. To register a function, use the,before_first_request(),decorator.,,,Changelog,,New in version 0.8.,,,,,,before_request,(,f,),\u00b6,,Registers a function to run before each request.,,For example, this can be used to open a database connection, or to load\nthe logged in user from the session.,,The function will be called without any arguments. If it returns a\nnon-None value, the value is handled as if it was the return value from\nthe view, and further request handling is stopped.,,,,,before_request_funcs,= None,\u00b6,,A dictionary with lists of functions that will be called at the\nbeginning of each request. The key of the dictionary is the name of\nthe blueprint this function is active for, or,None,for all\nrequests. To register a function, use the,before_request(),decorator.,,,,,blueprints,= None,\u00b6,,all the attached blueprints in a dictionary by name.  Blueprints\ncan be attached multiple times so this dictionary does not tell\nyou how often they got attached.,,,Changelog,,New in version 0.7.,,,,,,cli,= None,\u00b6,,The click command line context for this application.  Commands\nregistered here show up in the,flask,command once the\napplication has been discovered.  The default commands are\nprovided by Flask itself and can be overridden.,,This is an instance of a,click.Group,object.,,,,,config,= None,\u00b6,,The configuration dictionary as,Config,.  This behaves\nexactly like a regular dictionary but supports additional methods\nto load a config from files.,,,,,config_class,\u00b6,,alias of,flask.config.Config,,,,,context_processor,(,f,),\u00b6,,Registers a template context processor function.,,,,,create_global_jinja_loader,(,),\u00b6,,Creates the loader for the Jinja2 environment.  Can be used to\noverride just the loader and keeping the rest unchanged.  It\u2019s\ndiscouraged to override this function.  Instead one should override\nthe,jinja_loader(),function instead.,,The global loader dispatches between the loaders of the application\nand the individual blueprints.,,,Changelog,,New in version 0.7.,,,,,,create_jinja_environment,(,),\u00b6,,Creates the Jinja2 environment based on,jinja_options,and,select_jinja_autoescape(),.  Since 0.7 this also adds\nthe Jinja2 globals and filters after initialization.  Override\nthis function to customize the behavior.,,,Changelog,,Changed in version 0.11:,Environment.auto_reload,set in accordance with,TEMPLATES_AUTO_RELOAD,configuration option.,,,,New in version 0.5.,,,,,,create_url_adapter,(,request,),\u00b6,,Creates a URL adapter for the given request. The URL adapter\nis created at a point where the request context is not yet set\nup so the request is passed explicitly.,,,Changelog,,Changed in version 1.0:,SERVER_NAME,no longer implicitly enables subdomain\nmatching. Use,subdomain_matching,instead.,,,,Changed in version 0.9:,This can now also be called without a request object when the\nURL adapter is created for the application context.,,,,New in version 0.6.,,,,,,debug,\u00b6,,Whether debug mode is enabled. When using,flask,,run,to start\nthe development server, an interactive debugger will be shown for\nunhandled exceptions, and the server will be reloaded when code\nchanges. This maps to the,DEBUG,config key. This is\nenabled when,env,is,'development',and is overridden\nby the,FLASK_DEBUG,environment variable. It may not behave as\nexpected if set in code.,,Do not enable debug mode when deploying in production.,,Default:,True,if,env,is,'development',, or,False,otherwise.,,,,,default_config,= {'APPLICATION_ROOT': '/', 'DEBUG': None, 'ENV': None, 'EXPLAIN_TEMPLATE_LOADING': False, 'JSONIFY_MIMETYPE': 'application/json', 'JSONIFY_PRETTYPRINT_REGULAR': False, 'JSON_AS_ASCII': True, 'JSON_SORT_KEYS': True, 'MAX_CONTENT_LENGTH': None, 'MAX_COOKIE_SIZE': 4093, 'PERMANENT_SESSION_LIFETIME': datetime.timedelta(31), 'PREFERRED_URL_SCHEME': 'http', 'PRESERVE_CONTEXT_ON_EXCEPTION': None, 'PROPAGATE_EXCEPTIONS': None, 'SECRET_KEY': None, 'SEND_FILE_MAX_AGE_DEFAULT': datetime.timedelta(0, 43200), 'SERVER_NAME': None, 'SESSION_COOKIE_DOMAIN': None, 'SESSION_COOKIE_HTTPONLY': True, 'SESSION_COOKIE_NAME': 'session', 'SESSION_COOKIE_PATH': None, 'SESSION_COOKIE_SAMESITE': None, 'SESSION_COOKIE_SECURE': False, 'SESSION_REFRESH_EACH_REQUEST': True, 'TEMPLATES_AUTO_RELOAD': None, 'TESTING': False, 'TRAP_BAD_REQUEST_ERRORS': None, 'TRAP_HTTP_EXCEPTIONS': False, 'USE_X_SENDFILE': False},\u00b6,,Default configuration parameters.,,,,,dispatch_request,(,),\u00b6,,Does the request dispatching.  Matches the URL and returns the\nreturn value of the view or error handler.  This does not have to\nbe a response object.  In order to convert the return value to a\nproper response object, call,make_response(),.,,,Changelog,,Changed in version 0.7:,This no longer does the exception handling, this code was\nmoved to the new,full_dispatch_request(),.,,,,,,do_teardown_appcontext,(,exc=<object object>,),\u00b6,,Called right before the application context is popped.,,When handling a request, the application context is popped\nafter the request context. See,do_teardown_request(),.,,This calls all functions decorated with,teardown_appcontext(),. Then the,appcontext_tearing_down,signal is sent.,,This is called by,AppContext.pop(),.,,,Changelog,,New in version 0.9.,,,,,,do_teardown_request,(,exc=<object object>,),\u00b6,,Called after the request is dispatched and the response is\nreturned, right before the request context is popped.,,This calls all functions decorated with,teardown_request(),, and,Blueprint.teardown_request(),if a blueprint handled the request. Finally, the,request_tearing_down,signal is sent.,,This is called by,RequestContext.pop(),,\nwhich may be delayed during testing to maintain access to\nresources.,,,,,,Parameters:,exc,\u2013 An unhandled exception raised while dispatching the\nrequest. Detected from the current exception information if\nnot passed. Passed to each teardown function.,,,,,,Changelog,,Changed in version 0.9:,Added the,exc,argument.,,,,,,endpoint,(,endpoint,),\u00b6,,A decorator to register a function as an endpoint.\nExample:,,@app,.,endpoint,(,'example.endpoint',),,def,,example,():,,return,,\"example\",,,,,,,,Parameters:,endpoint,\u2013 the name of the endpoint,,,,,,,,env,\u00b6,,What environment the app is running in. Flask and extensions may\nenable behaviors based on the environment, such as enabling debug\nmode. This maps to the,ENV,config key. This is set by the,FLASK_ENV,environment variable and may not behave as\nexpected if set in code.,,Do not enable development when deploying in production.,,Default:,'production',,,,,error_handler_spec,= None,\u00b6,,A dictionary of all registered error handlers.  The key is,None,for error handlers active on the application, otherwise the key is\nthe name of the blueprint.  Each key points to another dictionary\nwhere the key is the status code of the http exception.  The\nspecial key,None,points to a list of tuples where the first item\nis the class for the instance check and the second the error handler\nfunction.,,To register an error handler, use the,errorhandler(),decorator.,,,,,errorhandler,(,code_or_exception,),\u00b6,,Register a function to handle errors by code or exception class.,,A decorator that is used to register a function given an\nerror code.  Example:,,@app,.,errorhandler,(,404,),,def,,page_not_found,(,error,):,,return,,'This page does not exist',,,,404,,,,You can also register handlers for arbitrary exceptions:,,@app,.,errorhandler,(,DatabaseError,),,def,,special_exception_handler,(,error,):,,return,,'Database connection failed',,,,500,,,,,Changelog,,New in version 0.7:,Use,register_error_handler(),instead of modifying,error_handler_spec,directly, for application wide error\nhandlers.,,,,New in version 0.7:,One can now additionally also register custom exception types\nthat do not necessarily have to be a subclass of the,HTTPException,class.,,,,,,,Parameters:,code_or_exception,\u2013 the code as integer for the handler, or\nan arbitrary exception,,,,,,,,extensions,= None,\u00b6,,a place where extensions can store application specific state.  For\nexample this is where an extension could store database engines and\nsimilar things.  For backwards compatibility extensions should register\nthemselves like this:,,if,,not,,hasattr,(,app,,,,'extensions',):,,app,.,extensions,,=,,{},,app,.,extensions,[,'extensionname',],,=,,SomeObject,(),,,,The key must match the name of the extension module. For example in\ncase of a \u201cFlask-Foo\u201d extension in,flask_foo,, the key would be,'foo',.,,,Changelog,,New in version 0.7.,,,,,,full_dispatch_request,(,),\u00b6,,Dispatches the request and on top of that performs request\npre and postprocessing as well as HTTP exception catching and\nerror handling.,,,Changelog,,New in version 0.7.,,,,,,get_send_file_max_age,(,filename,),\u00b6,,Provides default cache_timeout for the,send_file(),functions.,,By default, this function returns,SEND_FILE_MAX_AGE_DEFAULT,from\nthe configuration of,current_app,.,,Static file functions such as,send_from_directory(),use this\nfunction, and,send_file(),calls this function on,current_app,when the given cache_timeout is,None,. If a\ncache_timeout is given in,send_file(),, that timeout is used;\notherwise, this method is called.,,This allows subclasses to change the behavior when sending files based\non the filename.  For example, to set the cache timeout for .js files\nto 60 seconds:,,class,,MyFlask,(,flask,.,Flask,):,,def,,get_send_file_max_age,(,self,,,,name,):,,if,,name,.,lower,(),.,endswith,(,'.js',):,,return,,60,,return,,flask,.,Flask,.,get_send_file_max_age,(,self,,,,name,),,,,,Changelog,,New in version 0.9.,,,,,,got_first_request,\u00b6,,This attribute is set to,True,if the application started\nhandling the first request.,,,Changelog,,New in version 0.8.,,,,,,handle_exception,(,e,),\u00b6,,Default exception handling that kicks in when an exception\noccurs that is not caught.  In debug mode the exception will\nbe re-raised immediately, otherwise it is logged and the handler\nfor a 500 internal server error is used.  If no such handler\nexists, a default 500 internal server error message is displayed.,,,Changelog,,New in version 0.3.,,,,,,handle_http_exception,(,e,),\u00b6,,Handles an HTTP exception.  By default this will invoke the\nregistered error handlers and fall back to returning the\nexception as response.,,,Changelog,,New in version 0.3.,,,,,,handle_url_build_error,(,error,,,endpoint,,,values,),\u00b6,,Handle,BuildError,on,url_for(),.,,,,,handle_user_exception,(,e,),\u00b6,,This method is called whenever an exception occurs that should be\nhandled.  A special case are,HTTPException,s which are forwarded by\nthis function to the,handle_http_exception(),method.  This\nfunction will either return a response value or reraise the\nexception with the same traceback.,,,Changelog,,Changed in version 1.0:,Key errors raised from request data like,form,show the the bad\nkey in debug mode rather than a generic bad request message.,,,,New in version 0.7.,,,,,,has_static_folder,\u00b6,,This is,True,if the package bound object\u2019s container has a\nfolder for static files.,,,Changelog,,New in version 0.5.,,,,,,import_name,= None,\u00b6,,The name of the package or module that this app belongs to. Do not\nchange this once it is set by the constructor.,,,,,inject_url_defaults,(,endpoint,,,values,),\u00b6,,Injects the URL defaults for the given endpoint directly into\nthe values dictionary passed.  This is used internally and\nautomatically called on URL building.,,,Changelog,,New in version 0.7.,,,,,,instance_path,= None,\u00b6,,Holds the path to the instance folder.,,,Changelog,,New in version 0.8.,,,,,,iter_blueprints,(,),\u00b6,,Iterates over all blueprints by the order they were registered.,,,Changelog,,New in version 0.11.,,,,,,jinja_env,\u00b6,,The Jinja2 environment used to load templates.,,,,,jinja_environment,\u00b6,,alias of,flask.templating.Environment,,,,,jinja_loader,\u00b6,,The Jinja loader for this package bound object.,,,Changelog,,New in version 0.5.,,,,,,jinja_options,= {'extensions': ['jinja2.ext.autoescape', 'jinja2.ext.with_']},\u00b6,,Options that are passed directly to the Jinja2 environment.,,,,,json_decoder,\u00b6,,alias of,flask.json.JSONDecoder,,,,,json_encoder,\u00b6,,alias of,flask.json.JSONEncoder,,,,,log_exception,(,exc_info,),\u00b6,,Logs an exception.  This is called by,handle_exception(),if debugging is disabled and right before the handler is called.\nThe default implementation logs the exception as error on the,logger,.,,,Changelog,,New in version 0.8.,,,,,,logger,\u00b6,,The,'flask.app',logger, a standard Python,Logger,.,,In debug mode, the logger\u2019s,level,will be set\nto,DEBUG,.,,If there are no handlers configured, a default handler will be added.\nSee,Logging,for more information.,,,Changelog,,Changed in version 1.0:,Behavior was simplified. The logger is always named,flask.app,. The level is only set during configuration, it\ndoesn\u2019t check,app.debug,each time. Only one format is used,\nnot different ones depending on,app.debug,. No handlers are\nremoved, and a handler is only added if no handlers are already\nconfigured.,,,,New in version 0.3.,,,,,,make_config,(,instance_relative=False,),\u00b6,,Used to create the config attribute by the Flask constructor.\nThe,instance_relative,parameter is passed in from the constructor\nof Flask (there named,instance_relative_config,) and indicates if\nthe config should be relative to the instance path or the root path\nof the application.,,,Changelog,,New in version 0.8.,,,,,,make_default_options_response,(,),\u00b6,,This method is called to create the default,OPTIONS,response.\nThis can be changed through subclassing to change the default\nbehavior of,OPTIONS,responses.,,,Changelog,,New in version 0.7.,,,,,,make_null_session,(,),\u00b6,,Creates a new instance of a missing session.  Instead of overriding\nthis method we recommend replacing the,session_interface,.,,,Changelog,,New in version 0.7.,,,,,,make_response,(,rv,),\u00b6,,Convert the return value from a view function to an instance of,response_class,.,,,,,,Parameters:,rv,\u2013,the return value from the view function. The view function\nmust return a response. Returning,None,, or the view ending\nwithout returning, is not allowed. The following types are allowed\nfor,view_rv,:,,,str,(,unicode,in Python 2),,A response object is created with the string encoded to UTF-8\nas the body.,,bytes,(,str,in Python 2),,A response object is created with the bytes as the body.,,tuple,,Either,(body,,,status,,,headers),,,(body,,,status),, or,(body,,,headers),, where,body,is any of the other types\nallowed here,,status,is a string or an integer, and,headers,is a dictionary or a list of,(key,,,value),tuples. If,body,is a,response_class,instance,,status,overwrites the exiting value and,headers,are\nextended.,,response_class,,The object is returned unchanged.,,other,Response,class,,The object is coerced to,response_class,.,,callable(),,The function is called as a WSGI application. The result is\nused to create a response object.,,,,,,,,Changelog,,Changed in version 0.9:,Previously a tuple was interpreted as the arguments for the\nresponse object.,,,,,,make_shell_context,(,),\u00b6,,Returns the shell context for an interactive shell for this\napplication.  This runs all the registered shell context\nprocessors.,,,Changelog,,New in version 0.11.,,,,,,name,\u00b6,,The name of the application.  This is usually the import name\nwith the difference that it\u2019s guessed from the run file if the\nimport name is main.  This name is used as a display name when\nFlask needs the name of the application.  It can be set and overridden\nto change the value.,,,Changelog,,New in version 0.8.,,,,,,open_instance_resource,(,resource,,,mode='rb',),\u00b6,,Opens a resource from the application\u2019s instance folder\n(,instance_path,).  Otherwise works like,open_resource(),.  Instance resources can also be opened for\nwriting.,,,,,,Parameters:,,resource,\u2013 the name of the resource.  To access resources within\nsubfolders use forward slashes as separator.,,mode,\u2013 resource file opening mode, default is \u2018rb\u2019.,,,,,,,,,,open_resource,(,resource,,,mode='rb',),\u00b6,,Opens a resource from the application\u2019s resource folder.  To see\nhow this works, consider the following folder structure:,,/,myapplication,.,py,,/,schema,.,sql,,/,static,,/,style,.,css,,/,templates,,/,layout,.,html,,/,index,.,html,,,,If you want to open the,schema.sql,file you would do the\nfollowing:,,with,,app,.,open_resource,(,'schema.sql',),,as,,f,:,,contents,,=,,f,.,read,(),,do_something_with,(,contents,),,,,,,,,Parameters:,,resource,\u2013 the name of the resource.  To access resources within\nsubfolders use forward slashes as separator.,,mode,\u2013 resource file opening mode, default is \u2018rb\u2019.,,,,,,,,,,open_session,(,request,),\u00b6,,Creates or opens a new session.  Default implementation stores all\nsession data in a signed cookie.  This requires that the,secret_key,is set.  Instead of overriding this method\nwe recommend replacing the,session_interface,.,,,,,,Parameters:,request,\u2013 an instance of,request_class,.,,,,,,,,permanent_session_lifetime,\u00b6,,A,timedelta,which is used to set the expiration\ndate of a permanent session.  The default is 31 days which makes a\npermanent session survive for roughly one month.,,This attribute can also be configured from the config with the,PERMANENT_SESSION_LIFETIME,configuration key.  Defaults to,timedelta(days=31),,,,,preprocess_request,(,),\u00b6,,Called before the request is dispatched. Calls,url_value_preprocessors,registered with the app and the\ncurrent blueprint (if any). Then calls,before_request_funcs,registered with the app and the blueprint.,,If any,before_request(),handler returns a non-None value, the\nvalue is handled as if it was the return value from the view, and\nfurther request handling is stopped.,,,,,preserve_context_on_exception,\u00b6,,Returns the value of the,PRESERVE_CONTEXT_ON_EXCEPTION,configuration value in case it\u2019s set, otherwise a sensible default\nis returned.,,,Changelog,,New in version 0.7.,,,,,,process_response,(,response,),\u00b6,,Can be overridden in order to modify the response object\nbefore it\u2019s sent to the WSGI server.  By default this will\ncall all the,after_request(),decorated functions.,,,Changelog,,Changed in version 0.5:,As of Flask 0.5 the functions registered for after request\nexecution are called in reverse order of registration.,,,,,,,Parameters:,response,\u2013 a,response_class,object.,,,Returns:,a new response object or the same, has to be an\ninstance of,response_class,.,,,,,,,,propagate_exceptions,\u00b6,,Returns the value of the,PROPAGATE_EXCEPTIONS,configuration\nvalue in case it\u2019s set, otherwise a sensible default is returned.,,,Changelog,,New in version 0.7.,,,,,,register_blueprint,(,blueprint,,,**options,),\u00b6,,Register a,Blueprint,on the application. Keyword\narguments passed to this method will override the defaults set on the\nblueprint.,,Calls the blueprint\u2019s,register(),method after\nrecording the blueprint in the application\u2019s,blueprints,.,,,,,,Parameters:,,blueprint,\u2013 The blueprint to register.,,url_prefix,\u2013 Blueprint routes will be prefixed with this.,,subdomain,\u2013 Blueprint routes will match on this subdomain.,,url_defaults,\u2013 Blueprint routes will use these default values for\nview arguments.,,options,\u2013 Additional keyword arguments are passed to,BlueprintSetupState,. They can be\naccessed in,record(),callbacks.,,,,,,,,Changelog,,New in version 0.7.,,,,,,register_error_handler,(,code_or_exception,,,f,),\u00b6,,Alternative error attach function to the,errorhandler(),decorator that is more straightforward to use for non decorator\nusage.,,,Changelog,,New in version 0.7.,,,,,,request_class,\u00b6,,alias of,flask.wrappers.Request,,,,,request_context,(,environ,),\u00b6,,Create a,RequestContext,representing a\nWSGI environment. Use a,with,block to push the context,\nwhich will make,request,point at this request.,,See,The Request Context,.,,Typically you should not call this from your own code. A request\ncontext is automatically pushed by the,wsgi_app(),when\nhandling a request. Use,test_request_context(),to create\nan environment and context instead of this method.,,,,,,Parameters:,environ,\u2013 a WSGI environment,,,,,,,,response_class,\u00b6,,alias of,flask.wrappers.Response,,,,,root_path,= None,\u00b6,,Absolute path to the package on the filesystem. Used to look up\nresources contained in the package.,,,,,route,(,rule,,,**options,),\u00b6,,A decorator that is used to register a view function for a\ngiven URL rule.  This does the same thing as,add_url_rule(),but is intended for decorator usage:,,@app,.,route,(,'/',),,def,,index,():,,return,,'Hello World',,,,For more information refer to,URL Route Registrations,.,,,,,,Parameters:,,rule,\u2013 the URL rule as string,,endpoint,\u2013 the endpoint for the registered URL rule.  Flask\nitself assumes the name of the view function as\nendpoint,,options,\u2013 the options to be forwarded to the underlying,Rule,object.  A change\nto Werkzeug is handling of method options.  methods\nis a list of methods this rule should be limited\nto (,GET,,,POST,etc.).  By default a rule\njust listens for,GET,(and implicitly,HEAD,).\nStarting with Flask 0.6,,OPTIONS,is implicitly\nadded and handled by the standard request handling.,,,,,,,,,,run,(,host=None,,,port=None,,,debug=None,,,load_dotenv=True,,,**options,),\u00b6,,Runs the application on a local development server.,,Do not use,run(),in a production setting. It is not intended to\nmeet security and performance requirements for a production server.\nInstead, see,Deployment Options,for WSGI server recommendations.,,If the,debug,flag is set the server will automatically reload\nfor code changes and show a debugger in case an exception happened.,,If you want to run the application in debug mode, but disable the\ncode execution on the interactive debugger, you can pass,use_evalex=False,as parameter.  This will keep the debugger\u2019s\ntraceback screen active, but disable code execution.,,It is not recommended to use this function for development with\nautomatic reloading as this is badly supported.  Instead you should\nbe using the,flask,command line script\u2019s,run,support.,,,Keep in Mind,,Flask will suppress any server error with a generic error page\nunless it is in debug mode.  As such to enable just the\ninteractive debugger without the code reloading, you have to\ninvoke,run(),with,debug=True,and,use_reloader=False,.\nSetting,use_debugger,to,True,without being in debug mode\nwon\u2019t catch any exceptions because there won\u2019t be any to\ncatch.,,,,,,,Parameters:,,host,\u2013 the hostname to listen on. Set this to,'0.0.0.0',to\nhave the server available externally as well. Defaults to,'127.0.0.1',or the host in the,SERVER_NAME,config variable\nif present.,,port,\u2013 the port of the webserver. Defaults to,5000,or the\nport defined in the,SERVER_NAME,config variable if present.,,debug,\u2013 if given, enable or disable debug mode. See,debug,.,,load_dotenv,\u2013 Load the nearest,.env,and,.flaskenv,files to set environment variables. Will also change the working\ndirectory to the directory containing the first file found.,,options,\u2013 the options to be forwarded to the underlying Werkzeug\nserver. See,werkzeug.serving.run_simple(),for more\ninformation.,,,,,,,,Changelog,,Changed in version 1.0:,If installed, python-dotenv will be used to load environment\nvariables from,.env,and,.flaskenv,files.,,If set, the,FLASK_ENV,and,FLASK_DEBUG,environment variables will override,env,and,debug,.,,Threaded mode is enabled by default.,,,,Changed in version 0.10:,The default port is now picked from the,SERVER_NAME,variable.,,,,,,save_session,(,session,,,response,),\u00b6,,Saves the session if it needs updates.  For the default\nimplementation, check,open_session(),.  Instead of overriding this\nmethod we recommend replacing the,session_interface,.,,,,,,Parameters:,,session,\u2013 the session to be saved (a,SecureCookie,object),,response,\u2013 an instance of,response_class,,,,,,,,,,secret_key,\u00b6,,If a secret key is set, cryptographic components can use this to\nsign cookies and other things. Set this to a complex random value\nwhen you want to use the secure cookie for instance.,,This attribute can also be configured from the config with the,SECRET_KEY,configuration key. Defaults to,None,.,,,,,select_jinja_autoescape,(,filename,),\u00b6,,Returns,True,if autoescaping should be active for the given\ntemplate name. If no template name is given, returns,True,.,,,Changelog,,New in version 0.5.,,,,,,send_file_max_age_default,\u00b6,,A,timedelta,which is used as default cache_timeout\nfor the,send_file(),functions. The default is 12 hours.,,This attribute can also be configured from the config with the,SEND_FILE_MAX_AGE_DEFAULT,configuration key. This configuration\nvariable can also be set with an integer value used as seconds.\nDefaults to,timedelta(hours=12),,,,,send_static_file,(,filename,),\u00b6,,Function used internally to send static files from the static\nfolder to the browser.,,,Changelog,,New in version 0.5.,,,,,,session_cookie_name,\u00b6,,The secure cookie uses this for the name of the session cookie.,,This attribute can also be configured from the config with the,SESSION_COOKIE_NAME,configuration key.  Defaults to,'session',,,,,session_interface,= <flask.sessions.SecureCookieSessionInterface object>,\u00b6,,the session interface to use.  By default an instance of,SecureCookieSessionInterface,is used here.,,,Changelog,,New in version 0.8.,,,,,,shell_context_processor,(,f,),\u00b6,,Registers a shell context processor function.,,,Changelog,,New in version 0.11.,,,,,,shell_context_processors,= None,\u00b6,,A list of shell context processor functions that should be run\nwhen a shell context is created.,,,Changelog,,New in version 0.11.,,,,,,should_ignore_error,(,error,),\u00b6,,This is called to figure out if an error should be ignored\nor not as far as the teardown system is concerned.  If this\nfunction returns,True,then the teardown handlers will not be\npassed the error.,,,Changelog,,New in version 0.10.,,,,,,static_folder,\u00b6,,The absolute path to the configured static folder.,,,,,static_url_path,\u00b6,,The URL prefix that the static route will be registered for.,,,,,teardown_appcontext,(,f,),\u00b6,,Registers a function to be called when the application context\nends.  These functions are typically also called when the request\ncontext is popped.,,Example:,,ctx,,=,,app,.,app_context,(),,ctx,.,push,(),,...,,ctx,.,pop,(),,,,When,ctx.pop(),is executed in the above example, the teardown\nfunctions are called just before the app context moves from the\nstack of active contexts.  This becomes relevant if you are using\nsuch constructs in tests.,,Since a request context typically also manages an application\ncontext it would also be called when you pop a request context.,,When a teardown function was called because of an unhandled exception\nit will be passed an error object. If an,errorhandler(),is\nregistered, it will handle the exception and the teardown will not\nreceive it.,,The return values of teardown functions are ignored.,,,Changelog,,New in version 0.9.,,,,,,teardown_appcontext_funcs,= None,\u00b6,,A list of functions that are called when the application context\nis destroyed.  Since the application context is also torn down\nif the request ends this is the place to store code that disconnects\nfrom databases.,,,Changelog,,New in version 0.9.,,,,,,teardown_request,(,f,),\u00b6,,Register a function to be run at the end of each request,\nregardless of whether there was an exception or not.  These functions\nare executed when the request context is popped, even if not an\nactual request was performed.,,Example:,,ctx,,=,,app,.,test_request_context,(),,ctx,.,push,(),,...,,ctx,.,pop,(),,,,When,ctx.pop(),is executed in the above example, the teardown\nfunctions are called just before the request context moves from the\nstack of active contexts.  This becomes relevant if you are using\nsuch constructs in tests.,,Generally teardown functions must take every necessary step to avoid\nthat they will fail.  If they do execute code that might fail they\nwill have to surround the execution of these code by try/except\nstatements and log occurring errors.,,When a teardown function was called because of an exception it will\nbe passed an error object.,,The return values of teardown functions are ignored.,,,Debug Note,,In debug mode Flask will not tear down a request on an exception\nimmediately.  Instead it will keep it alive so that the interactive\ndebugger can still access it.  This behavior can be controlled\nby the,PRESERVE_CONTEXT_ON_EXCEPTION,configuration variable.,,,,,,teardown_request_funcs,= None,\u00b6,,A dictionary with lists of functions that are called after\neach request, even if an exception has occurred. The key of the\ndictionary is the name of the blueprint this function is active for,,None,for all requests. These functions are not allowed to modify\nthe request, and their return values are ignored. If an exception\noccurred while processing the request, it gets passed to each\nteardown_request function. To register a function here, use the,teardown_request(),decorator.,,,Changelog,,New in version 0.7.,,,,,,template_context_processors,= None,\u00b6,,A dictionary with list of functions that are called without argument\nto populate the template context.  The key of the dictionary is the\nname of the blueprint this function is active for,,None,for all\nrequests.  Each returns a dictionary that the template context is\nupdated with.  To register a function here, use the,context_processor(),decorator.,,,,,template_filter,(,name=None,),\u00b6,,A decorator that is used to register custom template filter.\nYou can specify a name for the filter, otherwise the function\nname will be used. Example:,,@app,.,template_filter,(),,def,,reverse,(,s,):,,return,,s,[::,-,1,],,,,,,,,Parameters:,name,\u2013 the optional name of the filter, otherwise the\nfunction name will be used.,,,,,,,,template_folder,= None,\u00b6,,Location of the template files to be added to the template lookup.,None,if templates should not be added.,,,,,template_global,(,name=None,),\u00b6,,A decorator that is used to register a custom template global function.\nYou can specify a name for the global function, otherwise the function\nname will be used. Example:,,@app,.,template_global,(),,def,,double,(,n,):,,return,,2,,*,,n,,,,,Changelog,,New in version 0.10.,,,,,,,Parameters:,name,\u2013 the optional name of the global function, otherwise the\nfunction name will be used.,,,,,,,,template_test,(,name=None,),\u00b6,,A decorator that is used to register custom template test.\nYou can specify a name for the test, otherwise the function\nname will be used. Example:,,@app,.,template_test,(),,def,,is_prime,(,n,):,,if,,n,,==,,2,:,,return,,True,,for,,i,,in,,range,(,2,,,,int,(,math,.,ceil,(,math,.,sqrt,(,n,))),,+,,1,):,,if,,n,,%,,i,,==,,0,:,,return,,False,,return,,True,,,,,Changelog,,New in version 0.10.,,,,,,,Parameters:,name,\u2013 the optional name of the test, otherwise the\nfunction name will be used.,,,,,,,,templates_auto_reload,\u00b6,,Reload templates when they are changed. Used by,create_jinja_environment(),.,,This attribute can be configured with,TEMPLATES_AUTO_RELOAD,. If\nnot set, it will be enabled in debug mode.,,,Changelog,,New in version 1.0:,This property was added but the underlying config and behavior\nalready existed.,,,,,,test_cli_runner,(,**kwargs,),\u00b6,,Create a CLI runner for testing CLI commands.\nSee,Testing CLI Commands,.,,Returns an instance of,test_cli_runner_class,, by default,FlaskCliRunner,. The Flask app object is\npassed as the first argument.,,,Changelog,,New in version 1.0.,,,,,,test_cli_runner_class,= None,\u00b6,,The,CliRunner,subclass, by default,FlaskCliRunner,that is used by,test_cli_runner(),. Its,__init__,method should take a\nFlask app object as the first argument.,,,Changelog,,New in version 1.0.,,,,,,test_client,(,use_cookies=True,,,**kwargs,),\u00b6,,Creates a test client for this application.  For information\nabout unit testing head over to,Testing Flask Applications,.,,Note that if you are testing for assertions or exceptions in your\napplication code, you must set,app.testing,,=,,True,in order for the\nexceptions to propagate to the test client.  Otherwise, the exception\nwill be handled by the application (not visible to the test client) and\nthe only indication of an AssertionError or other exception will be a\n500 status code response to the test client.  See the,testing,attribute.  For example:,,app,.,testing,,=,,True,,client,,=,,app,.,test_client,(),,,,The test client can be used in a,with,block to defer the closing down\nof the context until the end of the,with,block.  This is useful if\nyou want to access the context locals for testing:,,with,,app,.,test_client,(),,as,,c,:,,rv,,=,,c,.,get,(,'/?vodka=42',),,assert,,request,.,args,[,'vodka',],,==,,'42',,,,Additionally, you may pass optional keyword arguments that will then\nbe passed to the application\u2019s,test_client_class,constructor.\nFor example:,,from,,flask.testing,,import,,FlaskClient,,class,,CustomClient,(,FlaskClient,):,,def,,__init__,(,self,,,,*,args,,,,**,kwargs,):,,self,.,_authentication,,=,,kwargs,.,pop,(,\"authentication\",),,super,(,CustomClient,,,self,),.,__init__,(,,*,args,,,,**,kwargs,),,app,.,test_client_class,,=,,CustomClient,,client,,=,,app,.,test_client,(,authentication,=,'Basic ....',),,,,See,FlaskClient,for more information.,,,Changelog,,Changed in version 0.11:,Added,**kwargs,to support passing additional keyword arguments to\nthe constructor of,test_client_class,.,,,,New in version 0.7:,The,use_cookies,parameter was added as well as the ability\nto override the client to be used by setting the,test_client_class,attribute.,,,,Changed in version 0.4:,added support for,with,block usage for the client.,,,,,,test_client_class,= None,\u00b6,,the test client that is used with when,test_client,is used.,,,Changelog,,New in version 0.7.,,,,,,test_request_context,(,*args,,,**kwargs,),\u00b6,,Create a,RequestContext,for a WSGI\nenvironment created from the given values. This is mostly useful\nduring testing, where you may want to run a function that uses\nrequest data without dispatching a full request.,,See,The Request Context,.,,Use a,with,block to push the context, which will make,request,point at the request for the created\nenvironment.,,with,,test_request_context,(,...,):,,generate_report,(),,,,When using the shell, it may be easier to push and pop the\ncontext manually to avoid indentation.,,ctx,,=,,app,.,test_request_context,(,...,),,ctx,.,push,(),,...,,ctx,.,pop,(),,,,Takes the same arguments as Werkzeug\u2019s,EnvironBuilder,, with some defaults from\nthe application. See the linked Werkzeug docs for most of the\navailable arguments. Flask-specific behavior is listed here.,,,,,,Parameters:,,path,\u2013 URL path being requested.,,base_url,\u2013 Base URL where the app is being served, which,path,is relative to. If not given, built from,PREFERRED_URL_SCHEME,,,subdomain,,,SERVER_NAME,, and,APPLICATION_ROOT,.,,subdomain,\u2013 Subdomain name to append to,SERVER_NAME,.,,url_scheme,\u2013 Scheme to use instead of,PREFERRED_URL_SCHEME,.,,data,\u2013 The request body, either as a string or a dict of\nform keys and values.,,json,\u2013 If given, this is serialized as JSON and passed as,data,. Also defaults,content_type,to,application/json,.,,args,\u2013 other positional arguments passed to,EnvironBuilder,.,,kwargs,\u2013 other keyword arguments passed to,EnvironBuilder,.,,,,,,,,,,testing,\u00b6,,The testing flag.  Set this to,True,to enable the test mode of\nFlask extensions (and in the future probably also Flask itself).\nFor example this might activate test helpers that have an\nadditional runtime cost which should not be enabled by default.,,If this is enabled and PROPAGATE_EXCEPTIONS is not changed from the\ndefault it\u2019s implicitly enabled.,,This attribute can also be configured from the config with the,TESTING,configuration key.  Defaults to,False,.,,,,,trap_http_exception,(,e,),\u00b6,,Checks if an HTTP exception should be trapped or not.  By default\nthis will return,False,for all exceptions except for a bad request\nkey error if,TRAP_BAD_REQUEST_ERRORS,is set to,True,.  It\nalso returns,True,if,TRAP_HTTP_EXCEPTIONS,is set to,True,.,,This is called for all HTTP exceptions raised by a view function.\nIf it returns,True,for any exception the error handler for this\nexception is not called and it shows up as regular exception in the\ntraceback.  This is helpful for debugging implicitly raised HTTP\nexceptions.,,,Changelog,,Changed in version 1.0:,Bad request errors are not trapped by default in debug mode.,,,,New in version 0.8.,,,,,,update_template_context,(,context,),\u00b6,,Update the template context with some commonly used variables.\nThis injects request, session, config and g into the template\ncontext as well as everything template context processors want\nto inject.  Note that the as of Flask 0.6, the original values\nin the context will not be overridden if a context processor\ndecides to return a value with the same key.,,,,,,Parameters:,context,\u2013 the context as a dictionary that is updated in place\nto add extra variables.,,,,,,,,url_build_error_handlers,= None,\u00b6,,A list of functions that are called when,url_for(),raises a,BuildError,.  Each function registered here\nis called with,error,,,endpoint,and,values,.  If a function\nreturns,None,or raises a,BuildError,the next function is\ntried.,,,Changelog,,New in version 0.9.,,,,,,url_default_functions,= None,\u00b6,,A dictionary with lists of functions that can be used as URL value\npreprocessors.  The key,None,here is used for application wide\ncallbacks, otherwise the key is the name of the blueprint.\nEach of these functions has the chance to modify the dictionary\nof URL values before they are used as the keyword arguments of the\nview function.  For each function registered this one should also\nprovide a,url_defaults(),function that adds the parameters\nautomatically again that were removed that way.,,,Changelog,,New in version 0.7.,,,,,,url_defaults,(,f,),\u00b6,,Callback function for URL defaults for all view functions of the\napplication.  It\u2019s called with the endpoint and values and should\nupdate the values passed in place.,,,,,url_map,= None,\u00b6,,The,Map,for this instance.  You can use\nthis to change the routing converters after the class was created\nbut before any routes are connected.  Example:,,from,,werkzeug.routing,,import,,BaseConverter,,class,,ListConverter,(,BaseConverter,):,,def,,to_python,(,self,,,,value,):,,return,,value,.,split,(,',',),,def,,to_url,(,self,,,,values,):,,return,,',',.,join,(,super,(,ListConverter,,,,self,),.,to_url,(,value,),,for,,value,,in,,values,),,app,,=,,Flask,(,__name__,),,app,.,url_map,.,converters,[,'list',],,=,,ListConverter,,,,,,,url_rule_class,\u00b6,,alias of,werkzeug.routing.Rule,,,,,url_value_preprocessor,(,f,),\u00b6,,Register a URL value preprocessor function for all view\nfunctions in the application. These functions will be called before the,before_request(),functions.,,The function can modify the values captured from the matched url before\nthey are passed to the view. For example, this can be used to pop a\ncommon language code value and place it in,g,rather than pass it to\nevery view.,,The function is passed the endpoint name and values dict. The return\nvalue is ignored.,,,,,url_value_preprocessors,= None,\u00b6,,A dictionary with lists of functions that are called before the,before_request_funcs,functions. The key of the dictionary is\nthe name of the blueprint this function is active for, or,None,for all requests. To register a function, use,url_value_preprocessor(),.,,,Changelog,,New in version 0.7.,,,,,,use_x_sendfile,\u00b6,,Enable this if you want to use the X-Sendfile feature.  Keep in\nmind that the server has to support this.  This only affects files\nsent with the,send_file(),method.,,,Changelog,,New in version 0.2.,,,This attribute can also be configured from the config with the,USE_X_SENDFILE,configuration key.  Defaults to,False,.,,,,,view_functions,= None,\u00b6,,A dictionary of all view functions registered.  The keys will\nbe function names which are also used to generate URLs and\nthe values are the function objects themselves.\nTo register a view function, use the,route(),decorator.,,,,,wsgi_app,(,environ,,,start_response,),\u00b6,,The actual WSGI application. This is not implemented in,__call__(),so that middlewares can be applied without\nlosing a reference to the app object. Instead of doing this:,,app,,=,,MyMiddleware,(,app,),,,,It\u2019s a better idea to do this instead:,,app,.,wsgi_app,,=,,MyMiddleware,(,app,.,wsgi_app,),,,,Then you still have the original application object around and\ncan continue to call methods on it.,,,Changelog,,Changed in version 0.7:,Teardown events for the request and app contexts are called\neven if an unhandled error occurs. Other events may not be\ncalled depending on when an error occurs during dispatch.\nSee,Callbacks and Errors,.,,,,,,,Parameters:,,environ,\u2013 A WSGI environment.,,start_response,\u2013 A callable accepting a status code,\na list of headers, and an optional exception context to\nstart the response.,,,,,,,,,,,Blueprint Objects,\u00b6,,,,class,flask.,Blueprint,(,name,,,import_name,,,static_folder=None,,,static_url_path=None,,,template_folder=None,,,url_prefix=None,,,subdomain=None,,,url_defaults=None,,,root_path=None,),\u00b6,,Represents a blueprint.  A blueprint is an object that records\nfunctions that will be called with the,BlueprintSetupState,later to register functions\nor other things on the main application.  See,Modular Applications with Blueprints,for more\ninformation.,,,Changelog,,New in version 0.7.,,,,,add_app_template_filter,(,f,,,name=None,),\u00b6,,Register a custom template filter, available application wide.  Like,Flask.add_template_filter(),but for a blueprint.  Works exactly\nlike the,app_template_filter(),decorator.,,,,,,Parameters:,name,\u2013 the optional name of the filter, otherwise the\nfunction name will be used.,,,,,,,,add_app_template_global,(,f,,,name=None,),\u00b6,,Register a custom template global, available application wide.  Like,Flask.add_template_global(),but for a blueprint.  Works exactly\nlike the,app_template_global(),decorator.,,,Changelog,,New in version 0.10.,,,,,,,Parameters:,name,\u2013 the optional name of the global, otherwise the\nfunction name will be used.,,,,,,,,add_app_template_test,(,f,,,name=None,),\u00b6,,Register a custom template test, available application wide.  Like,Flask.add_template_test(),but for a blueprint.  Works exactly\nlike the,app_template_test(),decorator.,,,Changelog,,New in version 0.10.,,,,,,,Parameters:,name,\u2013 the optional name of the test, otherwise the\nfunction name will be used.,,,,,,,,add_url_rule,(,rule,,,endpoint=None,,,view_func=None,,,**options,),\u00b6,,Like,Flask.add_url_rule(),but for a blueprint.  The endpoint for\nthe,url_for(),function is prefixed with the name of the blueprint.,,,,,after_app_request,(,f,),\u00b6,,Like,Flask.after_request(),but for a blueprint.  Such a function\nis executed after each request, even if outside of the blueprint.,,,,,after_request,(,f,),\u00b6,,Like,Flask.after_request(),but for a blueprint.  This function\nis only executed after each request that is handled by a function of\nthat blueprint.,,,,,app_context_processor,(,f,),\u00b6,,Like,Flask.context_processor(),but for a blueprint.  Such a\nfunction is executed each request, even if outside of the blueprint.,,,,,app_errorhandler,(,code,),\u00b6,,Like,Flask.errorhandler(),but for a blueprint.  This\nhandler is used for all requests, even if outside of the blueprint.,,,,,app_template_filter,(,name=None,),\u00b6,,Register a custom template filter, available application wide.  Like,Flask.template_filter(),but for a blueprint.,,,,,,Parameters:,name,\u2013 the optional name of the filter, otherwise the\nfunction name will be used.,,,,,,,,app_template_global,(,name=None,),\u00b6,,Register a custom template global, available application wide.  Like,Flask.template_global(),but for a blueprint.,,,Changelog,,New in version 0.10.,,,,,,,Parameters:,name,\u2013 the optional name of the global, otherwise the\nfunction name will be used.,,,,,,,,app_template_test,(,name=None,),\u00b6,,Register a custom template test, available application wide.  Like,Flask.template_test(),but for a blueprint.,,,Changelog,,New in version 0.10.,,,,,,,Parameters:,name,\u2013 the optional name of the test, otherwise the\nfunction name will be used.,,,,,,,,app_url_defaults,(,f,),\u00b6,,Same as,url_defaults(),but application wide.,,,,,app_url_value_preprocessor,(,f,),\u00b6,,Same as,url_value_preprocessor(),but application wide.,,,,,before_app_first_request,(,f,),\u00b6,,Like,Flask.before_first_request(),.  Such a function is\nexecuted before the first request to the application.,,,,,before_app_request,(,f,),\u00b6,,Like,Flask.before_request(),.  Such a function is executed\nbefore each request, even if outside of a blueprint.,,,,,before_request,(,f,),\u00b6,,Like,Flask.before_request(),but for a blueprint.  This function\nis only executed before each request that is handled by a function of\nthat blueprint.,,,,,context_processor,(,f,),\u00b6,,Like,Flask.context_processor(),but for a blueprint.  This\nfunction is only executed for requests handled by a blueprint.,,,,,endpoint,(,endpoint,),\u00b6,,Like,Flask.endpoint(),but for a blueprint.  This does not\nprefix the endpoint with the blueprint name, this has to be done\nexplicitly by the user of this method.  If the endpoint is prefixed\nwith a,.,it will be registered to the current blueprint, otherwise\nit\u2019s an application independent endpoint.,,,,,errorhandler,(,code_or_exception,),\u00b6,,Registers an error handler that becomes active for this blueprint\nonly.  Please be aware that routing does not happen local to a\nblueprint so an error handler for 404 usually is not handled by\na blueprint unless it is caused inside a view function.  Another\nspecial case is the 500 internal server error which is always looked\nup from the application.,,Otherwise works as the,errorhandler(),decorator\nof the,Flask,object.,,,,,get_send_file_max_age,(,filename,),\u00b6,,Provides default cache_timeout for the,send_file(),functions.,,By default, this function returns,SEND_FILE_MAX_AGE_DEFAULT,from\nthe configuration of,current_app,.,,Static file functions such as,send_from_directory(),use this\nfunction, and,send_file(),calls this function on,current_app,when the given cache_timeout is,None,. If a\ncache_timeout is given in,send_file(),, that timeout is used;\notherwise, this method is called.,,This allows subclasses to change the behavior when sending files based\non the filename.  For example, to set the cache timeout for .js files\nto 60 seconds:,,class,,MyFlask,(,flask,.,Flask,):,,def,,get_send_file_max_age,(,self,,,,name,):,,if,,name,.,lower,(),.,endswith,(,'.js',):,,return,,60,,return,,flask,.,Flask,.,get_send_file_max_age,(,self,,,,name,),,,,,Changelog,,New in version 0.9.,,,,,,has_static_folder,\u00b6,,This is,True,if the package bound object\u2019s container has a\nfolder for static files.,,,Changelog,,New in version 0.5.,,,,,,import_name,= None,\u00b6,,The name of the package or module that this app belongs to. Do not\nchange this once it is set by the constructor.,,,,,jinja_loader,\u00b6,,The Jinja loader for this package bound object.,,,Changelog,,New in version 0.5.,,,,,,json_decoder,= None,\u00b6,,Blueprint local JSON decoder class to use.\nSet to,None,to use the app\u2019s,json_decoder,.,,,,,json_encoder,= None,\u00b6,,Blueprint local JSON decoder class to use.\nSet to,None,to use the app\u2019s,json_encoder,.,,,,,make_setup_state,(,app,,,options,,,first_registration=False,),\u00b6,,Creates an instance of,BlueprintSetupState(),object that is later passed to the register callback functions.\nSubclasses can override this to return a subclass of the setup state.,,,,,open_resource,(,resource,,,mode='rb',),\u00b6,,Opens a resource from the application\u2019s resource folder.  To see\nhow this works, consider the following folder structure:,,/,myapplication,.,py,,/,schema,.,sql,,/,static,,/,style,.,css,,/,templates,,/,layout,.,html,,/,index,.,html,,,,If you want to open the,schema.sql,file you would do the\nfollowing:,,with,,app,.,open_resource,(,'schema.sql',),,as,,f,:,,contents,,=,,f,.,read,(),,do_something_with,(,contents,),,,,,,,,Parameters:,,resource,\u2013 the name of the resource.  To access resources within\nsubfolders use forward slashes as separator.,,mode,\u2013 resource file opening mode, default is \u2018rb\u2019.,,,,,,,,,,record,(,func,),\u00b6,,Registers a function that is called when the blueprint is\nregistered on the application.  This function is called with the\nstate as argument as returned by the,make_setup_state(),method.,,,,,record_once,(,func,),\u00b6,,Works like,record(),but wraps the function in another\nfunction that will ensure the function is only called once.  If the\nblueprint is registered a second time on the application, the\nfunction passed is not called.,,,,,register,(,app,,,options,,,first_registration=False,),\u00b6,,Called by,Flask.register_blueprint(),to register all views\nand callbacks registered on the blueprint with the application. Creates\na,BlueprintSetupState,and calls each,record(),callback\nwith it.,,,,,,Parameters:,,app,\u2013 The application this blueprint is being registered with.,,options,\u2013 Keyword arguments forwarded from,register_blueprint(),.,,first_registration,\u2013 Whether this is the first time this\nblueprint has been registered on the application.,,,,,,,,,,register_error_handler,(,code_or_exception,,,f,),\u00b6,,Non-decorator version of the,errorhandler(),error attach\nfunction, akin to the,register_error_handler(),application-wide function of the,Flask,object but\nfor error handlers limited to this blueprint.,,,Changelog,,New in version 0.11.,,,,,,root_path,= None,\u00b6,,Absolute path to the package on the filesystem. Used to look up\nresources contained in the package.,,,,,route,(,rule,,,**options,),\u00b6,,Like,Flask.route(),but for a blueprint.  The endpoint for the,url_for(),function is prefixed with the name of the blueprint.,,,,,send_static_file,(,filename,),\u00b6,,Function used internally to send static files from the static\nfolder to the browser.,,,Changelog,,New in version 0.5.,,,,,,static_folder,\u00b6,,The absolute path to the configured static folder.,,,,,static_url_path,\u00b6,,The URL prefix that the static route will be registered for.,,,,,teardown_app_request,(,f,),\u00b6,,Like,Flask.teardown_request(),but for a blueprint.  Such a\nfunction is executed when tearing down each request, even if outside of\nthe blueprint.,,,,,teardown_request,(,f,),\u00b6,,Like,Flask.teardown_request(),but for a blueprint.  This\nfunction is only executed when tearing down requests handled by a\nfunction of that blueprint.  Teardown request functions are executed\nwhen the request context is popped, even when no actual request was\nperformed.,,,,,template_folder,= None,\u00b6,,Location of the template files to be added to the template lookup.,None,if templates should not be added.,,,,,url_defaults,(,f,),\u00b6,,Callback function for URL defaults for this blueprint.  It\u2019s called\nwith the endpoint and values and should update the values passed\nin place.,,,,,url_value_preprocessor,(,f,),\u00b6,,Registers a function as URL value preprocessor for this\nblueprint.  It\u2019s called before the view functions are called and\ncan modify the url values provided.,,,,,,Incoming Request Data,\u00b6,,,,class,flask.,Request,(,environ,,,populate_request=True,,,shallow=False,),\u00b6,,The request object used by default in Flask.  Remembers the\nmatched endpoint and view arguments.,,It is what ends up as,request,.  If you want to replace\nthe request object used you can subclass this and set,request_class,to your subclass.,,The request object is a,Request,subclass and\nprovides all of the attributes Werkzeug defines plus a few Flask\nspecific ones.,,,,environ,\u00b6,,The underlying WSGI environment.,,,,,path,\u00b6,,,,,full_path,\u00b6,,,,,script_root,\u00b6,,,,,url,\u00b6,,,,,base_url,\u00b6,,,,,url_root,\u00b6,,Provides different ways to look at the current,IRI,.  Imagine your application is\nlistening on the following application root:,,http,:,//,www,.,example,.,com,/,myapplication,,,,And a user requests the following URI:,,http://www.example.com/myapplication/%CF%80/page.html?x=y,,,In this case the values of the above mentioned attributes would be\nthe following:,,,,,,,,path,,u'/\u03c0/page.html',,,full_path,,u'/\u03c0/page.html?x=y',,,script_root,,u'/myapplication',,,base_url,,u'http://www.example.com/myapplication/\u03c0/page.html',,,url,,u'http://www.example.com/myapplication/\u03c0/page.html?x=y',,,url_root,,u'http://www.example.com/myapplication/',,,,,,,,accept_charsets,\u00b6,,List of charsets this client supports as,CharsetAccept,object.,,,,,accept_encodings,\u00b6,,List of encodings this client accepts.  Encodings in a HTTP term\nare compression encodings such as gzip.  For charsets have a look at,accept_charset,.,,,,,accept_languages,\u00b6,,List of languages this client accepts as,LanguageAccept,object.,,,,,accept_mimetypes,\u00b6,,List of mimetypes this client supports as,MIMEAccept,object.,,,,,access_route,\u00b6,,If a forwarded header exists this is a list of all ip addresses\nfrom the client ip to the last proxy server.,,,,,classmethod,application,(,f,),\u00b6,,Decorate a function as responder that accepts the request as first\nargument.  This works like the,responder(),decorator but the\nfunction is passed the request object as first argument and the\nrequest object will be closed automatically:,,@Request,.,application,,def,,my_wsgi_app,(,request,):,,return,,Response,(,'Hello World!',),,,,As of Werkzeug 0.14 HTTP exceptions are automatically caught and\nconverted to responses instead of failing.,,,,,,Parameters:,f,\u2013 the WSGI callable to decorate,,,Returns:,a new WSGI callable,,,,,,,,args,\u00b6,,The parsed URL parameters (the part in the URL after the question\nmark).,,By default an,ImmutableMultiDict,is returned from this function.  This can be changed by setting,parameter_storage_class,to a different type.  This might\nbe necessary if the order of the form data is important.,,,,,authorization,\u00b6,,The,Authorization,object in parsed form.,,,,,base_url,,Like,url,but without the querystring\nSee also:,trusted_hosts,.,,,,,blueprint,\u00b6,,The name of the current blueprint,,,,,cache_control,\u00b6,,A,RequestCacheControl,object\nfor the incoming cache control headers.,,,,,close,(,),\u00b6,,Closes associated resources of this request object.  This\ncloses all file handles explicitly.  You can also use the request\nobject in a with statement which will automatically close it.,,,Changelog,,New in version 0.9.,,,,,,content_encoding,\u00b6,,The Content-Encoding entity-header field is used as a modifier to the\nmedia-type.  When present, its value indicates what additional content\ncodings have been applied to the entity-body, and thus what decoding\nmechanisms must be applied in order to obtain the media-type\nreferenced by the Content-Type header field.,,,Changelog,,New in version 0.9.,,,,,,content_length,\u00b6,,The Content-Length entity-header field indicates the size of the\nentity-body in bytes or, in the case of the HEAD method, the size of\nthe entity-body that would have been sent had the request been a\nGET.,,,,,content_md5,\u00b6,,,The Content-MD5 entity-header field, as defined in RFC 1864, is an\nMD5 digest of the entity-body for the purpose of providing an\nend-to-end message integrity check (MIC) of the entity-body.  (Note:\na MIC is good for detecting accidental modification of the\nentity-body in transit, but is not proof against malicious attacks.),,,Changelog,,New in version 0.9.,,,,,,content_type,\u00b6,,The Content-Type entity-header field indicates the media type of\nthe entity-body sent to the recipient or, in the case of the HEAD\nmethod, the media type that would have been sent had the request\nbeen a GET.,,,,,cookies,\u00b6,,A,dict,with the contents of all cookies transmitted with\nthe request.,,,,,data,\u00b6,,Contains the incoming request data as string in case it came with\na mimetype Werkzeug does not handle.,,,,,date,\u00b6,,The Date general-header field represents the date and time at which\nthe message was originated, having the same semantics as orig-date\nin RFC 822.,,,,,dict_storage_class,\u00b6,,alias of,werkzeug.datastructures.ImmutableTypeConversionDict,,,,,endpoint,\u00b6,,The endpoint that matched the request.  This in combination with,view_args,can be used to reconstruct the same or a\nmodified URL.  If an exception happened when matching, this will\nbe,None,.,,,,,files,\u00b6,,MultiDict,object containing\nall uploaded files.  Each key in,files,is the name from the,<input,,type=\"file\",,name=\"\">,.  Each value in,files,is a\nWerkzeug,FileStorage,object.,,It basically behaves like a standard file object you know from Python,\nwith the difference that it also has a,save(),function that can\nstore the file on the filesystem.,,Note that,files,will only contain data if the request method was\nPOST, PUT or PATCH and the,<form>,that posted to the request had,enctype=\"multipart/form-data\",.  It will be empty otherwise.,,See the,MultiDict,/,FileStorage,documentation for\nmore details about the used data structure.,,,,,form,\u00b6,,The form parameters.  By default an,ImmutableMultiDict,is returned from this function.  This can be changed by setting,parameter_storage_class,to a different type.  This might\nbe necessary if the order of the form data is important.,,Please keep in mind that file uploads will not end up here, but instead\nin the,files,attribute.,,,Changelog,,Changed in version 0.9:,Previous to Werkzeug 0.9 this would only contain form data for POST\nand PUT requests.,,,,,,form_data_parser_class,\u00b6,,alias of,werkzeug.formparser.FormDataParser,,,,,classmethod,from_values,(,*args,,,**kwargs,),\u00b6,,Create a new request object based on the values provided.  If\nenviron is given missing values are filled from there.  This method is\nuseful for small scripts when you need to simulate a request from an URL.\nDo not use this method for unittesting, there is a full featured client\nobject (,Client,) that allows to create multipart requests,\nsupport for cookies etc.,,This accepts the same options as the,EnvironBuilder,.,,,Changelog,,Changed in version 0.5:,This method now accepts the same arguments as,EnvironBuilder,.  Because of this the,environ,parameter is now called,environ_overrides,.,,,,,,,Returns:,request object,,,,,,,,full_path,,Requested path as unicode, including the query string.,,,,,get_data,(,cache=True,,,as_text=False,,,parse_form_data=False,),\u00b6,,This reads the buffered incoming data from the client into one\nbytestring.  By default this is cached but that behavior can be\nchanged by setting,cache,to,False,.,,Usually it\u2019s a bad idea to call this method without checking the\ncontent length first as a client could send dozens of megabytes or more\nto cause memory problems on the server.,,Note that if the form data was already parsed this method will not\nreturn anything as form data parsing does not cache the data like\nthis method does.  To implicitly invoke form data parsing function\nset,parse_form_data,to,True,.  When this is done the return value\nof this method will be an empty string if the form parser handles\nthe data.  This generally is not necessary as if the whole data is\ncached (which is the default) the form parser will used the cached\ndata to parse the form data.  Please be generally aware of checking\nthe content length first in any case before calling this method\nto avoid exhausting server memory.,,If,as_text,is set to,True,the return value will be a decoded\nunicode string.,,,Changelog,,New in version 0.9.,,,,,,get_json,(,force=False,,,silent=False,,,cache=True,),\u00b6,,Parse and return the data as JSON. If the mimetype does not\nindicate JSON (,application/json,, see,is_json(),), this returns,None,unless,force,is\ntrue. If parsing fails,,on_json_loading_failed(),is called\nand its return value is used as the return value.,,,,,,Parameters:,,force,\u2013 Ignore the mimetype and always try to parse JSON.,,silent,\u2013 Silence parsing errors and return,None,instead.,,cache,\u2013 Store the parsed JSON to return for subsequent\ncalls.,,,,,,,,,,headers,\u00b6,,The headers from the WSGI environ as immutable,EnvironHeaders,.,,,,,host,\u00b6,,Just the host including the port if available.\nSee also:,trusted_hosts,.,,,,,host_url,\u00b6,,Just the host with scheme as IRI.\nSee also:,trusted_hosts,.,,,,,if_match,\u00b6,,An object containing all the etags in the,If-Match,header.,,,,,,Return type:,ETags,,,,,,,,if_modified_since,\u00b6,,The parsed,If-Modified-Since,header as datetime object.,,,,,if_none_match,\u00b6,,An object containing all the etags in the,If-None-Match,header.,,,,,,Return type:,ETags,,,,,,,,if_range,\u00b6,,The parsed,If-Range,header.,,,Changelog,,New in version 0.7.,,,,,,,Return type:,IfRange,,,,,,,,if_unmodified_since,\u00b6,,The parsed,If-Unmodified-Since,header as datetime object.,,,,,is_json,\u00b6,,Check if the mimetype indicates JSON data, either,application/json,or,application/*+json,.,,,Changelog,,New in version 0.11.,,,,,,is_multiprocess,\u00b6,,boolean that is,True,if the application is served by\na WSGI server that spawns multiple processes.,,,,,is_multithread,\u00b6,,boolean that is,True,if the application is served by\na multithreaded WSGI server.,,,,,is_run_once,\u00b6,,boolean that is,True,if the application will be executed only\nonce in a process lifetime.  This is the case for CGI for example,\nbut it\u2019s not guaranteed that the execution only happens one time.,,,,,is_secure,\u00b6,,True,if the request is secure.,,,,,is_xhr,\u00b6,,True if the request was triggered via a JavaScript XMLHttpRequest.\nThis only works with libraries that support the,X-Requested-With,header and set it to \u201cXMLHttpRequest\u201d.  Libraries that do that are\nprototype, jQuery and Mochikit and probably some more.,,,Deprecated since version 0.13:,X-Requested-With,is not standard and is unreliable.,,,,Changelog,,,,json,\u00b6,,This will contain the parsed JSON data if the mimetype indicates\nJSON (,application/json,, see,is_json(),), otherwise it\nwill be,None,.,,,,,list_storage_class,\u00b6,,alias of,werkzeug.datastructures.ImmutableList,,,,,make_form_data_parser,(,),\u00b6,,Creates the form data parser. Instantiates the,form_data_parser_class,with some parameters.,,,Changelog,,New in version 0.8.,,,,,,max_content_length,\u00b6,,Read-only view of the,MAX_CONTENT_LENGTH,config key.,,,,,max_forwards,\u00b6,,The Max-Forwards request-header field provides a mechanism with the\nTRACE and OPTIONS methods to limit the number of proxies or gateways\nthat can forward the request to the next inbound server.,,,,,method,\u00b6,,The request method. (For example,'GET',or,'POST',).,,,,,mimetype,\u00b6,,Like,content_type,, but without parameters (eg, without\ncharset, type etc.) and always lowercase.  For example if the content\ntype is,text/HTML;,,charset=utf-8,the mimetype would be,'text/html',.,,,,,mimetype_params,\u00b6,,The mimetype parameters as dict.  For example if the content\ntype is,text/html;,,charset=utf-8,the params would be,{'charset':,,'utf-8'},.,,,,,on_json_loading_failed,(,e,),\u00b6,,Called if,get_json(),parsing fails and isn\u2019t silenced. If\nthis method returns a value, it is used as the return value for,get_json(),. The default implementation raises a,BadRequest,exception.,,,Changelog,,Changed in version 0.10:,Raise a,BadRequest,error instead of returning an error\nmessage as JSON. If you want that behavior you can add it by\nsubclassing.,,,,New in version 0.8.,,,,,,parameter_storage_class,\u00b6,,alias of,werkzeug.datastructures.ImmutableMultiDict,,,,,path,,Requested path as unicode.  This works a bit like the regular path\ninfo in the WSGI environment but will always include a leading slash,\neven if the URL root is accessed.,,,,,pragma,\u00b6,,The Pragma general-header field is used to include\nimplementation-specific directives that might apply to any recipient\nalong the request/response chain.  All pragma directives specify\noptional behavior from the viewpoint of the protocol; however, some\nsystems MAY require that behavior be consistent with the directives.,,,,,query_string,\u00b6,,The URL parameters as raw bytestring.,,,,,range,\u00b6,,The parsed,Range,header.,,,Changelog,,New in version 0.7.,,,,,,,Return type:,Range,,,,,,,,referrer,\u00b6,,The Referer[sic] request-header field allows the client to specify,\nfor the server\u2019s benefit, the address (URI) of the resource from which\nthe Request-URI was obtained (the \u201creferrer\u201d, although the header\nfield is misspelled).,,,,,remote_addr,\u00b6,,The remote address of the client.,,,,,remote_user,\u00b6,,If the server supports user authentication, and the script is\nprotected, this attribute contains the username the user has\nauthenticated as.,,,,,routing_exception,= None,\u00b6,,If matching the URL failed, this is the exception that will be\nraised / was raised as part of the request handling.  This is\nusually a,NotFound,exception or\nsomething similar.,,,,,scheme,\u00b6,,URL scheme (http or https).,,,Changelog,,New in version 0.7.,,,,,,script_root,,The root path of the script without the trailing slash.,,,,,stream,\u00b6,,If the incoming form data was not encoded with a known mimetype\nthe data is stored unmodified in this stream for consumption.  Most\nof the time it is a better idea to use,data,which will give\nyou that data as a string.  The stream only returns the data once.,,Unlike,input_stream,this stream is properly guarded that you\ncan\u2019t accidentally read past the length of the input.  Werkzeug will\ninternally always refer to this stream to read data which makes it\npossible to wrap this object with a stream that does filtering.,,,Changelog,,Changed in version 0.9:,This stream is now always available but might be consumed by the\nform parser later on.  Previously the stream was only set if no\nparsing happened.,,,,,,url,,The reconstructed current URL as IRI.\nSee also:,trusted_hosts,.,,,,,url_charset,\u00b6,,The charset that is assumed for URLs.  Defaults to the value\nof,charset,.,,,Changelog,,New in version 0.6.,,,,,,url_root,,The full URL root (with hostname), this is the application\nroot as IRI.\nSee also:,trusted_hosts,.,,,,,url_rule,= None,\u00b6,,The internal URL rule that matched the request.  This can be\nuseful to inspect which methods are allowed for the URL from\na before/after handler (,request.url_rule.methods,) etc.\nThough if the request\u2019s method was invalid for the URL rule,\nthe valid list is available in,routing_exception.valid_methods,instead (an attribute of the Werkzeug exception,MethodNotAllowed,)\nbecause the request was never internally bound.,,,Changelog,,New in version 0.6.,,,,,,user_agent,\u00b6,,The current user agent.,,,,,values,\u00b6,,A,werkzeug.datastructures.CombinedMultiDict,that combines,args,and,form,.,,,,,view_args,= None,\u00b6,,A dict of view arguments that matched the request.  If an exception\nhappened when matching, this will be,None,.,,,,,want_form_data_parsed,\u00b6,,Returns True if the request method carries content.  As of\nWerkzeug 0.9 this will be the case if a content type is transmitted.,,,Changelog,,New in version 0.8.,,,,,,,flask.,request,\u00b6,,To access incoming request data, you can use the global,request,object.  Flask parses incoming request data for you and gives you\naccess to it through that global object.  Internally Flask makes\nsure that you always get the correct data for the active thread if you\nare in a multithreaded environment.,,This is a proxy.  See,Notes On Proxies,for more information.,,The request object is an instance of a,Request,subclass and provides all of the attributes Werkzeug defines.  This\njust shows a quick overview of the most important ones.,,,,,Response Objects,\u00b6,,,,class,flask.,Response,(,response=None,,,status=None,,,headers=None,,,mimetype=None,,,content_type=None,,,direct_passthrough=False,),\u00b6,,The response object that is used by default in Flask.  Works like the\nresponse object from Werkzeug but is set to have an HTML mimetype by\ndefault.  Quite often you don\u2019t have to create this object yourself because,make_response(),will take care of that for you.,,If you want to replace the response object used you can subclass this and\nset,response_class,to your subclass.,,,Changelog,,Changed in version 1.0:,JSON support is added to the response, like the request. This is useful\nwhen testing to get the test client response data as JSON.,,,,Changed in version 1.0:,Added,max_cookie_size,.,,,,,headers,\u00b6,,A,Headers,object representing the response headers.,,,,,status,\u00b6,,A string with a response status.,,,,,status_code,\u00b6,,The response status as integer.,,,,,data,\u00b6,,A descriptor that calls,get_data(),and,set_data(),.  This\nshould not be used and will eventually get deprecated.,,,,,get_json,(,force=False,,,silent=False,,,cache=True,),\u00b6,,Parse and return the data as JSON. If the mimetype does not\nindicate JSON (,application/json,, see,is_json(),), this returns,None,unless,force,is\ntrue. If parsing fails,,on_json_loading_failed(),is called\nand its return value is used as the return value.,,,,,,Parameters:,,force,\u2013 Ignore the mimetype and always try to parse JSON.,,silent,\u2013 Silence parsing errors and return,None,instead.,,cache,\u2013 Store the parsed JSON to return for subsequent\ncalls.,,,,,,,,,,is_json,\u00b6,,Check if the mimetype indicates JSON data, either,application/json,or,application/*+json,.,,,Changelog,,New in version 0.11.,,,,,,max_cookie_size,\u00b6,,Read-only view of the,MAX_COOKIE_SIZE,config key.,,See,max_cookie_size,in\nWerkzeug\u2019s docs.,,,,,mimetype,\u00b6,,The mimetype (content type without charset etc.),,,,,set_cookie,(,key,,,value='',,,max_age=None,,,expires=None,,,path='/',,,domain=None,,,secure=False,,,httponly=False,,,samesite=None,),\u00b6,,Sets a cookie. The parameters are the same as in the cookie,Morsel,object in the Python standard library but it accepts unicode data, too.,,A warning is raised if the size of the cookie header exceeds,max_cookie_size,, but the header will still be set.,,,,,,Parameters:,,key,\u2013 the key (name) of the cookie to be set.,,value,\u2013 the value of the cookie.,,max_age,\u2013 should be a number of seconds, or,None,(default) if\nthe cookie should last only as long as the client\u2019s\nbrowser session.,,expires,\u2013 should be a,datetime,object or UNIX timestamp.,,path,\u2013 limits the cookie to a given path, per default it will\nspan the whole domain.,,domain,\u2013 if you want to set a cross-domain cookie.  For example,,domain=\".example.com\",will set a cookie that is\nreadable by the domain,www.example.com,,,foo.example.com,etc.  Otherwise, a cookie will only\nbe readable by the domain that set it.,,secure,\u2013 If,True,, the cookie will only be available via HTTPS,,httponly,\u2013 disallow JavaScript to access the cookie.  This is an\nextension to the cookie standard and probably not\nsupported by all browsers.,,samesite,\u2013 Limits the scope of the cookie such that it will only\nbe attached to requests if those requests are\n\u201csame-site\u201d.,,,,,,,,,,,Sessions,\u00b6,,If you have set,Flask.secret_key,(or configured it from,SECRET_KEY,) you can use sessions in Flask applications. A session makes\nit possible to remember information from one request to another. The way Flask\ndoes this is by using a signed cookie. The user can look at the session\ncontents, but can\u2019t modify it unless they know the secret key, so make sure to\nset that to something complex and unguessable.,,To access the current session you can use the,session,object:,,,,class,flask.,session,\u00b6,,The session object works pretty much like an ordinary dict, with the\ndifference that it keeps track on modifications.,,This is a proxy.  See,Notes On Proxies,for more information.,,The following attributes are interesting:,,,,new,\u00b6,,True,if the session is new,,False,otherwise.,,,,,modified,\u00b6,,True,if the session object detected a modification.  Be advised\nthat modifications on mutable structures are not picked up\nautomatically, in that situation you have to explicitly set the\nattribute to,True,yourself.  Here an example:,,# this change is not picked up because a mutable object (here,,# a list) is changed.,,session,[,'objects',],.,append,(,42,),,# so mark it as modified yourself,,session,.,modified,,=,,True,,,,,,,permanent,\u00b6,,If set to,True,the session lives for,permanent_session_lifetime,seconds.  The\ndefault is 31 days.  If set to,False,(which is the default) the\nsession will be deleted when the user closes the browser.,,,,,,Session Interface,\u00b6,,,Changelog,,New in version 0.8.,,,The session interface provides a simple way to replace the session\nimplementation that Flask is using.,,,,class,flask.sessions.,SessionInterface,\u00b6,,The basic interface you have to implement in order to replace the\ndefault session interface which uses werkzeug\u2019s securecookie\nimplementation.  The only methods you have to implement are,open_session(),and,save_session(),, the others have\nuseful defaults which you don\u2019t need to change.,,The session object returned by the,open_session(),method has to\nprovide a dictionary like interface plus the properties and methods\nfrom the,SessionMixin,.  We recommend just subclassing a dict\nand adding that mixin:,,class,,Session,(,dict,,,,SessionMixin,):,,pass,,,,If,open_session(),returns,None,Flask will call into,make_null_session(),to create a session that acts as replacement\nif the session support cannot work because some requirement is not\nfulfilled.  The default,NullSession,class that is created\nwill complain that the secret key was not set.,,To replace the session interface on an application all you have to do\nis to assign,flask.Flask.session_interface,:,,app,,=,,Flask,(,__name__,),,app,.,session_interface,,=,,MySessionInterface,(),,,,,Changelog,,New in version 0.8.,,,,,get_cookie_domain,(,app,),\u00b6,,Returns the domain that should be set for the session cookie.,,Uses,SESSION_COOKIE_DOMAIN,if it is configured, otherwise\nfalls back to detecting the domain based on,SERVER_NAME,.,,Once detected (or if not set at all),,SESSION_COOKIE_DOMAIN,is\nupdated to avoid re-running the logic.,,,,,get_cookie_httponly,(,app,),\u00b6,,Returns True if the session cookie should be httponly.  This\ncurrently just returns the value of the,SESSION_COOKIE_HTTPONLY,config var.,,,,,get_cookie_path,(,app,),\u00b6,,Returns the path for which the cookie should be valid.  The\ndefault implementation uses the value from the,SESSION_COOKIE_PATH,config var if it\u2019s set, and falls back to,APPLICATION_ROOT,or\nuses,/,if it\u2019s,None,.,,,,,get_cookie_samesite,(,app,),\u00b6,,Return,'Strict',or,'Lax',if the cookie should use the,SameSite,attribute. This currently just returns the value of\nthe,SESSION_COOKIE_SAMESITE,setting.,,,,,get_cookie_secure,(,app,),\u00b6,,Returns True if the cookie should be secure.  This currently\njust returns the value of the,SESSION_COOKIE_SECURE,setting.,,,,,get_expiration_time,(,app,,,session,),\u00b6,,A helper method that returns an expiration date for the session\nor,None,if the session is linked to the browser session.  The\ndefault implementation returns now + the permanent session\nlifetime configured on the application.,,,,,is_null_session,(,obj,),\u00b6,,Checks if a given object is a null session.  Null sessions are\nnot asked to be saved.,,This checks if the object is an instance of,null_session_class,by default.,,,,,make_null_session,(,app,),\u00b6,,Creates a null session which acts as a replacement object if the\nreal session support could not be loaded due to a configuration\nerror.  This mainly aids the user experience because the job of the\nnull session is to still support lookup without complaining but\nmodifications are answered with a helpful error message of what\nfailed.,,This creates an instance of,null_session_class,by default.,,,,,null_session_class,\u00b6,,make_null_session(),will look here for the class that should\nbe created when a null session is requested.  Likewise the,is_null_session(),method will perform a typecheck against\nthis type.,,alias of,NullSession,,,,,open_session,(,app,,,request,),\u00b6,,This method has to be implemented and must either return,None,in case the loading failed because of a configuration error or an\ninstance of a session object which implements a dictionary like\ninterface + the methods and attributes on,SessionMixin,.,,,,,pickle_based,= False,\u00b6,,A flag that indicates if the session interface is pickle based.\nThis can be used by Flask extensions to make a decision in regards\nto how to deal with the session object.,,,Changelog,,New in version 0.10.,,,,,,save_session,(,app,,,session,,,response,),\u00b6,,This is called for actual sessions returned by,open_session(),at the end of the request.  This is still called during a request\ncontext so if you absolutely need access to the request you can do\nthat.,,,,,should_set_cookie,(,app,,,session,),\u00b6,,Used by session backends to determine if a,Set-Cookie,header\nshould be set for this session cookie for this response. If the session\nhas been modified, the cookie is set. If the session is permanent and\nthe,SESSION_REFRESH_EACH_REQUEST,config is true, the cookie is\nalways set.,,This check is usually skipped if the session was deleted.,,,Changelog,,New in version 0.11.,,,,,,,class,flask.sessions.,SecureCookieSessionInterface,\u00b6,,The default session interface that stores sessions in signed cookies\nthrough the,itsdangerous,module.,,,,static,digest_method,(,),\u00b6,,the hash function to use for the signature.  The default is sha1,,,,,key_derivation,= 'hmac',\u00b6,,the name of the itsdangerous supported key derivation.  The default\nis hmac.,,,,,open_session,(,app,,,request,),\u00b6,,This method has to be implemented and must either return,None,in case the loading failed because of a configuration error or an\ninstance of a session object which implements a dictionary like\ninterface + the methods and attributes on,SessionMixin,.,,,,,salt,= 'cookie-session',\u00b6,,the salt that should be applied on top of the secret key for the\nsigning of cookie based sessions.,,,,,save_session,(,app,,,session,,,response,),\u00b6,,This is called for actual sessions returned by,open_session(),at the end of the request.  This is still called during a request\ncontext so if you absolutely need access to the request you can do\nthat.,,,,,serializer,= <flask.json.tag.TaggedJSONSerializer object>,\u00b6,,A python serializer for the payload.  The default is a compact\nJSON derived serializer with support for some extra Python types\nsuch as datetime objects or tuples.,,,,,session_class,\u00b6,,alias of,SecureCookieSession,,,,,,class,flask.sessions.,SecureCookieSession,(,initial=None,),\u00b6,,Base class for sessions based on signed cookies.,,This session backend will set the,modified,and,accessed,attributes. It cannot reliably track whether a\nsession is new (vs. empty), so,new,remains hard coded to,False,.,,,,accessed,= False,\u00b6,,header, which allows caching proxies to cache different pages for\ndifferent users.,,,,,get,(,k,[,,,d,],),\u2192 D[k] if k in D, else d.  d defaults to None.,\u00b6,,,,,modified,= False,\u00b6,,When data is changed, this is set to,True,. Only the session\ndictionary itself is tracked; if the session contains mutable\ndata (for example a nested dict) then this must be set to,True,manually when modifying that data. The session cookie\nwill only be written to the response if this is,True,.,,,,,setdefault,(,k,[,,,d,],),\u2192 D.get(k,d), also set D[k]=d if k not in D,\u00b6,,,,,,class,flask.sessions.,NullSession,(,initial=None,),\u00b6,,Class used to generate nicer error messages if sessions are not\navailable.  Will still allow read-only access to the empty session\nbut fail on setting.,,,,,class,flask.sessions.,SessionMixin,\u00b6,,Expands a basic dictionary with session attributes.,,,,accessed,= True,\u00b6,,Some implementations can detect when session data is read or\nwritten and set this when that happens. The mixin default is hard\ncoded to,True,.,,,,,modified,= True,\u00b6,,Some implementations can detect changes to the session and set\nthis when that happens. The mixin default is hard coded to,True,.,,,,,permanent,\u00b6,,This reflects the,'_permanent',key in the dict.,,,,,Notice,,The,PERMANENT_SESSION_LIFETIME,config key can also be an integer\nstarting with Flask 0.8.  Either catch this down yourself or use\nthe,permanent_session_lifetime,attribute on the\napp which converts the result to an integer automatically.,,,,,Test Client,\u00b6,,,,class,flask.testing.,FlaskClient,(,*args,,,**kwargs,),\u00b6,,Works like a regular Werkzeug test client but has some knowledge about\nhow Flask works to defer the cleanup of the request context stack to the\nend of a,with,body when used in a,with,statement.  For general\ninformation about how to use this class refer to,werkzeug.test.Client,.,,,Changelog,,Changed in version 0.12:,app.test_client(),includes preset default environment, which can be\nset after instantiation of the,app.test_client(),object in,client.environ_base,.,,,Basic usage is outlined in the,Testing Flask Applications,chapter.,,,,open,(,*args,,,**kwargs,),\u00b6,,Takes the same arguments as the,EnvironBuilder,class with\nsome additions:  You can provide a,EnvironBuilder,or a WSGI\nenvironment as only argument instead of the,EnvironBuilder,arguments and two optional keyword arguments (,as_tuple,,,buffered,)\nthat change the type of the return value or the way the application is\nexecuted.,,,Changelog,,Changed in version 0.5:,If a dict is provided as file in the dict for the,data,parameter\nthe content type has to be called,content_type,now instead of,mimetype,.  This change was made for consistency with,werkzeug.FileWrapper,.,,,The,follow_redirects,parameter was added to,open(),.,,,Additional parameters:,,,,,,Parameters:,,as_tuple,\u2013 Returns a tuple in the form,(environ,,,result),,buffered,\u2013 Set this to True to buffer the application run.\nThis will automatically close the application for\nyou as well.,,follow_redirects,\u2013 Set this to True if the,Client,should\nfollow HTTP redirects.,,,,,,,,,,session_transaction,(,*args,,,**kwargs,),\u00b6,,When used in combination with a,with,statement this opens a\nsession transaction.  This can be used to modify the session that\nthe test client uses.  Once the,with,block is left the session is\nstored back.,,with,,client,.,session_transaction,(),,as,,session,:,,session,[,'value',],,=,,42,,,,Internally this is implemented by going through a temporary test\nrequest context and since session handling could depend on\nrequest variables this function accepts the same arguments as,test_request_context(),which are directly\npassed through.,,,,,,Test CLI Runner,\u00b6,,,,class,flask.testing.,FlaskCliRunner,(,app,,,**kwargs,),\u00b6,,A,CliRunner,for testing a Flask app\u2019s\nCLI commands. Typically created using,test_cli_runner(),. See,Testing CLI Commands,.,,,,invoke,(,cli=None,,,args=None,,,**kwargs,),\u00b6,,Invokes a CLI command in an isolated environment. See,CliRunner.invoke,for\nfull method documentation. See,Testing CLI Commands,for examples.,,If the,obj,argument is not given, passes an instance of,ScriptInfo,that knows how to load the Flask\napp being tested.,,,,,,Parameters:,,cli,\u2013 Command object to invoke. Default is the app\u2019s,cli,group.,,args,\u2013 List of strings to invoke the command with.,,,,,Returns:,a,Result,object.,,,,,,,,,,Application Globals,\u00b6,,To share data that is valid for one request only from one function to\nanother, a global variable is not good enough because it would break in\nthreaded environments.  Flask provides you with a special object that\nensures it is only valid for the active request and that will return\ndifferent values for each request.  In a nutshell: it does the right\nthing, like it does for,request,and,session,.,,,,flask.,g,\u00b6,,A namespace object that can store data during an,application context,. This is an instance of,Flask.app_ctx_globals_class,, which defaults to,ctx._AppCtxGlobals,.,,This is a good place to store resources during a request. During\ntesting, you can use the,Faking Resources and Context,pattern to\npre-configure such resources.,,This is a proxy. See,Notes On Proxies,for more information.,,,Changelog,,Changed in version 0.10:,Bound to the application context instead of the request context.,,,,,,class,flask.ctx.,_AppCtxGlobals,\u00b6,,A plain object. Used as a namespace for storing data during an\napplication context.,,Creating an app context automatically creates this object, which is\nmade available as the,g,proxy.,,,,'key' in g,,Check whether an attribute is present.,,,Changelog,,New in version 0.10.,,,,,,iter(g),,Return an iterator over the attribute names.,,,Changelog,,New in version 0.10.,,,,,,get,(,name,,,default=None,),\u00b6,,Get an attribute by name, or a default value. Like,dict.get(),.,,,,,,Parameters:,,name,\u2013 Name of attribute to get.,,default,\u2013 Value to return if the attribute is not present.,,,,,,,,Changelog,,New in version 0.10.,,,,,,pop,(,name,,,default=<object object>,),\u00b6,,Get and remove an attribute by name. Like,dict.pop(),.,,,,,,Parameters:,,name,\u2013 Name of attribute to pop.,,default,\u2013 Value to return if the attribute is not present,\ninstead of raise a,KeyError,.,,,,,,,,Changelog,,New in version 0.11.,,,,,,setdefault,(,name,,,default=None,),\u00b6,,Get the value of an attribute if it is present, otherwise\nset and return a default value. Like,dict.setdefault(),.,,,,,,Parameters:,name,\u2013 Name of attribute to get.,,,Param:,default: Value to set and return if the attribute is not\npresent.,,,,,,Changelog,,New in version 0.11.,,,,,,,Useful Functions and Classes,\u00b6,,,,flask.,current_app,\u00b6,,A proxy to the application handling the current request. This is\nuseful to access the application without needing to import it, or if\nit can\u2019t be imported, such as when using the application factory\npattern or in blueprints and extensions.,,This is only available when an,application context,is pushed. This happens\nautomatically during requests and CLI commands. It can be controlled\nmanually with,app_context(),.,,This is a proxy. See,Notes On Proxies,for more information.,,,,,flask.,has_request_context,(,),\u00b6,,If you have code that wants to test if a request context is there or\nnot this function can be used.  For instance, you may want to take advantage\nof request information if the request object is available, but fail\nsilently if it is unavailable.,,class,,User,(,db,.,Model,):,,def,,__init__,(,self,,,,username,,,,remote_addr,=,None,):,,self,.,username,,=,,username,,if,,remote_addr,,is,,None,,and,,has_request_context,():,,remote_addr,,=,,request,.,remote_addr,,self,.,remote_addr,,=,,remote_addr,,,,Alternatively you can also just test any of the context bound objects\n(such as,request,or,g,for truthness):,,class,,User,(,db,.,Model,):,,def,,__init__,(,self,,,,username,,,,remote_addr,=,None,):,,self,.,username,,=,,username,,if,,remote_addr,,is,,None,,and,,request,:,,remote_addr,,=,,request,.,remote_addr,,self,.,remote_addr,,=,,remote_addr,,,,,Changelog,,New in version 0.7.,,,,,,flask.,copy_current_request_context,(,f,),\u00b6,,A helper function that decorates a function to retain the current\nrequest context.  This is useful when working with greenlets.  The moment\nthe function is decorated a copy of the request context is created and\nthen pushed when the function is called.,,Example:,,import,,gevent,,from,,flask,,import,,copy_current_request_context,,@app,.,route,(,'/',),,def,,index,():,,@copy_current_request_context,,def,,do_some_work,():,,# do some work here, it can access flask.request like you,,# would otherwise in the view function.,,...,,gevent,.,spawn,(,do_some_work,),,return,,'Regular response',,,,,Changelog,,New in version 0.10.,,,,,,flask.,has_app_context,(,),\u00b6,,Works like,has_request_context(),but for the application\ncontext.  You can also just do a boolean check on the,current_app,object instead.,,,Changelog,,New in version 0.9.,,,,,,flask.,url_for,(,endpoint,,,**values,),\u00b6,,Generates a URL to the given endpoint with the method provided.,,Variable arguments that are unknown to the target endpoint are appended\nto the generated URL as query arguments.  If the value of a query argument\nis,None,, the whole pair is skipped.  In case blueprints are active\nyou can shortcut references to the same blueprint by prefixing the\nlocal endpoint with a dot (,.,).,,This will reference the index function local to the current blueprint:,,url_for,(,'.index',),,,,For more information, head over to the,Quickstart,.,,To integrate applications,,Flask,has a hook to intercept URL build\nerrors through,Flask.url_build_error_handlers,.  The,url_for,function results in a,BuildError,when the current\napp does not have a URL for the given endpoint and values.  When it does, the,current_app,calls its,url_build_error_handlers,if\nit is not,None,, which can return a string to use as the result of,url_for,(instead of,url_for,\u2019s default to raise the,BuildError,exception) or re-raise the exception.\nAn example:,,def,,external_url_handler,(,error,,,,endpoint,,,,values,):,,\"Looks up an external URL when `url_for` cannot build a URL.\",,# This is an example of hooking the build_error_handler.,,# Here, lookup_url is some utility function you've built,,# which looks up the endpoint in some external URL registry.,,url,,=,,lookup_url,(,endpoint,,,,**,values,),,if,,url,,is,,None,:,,# External lookup did not have a URL.,,# Re-raise the BuildError, in context of original traceback.,,exc_type,,,,exc_value,,,,tb,,=,,sys,.,exc_info,(),,if,,exc_value,,is,,error,:,,raise,,exc_type,,,,exc_value,,,,tb,,else,:,,raise,,error,,# url_for will use this result, instead of raising BuildError.,,return,,url,,app,.,url_build_error_handlers,.,append,(,external_url_handler,),,,,Here,,error,is the instance of,BuildError,, and,endpoint,and,values,are the arguments passed into,url_for,.  Note\nthat this is for building URLs outside the current application, and not for\nhandling 404 NotFound errors.,,,Changelog,,New in version 0.10:,The,_scheme,parameter was added.,,,,New in version 0.9:,The,_anchor,and,_method,parameters were added.,,,,New in version 0.9:,Calls,Flask.handle_build_error(),on,BuildError,.,,,,,,,Parameters:,,endpoint,\u2013 the endpoint of the URL (name of the function),,values,\u2013 the variable arguments of the URL rule,,_external,\u2013 if set to,True,, an absolute URL is generated. Server\naddress can be changed via,SERVER_NAME,configuration variable which\ndefaults to,localhost,.,,_scheme,\u2013 a string specifying the desired URL scheme. The,_external,parameter must be set to,True,or a,ValueError,is raised. The default\nbehavior uses the same scheme as the current request, or,PREFERRED_URL_SCHEME,from the,app configuration,if no\nrequest context is available. As of Werkzeug 0.10, this also can be set\nto an empty string to build protocol-relative URLs.,,_anchor,\u2013 if provided this is added as anchor to the URL.,,_method,\u2013 if provided this explicitly specifies an HTTP method.,,,,,,,,,,flask.,abort,(,status,,,*args,,,**kwargs,),\u00b6,,Raises an,HTTPException,for the given status code or WSGI\napplication:,,abort,(,404,),,# 404 Not Found,,abort,(,Response,(,'Hello World',)),,,,Can be passed a WSGI application or a status code.  If a status code is\ngiven it\u2019s looked up in the list of exceptions and will raise that\nexception, if passed a WSGI application it will wrap it in a proxy WSGI\nexception and raise that:,,abort,(,404,),,abort,(,Response,(,'Hello World',)),,,,,,,flask.,redirect,(,location,,,code=302,,,Response=None,),\u00b6,,Returns a response object (a WSGI application) that, if called,\nredirects the client to the target location.  Supported codes are 301,\n302, 303, 305, and 307.  300 is not supported because it\u2019s not a real\nredirect and 304 because it\u2019s the answer for a request with a request\nwith defined If-Modified-Since headers.,,,Changelog,,New in version 0.10:,The class used for the Response object can now be passed in.,,,,New in version 0.6:,The location can now be a unicode string that is encoded using\nthe,iri_to_uri(),function.,,,,,,,Parameters:,,location,\u2013 the location the response should redirect to.,,code,\u2013 the redirect status code. defaults to 302.,,Response,(,class,) \u2013 a Response class to use when instantiating a\nresponse. The default is,werkzeug.wrappers.Response,if\nunspecified.,,,,,,,,,,flask.,make_response,(,*args,),\u00b6,,Sometimes it is necessary to set additional headers in a view.  Because\nviews do not have to return response objects but can return a value that\nis converted into a response object by Flask itself, it becomes tricky to\nadd headers to it.  This function can be called instead of using a return\nand you will get a response object which you can use to attach headers.,,If view looked like this and you want to add a new header:,,def,,index,():,,return,,render_template,(,'index.html',,,,foo,=,42,),,,,You can now do something like this:,,def,,index,():,,response,,=,,make_response,(,render_template,(,'index.html',,,,foo,=,42,)),,response,.,headers,[,'X-Parachutes',],,=,,'parachutes are cool',,return,,response,,,,This function accepts the very same arguments you can return from a\nview function.  This for example creates a response with a 404 error\ncode:,,response,,=,,make_response,(,render_template,(,'not_found.html',),,,404,),,,,The other use case of this function is to force the return value of a\nview function into a response which is helpful with view\ndecorators:,,response,,=,,make_response,(,view_function,()),,response,.,headers,[,'X-Parachutes',],,=,,'parachutes are cool',,,,Internally this function does the following things:,,,if no arguments are passed, it creates a new response argument,,if one argument is passed,,flask.Flask.make_response(),is invoked with it.,,if more than one argument is passed, the arguments are passed\nto the,flask.Flask.make_response(),function as tuple.,,,,Changelog,,New in version 0.6.,,,,,,flask.,after_this_request,(,f,),\u00b6,,Executes a function after this request.  This is useful to modify\nresponse objects.  The function is passed the response object and has\nto return the same or a new one.,,Example:,,@app,.,route,(,'/',),,def,,index,():,,@after_this_request,,def,,add_header,(,response,):,,response,.,headers,[,'X-Foo',],,=,,'Parachute',,return,,response,,return,,'Hello World!',,,,This is more useful if a function other than the view function wants to\nmodify a response.  For instance think of a decorator that wants to add\nsome headers without converting the return value into a response object.,,,Changelog,,New in version 0.9.,,,,,,flask.,send_file,(,filename_or_fp,,,mimetype=None,,,as_attachment=False,,,attachment_filename=None,,,add_etags=True,,,cache_timeout=None,,,conditional=False,,,last_modified=None,),\u00b6,,Sends the contents of a file to the client.  This will use the\nmost efficient method available and configured.  By default it will\ntry to use the WSGI server\u2019s file_wrapper support.  Alternatively\nyou can set the application\u2019s,use_x_sendfile,attribute\nto,True,to directly emit an,X-Sendfile,header.  This however\nrequires support of the underlying webserver for,X-Sendfile,.,,By default it will try to guess the mimetype for you, but you can\nalso explicitly provide one.  For extra security you probably want\nto send certain files as attachment (HTML for instance).  The mimetype\nguessing requires a,filename,or an,attachment_filename,to be\nprovided.,,ETags will also be attached automatically if a,filename,is provided. You\ncan turn this off by setting,add_etags=False,.,,If,conditional=True,and,filename,is provided, this method will try to\nupgrade the response stream to support range requests.  This will allow\nthe request to be answered with partial content response.,,Please never pass filenames to this function from user sources;\nyou should use,send_from_directory(),instead.,,,Changelog,,Changed in version 1.0:,UTF-8 filenames, as specified in,RFC 2231,, are supported.,,,,Changed in version 0.12:,The filename is no longer automatically inferred from file objects. If\nyou want to use automatic mimetype and etag support, pass a filepath via,filename_or_fp,or,attachment_filename,.,,,,Changed in version 0.12:,The,attachment_filename,is preferred over,filename,for MIME-type\ndetection.,,,,Changed in version 0.9:,cache_timeout pulls its default from application config, when None.,,,,Changed in version 0.7:,mimetype guessing and etag support for file objects was\ndeprecated because it was unreliable.  Pass a filename if you are\nable to, otherwise attach an etag yourself.  This functionality\nwill be removed in Flask 1.0,,,,New in version 0.5:,The,add_etags,,,cache_timeout,and,conditional,parameters were\nadded.  The default behavior is now to attach etags.,,,,New in version 0.2.,,,,,,,Parameters:,,filename_or_fp,\u2013 the filename of the file to send.\nThis is relative to the,root_path,if a relative path is specified.\nAlternatively a file object might be provided in\nwhich case,X-Sendfile,might not work and fall\nback to the traditional method.  Make sure that the\nfile pointer is positioned at the start of data to\nsend before calling,send_file(),.,,mimetype,\u2013 the mimetype of the file if provided. If a file path is\ngiven, auto detection happens as fallback, otherwise an\nerror will be raised.,,as_attachment,\u2013 set to,True,if you want to send this file with\na,Content-Disposition:,,attachment,header.,,attachment_filename,\u2013 the filename for the attachment if it\ndiffers from the file\u2019s filename.,,add_etags,\u2013 set to,False,to disable attaching of etags.,,conditional,\u2013 set to,True,to enable conditional responses.,,cache_timeout,\u2013 the timeout in seconds for the headers. When,None,(default), this value is set by,get_send_file_max_age(),of,current_app,.,,last_modified,\u2013 set the,Last-Modified,header to this value,\na,datetime,or timestamp.\nIf a file was passed, this overrides its mtime.,,,,,,,,,,flask.,send_from_directory,(,directory,,,filename,,,**options,),\u00b6,,Send a file from a given directory with,send_file(),.  This\nis a secure way to quickly expose static files from an upload folder\nor something similar.,,Example usage:,,@app,.,route,(,'/uploads/<path:filename>',),,def,,download_file,(,filename,):,,return,,send_from_directory,(,app,.,config,[,'UPLOAD_FOLDER',],,,filename,,,,as_attachment,=,True,),,,,,Sending files and Performance,,It is strongly recommended to activate either,X-Sendfile,support in\nyour webserver or (if no authentication happens) to tell the webserver\nto serve files for the given path on its own without calling into the\nweb application for improved performance.,,,,Changelog,,New in version 0.5.,,,,,,,Parameters:,,directory,\u2013 the directory where all the files are stored.,,filename,\u2013 the filename relative to that directory to\ndownload.,,options,\u2013 optional keyword arguments that are directly\nforwarded to,send_file(),.,,,,,,,,,,flask.,safe_join,(,directory,,,*pathnames,),\u00b6,,Safely join,directory,and zero or more untrusted,pathnames,components.,,Example usage:,,@app,.,route,(,'/wiki/<path:filename>',),,def,,wiki_page,(,filename,):,,filename,,=,,safe_join,(,app,.,config,[,'WIKI_FOLDER',],,,filename,),,with,,open,(,filename,,,,'rb',),,as,,fd,:,,content,,=,,fd,.,read,(),,# Read and process the file content...,,,,,,,,Parameters:,,directory,\u2013 the trusted base directory.,,pathnames,\u2013 the untrusted pathnames relative to that directory.,,,,,Raises:,NotFound,if one or more passed\npaths fall out of its boundaries.,,,,,,,,,flask.,escape,(,s,),\u2192 markup,\u00b6,,Convert the characters &, <, >, \u2018, and \u201d in string s to HTML-safe\nsequences.  Use this if you need to display text that might contain\nsuch characters in HTML.  Marks return value as markup string.,,,,,class,flask.,Markup,\u00b6,,Marks a string as being safe for inclusion in HTML/XML output without\nneeding to be escaped.  This implements the,__html__,interface a couple\nof frameworks and web applications use.,Markup,is a direct\nsubclass of,unicode,and provides all the methods of,unicode,just that\nit escapes arguments passed and always returns,Markup,.,,The,escape,function returns markup objects so that double escaping can\u2019t\nhappen.,,The constructor of the,Markup,class can be used for three\ndifferent things:  When passed an unicode object it\u2019s assumed to be safe,\nwhen passed an object with an HTML representation (has an,__html__,method) that representation is used, otherwise the object passed is\nconverted into a unicode string and then assumed to be safe:,,>>>,Markup,(,\"Hello <em>World</em>!\",),,Markup(u'Hello <em>World</em>!'),,>>>,class,,Foo,(,object,):,,...,,def,,__html__,(,self,):,,...,,return,,'<a href=\"#\">foo</a>',,...,,>>>,Markup,(,Foo,()),,Markup(u'<a href=\"#\">foo</a>'),,,,If you want object passed being always treated as unsafe you can use the,escape(),classmethod to create a,Markup,object:,,>>>,Markup,.,escape,(,\"Hello <em>World</em>!\",),,Markup(u'Hello &lt;em&gt;World&lt;/em&gt;!'),,,,Operations on a markup string are markup aware which means that all\narguments are passed through the,escape(),function:,,>>>,em,,=,,Markup,(,\"<em>,%s,</em>\",),,>>>,em,,%,,\"foo & bar\",,Markup(u'<em>foo &amp; bar</em>'),,>>>,strong,,=,,Markup,(,\"<strong>,%(text)s,</strong>\",),,>>>,strong,,%,,{,'text',:,,'<blink>hacker here</blink>',},,Markup(u'<strong>&lt;blink&gt;hacker here&lt;/blink&gt;</strong>'),,>>>,Markup,(,\"<em>Hello</em> \",),,+,,\"<foo>\",,Markup(u'<em>Hello</em> &lt;foo&gt;'),,,,,,classmethod,escape,(,s,),\u00b6,,Escape the string.  Works like,escape(),with the difference\nthat for subclasses of,Markup,this function would return the\ncorrect subclass.,,,,,striptags,(,),\u00b6,,Unescape markup into an text_type string and strip all tags.  This\nalso resolves known HTML4 and XHTML entities.  Whitespace is\nnormalized to one:,,>>>,Markup,(,\"Main &raquo;  <em>About</em>\",),.,striptags,(),,u'Main \\xbb About',,,,,,,unescape,(,),\u00b6,,Unescape markup again into an text_type string.  This also resolves\nknown HTML4 and XHTML entities:,,>>>,Markup,(,\"Main &raquo; <em>About</em>\",),.,unescape,(),,u'Main \\xbb <em>About</em>',,,,,,,,Message Flashing,\u00b6,,,,flask.,flash,(,message,,,category='message',),\u00b6,,Flashes a message to the next request.  In order to remove the\nflashed message from the session and to display it to the user,\nthe template has to call,get_flashed_messages(),.,,,Changelog,,Changed in version 0.3:,category,parameter added.,,,,,,,Parameters:,,message,\u2013 the message to be flashed.,,category,\u2013 the category for the message.  The following values\nare recommended:,'message',for any kind of message,,'error',for errors,,'info',for information\nmessages and,'warning',for warnings.  However any\nkind of string can be used as category.,,,,,,,,,,flask.,get_flashed_messages,(,with_categories=False,,,category_filter=[],),\u00b6,,Pulls all flashed messages from the session and returns them.\nFurther calls in the same request to the function will return\nthe same messages.  By default just the messages are returned,\nbut when,with_categories,is set to,True,, the return value will\nbe a list of tuples in the form,(category,,,message),instead.,,Filter the flashed messages to one or more categories by providing those\ncategories in,category_filter,.  This allows rendering categories in\nseparate html blocks.  The,with_categories,and,category_filter,arguments are distinct:,,,with_categories,controls whether categories are returned with message\ntext (,True,gives a tuple, where,False,gives just the message text).,,category_filter,filters the messages down to only those matching the\nprovided categories.,,,See,Message Flashing,for examples.,,,Changelog,,Changed in version 0.9:,category_filter,parameter added.,,,,Changed in version 0.3:,with_categories,parameter added.,,,,,,,Parameters:,,with_categories,\u2013 set to,True,to also receive categories.,,category_filter,\u2013 whitelist of categories to limit return values,,,,,,,,,,JSON Support,\u00b6,,Flask uses,simplejson,for the JSON implementation.  Since simplejson\nis provided by both the standard library as well as extension, Flask will\ntry simplejson first and then fall back to the stdlib json module.  On top\nof that it will delegate access to the current application\u2019s JSON encoders\nand decoders for easier customization.,,So for starters instead of doing:,,try,:,,import,,simplejson,,as,,json,,except,,ImportError,:,,import,,json,,,,You can instead just do this:,,from,,flask,,import,,json,,,,For usage examples, read the,json,documentation in the standard\nlibrary.  The following extensions are by default applied to the stdlib\u2019s\nJSON module:,,,datetime,objects are serialized as,RFC 822,strings.,,Any object with an,__html__,method (like,Markup,)\nwill have that method called and then the return value is serialized\nas string.,,,The,htmlsafe_dumps(),function of this json module is also available\nas filter called,|tojson,in Jinja2.  Note that inside,script,tags no escaping must take place, so make sure to disable escaping\nwith,|safe,if you intend to use it inside,script,tags unless\nyou are using Flask 0.10 which implies that:,,<,script,,type,=,text/javascript,>,,doSomethingWith,(,{{,,user.username,|,tojson,|,safe,,}},);,,</,script,>,,,,,Auto-Sort JSON Keys,,The configuration variable,JSON_SORT_KEYS,(,Configuration Handling,) can be\nset to false to stop Flask from auto-sorting keys.  By default sorting\nis enabled and outside of the app context sorting is turned on.,,Notice that disabling key sorting can cause issues when using content\nbased HTTP caches and Python\u2019s hash randomization feature.,,,,,flask.json.,jsonify,(,*args,,,**kwargs,),\u00b6,,This function wraps,dumps(),to add a few enhancements that make\nlife easier.  It turns the JSON output into a,Response,object with the,application/json,mimetype.  For convenience, it\nalso converts multiple arguments into an array or multiple keyword arguments\ninto a dict.  This means that both,jsonify(1,2,3),and,jsonify([1,2,3]),serialize to,[1,2,3],.,,For clarity, the JSON serialization behavior has the following differences\nfrom,dumps(),:,,,Single argument: Passed straight through to,dumps(),.,,Multiple arguments: Converted to an array before being passed to,dumps(),.,,Multiple keyword arguments: Converted to a dict before being passed to,dumps(),.,,Both args and kwargs: Behavior undefined and will throw an exception.,,,Example usage:,,from,,flask,,import,,jsonify,,@app,.,route,(,'/_get_current_user',),,def,,get_current_user,():,,return,,jsonify,(,username,=,g,.,user,.,username,,,,email,=,g,.,user,.,email,,,,id,=,g,.,user,.,id,),,,,This will send a JSON response like this to the browser:,,{,,\"username\",:,,\"admin\",,,,\"email\",:,,\"admin@localhost\",,,,\"id\",:,,42,,},,,,,Changelog,,Changed in version 0.11:,Added support for serializing top-level arrays. This introduces a\nsecurity risk in ancient browsers. See,JSON Security,for details.,,,This function\u2019s response will be pretty printed if the,JSONIFY_PRETTYPRINT_REGULAR,config parameter is set to True or the\nFlask app is running in debug mode. Compressed (not pretty) formatting\ncurrently means no indents and no spaces after separators.,,,Changelog,,New in version 0.2.,,,,,,flask.json.,dumps,(,obj,,,**kwargs,),\u00b6,,Serialize,obj,to a JSON formatted,str,by using the application\u2019s\nconfigured encoder (,json_encoder,) if there is an\napplication on the stack.,,This function can return,unicode,strings or ascii-only bytestrings by\ndefault which coerce into unicode strings automatically.  That behavior by\ndefault is controlled by the,JSON_AS_ASCII,configuration variable\nand can be overridden by the simplejson,ensure_ascii,parameter.,,,,,flask.json.,dump,(,obj,,,fp,,,**kwargs,),\u00b6,,Like,dumps(),but writes into a file object.,,,,,flask.json.,loads,(,s,,,**kwargs,),\u00b6,,Unserialize a JSON object from a string,s,by using the application\u2019s\nconfigured decoder (,json_decoder,) if there is an\napplication on the stack.,,,,,flask.json.,load,(,fp,,,**kwargs,),\u00b6,,Like,loads(),but reads from a file object.,,,,,class,flask.json.,JSONEncoder,(,*,,,skipkeys=False,,,ensure_ascii=True,,,check_circular=True,,,allow_nan=True,,,sort_keys=False,,,indent=None,,,separators=None,,,default=None,),\u00b6,,The default Flask JSON encoder.  This one extends the default simplejson\nencoder by also supporting,datetime,objects,,UUID,as well as,Markup,objects which are serialized as RFC 822 datetime strings (same\nas the HTTP date format).  In order to support more data types override the,default(),method.,,,,default,(,o,),\u00b6,,Implement this method in a subclass such that it returns a\nserializable object for,o,, or calls the base implementation (to\nraise a,TypeError,).,,For example, to support arbitrary iterators, you could implement\ndefault like this:,,def,,default,(,self,,,,o,):,,try,:,,iterable,,=,,iter,(,o,),,except,,TypeError,:,,pass,,else,:,,return,,list,(,iterable,),,return,,JSONEncoder,.,default,(,self,,,,o,),,,,,,,,class,flask.json.,JSONDecoder,(,*,,,object_hook=None,,,parse_float=None,,,parse_int=None,,,parse_constant=None,,,strict=True,,,object_pairs_hook=None,),\u00b6,,The default JSON decoder.  This one does not change the behavior from\nthe default simplejson decoder.  Consult the,json,documentation\nfor more information.  This decoder is not only used for the load\nfunctions of this module but also,Request,.,,,,Tagged JSON,\u00b6,,A compact representation for lossless serialization of non-standard JSON types.,SecureCookieSessionInterface,uses this to serialize\nthe session data, but it may be useful in other places. It can be extended to\nsupport other types.,,,,class,flask.json.tag.,TaggedJSONSerializer,\u00b6,,Serializer that uses a tag system to compactly represent objects that\nare not JSON types. Passed as the intermediate serializer to,itsdangerous.Serializer,.,,The following extra types are supported:,,,dict,,tuple,,bytes,,Markup,,UUID,,datetime,,,,,default_tags,= [<class 'flask.json.tag.TagDict'>, <class 'flask.json.tag.PassDict'>, <class 'flask.json.tag.TagTuple'>, <class 'flask.json.tag.PassList'>, <class 'flask.json.tag.TagBytes'>, <class 'flask.json.tag.TagMarkup'>, <class 'flask.json.tag.TagUUID'>, <class 'flask.json.tag.TagDateTime'>],\u00b6,,Tag classes to bind when creating the serializer. Other tags can be\nadded later using,register(),.,,,,,dumps,(,value,),\u00b6,,Tag the value and dump it to a compact JSON string.,,,,,loads,(,value,),\u00b6,,Load data from a JSON string and deserialized any tagged objects.,,,,,register,(,tag_class,,,force=False,,,index=None,),\u00b6,,Register a new tag with this serializer.,,,,,,Parameters:,,tag_class,\u2013 tag class to register. Will be instantiated with this\nserializer instance.,,force,\u2013 overwrite an existing tag. If false (default), a,KeyError,is raised.,,index,\u2013 index to insert the new tag in the tag order. Useful when\nthe new tag is a special case of an existing tag. If,None,(default), the tag is appended to the end of the order.,,,,,Raises:,KeyError,\u2013 if the tag key is already registered and,force,is\nnot true.,,,,,,,,,tag,(,value,),\u00b6,,Convert a value to a tagged representation if necessary.,,,,,untag,(,value,),\u00b6,,Convert a tagged representation back to the original type.,,,,,,class,flask.json.tag.,JSONTag,(,serializer,),\u00b6,,Base class for defining type tags for,TaggedJSONSerializer,.,,,,check,(,value,),\u00b6,,Check if the given value should be tagged by this tag.,,,,,key,= None,\u00b6,,The tag to mark the serialized object with. If,None,, this tag is\nonly used as an intermediate step during tagging.,,,,,tag,(,value,),\u00b6,,Convert the value to a valid JSON type and add the tag structure\naround it.,,,,,to_json,(,value,),\u00b6,,Convert the Python object to an object that is a valid JSON type.\nThe tag will be added later.,,,,,to_python,(,value,),\u00b6,,Convert the JSON representation back to the correct type. The tag\nwill already be removed.,,,,Let\u2019s seen an example that adds support for,OrderedDict,.\nDicts don\u2019t have an order in Python or JSON, so to handle this we will dump\nthe items as a list of,[key,,,value],pairs. Subclass,JSONTag,and\ngive it the new key,',,od',to identify the type. The session serializer\nprocesses dicts first, so insert the new tag at the front of the order since,OrderedDict,must be processed before,dict,.,,from,,flask.json.tag,,import,,JSONTag,,class,,TagOrderedDict,(,JSONTag,):,,__slots__,,=,,(,'serializer',,),,key,,=,,' od',,def,,check,(,self,,,,value,):,,return,,isinstance,(,value,,,,OrderedDict,),,def,,to_json,(,self,,,,value,):,,return,,[[,k,,,,self,.,serializer,.,tag,(,v,)],,for,,k,,,,v,,in,,iteritems,(,value,)],,def,,to_python,(,self,,,,value,):,,return,,OrderedDict,(,value,),,app,.,session_interface,.,serializer,.,register,(,TagOrderedDict,,,,index,=,0,),,,,,,,Template Rendering,\u00b6,,,,flask.,render_template,(,template_name_or_list,,,**context,),\u00b6,,Renders a template from the template folder with the given\ncontext.,,,,,,Parameters:,,template_name_or_list,\u2013 the name of the template to be\nrendered, or an iterable with template names\nthe first one existing will be rendered,,context,\u2013 the variables that should be available in the\ncontext of the template.,,,,,,,,,,flask.,render_template_string,(,source,,,**context,),\u00b6,,Renders a template from the given template source string\nwith the given context. Template variables will be autoescaped.,,,,,,Parameters:,,source,\u2013 the source code of the template to be\nrendered,,context,\u2013 the variables that should be available in the\ncontext of the template.,,,,,,,,,,flask.,get_template_attribute,(,template_name,,,attribute,),\u00b6,,Loads a macro (or variable) a template exports.  This can be used to\ninvoke a macro from within Python code.  If you for example have a\ntemplate named,_cider.html,with the following contents:,,{%,,macro,,hello,(,name,),,%},Hello,{{,,name,,}},!,{%,,endmacro,,%},,,,You can access this from Python code like this:,,hello,,=,,get_template_attribute,(,'_cider.html',,,,'hello',),,return,,hello,(,'World',),,,,,Changelog,,New in version 0.2.,,,,,,,Parameters:,,template_name,\u2013 the name of the template,,attribute,\u2013 the name of the variable of macro to access,,,,,,,,,,Configuration,\u00b6,,,,class,flask.,Config,(,root_path,,,defaults=None,),\u00b6,,Works exactly like a dict but provides ways to fill it from files\nor special dictionaries.  There are two common patterns to populate the\nconfig.,,Either you can fill the config from a config file:,,app,.,config,.,from_pyfile,(,'yourconfig.cfg',),,,,Or alternatively you can define the configuration options in the\nmodule that calls,from_object(),or provide an import path to\na module that should be loaded.  It is also possible to tell it to\nuse the same module and with that provide the configuration values\njust before the call:,,DEBUG,,=,,True,,SECRET_KEY,,=,,'development key',,app,.,config,.,from_object,(,__name__,),,,,In both cases (loading from any Python file or loading from modules),\nonly uppercase keys are added to the config.  This makes it possible to use\nlowercase values in the config file for temporary values that are not added\nto the config or to define the config keys in the same file that implements\nthe application.,,Probably the most interesting way to load configurations is from an\nenvironment variable pointing to a file:,,app,.,config,.,from_envvar,(,'YOURAPPLICATION_SETTINGS',),,,,In this case before launching the application you have to set this\nenvironment variable to the file you want to use.  On Linux and OS X\nuse the export statement:,,export,,YOURAPPLICATION_SETTINGS,=,'/path/to/config/file',,,,On windows use,set,instead.,,,,,,Parameters:,,root_path,\u2013 path to which files are read relative from.  When the\nconfig object is created by the application, this is\nthe application\u2019s,root_path,.,,defaults,\u2013 an optional dictionary of default values,,,,,,,,,from_envvar,(,variable_name,,,silent=False,),\u00b6,,Loads a configuration from an environment variable pointing to\na configuration file.  This is basically just a shortcut with nicer\nerror messages for this line of code:,,app,.,config,.,from_pyfile,(,os,.,environ,[,'YOURAPPLICATION_SETTINGS',]),,,,,,,,Parameters:,,variable_name,\u2013 name of the environment variable,,silent,\u2013 set to,True,if you want silent failure for missing\nfiles.,,,,,Returns:,bool.,True,if able to load config,,False,otherwise.,,,,,,,,,from_json,(,filename,,,silent=False,),\u00b6,,Updates the values in the config from a JSON file. This function\nbehaves as if the JSON object was a dictionary and passed to the,from_mapping(),function.,,,,,,Parameters:,,filename,\u2013 the filename of the JSON file.  This can either be an\nabsolute filename or a filename relative to the\nroot path.,,silent,\u2013 set to,True,if you want silent failure for missing\nfiles.,,,,,,,,Changelog,,New in version 0.11.,,,,,,from_mapping,(,*mapping,,,**kwargs,),\u00b6,,Updates the config like,update(),ignoring items with non-upper\nkeys.,,,Changelog,,New in version 0.11.,,,,,,from_object,(,obj,),\u00b6,,Updates the values from the given object.  An object can be of one\nof the following two types:,,,a string: in this case the object with that name will be imported,,an actual object reference: that object is used directly,,,Objects are usually either modules or classes.,from_object(),loads only the uppercase attributes of the module/class. A,dict,object will not work with,from_object(),because the keys of a,dict,are not attributes of the,dict,class.,,Example of module-based configuration:,,app,.,config,.,from_object,(,'yourapplication.default_config',),,from,,yourapplication,,import,,default_config,,app,.,config,.,from_object,(,default_config,),,,,You should not use this function to load the actual configuration but\nrather configuration defaults.  The actual config should be loaded\nwith,from_pyfile(),and ideally from a location not within the\npackage because the package might be installed system wide.,,See,Development / Production,for an example of class-based configuration\nusing,from_object(),.,,,,,,Parameters:,obj,\u2013 an import name or object,,,,,,,,from_pyfile,(,filename,,,silent=False,),\u00b6,,Updates the values in the config from a Python file.  This function\nbehaves as if the file was imported as module with the,from_object(),function.,,,,,,Parameters:,,filename,\u2013 the filename of the config.  This can either be an\nabsolute filename or a filename relative to the\nroot path.,,silent,\u2013 set to,True,if you want silent failure for missing\nfiles.,,,,,,,,Changelog,,New in version 0.7:,silent,parameter.,,,,,,get_namespace,(,namespace,,,lowercase=True,,,trim_namespace=True,),\u00b6,,Returns a dictionary containing a subset of configuration options\nthat match the specified namespace/prefix. Example usage:,,app,.,config,[,'IMAGE_STORE_TYPE',],,=,,'fs',,app,.,config,[,'IMAGE_STORE_PATH',],,=,,'/var/app/images',,app,.,config,[,'IMAGE_STORE_BASE_URL',],,=,,'http://img.website.com',,image_store_config,,=,,app,.,config,.,get_namespace,(,'IMAGE_STORE_',),,,,The resulting dictionary,image_store_config,would look like:,,{,,'type',:,,'fs',,,,'path',:,,'/var/app/images',,,,'base_url',:,,'http://img.website.com',,},,,,This is often useful when configuration options map directly to\nkeyword arguments in functions or class constructors.,,,,,,Parameters:,,namespace,\u2013 a configuration namespace,,lowercase,\u2013 a flag indicating if the keys of the resulting\ndictionary should be lowercase,,trim_namespace,\u2013 a flag indicating if the keys of the resulting\ndictionary should not include the namespace,,,,,,,,Changelog,,New in version 0.11.,,,,,,,Stream Helpers,\u00b6,,,,flask.,stream_with_context,(,generator_or_function,),\u00b6,,Request contexts disappear when the response is started on the server.\nThis is done for efficiency reasons and to make it less likely to encounter\nmemory leaks with badly written WSGI middlewares.  The downside is that if\nyou are using streamed responses, the generator cannot access request bound\ninformation any more.,,This function however can help you keep the context around for longer:,,from,,flask,,import,,stream_with_context,,,,request,,,,Response,,@app,.,route,(,'/stream',),,def,,streamed_response,():,,@stream_with_context,,def,,generate,():,,yield,,'Hello ',,yield,,request,.,args,[,'name',],,yield,,'!',,return,,Response,(,generate,()),,,,Alternatively it can also be used around a specific generator:,,from,,flask,,import,,stream_with_context,,,,request,,,,Response,,@app,.,route,(,'/stream',),,def,,streamed_response,():,,def,,generate,():,,yield,,'Hello ',,yield,,request,.,args,[,'name',],,yield,,'!',,return,,Response,(,stream_with_context,(,generate,())),,,,,Changelog,,New in version 0.9.,,,,,,Useful Internals,\u00b6,,,,class,flask.ctx.,RequestContext,(,app,,,environ,,,request=None,),\u00b6,,The request context contains all request relevant information.  It is\ncreated at the beginning of the request and pushed to the,_request_ctx_stack,and removed at the end of it.  It will create the\nURL adapter and request object for the WSGI environment provided.,,Do not attempt to use this class directly, instead use,test_request_context(),and,request_context(),to create this object.,,When the request context is popped, it will evaluate all the\nfunctions registered on the application for teardown execution\n(,teardown_request(),).,,The request context is automatically popped at the end of the request\nfor you.  In debug mode the request context is kept around if\nexceptions happen so that interactive debuggers have a chance to\nintrospect the data.  With 0.4 this can also be forced for requests\nthat did not fail and outside of,DEBUG,mode.  By setting,'flask._preserve_context',to,True,on the WSGI environment the\ncontext will not pop itself at the end of the request.  This is used by\nthe,test_client(),for example to implement the\ndeferred cleanup functionality.,,You might find this helpful for unittests where you need the\ninformation from the context local around for a little longer.  Make\nsure to properly,pop(),the stack yourself in\nthat situation, otherwise your unittests will leak memory.,,,,copy,(,),\u00b6,,Creates a copy of this request context with the same request object.\nThis can be used to move a request context to a different greenlet.\nBecause the actual request object is the same this cannot be used to\nmove a request context to a different thread unless access to the\nrequest object is locked.,,,Changelog,,New in version 0.10.,,,,,,match_request,(,),\u00b6,,Can be overridden by a subclass to hook into the matching\nof the request.,,,,,pop,(,exc=<object object>,),\u00b6,,Pops the request context and unbinds it by doing that.  This will\nalso trigger the execution of functions registered by the,teardown_request(),decorator.,,,Changelog,,Changed in version 0.9:,Added the,exc,argument.,,,,,,push,(,),\u00b6,,Binds the request context to the current context.,,,,,,flask.,_request_ctx_stack,\u00b6,,The internal,LocalStack,that holds,RequestContext,instances. Typically, the,request,and,session,proxies should be accessed\ninstead of the stack. It may be useful to access the stack in\nextension code.,,The following attributes are always present on each layer of the\nstack:,,,app,,the active Flask application.,,url_adapter,,the URL adapter that was used to match the request.,,request,,the current request object.,,session,,the active session object.,,g,,an object with all the attributes of the,flask.g,object.,,flashes,,an internal cache for the flashed messages.,,,Example usage:,,from,,flask,,import,,_request_ctx_stack,,def,,get_session,():,,ctx,,=,,_request_ctx_stack,.,top,,if,,ctx,,is,,not,,None,:,,return,,ctx,.,session,,,,,,,class,flask.ctx.,AppContext,(,app,),\u00b6,,The application context binds an application object implicitly\nto the current thread or greenlet, similar to how the,RequestContext,binds request information.  The application\ncontext is also implicitly created if a request context is created\nbut the application is not on top of the individual application\ncontext.,,,,pop,(,exc=<object object>,),\u00b6,,Pops the app context.,,,,,push,(,),\u00b6,,Binds the app context to the current context.,,,,,,flask.,_app_ctx_stack,\u00b6,,The internal,LocalStack,that holds,AppContext,instances. Typically, the,current_app,and,g,proxies should be accessed instead\nof the stack. Extensions can access the contexts on the stack as a\nnamespace to store data.,,,Changelog,,New in version 0.9.,,,,,,class,flask.blueprints.,BlueprintSetupState,(,blueprint,,,app,,,options,,,first_registration,),\u00b6,,Temporary holder object for registering a blueprint with the\napplication.  An instance of this class is created by the,make_setup_state(),method and later passed\nto all register callback functions.,,,,add_url_rule,(,rule,,,endpoint=None,,,view_func=None,,,**options,),\u00b6,,A helper method to register a rule (and optionally a view function)\nto the application.  The endpoint is automatically prefixed with the\nblueprint\u2019s name.,,,,,app,= None,\u00b6,,a reference to the current application,,,,,blueprint,= None,\u00b6,,a reference to the blueprint that created this setup state.,,,,,first_registration,= None,\u00b6,,as blueprints can be registered multiple times with the\napplication and not everything wants to be registered\nmultiple times on it, this attribute can be used to figure\nout if the blueprint was registered in the past already.,,,,,options,= None,\u00b6,,a dictionary with all options that were passed to the,register_blueprint(),method.,,,,,subdomain,= None,\u00b6,,The subdomain that the blueprint should be active for,,None,otherwise.,,,,,url_defaults,= None,\u00b6,,A dictionary with URL defaults that is added to each and every\nURL that was defined with the blueprint.,,,,,url_prefix,= None,\u00b6,,The prefix that should be used for all URLs defined on the\nblueprint.,,,,,,Signals,\u00b6,,,Changelog,,New in version 0.6.,,,,,signals.,signals_available,\u00b6,,True,if the signaling system is available.  This is the case\nwhen,blinker,is installed.,,,The following signals exist in Flask:,,,,flask.,template_rendered,\u00b6,,This signal is sent when a template was successfully rendered.  The\nsignal is invoked with the instance of the template as,template,and the context as dictionary (named,context,).,,Example subscriber:,,def,,log_template_renders,(,sender,,,,template,,,,context,,,,**,extra,):,,sender,.,logger,.,debug,(,'Rendering template \",%s,\" with context,%s,',,,,template,.,name,,or,,'string template',,,,context,),,from,,flask,,import,,template_rendered,,template_rendered,.,connect,(,log_template_renders,,,,app,),,,,,,,flask.,before_render_template,,This signal is sent before template rendering process. The\nsignal is invoked with the instance of the template as,template,and the context as dictionary (named,context,).,,Example subscriber:,,def,,log_template_renders,(,sender,,,,template,,,,context,,,,**,extra,):,,sender,.,logger,.,debug,(,'Rendering template \",%s,\" with context,%s,',,,,template,.,name,,or,,'string template',,,,context,),,from,,flask,,import,,before_render_template,,before_render_template,.,connect,(,log_template_renders,,,,app,),,,,,,,flask.,request_started,\u00b6,,This signal is sent when the request context is set up, before\nany request processing happens.  Because the request context is already\nbound, the subscriber can access the request with the standard global\nproxies such as,request,.,,Example subscriber:,,def,,log_request,(,sender,,,,**,extra,):,,sender,.,logger,.,debug,(,'Request context is set up',),,from,,flask,,import,,request_started,,request_started,.,connect,(,log_request,,,,app,),,,,,,,flask.,request_finished,\u00b6,,This signal is sent right before the response is sent to the client.\nIt is passed the response to be sent named,response,.,,Example subscriber:,,def,,log_response,(,sender,,,,response,,,,**,extra,):,,sender,.,logger,.,debug,(,'Request context is about to close down.  ',,'Response:,%s,',,,,response,),,from,,flask,,import,,request_finished,,request_finished,.,connect,(,log_response,,,,app,),,,,,,,flask.,got_request_exception,\u00b6,,This signal is sent when an exception happens during request processing.\nIt is sent,before,the standard exception handling kicks in and even\nin debug mode, where no exception handling happens.  The exception\nitself is passed to the subscriber as,exception,.,,Example subscriber:,,def,,log_exception,(,sender,,,,exception,,,,**,extra,):,,sender,.,logger,.,debug,(,'Got exception during processing:,%s,',,,,exception,),,from,,flask,,import,,got_request_exception,,got_request_exception,.,connect,(,log_exception,,,,app,),,,,,,,flask.,request_tearing_down,\u00b6,,This signal is sent when the request is tearing down.  This is always\ncalled, even if an exception is caused.  Currently functions listening\nto this signal are called after the regular teardown handlers, but this\nis not something you can rely on.,,Example subscriber:,,def,,close_db_connection,(,sender,,,,**,extra,):,,session,.,close,(),,from,,flask,,import,,request_tearing_down,,request_tearing_down,.,connect,(,close_db_connection,,,,app,),,,,As of Flask 0.9, this will also be passed an,exc,keyword argument\nthat has a reference to the exception that caused the teardown if\nthere was one.,,,,,flask.,appcontext_tearing_down,\u00b6,,This signal is sent when the app context is tearing down.  This is always\ncalled, even if an exception is caused.  Currently functions listening\nto this signal are called after the regular teardown handlers, but this\nis not something you can rely on.,,Example subscriber:,,def,,close_db_connection,(,sender,,,,**,extra,):,,session,.,close,(),,from,,flask,,import,,appcontext_tearing_down,,appcontext_tearing_down,.,connect,(,close_db_connection,,,,app,),,,,This will also be passed an,exc,keyword argument that has a reference\nto the exception that caused the teardown if there was one.,,,,,flask.,appcontext_pushed,\u00b6,,This signal is sent when an application context is pushed.  The sender\nis the application.  This is usually useful for unittests in order to\ntemporarily hook in information.  For instance it can be used to\nset a resource early onto the,g,object.,,Example usage:,,from,,contextlib,,import,,contextmanager,,from,,flask,,import,,appcontext_pushed,,@contextmanager,,def,,user_set,(,app,,,,user,):,,def,,handler,(,sender,,,,**,kwargs,):,,g,.,user,,=,,user,,with,,appcontext_pushed,.,connected_to,(,handler,,,,app,):,,yield,,,,And in the testcode:,,def,,test_user_me,(,self,):,,with,,user_set,(,app,,,,'john',):,,c,,=,,app,.,test_client,(),,resp,,=,,c,.,get,(,'/users/me',),,assert,,resp,.,data,,==,,'username=john',,,,,Changelog,,New in version 0.10.,,,,,,flask.,appcontext_popped,\u00b6,,This signal is sent when an application context is popped.  The sender\nis the application.  This usually falls in line with the,appcontext_tearing_down,signal.,,,Changelog,,New in version 0.10.,,,,,,flask.,message_flashed,\u00b6,,This signal is sent when the application is flashing a message.  The\nmessages is sent as,message,keyword argument and the category as,category,.,,Example subscriber:,,recorded,,=,,[],,def,,record,(,sender,,,,message,,,,category,,,,**,extra,):,,recorded,.,append,((,message,,,,category,)),,from,,flask,,import,,message_flashed,,message_flashed,.,connect,(,record,,,,app,),,,,,Changelog,,New in version 0.10.,,,,,,class,signals.,Namespace,\u00b6,,An alias for,blinker.base.Namespace,if blinker is available,\notherwise a dummy class that creates fake signals.  This class is\navailable for Flask extensions that want to provide the same fallback\nsystem as Flask itself.,,,,signal,(,name,,,doc=None,),\u00b6,,Creates a new signal for this namespace if blinker is available,\notherwise returns a fake signal that has a send method that will\ndo nothing but will fail with a,RuntimeError,for all other\noperations, including connecting.,,,,,,Class-Based Views,\u00b6,,,Changelog,,New in version 0.7.,,,,,class,flask.views.,View,\u00b6,,Alternative way to use view functions.  A subclass has to implement,dispatch_request(),which is called with the view arguments from\nthe URL routing system.  If,methods,is provided the methods\ndo not have to be passed to the,add_url_rule(),method explicitly:,,class,,MyView,(,View,):,,methods,,=,,[,'GET',],,def,,dispatch_request,(,self,,,,name,):,,return,,'Hello,%s,!',,%,,name,,app,.,add_url_rule,(,'/hello/<name>',,,,view_func,=,MyView,.,as_view,(,'myview',)),,,,When you want to decorate a pluggable view you will have to either do that\nwhen the view function is created (by wrapping the return value of,as_view(),) or you can use the,decorators,attribute:,,class,,SecretView,(,View,):,,methods,,=,,[,'GET',],,decorators,,=,,[,superuser_required,],,def,,dispatch_request,(,self,):,,...,,,,The decorators stored in the decorators list are applied one after another\nwhen the view function is created.  Note that you can,not,use the class\nbased decorators since those would decorate the view class and not the\ngenerated view function!,,,,classmethod,as_view,(,name,,,*class_args,,,**class_kwargs,),\u00b6,,Converts the class into an actual view function that can be used\nwith the routing system.  Internally this generates a function on the\nfly which will instantiate the,View,on each request and call\nthe,dispatch_request(),method on it.,,The arguments passed to,as_view(),are forwarded to the\nconstructor of the class.,,,,,decorators,= (),\u00b6,,The canonical way to decorate class-based views is to decorate the\nreturn value of as_view().  However since this moves parts of the\nlogic from the class declaration to the place where it\u2019s hooked\ninto the routing system.,,You can place one or more decorators in this list and whenever the\nview function is created the result is automatically decorated.,,,Changelog,,New in version 0.8.,,,,,,dispatch_request,(,),\u00b6,,Subclasses have to override this method to implement the\nactual view function code.  This method is called with all\nthe arguments from the URL rule.,,,,,methods,= None,\u00b6,,A list of methods this view can handle.,,,,,provide_automatic_options,= None,\u00b6,,Setting this disables or force-enables the automatic options handling.,,,,,,class,flask.views.,MethodView,\u00b6,,A class-based view that dispatches request methods to the corresponding\nclass methods. For example, if you implement a,get,method, it will be\nused to handle,GET,requests.,,class,,CounterAPI,(,MethodView,):,,def,,get,(,self,):,,return,,session,.,get,(,'counter',,,,0,),,def,,post,(,self,):,,session,[,'counter',],,=,,session,.,get,(,'counter',,,,0,),,+,,1,,return,,'OK',,app,.,add_url_rule,(,'/counter',,,,view_func,=,CounterAPI,.,as_view,(,'counter',)),,,,,,dispatch_request,(,*args,,,**kwargs,),\u00b6,,Subclasses have to override this method to implement the\nactual view function code.  This method is called with all\nthe arguments from the URL rule.,,,,,,URL Route Registrations,\u00b6,,Generally there are three ways to define rules for the routing system:,,,You can use the,flask.Flask.route(),decorator.,,You can use the,flask.Flask.add_url_rule(),function.,,You can directly access the underlying Werkzeug routing system\nwhich is exposed as,flask.Flask.url_map,.,,,Variable parts in the route can be specified with angular brackets\n(,/user/<username>,).  By default a variable part in the URL accepts any\nstring without a slash however a different converter can be specified as\nwell by using,<converter:name>,.,,Variable parts are passed to the view function as keyword arguments.,,The following converters are available:,,,,,,,,string,,accepts any text without a slash (the default),,,int,,accepts integers,,,float,,like,int,but for floating point values,,,path,,like the default but also accepts slashes,,,any,,matches one of the items provided,,,uuid,,accepts UUID strings,,,,,Custom converters can be defined using,flask.Flask.url_map,.,,Here are some examples:,,@app,.,route,(,'/',),,def,,index,():,,pass,,@app,.,route,(,'/<username>',),,def,,show_user,(,username,):,,pass,,@app,.,route,(,'/post/<int:post_id>',),,def,,show_post,(,post_id,):,,pass,,,,An important detail to keep in mind is how Flask deals with trailing\nslashes.  The idea is to keep each URL unique so the following rules\napply:,,,If a rule ends with a slash and is requested without a slash by the\nuser, the user is automatically redirected to the same page with a\ntrailing slash attached.,,If a rule does not end with a trailing slash and the user requests the\npage with a trailing slash, a 404 not found is raised.,,,This is consistent with how web servers deal with static files.  This\nalso makes it possible to use relative link targets safely.,,You can also define multiple rules for the same function.  They have to be\nunique however.  Defaults can also be specified.  Here for example is a\ndefinition for a URL that accepts an optional page:,,@app,.,route,(,'/users/',,,,defaults,=,{,'page',:,,1,}),,@app,.,route,(,'/users/page/<int:page>',),,def,,show_users,(,page,):,,pass,,,,This specifies that,/users/,will be the URL for page one and,/users/page/N,will be the URL for page,N,.,,If a URL contains a default value, it will be redirected to its simpler\nform with a 301 redirect. In the above example,,/users/page/1,will\nbe redirected to,/users/,. If your route handles,GET,and,POST,requests, make sure the default route only handles,GET,, as redirects\ncan\u2019t preserve form data.,,@app,.,route,(,'/region/',,,,defaults,=,{,'id',:,,1,}),,@app,.,route,(,'/region/<id>',,,,methods,=,[,'GET',,,,'POST',]),,def,,region,(,id,):,,pass,,,,Here are the parameters that,route(),and,add_url_rule(),accept.  The only difference is that\nwith the route parameter the view function is defined with the decorator\ninstead of the,view_func,parameter.,,,,,,,,rule,,the URL rule as string,,,endpoint,,the endpoint for the registered URL rule.  Flask itself\nassumes that the name of the view function is the name\nof the endpoint if not explicitly stated.,,,view_func,,the function to call when serving a request to the\nprovided endpoint.  If this is not provided one can\nspecify the function later by storing it in the,view_functions,dictionary with the\nendpoint as key.,,,defaults,,A dictionary with defaults for this rule.  See the\nexample above for how defaults work.,,,subdomain,,specifies the rule for the subdomain in case subdomain\nmatching is in use.  If not specified the default\nsubdomain is assumed.,,,**options,,the options to be forwarded to the underlying,Rule,object.  A change to\nWerkzeug is handling of method options.  methods is a list\nof methods this rule should be limited to (,GET,,,POST,etc.).  By default a rule just listens for,GET,(and\nimplicitly,HEAD,).  Starting with Flask 0.6,,OPTIONS,is\nimplicitly added and handled by the standard request\nhandling.  They have to be specified as keyword arguments.,,,,,,,View Function Options,\u00b6,,For internal usage the view functions can have some attributes attached to\ncustomize behavior the view function would normally not have control over.\nThe following attributes can be provided optionally to either override\nsome defaults to,add_url_rule(),or general behavior:,,,__name__,: The name of a function is by default used as endpoint.  If\nendpoint is provided explicitly this value is used.  Additionally this\nwill be prefixed with the name of the blueprint by default which\ncannot be customized from the function itself.,,methods,: If methods are not provided when the URL rule is added,\nFlask will look on the view function object itself if a,methods,attribute exists.  If it does, it will pull the information for the\nmethods from there.,,provide_automatic_options,: if this attribute is set Flask will\neither force enable or disable the automatic implementation of the\nHTTP,OPTIONS,response.  This can be useful when working with\ndecorators that want to customize the,OPTIONS,response on a per-view\nbasis.,,required_methods,: if this attribute is set, Flask will always add\nthese methods when registering a URL rule even if the methods were\nexplicitly overridden in the,route(),call.,,,Full example:,,def,,index,():,,if,,request,.,method,,==,,'OPTIONS',:,,# custom options handling here,,...,,return,,'Hello World!',,index,.,provide_automatic_options,,=,,False,,index,.,methods,,=,,[,'GET',,,,'OPTIONS',],,app,.,add_url_rule,(,'/',,,,index,),,,,,Changelog,,New in version 0.8:,The,provide_automatic_options,functionality was added.,,,,,Command Line Interface,\u00b6,,,,class,flask.cli.,FlaskGroup,(,add_default_commands=True,,,create_app=None,,,add_version_option=True,,,load_dotenv=True,,,**extra,),\u00b6,,Special subclass of the,AppGroup,group that supports\nloading more commands from the configured Flask app.  Normally a\ndeveloper does not have to interface with this class but there are\nsome very advanced use cases for which it makes sense to create an\ninstance of this.,,For information as of why this is useful see,Custom Scripts,.,,,,,,Parameters:,,add_default_commands,\u2013 if this is True then the default run and\nshell commands wil be added.,,add_version_option,\u2013 adds the,--version,option.,,create_app,\u2013 an optional callback that is passed the script info and\nreturns the loaded app.,,load_dotenv,\u2013 Load the nearest,.env,and,.flaskenv,files to set environment variables. Will also change the working\ndirectory to the directory containing the first file found.,,,,,,,,Changelog,,Changed in version 1.0:,If installed, python-dotenv will be used to load environment variables\nfrom,.env,and,.flaskenv,files.,,,,,get_command,(,ctx,,,name,),\u00b6,,Given a context and a command name, this returns a,Command,object if it exists or returns,None,.,,,,,list_commands,(,ctx,),\u00b6,,Returns a list of subcommand names in the order they should\nappear.,,,,,main,(,*args,,,**kwargs,),\u00b6,,This is the way to invoke a script with all the bells and\nwhistles as a command line application.  This will always terminate\nthe application after a call.  If this is not wanted,,SystemExit,needs to be caught.,,This method is also available by directly calling the instance of\na,Command,.,,,New in version 3.0:,Added the,standalone_mode,flag to control the standalone mode.,,,,Changelog,,,,,Parameters:,,args,\u2013 the arguments that should be used for parsing.  If not\nprovided,,sys.argv[1:],is used.,,prog_name,\u2013 the program name that should be used.  By default\nthe program name is constructed by taking the file\nname from,sys.argv[0],.,,complete_var,\u2013 the environment variable that controls the\nbash completion support.  The default is,\"_<prog_name>_COMPLETE\",with prog name in\nuppercase.,,standalone_mode,\u2013 the default behavior is to invoke the script\nin standalone mode.  Click will then\nhandle exceptions and convert them into\nerror messages and the function will never\nreturn but shut down the interpreter.  If\nthis is set to,False,they will be\npropagated to the caller and the return\nvalue of this function is the return value\nof,invoke(),.,,extra,\u2013 extra keyword arguments are forwarded to the context\nconstructor.  See,Context,for more information.,,,,,,,,,,,class,flask.cli.,AppGroup,(,name=None,,,commands=None,,,**attrs,),\u00b6,,This works similar to a regular click,Group,but it\nchanges the behavior of the,command(),decorator so that it\nautomatically wraps the functions in,with_appcontext(),.,,Not to be confused with,FlaskGroup,.,,,,command,(,*args,,,**kwargs,),\u00b6,,This works exactly like the method of the same name on a regular,click.Group,but it wraps callbacks in,with_appcontext(),unless it\u2019s disabled by passing,with_appcontext=False,.,,,,,group,(,*args,,,**kwargs,),\u00b6,,This works exactly like the method of the same name on a regular,click.Group,but it defaults the group class to,AppGroup,.,,,,,,class,flask.cli.,ScriptInfo,(,app_import_path=None,,,create_app=None,),\u00b6,,Help object to deal with Flask applications.  This is usually not\nnecessary to interface with as it\u2019s used internally in the dispatching\nto click.  In future versions of Flask this object will most likely play\na bigger role.  Typically it\u2019s created automatically by the,FlaskGroup,but you can also manually create it and pass it\nonwards as click object.,,,,app_import_path,= None,\u00b6,,Optionally the import path for the Flask application.,,,,,create_app,= None,\u00b6,,Optionally a function that is passed the script info to create\nthe instance of the application.,,,,,data,= None,\u00b6,,A dictionary with arbitrary data that can be associated with\nthis script info.,,,,,load_app,(,),\u00b6,,Loads the Flask app (if not yet loaded) and returns it.  Calling\nthis multiple times will just result in the already loaded app to\nbe returned.,,,,,,flask.cli.,load_dotenv,(,path=None,),\u00b6,,Load \u201cdotenv\u201d files in order of precedence to set environment variables.,,If an env var is already set it is not overwritten, so earlier files in the\nlist are preferred over later files.,,Changes the current working directory to the location of the first file\nfound, with the assumption that it is in the top level project directory\nand will be where the Python path should import local packages from.,,This is a no-op if,python-dotenv,is not installed.,,,,,,Parameters:,path,\u2013 Load the file at this location instead of searching.,,,Returns:,True,if a file was loaded.,,,,,,Changelog,,New in version 1.0.,,,,,,flask.cli.,with_appcontext,(,f,),\u00b6,,Wraps a callback so that it\u2019s guaranteed to be executed with the\nscript\u2019s application context.  If callbacks are registered directly\nto the,app.cli,object then they are wrapped with this function\nby default unless it\u2019s disabled.,,,,,flask.cli.,pass_script_info,(,f,),\u00b6,,Marks a function so that an instance of,ScriptInfo,is passed\nas first argument to the click callback.,,,,,flask.cli.,run_command,= <click.core.Command object>,\u00b6,,Run a local development server.,,This server is for development purposes only. It does not provide\nthe stability, security, or performance of production WSGI servers.,,The reloader and debugger are enabled by default if\nFLASK_ENV=development or FLASK_DEBUG=1.,,,,,flask.cli.,shell_command,= <click.core.Command object>,\u00b6,,Runs an interactive Python shell in the context of a given\nFlask application.  The application will populate the default\nnamespace of this shell according to it\u2019s configuration.,,This is useful for executing small snippets of management code\nwithout having to manually configure the application.,,,,,,,,,,,,,,Contents,,,API,,Application Object,,Blueprint Objects,,Incoming Request Data,,Response Objects,,Sessions,,Session Interface,,Test Client,,Test CLI Runner,,Application Globals,,Useful Functions and Classes,,Message Flashing,,JSON Support,,Tagged JSON,,,,Template Rendering,,Configuration,,Stream Helpers,,Useful Internals,,Signals,,Class-Based Views,,URL Route Registrations,,View Function Options,,Command Line Interface,,,,,Navigation,,,Overview,,,Previous:,Becoming Big,,Next:,Design Decisions in Flask,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Testing Flask Applications", "url": "http://flask.pocoo.org/docs/dev/testing/", "content": ",,,,,Testing Flask Applications \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,Testing Flask Applications,\u00b6,,,Something that is untested is broken.,,The origin of this quote is unknown and while it is not entirely correct, it\nis also not far from the truth.  Untested applications make it hard to\nimprove existing code and developers of untested applications tend to\nbecome pretty paranoid.  If an application has automated tests, you can\nsafely make changes and instantly know if anything breaks.,,Flask provides a way to test your application by exposing the Werkzeug\ntest,Client,and handling the context locals for you.\nYou can then use that with your favourite testing solution.,,In this documentation we will use the,pytest,package as the base\nframework for our tests. You can install it with,pip,, like so:,,pip,,install,,pytest,,,,,The Application,\u00b6,,First, we need an application to test; we will use the application from\nthe,Tutorial,.  If you don\u2019t have that application yet, get the\nsource code from,the examples,.,,,,The Testing Skeleton,\u00b6,,We begin by adding a tests directory under the application root.  Then\ncreate a Python file to store our tests (,test_flaskr.py,). When we\nformat the filename like,test_*.py,, it will be auto-discoverable by\npytest.,,Next, we create a,pytest fixture,called,client(),that configures\nthe application for testing and initializes a new database.:,,import,,os,,import,,tempfile,,import,,pytest,,from,,flaskr,,import,,flaskr,,@pytest,.,fixture,,def,,client,():,,db_fd,,,,flaskr,.,app,.,config,[,'DATABASE',],,=,,tempfile,.,mkstemp,(),,flaskr,.,app,.,config,[,'TESTING',],,=,,True,,client,,=,,flaskr,.,app,.,test_client,(),,with,,flaskr,.,app,.,app_context,():,,flaskr,.,init_db,(),,yield,,client,,os,.,close,(,db_fd,),,os,.,unlink,(,flaskr,.,app,.,config,[,'DATABASE',]),,,,This client fixture will be called by each individual test.  It gives us a\nsimple interface to the application, where we can trigger test requests to the\napplication.  The client will also keep track of cookies for us.,,During setup, the,TESTING,config flag is activated.  What\nthis does is disable error catching during request handling, so that\nyou get better error reports when performing test requests against the\napplication.,,Because SQLite3 is filesystem-based, we can easily use the,tempfile,module\nto create a temporary database and initialize it.  The,mkstemp(),function does two things for us: it returns a\nlow-level file handle and a random file name, the latter we use as\ndatabase name.  We just have to keep the,db_fd,around so that we can use\nthe,os.close(),function to close the file.,,To delete the database after the test, the fixture closes the file and removes\nit from the filesystem.,,If we now run the test suite, we should see the following output:,,$ pytest\n\n================ test session starts ================\nrootdir: ./flask/examples/flaskr, inifile: setup.cfg\ncollected 0 items\n\n=========== no tests ran in 0.07 seconds ============,,,Even though it did not run any actual tests, we already know that our,flaskr,application is syntactically valid, otherwise the import would have died\nwith an exception.,,,,The First Test,\u00b6,,Now it\u2019s time to start testing the functionality of the application.\nLet\u2019s check that the application shows \u201cNo entries here so far\u201d if we\naccess the root of the application (,/,).  To do this, we add a new\ntest function to,test_flaskr.py,, like this:,,def,,test_empty_db,(,client,):,,\"\"\"Start with a blank database.\"\"\",,rv,,=,,client,.,get,(,'/',),,assert,,b,'No entries here so far',,in,,rv,.,data,,,,Notice that our test functions begin with the word,test,; this allows,pytest,to automatically identify the function as a test to run.,,By using,client.get,we can send an HTTP,GET,request to the application with\nthe given path.  The return value will be a,response_class,object.\nWe can now use the,data,attribute to inspect\nthe return value (as string) from the application.  In this case, we ensure that,'No,,entries,,here,,so,,far',is part of the output.,,Run it again and you should see one passing test:,,$ pytest -v\n\n================ test session starts ================\nrootdir: ./flask/examples/flaskr, inifile: setup.cfg\ncollected 1 items\n\ntests/test_flaskr.py::test_empty_db PASSED\n\n============= 1 passed in 0.10 seconds ==============,,,,,Logging In and Out,\u00b6,,The majority of the functionality of our application is only available for\nthe administrative user, so we need a way to log our test client in and out\nof the application.  To do this, we fire some requests to the login and logout\npages with the required form data (username and password).  And because the\nlogin and logout pages redirect, we tell the client to,follow_redirects,.,,Add the following two functions to your,test_flaskr.py,file:,,def,,login,(,client,,,,username,,,,password,):,,return,,client,.,post,(,'/login',,,,data,=,dict,(,,username,=,username,,,,password,=,password,,),,,follow_redirects,=,True,),,def,,logout,(,client,):,,return,,client,.,get,(,'/logout',,,,follow_redirects,=,True,),,,,Now we can easily test that logging in and out works and that it fails with\ninvalid credentials.  Add this new test function:,,def,,test_login_logout,(,client,):,,\"\"\"Make sure login and logout works.\"\"\",,rv,,=,,login,(,client,,,,flaskr,.,app,.,config,[,'USERNAME',],,,flaskr,.,app,.,config,[,'PASSWORD',]),,assert,,b,'You were logged in',,in,,rv,.,data,,rv,,=,,logout,(,client,),,assert,,b,'You were logged out',,in,,rv,.,data,,rv,,=,,login,(,client,,,,flaskr,.,app,.,config,[,'USERNAME',],,+,,'x',,,,flaskr,.,app,.,config,[,'PASSWORD',]),,assert,,b,'Invalid username',,in,,rv,.,data,,rv,,=,,login,(,client,,,,flaskr,.,app,.,config,[,'USERNAME',],,,flaskr,.,app,.,config,[,'PASSWORD',],,+,,'x',),,assert,,b,'Invalid password',,in,,rv,.,data,,,,,,Test Adding Messages,\u00b6,,We should also test that adding messages works.  Add a new test function\nlike this:,,def,,test_messages,(,client,):,,\"\"\"Test that messages work.\"\"\",,login,(,client,,,,flaskr,.,app,.,config,[,'USERNAME',],,,flaskr,.,app,.,config,[,'PASSWORD',]),,rv,,=,,client,.,post,(,'/add',,,,data,=,dict,(,,title,=,'<Hello>',,,,text,=,'<strong>HTML</strong> allowed here',,),,,follow_redirects,=,True,),,assert,,b,'No entries here so far',,not,,in,,rv,.,data,,assert,,b,'&lt;Hello&gt;',,in,,rv,.,data,,assert,,b,'<strong>HTML</strong> allowed here',,in,,rv,.,data,,,,Here we check that HTML is allowed in the text but not in the title,\nwhich is the intended behavior.,,Running that should now give us three passing tests:,,$ pytest -v\n\n================ test session starts ================\nrootdir: ./flask/examples/flaskr, inifile: setup.cfg\ncollected 3 items\n\ntests/test_flaskr.py::test_empty_db PASSED\ntests/test_flaskr.py::test_login_logout PASSED\ntests/test_flaskr.py::test_messages PASSED\n\n============= 3 passed in 0.23 seconds ==============,,,,,Other Testing Tricks,\u00b6,,Besides using the test client as shown above, there is also the,test_request_context(),method that can be used\nin combination with the,with,statement to activate a request context\ntemporarily.  With this you can access the,request,,,g,and,session,objects like in view\nfunctions.  Here is a full example that demonstrates this approach:,,import,,flask,,app,,=,,flask,.,Flask,(,__name__,),,with,,app,.,test_request_context,(,'/?name=Peter',):,,assert,,flask,.,request,.,path,,==,,'/',,assert,,flask,.,request,.,args,[,'name',],,==,,'Peter',,,,All the other objects that are context bound can be used in the same\nway.,,If you want to test your application with different configurations and\nthere does not seem to be a good way to do that, consider switching to\napplication factories (see,Application Factories,).,,Note however that if you are using a test request context, the,before_request(),and,after_request(),functions are not called automatically.  However,teardown_request(),functions are indeed executed when\nthe test request context leaves the,with,block.  If you do want the,before_request(),functions to be called as well, you\nneed to call,preprocess_request(),yourself:,,app,,=,,flask,.,Flask,(,__name__,),,with,,app,.,test_request_context,(,'/?name=Peter',):,,app,.,preprocess_request,(),,...,,,,This can be necessary to open database connections or something similar\ndepending on how your application was designed.,,If you want to call the,after_request(),functions you\nneed to call into,process_response(),which however\nrequires that you pass it a response object:,,app,,=,,flask,.,Flask,(,__name__,),,with,,app,.,test_request_context,(,'/?name=Peter',):,,resp,,=,,Response,(,'...',),,resp,,=,,app,.,process_response,(,resp,),,...,,,,This in general is less useful because at that point you can directly\nstart using the test client.,,,,Faking Resources and Context,\u00b6,,,Changelog,,New in version 0.10.,,,A very common pattern is to store user authorization information and\ndatabase connections on the application context or the,flask.g,object.  The general pattern for this is to put the object on there on\nfirst usage and then to remove it on a teardown.  Imagine for instance\nthis code to get the current user:,,def,,get_user,():,,user,,=,,getattr,(,g,,,,'user',,,,None,),,if,,user,,is,,None,:,,user,,=,,fetch_current_user_from_database,(),,g,.,user,,=,,user,,return,,user,,,,For a test it would be nice to override this user from the outside without\nhaving to change some code.  This can be accomplished with\nhooking the,flask.appcontext_pushed,signal:,,from,,contextlib,,import,,contextmanager,,from,,flask,,import,,appcontext_pushed,,,,g,,@contextmanager,,def,,user_set,(,app,,,,user,):,,def,,handler,(,sender,,,,**,kwargs,):,,g,.,user,,=,,user,,with,,appcontext_pushed,.,connected_to,(,handler,,,,app,):,,yield,,,,And then to use it:,,from,,flask,,import,,json,,,,jsonify,,@app,.,route,(,'/users/me',),,def,,users_me,():,,return,,jsonify,(,username,=,g,.,user,.,username,),,with,,user_set,(,app,,,,my_user,):,,with,,app,.,test_client,(),,as,,c,:,,resp,,=,,c,.,get,(,'/users/me',),,data,,=,,json,.,loads,(,resp,.,data,),,self,.,assert_equal,(,data,[,'username',],,,my_user,.,username,),,,,,,Keeping the Context Around,\u00b6,,,Changelog,,New in version 0.4.,,,Sometimes it is helpful to trigger a regular request but still keep the\ncontext around for a little longer so that additional introspection can\nhappen.  With Flask 0.4 this is possible by using the,test_client(),with a,with,block:,,app,,=,,flask,.,Flask,(,__name__,),,with,,app,.,test_client,(),,as,,c,:,,rv,,=,,c,.,get,(,'/?tequila=42',),,assert,,request,.,args,[,'tequila',],,==,,'42',,,,If you were to use just the,test_client(),without\nthe,with,block, the,assert,would fail with an error because,request,is no longer available (because you are trying to use it outside of the actual request).,,,,Accessing and Modifying Sessions,\u00b6,,,Changelog,,New in version 0.8.,,,Sometimes it can be very helpful to access or modify the sessions from the\ntest client.  Generally there are two ways for this.  If you just want to\nensure that a session has certain keys set to certain values you can just\nkeep the context around and access,flask.session,:,,with,,app,.,test_client,(),,as,,c,:,,rv,,=,,c,.,get,(,'/',),,assert,,flask,.,session,[,'foo',],,==,,42,,,,This however does not make it possible to also modify the session or to\naccess the session before a request was fired.  Starting with Flask 0.8 we\nprovide a so called \u201csession transaction\u201d which simulates the appropriate\ncalls to open a session in the context of the test client and to modify\nit.  At the end of the transaction the session is stored.  This works\nindependently of the session backend used:,,with,,app,.,test_client,(),,as,,c,:,,with,,c,.,session_transaction,(),,as,,sess,:,,sess,[,'a_key',],,=,,'a value',,# once this is reached the session was stored,,,,Note that in this case you have to use the,sess,object instead of the,flask.session,proxy.  The object however itself will provide the\nsame interface.,,,,Testing JSON APIs,\u00b6,,,Changelog,,New in version 1.0.,,,Flask has great support for JSON, and is a popular choice for building JSON\nAPIs. Making requests with JSON data and examining JSON data in responses is\nvery convenient:,,from,,flask,,import,,request,,,,jsonify,,@app,.,route,(,'/api/auth',),,def,,auth,():,,json_data,,=,,request,.,get_json,(),,email,,=,,json_data,[,'email',],,password,,=,,json_data,[,'password',],,return,,jsonify,(,token,=,generate_token,(,email,,,,password,)),,with,,app,.,test_client,(),,as,,c,:,,rv,,=,,c,.,post,(,'/api/auth',,,,json,=,{,,'username',:,,'flask',,,,'password',:,,'secret',,}),,json_data,,=,,rv,.,get_json,(),,assert,,verify_token,(,email,,,,json_data,[,'token',]),,,,Passing the,json,argument in the test client methods sets the request data\nto the JSON-serialized object and sets the content type to,application/json,. You can get the JSON data from the request or response\nwith,get_json,.,,,,Testing CLI Commands,\u00b6,,Click comes with,utilities for testing,your CLI commands. A,CliRunner,runs commands in isolation and\ncaptures the output in a,Result,object.,,Flask provides,test_cli_runner(),to create a,FlaskCliRunner,that passes the Flask app to the\nCLI automatically. Use its,invoke(),method to call commands in the same way they would be called from the\ncommand line.,,import,,click,,@app,.,cli,.,command,(,'hello',),,@click,.,option,(,'--name',,,,default,=,'World',),,def,,hello_command,(,name,),,click,.,echo,(,f,'Hello,,{name},!',),,def,,test_hello,():,,runner,,=,,app,.,test_cli_runner,(),,# invoke the command directly,,result,,=,,runner,.,invoke,(,hello_command,,,,[,'--name',,,,'Flask',]),,assert,,'Hello, Flask',,in,,result,.,output,,# or by name,,result,,=,,runner,.,invoke,(,args,=,[,'hello',]),,assert,,'World',,in,,result,.,output,,,,In the example above, invoking the command by name is useful because it\nverifies that the command was correctly registered with the app.,,If you want to test how your command parses parameters, without running\nthe command, use its,make_context(),method.\nThis is useful for testing complex validation rules and custom types.,,def,,upper,(,ctx,,,,param,,,,value,):,,if,,value,,is,,not,,None,:,,return,,value,.,upper,(),,@app,.,cli,.,command,(,'hello',),,@click,.,option,(,'--name',,,,default,=,'World',,,,callback,=,upper,),,def,,hello_command,(,name,),,click,.,echo,(,f,'Hello,,{name},!',),,def,,test_hello_params,():,,context,,=,,hello_command,.,make_context,(,'hello',,,,[,'--name',,,,'flask',]),,assert,,context,.,params,[,'name',],,==,,'FLASK',,,,,,,,,,,,,,,Contents,,,Testing Flask Applications,,The Application,,The Testing Skeleton,,The First Test,,Logging In and Out,,Test Adding Messages,,Other Testing Tricks,,Faking Resources and Context,,Keeping the Context Around,,Accessing and Modifying Sessions,,Testing JSON APIs,,Testing CLI Commands,,,,,Navigation,,,Overview,,,Previous:,Templates,,Next:,Application Errors,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Templates", "url": "http://flask.pocoo.org/docs/dev/templating/", "content": ",,,,,Templates \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,Templates,\u00b6,,Flask leverages Jinja2 as template engine.  You are obviously free to use\na different template engine, but you still have to install Jinja2 to run\nFlask itself.  This requirement is necessary to enable rich extensions.\nAn extension can depend on Jinja2 being present.,,This section only gives a very quick introduction into how Jinja2\nis integrated into Flask.  If you want information on the template\nengine\u2019s syntax itself, head over to the official,Jinja2 Template\nDocumentation,for\nmore information.,,,Jinja Setup,\u00b6,,Unless customized, Jinja2 is configured by Flask as follows:,,,autoescaping is enabled for all templates ending in,.html,,,.htm,,,.xml,as well as,.xhtml,when using,render_template(),.,,autoescaping is enabled for all strings when using,render_template_string(),.,,a template has the ability to opt in/out autoescaping with the,{%,,autoescape,,%},tag.,,Flask inserts a couple of global functions and helpers into the\nJinja2 context, additionally to the values that are present by\ndefault.,,,,,Standard Context,\u00b6,,The following global variables are available within Jinja2 templates\nby default:,,,,config,,The current configuration object (,flask.config,),,,Changelog,,Changed in version 0.10:,This is now always available, even in imported templates.,,,,New in version 0.6.,,,,,,request,,The current request object (,flask.request,).  This variable is\nunavailable if the template was rendered without an active request\ncontext.,,,,,session,,The current session object (,flask.session,).  This variable\nis unavailable if the template was rendered without an active request\ncontext.,,,,,g,,The request-bound object for global variables (,flask.g,).  This\nvariable is unavailable if the template was rendered without an active\nrequest context.,,,,,url_for,(,),,The,flask.url_for(),function.,,,,,get_flashed_messages,(,),,The,flask.get_flashed_messages(),function.,,,,The Jinja Context Behavior,,These variables are added to the context of variables, they are not\nglobal variables.  The difference is that by default these will not\nshow up in the context of imported templates.  This is partially caused\nby performance considerations, partially to keep things explicit.,,What does this mean for you?  If you have a macro you want to import,\nthat needs to access the request object you have two possibilities:,,,you explicitly pass the request to the macro as parameter, or\nthe attribute of the request object you are interested in.,,you import the macro \u201cwith context\u201d.,,,Importing with context looks like this:,,{%,,from,,'_helpers.html',,import,,my_macro,,with context,,%},,,,,,,Standard Filters,\u00b6,,These filters are available in Jinja2 additionally to the filters provided\nby Jinja2 itself:,,,,tojson,(,),,This function converts the given object into JSON representation.  This\nis for example very helpful if you try to generate JavaScript on the\nfly.,,Note that inside,script,tags no escaping must take place, so make\nsure to disable escaping with,|safe,before Flask 0.10 if you intend\nto use it inside,script,tags:,,<,script,,type,=,text/javascript,>,,doSomethingWith,(,{{,,user.username,|,tojson,|,safe,,}},);,,</,script,>,,,,,,,Controlling Autoescaping,\u00b6,,Autoescaping is the concept of automatically escaping special characters\nfor you.  Special characters in the sense of HTML (or XML, and thus XHTML)\nare,&,,,>,,,<,,,\",as well as,',.  Because these characters\ncarry specific meanings in documents on their own you have to replace them\nby so called \u201centities\u201d if you want to use them for text.  Not doing so\nwould not only cause user frustration by the inability to use these\ncharacters in text, but can also lead to security problems.  (see,Cross-Site Scripting (XSS),),,Sometimes however you will need to disable autoescaping in templates.\nThis can be the case if you want to explicitly inject HTML into pages, for\nexample if they come from a system that generates secure HTML like a\nmarkdown to HTML converter.,,There are three ways to accomplish that:,,,In the Python code, wrap the HTML string in a,Markup,object before passing it to the template.  This is in general the\nrecommended way.,,Inside the template, use the,|safe,filter to explicitly mark a\nstring as safe HTML (,{{,,myvariable|safe,,}},),,Temporarily disable the autoescape system altogether.,,,To disable the autoescape system in templates, you can use the,{%,,autoescape,,%},block:,,{%,,autoescape,,false,,%},,<,p,>,autoescaping is disabled here,<,p,>,{{,,will_not_be_escaped,,}},,{%,,endautoescape,,%},,,,Whenever you do this, please be very cautious about the variables you are\nusing in this block.,,,,Registering Filters,\u00b6,,If you want to register your own filters in Jinja2 you have two ways to do\nthat.  You can either put them by hand into the,jinja_env,of the application or use the,template_filter(),decorator.,,The two following examples work the same and both reverse an object:,,@app,.,template_filter,(,'reverse',),,def,,reverse_filter,(,s,):,,return,,s,[::,-,1,],,def,,reverse_filter,(,s,):,,return,,s,[::,-,1,],,app,.,jinja_env,.,filters,[,'reverse',],,=,,reverse_filter,,,,In case of the decorator the argument is optional if you want to use the\nfunction name as name of the filter.  Once registered, you can use the filter\nin your templates in the same way as Jinja2\u2019s builtin filters, for example if\nyou have a Python list in context called,mylist,:,,{,%,,for,,x,,in,,mylist,,|,,reverse,,%,},,{,%,,endfor,,%,},,,,,,Context Processors,\u00b6,,To inject new variables automatically into the context of a template,\ncontext processors exist in Flask.  Context processors run before the\ntemplate is rendered and have the ability to inject new values into the\ntemplate context.  A context processor is a function that returns a\ndictionary.  The keys and values of this dictionary are then merged with\nthe template context, for all templates in the app:,,@app,.,context_processor,,def,,inject_user,():,,return,,dict,(,user,=,g,.,user,),,,,The context processor above makes a variable called,user,available in\nthe template with the value of,g.user,.  This example is not very\ninteresting because,g,is available in templates anyways, but it gives an\nidea how this works.,,Variables are not limited to values; a context processor can also make\nfunctions available to templates (since Python allows passing around\nfunctions):,,@app,.,context_processor,,def,,utility_processor,():,,def,,format_price,(,amount,,,,currency,=,u,'\u20ac',):,,return,,u,',{0:.2f}{1},',.,format,(,amount,,,,currency,),,return,,dict,(,format_price,=,format_price,),,,,The context processor above makes the,format_price,function available to all\ntemplates:,,{{,,format_price,(,0.33,),,}},,,,You could also build,format_price,as a template filter (see,Registering Filters,), but this demonstrates how to pass functions in a\ncontext processor.,,,,,,,,,,,,,Contents,,,Templates,,Jinja Setup,,Standard Context,,Standard Filters,,Controlling Autoescaping,,Registering Filters,,Context Processors,,,,,Navigation,,,Overview,,,Previous:,Keep Developing!,,Next:,Testing Flask Applications,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Templates", "url": "http://flask.pocoo.org/docs/1.0/templating/", "content": ",,,,,Templates \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,,,,,,,,Templates,\u00b6,,Flask leverages Jinja2 as template engine.  You are obviously free to use\na different template engine, but you still have to install Jinja2 to run\nFlask itself.  This requirement is necessary to enable rich extensions.\nAn extension can depend on Jinja2 being present.,,This section only gives a very quick introduction into how Jinja2\nis integrated into Flask.  If you want information on the template\nengine\u2019s syntax itself, head over to the official,Jinja2 Template\nDocumentation,for\nmore information.,,,Jinja Setup,\u00b6,,Unless customized, Jinja2 is configured by Flask as follows:,,,autoescaping is enabled for all templates ending in,.html,,,.htm,,,.xml,as well as,.xhtml,when using,render_template(),.,,autoescaping is enabled for all strings when using,render_template_string(),.,,a template has the ability to opt in/out autoescaping with the,{%,,autoescape,,%},tag.,,Flask inserts a couple of global functions and helpers into the\nJinja2 context, additionally to the values that are present by\ndefault.,,,,,Standard Context,\u00b6,,The following global variables are available within Jinja2 templates\nby default:,,,,config,,The current configuration object (,flask.config,),,,Changelog,,Changed in version 0.10:,This is now always available, even in imported templates.,,,,New in version 0.6.,,,,,,request,,The current request object (,flask.request,).  This variable is\nunavailable if the template was rendered without an active request\ncontext.,,,,,session,,The current session object (,flask.session,).  This variable\nis unavailable if the template was rendered without an active request\ncontext.,,,,,g,,The request-bound object for global variables (,flask.g,).  This\nvariable is unavailable if the template was rendered without an active\nrequest context.,,,,,url_for,(,),,The,flask.url_for(),function.,,,,,get_flashed_messages,(,),,The,flask.get_flashed_messages(),function.,,,,The Jinja Context Behavior,,These variables are added to the context of variables, they are not\nglobal variables.  The difference is that by default these will not\nshow up in the context of imported templates.  This is partially caused\nby performance considerations, partially to keep things explicit.,,What does this mean for you?  If you have a macro you want to import,\nthat needs to access the request object you have two possibilities:,,,you explicitly pass the request to the macro as parameter, or\nthe attribute of the request object you are interested in.,,you import the macro \u201cwith context\u201d.,,,Importing with context looks like this:,,{%,,from,,'_helpers.html',,import,,my_macro,,with context,,%},,,,,,,Standard Filters,\u00b6,,These filters are available in Jinja2 additionally to the filters provided\nby Jinja2 itself:,,,,tojson,(,),,This function converts the given object into JSON representation.  This\nis for example very helpful if you try to generate JavaScript on the\nfly.,,Note that inside,script,tags no escaping must take place, so make\nsure to disable escaping with,|safe,before Flask 0.10 if you intend\nto use it inside,script,tags:,,<,script,,type,=,text/javascript,>,,doSomethingWith,(,{{,,user.username,|,tojson,|,safe,,}},);,,</,script,>,,,,,,,Controlling Autoescaping,\u00b6,,Autoescaping is the concept of automatically escaping special characters\nfor you.  Special characters in the sense of HTML (or XML, and thus XHTML)\nare,&,,,>,,,<,,,\",as well as,',.  Because these characters\ncarry specific meanings in documents on their own you have to replace them\nby so called \u201centities\u201d if you want to use them for text.  Not doing so\nwould not only cause user frustration by the inability to use these\ncharacters in text, but can also lead to security problems.  (see,Cross-Site Scripting (XSS),),,Sometimes however you will need to disable autoescaping in templates.\nThis can be the case if you want to explicitly inject HTML into pages, for\nexample if they come from a system that generates secure HTML like a\nmarkdown to HTML converter.,,There are three ways to accomplish that:,,,In the Python code, wrap the HTML string in a,Markup,object before passing it to the template.  This is in general the\nrecommended way.,,Inside the template, use the,|safe,filter to explicitly mark a\nstring as safe HTML (,{{,,myvariable|safe,,}},),,Temporarily disable the autoescape system altogether.,,,To disable the autoescape system in templates, you can use the,{%,,autoescape,,%},block:,,{%,,autoescape,,false,,%},,<,p,>,autoescaping is disabled here,<,p,>,{{,,will_not_be_escaped,,}},,{%,,endautoescape,,%},,,,Whenever you do this, please be very cautious about the variables you are\nusing in this block.,,,,Registering Filters,\u00b6,,If you want to register your own filters in Jinja2 you have two ways to do\nthat.  You can either put them by hand into the,jinja_env,of the application or use the,template_filter(),decorator.,,The two following examples work the same and both reverse an object:,,@app,.,template_filter,(,'reverse',),,def,,reverse_filter,(,s,):,,return,,s,[::,-,1,],,def,,reverse_filter,(,s,):,,return,,s,[::,-,1,],,app,.,jinja_env,.,filters,[,'reverse',],,=,,reverse_filter,,,,In case of the decorator the argument is optional if you want to use the\nfunction name as name of the filter.  Once registered, you can use the filter\nin your templates in the same way as Jinja2\u2019s builtin filters, for example if\nyou have a Python list in context called,mylist,:,,{,%,,for,,x,,in,,mylist,,|,,reverse,,%,},,{,%,,endfor,,%,},,,,,,Context Processors,\u00b6,,To inject new variables automatically into the context of a template,\ncontext processors exist in Flask.  Context processors run before the\ntemplate is rendered and have the ability to inject new values into the\ntemplate context.  A context processor is a function that returns a\ndictionary.  The keys and values of this dictionary are then merged with\nthe template context, for all templates in the app:,,@app,.,context_processor,,def,,inject_user,():,,return,,dict,(,user,=,g,.,user,),,,,The context processor above makes a variable called,user,available in\nthe template with the value of,g.user,.  This example is not very\ninteresting because,g,is available in templates anyways, but it gives an\nidea how this works.,,Variables are not limited to values; a context processor can also make\nfunctions available to templates (since Python allows passing around\nfunctions):,,@app,.,context_processor,,def,,utility_processor,():,,def,,format_price,(,amount,,,,currency,=,u,'\u20ac',):,,return,,u,',{0:.2f}{1},',.,format,(,amount,,,,currency,),,return,,dict,(,format_price,=,format_price,),,,,The context processor above makes the,format_price,function available to all\ntemplates:,,{{,,format_price,(,0.33,),,}},,,,You could also build,format_price,as a template filter (see,Registering Filters,), but this demonstrates how to pass functions in a\ncontext processor.,,,,,,,,,,,,,Contents,,,Templates,,Jinja Setup,,Standard Context,,Standard Filters,,Controlling Autoescaping,,Registering Filters,,Context Processors,,,,,Navigation,,,Overview,,,Previous:,Keep Developing!,,Next:,Testing Flask Applications,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "None", "url": "http://flask.pocoo.org/extensions/", "content": "Extensions Registry | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/extensions.png); },,,Flask Extensions,,,overview,//,docs,//,community,//,extensions,//,donate,,Welcome to the Flask extensions registry.  Here you can find a list\n    of packages that extend Flask.  This list is moderated and updated\n    on a regular basis.  If you want your package to show up here,\n    follow the,guide on creating extensions,.,,,Flask-Admin,,,Simple and extensible administrative interface framework for Flask,,,Author:,Flask-Admin team,PyPI Page:,Flask-Admin,,Documentation:,Read docs @ flask-admin.readthedocs.org,,On Github:,flask-admin/flask-admin,,,,,,Flask-Ask,,,Flask-Ask makes it easy to write Amazon Echo apps with Flask and\n              the Alexa Skills Kit.,,,Author:,John Wheeler,PyPI Page:,Flask-Ask,,Documentation:,Read docs @ flask-ask.readthedocs.io,,On Github:,johnwheeler/flask-ask,,,,,,Flask-Assets,,,Integrates the webassets library with Flask, adding support for\n              merging, minifying and compiling CSS and Javascript files.,,,Author:,Michael Elsd\u00f6rfer,PyPI Page:,Flask-Assets,,Documentation:,Read docs @ elsdoerfer.name,,On Github:,miracle2k/flask-assets,,,,,,Flask-AutoIndex,,,An extension that generates an index page for your Flask\n              application automatically,,,Author:,Heungsub Lee,PyPI Page:,Flask-AutoIndex,,Documentation:,Read docs @ pythonhosted.org,,On Github:,sublee/flask-autoindex,,,,,,Flask-Babel,,,Adds i18n/l10n support to Flask, based on,babel,and,pytz,.,This is an approved extension.,,,Author:,Armin Ronacher,PyPI Page:,Flask-Babel,,Documentation:,Read docs @ pythonhosted.org,,On Github:,mitsuhiko/flask-babel,,,,,,Flask-Bcrypt,,,Bcrypt support for hashing passwords,This is an approved extension.,,,Author:,Max Countryman,PyPI Page:,Flask-Bcrypt,,Documentation:,Read docs @ pythonhosted.org,,On Github:,maxcountryman/flask-bcrypt,,,,,,Flask-Cache,,,Adds cache support to your Flask application.,,,Author:,Thadeus Burgess,PyPI Page:,Flask-Cache,,Documentation:,Read docs @ pythonhosted.org,,On Github:,thadeusb/flask-cache,,,,,,Flask-Celery,,,Celery integration for Flask,,,Author:,Ask Solem,PyPI Page:,Flask-Celery,,Documentation:,Read docs @ ask.github.com,,On Github:,ask/flask-celery,,,,,,Flask-Classy,,,Class based views for Flask.,,,Author:,Freedom Dumlao,PyPI Page:,Flask-Classy,,Documentation:,Read docs @ pythonhosted.org,,On Github:,apiguy/flask-classy,,,,,,Flask-Cors,,,Cross Origin Resource Sharing (CORS)  for flask,,,Author:,Cory Dolphin,PyPI Page:,Flask-Cors,,Documentation:,Read docs @ flask-cors.readthedocs.org,,On Github:,wcdolphin/flask-cors,,,,,,Flask-CouchDB,,,Adds,CouchDB,support to Flask.,This is an approved extension.,,,Author:,Matthew Frazier,PyPI Page:,Flask-CouchDB,,Documentation:,Read docs @ pythonhosted.org,,On Bitbucket:,leafstorm/flask-couchdb,,,,,,Flask-CouchDBKit,,,Adds,CouchDBKit,support to Flask.,,,Author:,Kridsada Thanabulpong,PyPI Page:,Flask-CouchDBKit,,Documentation:,Read docs @ pythonhosted.org,,On Github:,sirn/flask-couchdbkit,,,,,,Flask-Creole,,,Creole parser filters for Flask.,This is an approved extension.,,,Author:,Ali Afshar,PyPI Page:,Flask-Creole,,Documentation:,Read docs @ pythonhosted.org,,On Bitbucket:,aafshar/flask-creole-main,,,,,,Flask-Dance,,Doing the OAuth dance with style using Flask, requests, and oauthlib.,This is an approved extension.,,,Author:,David Baumgold,PyPI Page:,Flask-Dance,,Documentation:,Read docs @ flask-dance.readthedocs.org,,On Github:,singingwolfboy/flask-dance,,,,,,Flask-Dashed,,,Flask-Dashed provides tools for building\n              simple and extensible admin interfaces.,,,Author:,Jean-Philippe Serafin,PyPI Page:,Flask-Dashed,,Documentation:,Read docs @ jeanphix.github.com,,On Github:,jeanphix/Flask-Dashed,,,,,,Flask-DebugToolbar,,,A port of the Django debug toolbar to Flask,,,Author:,Matt Good,PyPI Page:,Flask-DebugToolbar,,Documentation:,Read docs @ github.com,,On Github:,mgood/flask-debugtoolbar,,,,,,Flask-Exceptional,,,Adds Exceptional support to Flask applications,This is an approved extension.,,,Author:,Jonathan Zempel,PyPI Page:,Flask-Exceptional,,Documentation:,Read docs @ pythonhosted.org,,On Github:,jzempel/flask-exceptional,,,,,,Flask-fillin,,,The Flask-fillin extension provides simple utilities for testing your forms in Flask application..,,,Author:,Christoph Heer,PyPI Page:,Flask-fillin,,Documentation:,Read docs @ pythonhosted.org,,On Github:,jarus/flask-fillin,,,,,,Flask-FlatPages,,,Provides flat static pages to a Flask application, based on text\n              files as opposed to a relational database.,This is an approved extension.,,,Author:,Simon Sapin,PyPI Page:,Flask-FlatPages,,Documentation:,Read docs @ pythonhosted.org,,On Github:,SimonSapin/Flask-FlatPages,,,,,,Flask-FluidDB,,,FluidDB access for Flask.,,,Author:,Ali Afshar,PyPI Page:,Flask-FluidDB,,Documentation:,Read docs @ pythonhosted.org,,On Bitbucket:,aafshar/flask-fluiddb-main,,,,,,Flask-GAE-Mini-Profiler,,,Flask integration of gae_mini_profiler for Google App Engine.,,,Author:,Pascal Hartig,PyPI Page:,Flask-GAE-Mini-Profiler,,Documentation:,Read docs @ pythonhosted.org,,On Github:,passy/flask-gae-mini-profiler,,,,,,Flask-Genshi,,,Adds support for the,Genshi,templating language to Flask applications.,This is an approved extension.,,,Author:,Dag Odenhall,PyPI Page:,Flask-Genshi,,Documentation:,Read docs @ pythonhosted.org,,On Github:,dag/flask-genshi,,,,,,Flask-Gravatar,,,Small extension for Flask to make using Gravatar easy.,,,Author:,Zelenyak Aleksandr,PyPI Page:,Flask-Gravatar,,Documentation:,Read docs @ pythonhosted.org,,On Github:,zzzsochi/Flask-Gravatar,,,,,,Flask-Heroku,,,Sets Flask configuration defaults for Heroku-esque environment variables,,,Author:,Kenneth Reitz,PyPI Page:,Flask-Heroku,,On Github:,kennethreitz/flask-heroku,,,,,,Flask-HTMLBuilder,,,Flask-HTMLBuilder is an extension that allows flexible and easy\n              Python-only generation of HTML snippets and full HTML documents\n              using a robust syntax.,,,Author:,Zahari Petkov,PyPI Page:,Flask-HTMLBuilder,,Documentation:,Read docs @ majorz.github.com,,On Github:,majorz/flask-htmlbuilder,,,,,,flask-lesscss,,,A small Flask extension that makes it easy to use,LessCSS,with your\n              Flask application.,,,Author:,Steve Losh,PyPI Page:,flask-lesscss,,Documentation:,Read docs @ sjl.bitbucket.org,,On Bitbucket:,sjl/flask-lesscss,,,,,,Flask-Lettuce,,,Add Lettuce support for Flask,,,Author:,Daniel, Dao Quang Minh,PyPI Page:,Flask-Lettuce,,On Github:,dqminh/flask-lettuce,,,,,,Flask-Limiter,,,Adds Ratelimiting support to Flask.\n            Supports a configurable storage backend with implementations for\n            in-memory, redis and memcache.,,,Author:,Ali-Akber Saifee,PyPI Page:,Flask-Limiter,,Documentation:,Read docs @ flask-limiter.readthedocs.org,,On Github:,alisaifee/flask-limiter,,,,,,Flask-Login,,,Flask-Login provides user session management for Flask. It\n              handles the common tasks of logging in, logging out, and\n              remembering your users' sessions over extended periods of time.,This is an approved extension.,,,Author:,Matthew Frazier,PyPI Page:,Flask-Login,,Documentation:,Read docs @ pythonhosted.org,,On Github:,maxcountryman/flask-login,,,,,,Flask-Mail,,,Makes sending mails from Flask applications very easy and\n            has also support for unittesting.,This is an approved extension.,,,Author:,Matt Wright (created by Dan Jacob),PyPI Page:,Flask-Mail,,Documentation:,Read docs @ pythonhosted.org,,On Github:,mattupstate/flask-mail,,,,,,Flask-Mako,,,Allows for,Mako templates,to be used instead of Jinja2,,,Author:,Beranger Enselme, Frank Murphy,PyPI Page:,Flask-Mako,,Documentation:,Read docs @ pythonhosted.org,,On Github:,benselme/flask-mako,,,,,,Flask-Migrate,,,SQLAlchemy,database\n            migrations for Flask applications using,Alembic,. The\n            database operations are provided as command line arguments for,Flask-Script,.,,,Author:,Miguel Grinberg,PyPI Page:,Flask-Migrate,,Documentation:,Read docs @ pythonhosted.org,,On Github:,miguelgrinberg/flask-migrate,,,,,,Flask-Misaka,,A simple extension to integrate the,Misaka,module for efficiently\n            parsing Markdown.,This is an approved extension.,,,Author:,David Baumgold,PyPI Page:,Flask-Misaka,,Documentation:,Read docs @ flask-misaka.readthedocs.org,,On Github:,singingwolfboy/flask-misaka,,,,,,Flask-MongoAlchemy,,,Add Flask support for MongoDB using MongoAlchemy.,,,Author:,Francisco Souza,PyPI Page:,Flask-MongoAlchemy,,Documentation:,Read docs @ pythonhosted.org,,On Github:,cobrateam/flask-mongoalchemy,,,,,,Flask-MongoKit,,,Flask extension to better integrate MongoKit into Flask,,,Author:,Christoph Heer,PyPI Page:,Flask-MongoKit,,Documentation:,Read docs @ pythonhosted.org,,On Github:,jarus/flask-mongokit,,,,,,Flask-OAuth,,,Adds,OAuth,support to Flask.,,,Author:,Armin Ronacher,PyPI Page:,Flask-OAuth,,Documentation:,Read docs @ pythonhosted.org,,On Github:,mitsuhiko/flask-oauth,,,,,,Flask-OpenID,,,Adds,OpenID,support to Flask.,,,Author:,Armin Ronacher,PyPI Page:,Flask-OpenID,,Documentation:,Read docs @ pythonhosted.org,,On Github:,mitsuhiko/flask-openid,,,,,,Flask-Peewee,,,Integrates Flask and the peewee orm,,,Author:,Charles Leifer,PyPI Page:,Flask-Peewee,,Documentation:,Read docs @ charlesleifer.com,,On Github:,coleifer/flask-peewee,,,,,,Flask-PonyWhoosh,,,A full-text search engine using Pony ORM and Whoosh.,,,Author:,Jonathan Prieto-Cubides & Felipe Rodriguez,PyPI Page:,Flask-PonyWhoosh,,Documentation:,Read docs @ pythonhosted.org,,On Github:,compiteing/flask-ponywhoosh,,,,,,Flask-Principal,,,Identity management for Flask.,,,Author:,Ali Afshar,PyPI Page:,Flask-Principal,,Documentation:,Read docs @ pythonhosted.org,,On Github:,mattupstate/flask-principal,,,,,,Flask-PyMongo,,,Flask-PyMongo bridges Flask and PyMongo.,,,Author:,Dan Crosta,PyPI Page:,Flask-PyMongo,,Documentation:,Read docs @ readthedocs.org,,On Github:,dcrosta/flask-pymongo,,,,,,Flask-QueryInspect,,,Provides metrics on SQL queries (using SQLAlchemy) executed\n             for each request.,,,,Author:,Bret Barker,PyPI Page:,Flask-QueryInspect,,Documentation:,Read docs @ github.com,,On Github:,noise/flask-queryinspect,,,,,,Flask-Raptor,,,Flask-Raptor provides support for adding raptors\n              to Flask instances.,,,Author:,Dan Lepage,PyPI Page:,Flask-Raptor,,Documentation:,Read docs @ pythonhosted.org,,On Github:,dplepage/flask-raptor,,,,,,Flask-Rest-JSONAPI,,,Build REST APIs following the,JSONAPI,specification with a powerful data layer system.,,,Author:,Pierre Chaisy,PyPI Page:,Flask-Rest-JSONAPI,,Documentation:,Read docs @ flask-rest-jsonapi.readthedocs.io,,On Github:,miLibris/flask-rest-jsonapi,,,,,,Flask-RESTful,,,Flask-RESTful provides the building blocks for creating a great REST API.,This is an approved extension.,,,Author:,Twilio API Team,PyPI Page:,Flask-RESTful,,Documentation:,Read docs @ flask-restful.readthedocs.org,,On Github:,flask-restful/flask-restful,,,,,,Flask-Restless,,,Flask-Restless provides simple generation of ReSTful APIs for\n              database models defined using Flask-SQLAlchemy. The generated\n              APIs send and receive messages in JSON format.,This is an approved extension.,,,Author:,Jeffrey Finkelstein,PyPI Page:,Flask-Restless,,Documentation:,Read docs @ readthedocs.org,,On Github:,jfinkels/flask-restless,,,,,,Flask-Script,,,The Flask-Script extension provides support for writing external\n            scripts in Flask. It uses argparse to parse command line arguments.,This is an approved extension.,,,Author:,Sean Lynch (created by Dan Jacob),PyPI Page:,Flask-Script,,Documentation:,Read docs @ pythonhosted.org,,On Github:,techniq/flask-script,,,,,,Flask-SeaSurf,,,SeaSurf is a Flask extension for preventing\n              cross-site request forgery (CSRF).,This is an approved extension.,,,Author:,Max Countryman,PyPI Page:,Flask-SeaSurf,,Documentation:,Read docs @ pythonhosted.org,,On Github:,maxcountryman/flask-seasurf,,,,,,Flask-Security,,,Flask-Security is an opinionated Flask extension which adds\n              basic security and authentication features to your Flask apps\n              quickly and easily.,,,Author:,Matt Wright,PyPI Page:,Flask-Security,,Documentation:,Read docs @ pythonhosted.org,,On Github:,mattupstate/flask-security,,,,,,Flask-Shelve,,,Flask-Shelve bridges Flask and the Python standard library\n              `shelve` module, for very simple (slow) no-dependency key-value\n              storage.,,,Author:,James Saryerwinnie,PyPI Page:,Flask-Shelve,,Documentation:,Read docs @ pythonhosted.org,,On Github:,jamesls/flask-shelve,,,,,,Flask-Sijax,,,Flask integration for Sijax,\n              a Python/jQuery library that makes AJAX easy to use,,,Author:,Slavi Pantaleev,PyPI Page:,Flask-Sijax,,Documentation:,Read docs @ pythonhosted.org,,On Github:,spantaleev/flask-sijax,,,,,,Flask-Snow,,,Flask-snow enables easy access to the REST API in the ServiceNow ITSM platform \n              with the help of the,pysnow library,.\n              Additionally, it supports OAuth for a seamless authentication / authorization experience.,,,Author:,Robert Wikman,PyPI Page:,Flask-Snow,,Documentation:,Read docs @ flask-snow.readthedocs.io,,On Github:,rbw0/flask-snow,,,,,,Flask-SQLAlchemy,,,Add,SQLAlchemy,support to Flask\n            with automatic configuration and helpers to simplify common web use cases.\n            Major features include:,,,Handle configuring one or more database connections.,,Set up sessions scoped to the request/response cycle.,,Time queries and track model changes for debugging.,,,This is an approved extension.,,,Author:,Armin Ronacher,PyPI Page:,Flask-SQLAlchemy,,Documentation:,Read docs @ flask-sqlalchemy.pocoo.org,,On Github:,mitsuhiko/flask-sqlalchemy,,,,,,Flask-SSE,,,Server Sent Events,for Flask.,This is an approved extension.,,,Author:,David Baumgold,PyPI Page:,Flask-SSE,,Documentation:,Read docs @ flask-sse.readthedocs.org,,On Github:,singingwolfboy/flask-sse,,,,,,Flask-Static-Compress,,,Automatically minifies, combines, and versions your static CSS\n              and JavaScript assets. Like Django-Compressor for Flask.,,,Author:,Alan Hamlett,PyPI Page:,Flask-Static-Compress,,Documentation:,Read docs @ github.com,,On Github:,alanhamlett/flask-static-compress,,,,,,Flask-Stormpath,,,Add Stormpath user management, authentication,\n            and authorization to Flask.,,,Author:,Randall Degges,PyPI Page:,Flask-Stormpath,,Documentation:,Read docs @ flask-stormpath.readthedocs.org,,On Github:,stormpath/stormpath-flask,,,,,,Flask-Testing,,,The Flask-Testing extension provides unit testing utilities for Flask.,This is an approved extension.,,,Author:,Christoph Heer (created by Dan Jacob),PyPI Page:,Flask-Testing,,Documentation:,Read docs @ pythonhosted.org,,On Github:,jarus/flask-testing,,,,,,Flask-Themes,,,Flask-Themes makes it easy for your application to support\n            a wide range of appearances.,This is an approved extension.,,,Author:,Matthew Frazier,PyPI Page:,Flask-Themes,,Documentation:,Read docs @ pythonhosted.org,,On Bitbucket:,leafstorm/flask-themes,,,,,,Flask-Uploads,,,Flask-Uploads allows your application to flexibly and\n            efficiently handle file uploading and serving the uploaded files.\n            You can create different sets of uploads - one for document\n            attachments, one for photos, etc.,This is an approved extension.,,,Author:,Max Countryman,PyPI Page:,Flask-Uploads,,Documentation:,Read docs @ flask-uploads.readthedocs.org,,On Github:,maxcountryman/flask-uploads,,,,,,Flask-User,,Customizable User Account Management for Flask:\n            Register, Confirm email, Login, Change username, Change password, Forgot password,\n            Role-based Authorization and Internationalization.,This is an approved extension.,,,Author:,Ling Thio,PyPI Page:,Flask-User,,Documentation:,Read docs @ flask-user.readthedocs.io,,On Github:,lingthio/flask-user,,,,,,Flask-Via,,,Provides a clean, simple URL routing framework for growing Flask\n                Applications.,,,Author:,SOON_, Chris Reeves,PyPI Page:,Flask-Via,,Documentation:,Read docs @ flask-via.soon.build,,On Github:,thisissoon/Flask-Via,,,,,,Flask-WeasyPrint,,,Make PDF with,WeasyPrint,in your Flask app.,,,Author:,Simon Sapin,PyPI Page:,Flask-WeasyPrint,,Documentation:,Read docs @ pythonhosted.org,,On Github:,SimonSapin/Flask-WeasyPrint,,,,,,Flask-WebTest,,,Utilities for testing Flask applications with,WebTest,.,,,Author:,Anton Romanovich,PyPI Page:,Flask-WebTest,,Documentation:,Read docs @ flask-webtest.readthedocs.org,,On Github:,aromanovich/flask-webtest,,,,,,Flask-WTF,,,Flask-WTF offers simple integration with WTForms. This\n            integration includes optional CSRF handling for greater security.,This is an approved extension.,,,Author:,Anthony Ford (created by Dan Jacob),PyPI Page:,Flask-WTF,,Documentation:,Read docs @ pythonhosted.org,,On Github:,ajford/flask-wtf,,,,,,Flask-XML-RPC,,,Adds,XML-RPC,support to Flask.,This is an approved extension.,,,Author:,Matthew Frazier,PyPI Page:,Flask-XML-RPC,,Documentation:,Read docs @ pythonhosted.org,,On Bitbucket:,leafstorm/flask-xml-rpc,,,,,,Flask-Zen,,,Flask-Zen allows you to use PyZen via Flask-Script commands.,,,Author:,Noah Kantrowitz,PyPI Page:,Flask-Zen,,Documentation:,Read docs @ pythonhosted.org,,On Github:,coderanger/flask-zen,,,,,,Flask-ZODB,,,Use the ZODB with Flask,This is an approved extension.,,,Author:,Dag Odenhall,PyPI Page:,Flask-ZODB,,Documentation:,Read docs @ pythonhosted.org,,On Github:,dag/flask-zodb,,,,,,Frozen-Flask,,,Freezes a Flask application into a set of static files.\n              The result can be hosted without any server-side software\n              other than a traditional web server.,This is an approved extension.,,,Author:,Simon Sapin,PyPI Page:,Frozen-Flask,,Documentation:,Read docs @ pythonhosted.org,,On Github:,SimonSapin/Frozen-Flask,,,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "Blueprints and Views", "url": "http://flask.pocoo.org/docs/1.0/tutorial/views/", "content": ",,,,,Blueprints and Views \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,Tutorial,\u00bb,,,,,,,,,Blueprints and Views,\u00b6,,A view function is the code you write to respond to requests to your\napplication. Flask uses patterns to match the incoming request URL to\nthe view that should handle it. The view returns data that Flask turns\ninto an outgoing response. Flask can also go the other direction and\ngenerate a URL to a view based on its name and arguments.,,,Create a Blueprint,\u00b6,,A,Blueprint,is a way to organize a group of related views and\nother code. Rather than registering views and other code directly with\nan application, they are registered with a blueprint. Then the blueprint\nis registered with the application when it is available in the factory\nfunction.,,Flaskr will have two blueprints, one for authentication functions and\none for the blog posts functions. The code for each blueprint will go\nin a separate module. Since the blog needs to know about authentication,\nyou\u2019ll write the authentication one first.,,,flaskr/auth.py,\u00b6,,import,,functools,,from,,flask,,import,,(,,Blueprint,,,,flash,,,,g,,,,redirect,,,,render_template,,,,request,,,,session,,,,url_for,,),,from,,werkzeug.security,,import,,check_password_hash,,,,generate_password_hash,,from,,flaskr.db,,import,,get_db,,bp,,=,,Blueprint,(,'auth',,,,__name__,,,,url_prefix,=,'/auth',),,,,,This creates a,Blueprint,named,'auth',. Like the application\nobject, the blueprint needs to know where it\u2019s defined, so,__name__,is passed as the second argument. The,url_prefix,will be prepended\nto all the URLs associated with the blueprint.,,Import and register the blueprint from the factory using,app.register_blueprint(),. Place the\nnew code at the end of the factory function before returning the app.,,,flaskr/__init__.py,\u00b6,,def,,create_app,():,,app,,=,,...,,# existing code omitted,,from,,.,,import,,auth,,app,.,register_blueprint,(,auth,.,bp,),,return,,app,,,,,The authentication blueprint will have views to register new users and\nto log in and log out.,,,,The First View: Register,\u00b6,,When the user visits the,/auth/register,URL, the,register,view\nwill return,HTML,with a form for them to fill out. When they submit\nthe form, it will validate their input and either show the form again\nwith an error message or create the new user and go to the login page.,,For now you will just write the view code. On the next page, you\u2019ll\nwrite templates to generate the HTML form.,,,flaskr/auth.py,\u00b6,,@bp.route,(,'/register',,,,methods,=,(,'GET',,,,'POST',)),,def,,register,():,,if,,request,.,method,,==,,'POST',:,,username,,=,,request,.,form,[,'username',],,password,,=,,request,.,form,[,'password',],,db,,=,,get_db,(),,error,,=,,None,,if,,not,,username,:,,error,,=,,'Username is required.',,elif,,not,,password,:,,error,,=,,'Password is required.',,elif,,db,.,execute,(,,'SELECT id FROM user WHERE username = ?',,,,(,username,,),,),.,fetchone,(),,is,,not,,None,:,,error,,=,,'User {} is already registered.',.,format,(,username,),,if,,error,,is,,None,:,,db,.,execute,(,,'INSERT INTO user (username, password) VALUES (?, ?)',,,,(,username,,,,generate_password_hash,(,password,)),,),,db,.,commit,(),,return,,redirect,(,url_for,(,'auth.login',)),,flash,(,error,),,return,,render_template,(,'auth/register.html',),,,,,Here\u2019s what the,register,view function is doing:,,,@bp.route,associates the URL,/register,with the,register,view function. When Flask receives a request\nto,/auth/register,, it will call the,register,view and use\nthe return value as the response.,,,If the user submitted the form,,request.method,will be,'POST',. In this\ncase, start validating the input.,,,request.form,is a special type of,dict,mapping submitted form keys and values. The user will\ninput their,username,and,password,.,,,Validate that,username,and,password,are not empty.,,,Validate that,username,is not already registered by querying the\ndatabase and checking if a result is returned.,db.execute,takes a SQL query\nwith,?,placeholders for any user input, and a tuple of values\nto replace the placeholders with. The database library will take\ncare of escaping the values so you are not vulnerable to a,SQL injection attack,.,,fetchone(),returns one row from the query.\nIf the query returned no results, it returns,None,. Later,,fetchall(),is used, which returns a list of\nall results.,,,If validation succeeds, insert the new user data into the database.\nFor security, passwords should never be stored in the database\ndirectly. Instead,,generate_password_hash(),is used to\nsecurely hash the password, and that hash is stored. Since this\nquery modifies data,,db.commit(),needs to be called afterwards to save the changes.,,,After storing the user, they are redirected to the login page.,url_for(),generates the URL for the login view based on its\nname. This is preferable to writing the URL directly as it allows\nyou to change the URL later without changing all code that links to\nit.,redirect(),generates a redirect response to the generated\nURL.,,,If validation fails, the error is shown to the user.,flash(),stores messages that can be retrieved when rendering the template.,,,When the user initially navigates to,auth/register,, or\nthere was an validation error, an HTML page with the registration\nform should be shown.,render_template(),will render a template\ncontaining the HTML, which you\u2019ll write in the next step of the\ntutorial.,,,,,,Login,\u00b6,,This view follows the same pattern as the,register,view above.,,,flaskr/auth.py,\u00b6,,@bp.route,(,'/login',,,,methods,=,(,'GET',,,,'POST',)),,def,,login,():,,if,,request,.,method,,==,,'POST',:,,username,,=,,request,.,form,[,'username',],,password,,=,,request,.,form,[,'password',],,db,,=,,get_db,(),,error,,=,,None,,user,,=,,db,.,execute,(,,'SELECT * FROM user WHERE username = ?',,,,(,username,,),,),.,fetchone,(),,if,,user,,is,,None,:,,error,,=,,'Incorrect username.',,elif,,not,,check_password_hash,(,user,[,'password',],,,password,):,,error,,=,,'Incorrect password.',,if,,error,,is,,None,:,,session,.,clear,(),,session,[,'user_id',],,=,,user,[,'id',],,return,,redirect,(,url_for,(,'index',)),,flash,(,error,),,return,,render_template,(,'auth/login.html',),,,,,There are a few differences from the,register,view:,,,The user is queried first and stored in a variable for later use.,,check_password_hash(),hashes the submitted\npassword in the same way as the stored hash and securely compares\nthem. If they match, the password is valid.,,session,is a,dict,that stores data across requests.\nWhen validation succeeds, the user\u2019s,id,is stored in a new\nsession. The data is stored in a,cookie,that is sent to the\nbrowser, and the browser then sends it back with subsequent requests.\nFlask securely,signs,the data so that it can\u2019t be tampered with.,,,Now that the user\u2019s,id,is stored in the,session,, it will be\navailable on subsequent requests. At the beginning of each request, if\na user is logged in their information should be loaded and made\navailable to other views.,,,flaskr/auth.py,\u00b6,,@bp.before_app_request,,def,,load_logged_in_user,():,,user_id,,=,,session,.,get,(,'user_id',),,if,,user_id,,is,,None,:,,g,.,user,,=,,None,,else,:,,g,.,user,,=,,get_db,(),.,execute,(,,'SELECT * FROM user WHERE id = ?',,,,(,user_id,,),,),.,fetchone,(),,,,,bp.before_app_request(),registers\na function that runs before the view function, no matter what URL is\nrequested.,load_logged_in_user,checks if a user id is stored in the,session,and gets that user\u2019s data from the database, storing it\non,g.user,, which lasts for the length of the request. If\nthere is no user id, or if the id doesn\u2019t exist,,g.user,will be,None,.,,,,Logout,\u00b6,,To log out, you need to remove the user id from the,session,.\nThen,load_logged_in_user,won\u2019t load a user on subsequent requests.,,,flaskr/auth.py,\u00b6,,@bp.route,(,'/logout',),,def,,logout,():,,session,.,clear,(),,return,,redirect,(,url_for,(,'index',)),,,,,,,Require Authentication in Other Views,\u00b6,,Creating, editing, and deleting blog posts will require a user to be\nlogged in. A,decorator,can be used to check this for each view it\u2019s\napplied to.,,,flaskr/auth.py,\u00b6,,def,,login_required,(,view,):,,@functools.wraps,(,view,),,def,,wrapped_view,(,**,kwargs,):,,if,,g,.,user,,is,,None,:,,return,,redirect,(,url_for,(,'auth.login',)),,return,,view,(,**,kwargs,),,return,,wrapped_view,,,,,This decorator returns a new view function that wraps the original view\nit\u2019s applied to. The new function checks if a user is loaded and\nredirects to the login page otherwise. If a user is loaded the original\nview is called and continues normally. You\u2019ll use this decorator when\nwriting the blog views.,,,,Endpoints and URLs,\u00b6,,The,url_for(),function generates the URL to a view based on a name\nand arguments. The name associated with a view is also called the,endpoint,, and by default it\u2019s the same as the name of the view\nfunction.,,For example, the,hello(),view that was added to the app\nfactory earlier in the tutorial has the name,'hello',and can be\nlinked to with,url_for('hello'),. If it took an argument, which\nyou\u2019ll see later, it would be linked to using,url_for('hello',,,who='World'),.,,When using a blueprint, the name of the blueprint is prepended to the\nname of the function, so the endpoint for the,login,function you\nwrote above is,'auth.login',because you added it to the,'auth',blueprint.,,Continue to,Templates,.,,,,,,,,,,,,,Contents,,,Blueprints and Views,,Create a Blueprint,,The First View: Register,,Login,,Logout,,Require Authentication in Other Views,,Endpoints and URLs,,,,,Navigation,,,Overview,,,Tutorial,,,Previous:,Define and Access the Database,,Next:,Templates,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Step 5: Creating The Database", "url": "http://flask.pocoo.org/docs/dev/tutorial/dbinit/", "content": ",,,Step 5: Creating The Database \u2014 Flask Documentation (0.13-dev),,,,var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../../',\n        VERSION:     '0.13.dev',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };,,,,,,,,,,,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask Documentation (0.13-dev),\u00bb,,Tutorial,\u00bb,,,,,Warning:,This is the documentation for the development version of Flask,,,,,,Step 5: Creating The Database,\u00b6,,As outlined earlier, Flaskr is a database powered application, and more\nprecisely, it is an application powered by a relational database system.  Such\nsystems need a schema that tells them how to store that information.\nBefore starting the server for the first time, it\u2019s important to create\nthat schema.,,Such a schema could be created by piping the,schema.sql,file into the,sqlite3,command as follows:,,sqlite3,,/,tmp,/,flaskr,.,db,,<,,schema,.,sql,,,,However, the downside of this is that it requires the,sqlite3,command\nto be installed, which is not necessarily the case on every system. This\nalso requires that you provide the path to the database, which can introduce\nerrors.,,Instead of the,sqlite3,command above, it\u2019s a good idea to add a function\nto our application that initializes the database for you. To do this, you\ncan create a function and hook it into a,flask,command that\ninitializes the database.,,Take a look at the code segment below. A good place to add this function,\nand command, is just below the,connect_db,function in,flaskr.py,:,,def,,init_db,():,,db,,=,,get_db,(),,with,,app,.,open_resource,(,'schema.sql',,,,mode,=,'r',),,as,,f,:,,db,.,cursor,(),.,executescript,(,f,.,read,()),,db,.,commit,(),,@app,.,cli,.,command,(,'initdb',),,def,,initdb_command,():,,\"\"\"Initializes the database.\"\"\",,init_db,(),,print,(,'Initialized the database.',),,,,The,app.cli.command(),decorator registers a new command with the,flask,script.  When the command executes, Flask will automatically\ncreate an application context which is bound to the right application.\nWithin the function, you can then access,flask.g,and other things as\nyou might expect.  When the script ends, the application context tears down\nand the database connection is released.,,You will want to keep an actual function around that initializes the database,\nthough, so that we can easily create databases in unit tests later on.  (For\nmore information see,Testing Flask Applications,.),,The,open_resource(),method of the application object\nis a convenient helper function that will open a resource that the\napplication provides.  This function opens a file from the resource\nlocation (the,flaskr/flaskr,folder) and allows you to read from it.\nIt is used in this example to execute a script on the database connection.,,The connection object provided by SQLite can give you a cursor object.\nOn that cursor, there is a method to execute a complete script.  Finally, you\nonly have to commit the changes.  SQLite3 and other transactional\ndatabases will not commit unless you explicitly tell it to.,,Now, in a terminal, from the application root directory,flaskr/,it is\npossible to create a database with the,flask,script:,,flask,,initdb,,Initialized,,the,,database,.,,,,,Troubleshooting,,If you get an exception later on stating that a table cannot be found, check\nthat you did execute the,initdb,command and that your table names are\ncorrect (singular vs. plural, for example).,,,Continue with,Step 6: The View Functions,,,,,,,,,Versions,,,Development,,(unstable),,Flask 0.12.x,,(stable),,Flask 0.11.x,,Flask 0.10.x,,,,,Related Topics,,,Documentation overview,,Tutorial,,Previous:,Step 4: Database Connections,,Next:,Step 6: The View Functions,,,,,,Quick search,,,,,,,,,,,\u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using,Sphinx,.,,"},
{"name": "Blueprints and Views", "url": "http://flask.pocoo.org/docs/dev/tutorial/views/", "content": ",,,,,Blueprints and Views \u2014 Flask 1.1.dev documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.1.dev documentation,\u00bb,,Tutorial,\u00bb,,,,,Warning:,This is the development version. The latest stable version is,Flask 1.0,.,,,,,,Blueprints and Views,\u00b6,,A view function is the code you write to respond to requests to your\napplication. Flask uses patterns to match the incoming request URL to\nthe view that should handle it. The view returns data that Flask turns\ninto an outgoing response. Flask can also go the other direction and\ngenerate a URL to a view based on its name and arguments.,,,Create a Blueprint,\u00b6,,A,Blueprint,is a way to organize a group of related views and\nother code. Rather than registering views and other code directly with\nan application, they are registered with a blueprint. Then the blueprint\nis registered with the application when it is available in the factory\nfunction.,,Flaskr will have two blueprints, one for authentication functions and\none for the blog posts functions. The code for each blueprint will go\nin a separate module. Since the blog needs to know about authentication,\nyou\u2019ll write the authentication one first.,,,flaskr/auth.py,\u00b6,,import,,functools,,from,,flask,,import,,(,,Blueprint,,,,flash,,,,g,,,,redirect,,,,render_template,,,,request,,,,session,,,,url_for,,),,from,,werkzeug.security,,import,,check_password_hash,,,,generate_password_hash,,from,,flaskr.db,,import,,get_db,,bp,,=,,Blueprint,(,'auth',,,,__name__,,,,url_prefix,=,'/auth',),,,,,This creates a,Blueprint,named,'auth',. Like the application\nobject, the blueprint needs to know where it\u2019s defined, so,__name__,is passed as the second argument. The,url_prefix,will be prepended\nto all the URLs associated with the blueprint.,,Import and register the blueprint from the factory using,app.register_blueprint(),. Place the\nnew code at the end of the factory function before returning the app.,,,flaskr/__init__.py,\u00b6,,def,,create_app,():,,app,,=,,...,,# existing code omitted,,from,,.,,import,,auth,,app,.,register_blueprint,(,auth,.,bp,),,return,,app,,,,,The authentication blueprint will have views to register new users and\nto log in and log out.,,,,The First View: Register,\u00b6,,When the user visits the,/auth/register,URL, the,register,view\nwill return,HTML,with a form for them to fill out. When they submit\nthe form, it will validate their input and either show the form again\nwith an error message or create the new user and go to the login page.,,For now you will just write the view code. On the next page, you\u2019ll\nwrite templates to generate the HTML form.,,,flaskr/auth.py,\u00b6,,@bp.route,(,'/register',,,,methods,=,(,'GET',,,,'POST',)),,def,,register,():,,if,,request,.,method,,==,,'POST',:,,username,,=,,request,.,form,[,'username',],,password,,=,,request,.,form,[,'password',],,db,,=,,get_db,(),,error,,=,,None,,if,,not,,username,:,,error,,=,,'Username is required.',,elif,,not,,password,:,,error,,=,,'Password is required.',,elif,,db,.,execute,(,,'SELECT id FROM user WHERE username = ?',,,,(,username,,),,),.,fetchone,(),,is,,not,,None,:,,error,,=,,'User {} is already registered.',.,format,(,username,),,if,,error,,is,,None,:,,db,.,execute,(,,'INSERT INTO user (username, password) VALUES (?, ?)',,,,(,username,,,,generate_password_hash,(,password,)),,),,db,.,commit,(),,return,,redirect,(,url_for,(,'auth.login',)),,flash,(,error,),,return,,render_template,(,'auth/register.html',),,,,,Here\u2019s what the,register,view function is doing:,,,@bp.route,associates the URL,/register,with the,register,view function. When Flask receives a request\nto,/auth/register,, it will call the,register,view and use\nthe return value as the response.,,,If the user submitted the form,,request.method,will be,'POST',. In this\ncase, start validating the input.,,,request.form,is a special type of,dict,mapping submitted form keys and values. The user will\ninput their,username,and,password,.,,,Validate that,username,and,password,are not empty.,,,Validate that,username,is not already registered by querying the\ndatabase and checking if a result is returned.,db.execute,takes a SQL query\nwith,?,placeholders for any user input, and a tuple of values\nto replace the placeholders with. The database library will take\ncare of escaping the values so you are not vulnerable to a,SQL injection attack,.,,fetchone(),returns one row from the query.\nIf the query returned no results, it returns,None,. Later,,fetchall(),is used, which returns a list of\nall results.,,,If validation succeeds, insert the new user data into the database.\nFor security, passwords should never be stored in the database\ndirectly. Instead,,generate_password_hash(),is used to\nsecurely hash the password, and that hash is stored. Since this\nquery modifies data,,db.commit(),needs to be called afterwards to save the changes.,,,After storing the user, they are redirected to the login page.,url_for(),generates the URL for the login view based on its\nname. This is preferable to writing the URL directly as it allows\nyou to change the URL later without changing all code that links to\nit.,redirect(),generates a redirect response to the generated\nURL.,,,If validation fails, the error is shown to the user.,flash(),stores messages that can be retrieved when rendering the template.,,,When the user initially navigates to,auth/register,, or\nthere was an validation error, an HTML page with the registration\nform should be shown.,render_template(),will render a template\ncontaining the HTML, which you\u2019ll write in the next step of the\ntutorial.,,,,,,Login,\u00b6,,This view follows the same pattern as the,register,view above.,,,flaskr/auth.py,\u00b6,,@bp.route,(,'/login',,,,methods,=,(,'GET',,,,'POST',)),,def,,login,():,,if,,request,.,method,,==,,'POST',:,,username,,=,,request,.,form,[,'username',],,password,,=,,request,.,form,[,'password',],,db,,=,,get_db,(),,error,,=,,None,,user,,=,,db,.,execute,(,,'SELECT * FROM user WHERE username = ?',,,,(,username,,),,),.,fetchone,(),,if,,user,,is,,None,:,,error,,=,,'Incorrect username.',,elif,,not,,check_password_hash,(,user,[,'password',],,,password,):,,error,,=,,'Incorrect password.',,if,,error,,is,,None,:,,session,.,clear,(),,session,[,'user_id',],,=,,user,[,'id',],,return,,redirect,(,url_for,(,'index',)),,flash,(,error,),,return,,render_template,(,'auth/login.html',),,,,,There are a few differences from the,register,view:,,,The user is queried first and stored in a variable for later use.,,check_password_hash(),hashes the submitted\npassword in the same way as the stored hash and securely compares\nthem. If they match, the password is valid.,,session,is a,dict,that stores data across requests.\nWhen validation succeeds, the user\u2019s,id,is stored in a new\nsession. The data is stored in a,cookie,that is sent to the\nbrowser, and the browser then sends it back with subsequent requests.\nFlask securely,signs,the data so that it can\u2019t be tampered with.,,,Now that the user\u2019s,id,is stored in the,session,, it will be\navailable on subsequent requests. At the beginning of each request, if\na user is logged in their information should be loaded and made\navailable to other views.,,,flaskr/auth.py,\u00b6,,@bp.before_app_request,,def,,load_logged_in_user,():,,user_id,,=,,session,.,get,(,'user_id',),,if,,user_id,,is,,None,:,,g,.,user,,=,,None,,else,:,,g,.,user,,=,,get_db,(),.,execute,(,,'SELECT * FROM user WHERE id = ?',,,,(,user_id,,),,),.,fetchone,(),,,,,bp.before_app_request(),registers\na function that runs before the view function, no matter what URL is\nrequested.,load_logged_in_user,checks if a user id is stored in the,session,and gets that user\u2019s data from the database, storing it\non,g.user,, which lasts for the length of the request. If\nthere is no user id, or if the id doesn\u2019t exist,,g.user,will be,None,.,,,,Logout,\u00b6,,To log out, you need to remove the user id from the,session,.\nThen,load_logged_in_user,won\u2019t load a user on subsequent requests.,,,flaskr/auth.py,\u00b6,,@bp.route,(,'/logout',),,def,,logout,():,,session,.,clear,(),,return,,redirect,(,url_for,(,'index',)),,,,,,,Require Authentication in Other Views,\u00b6,,Creating, editing, and deleting blog posts will require a user to be\nlogged in. A,decorator,can be used to check this for each view it\u2019s\napplied to.,,,flaskr/auth.py,\u00b6,,def,,login_required,(,view,):,,@functools.wraps,(,view,),,def,,wrapped_view,(,**,kwargs,):,,if,,g,.,user,,is,,None,:,,return,,redirect,(,url_for,(,'auth.login',)),,return,,view,(,**,kwargs,),,return,,wrapped_view,,,,,This decorator returns a new view function that wraps the original view\nit\u2019s applied to. The new function checks if a user is loaded and\nredirects to the login page otherwise. If a user is loaded the original\nview is called and continues normally. You\u2019ll use this decorator when\nwriting the blog views.,,,,Endpoints and URLs,\u00b6,,The,url_for(),function generates the URL to a view based on a name\nand arguments. The name associated with a view is also called the,endpoint,, and by default it\u2019s the same as the name of the view\nfunction.,,For example, the,hello(),view that was added to the app\nfactory earlier in the tutorial has the name,'hello',and can be\nlinked to with,url_for('hello'),. If it took an argument, which\nyou\u2019ll see later, it would be linked to using,url_for('hello',,,who='World'),.,,When using a blueprint, the name of the blueprint is prepended to the\nname of the function, so the endpoint for the,login,function you\nwrote above is,'auth.login',because you added it to the,'auth',blueprint.,,Continue to,Templates,.,,,,,,,,,,,,,Contents,,,Blueprints and Views,,Create a Blueprint,,The First View: Register,,Login,,Logout,,Require Authentication in Other Views,,Endpoints and URLs,,,,,Navigation,,,Overview,,,Tutorial,,,Previous:,Define and Access the Database,,Next:,Templates,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Testing Flask Applications", "url": "http://flask.pocoo.org/docs/1.0/testing/", "content": ",,,,,Testing Flask Applications \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 1.0.2 documentation,\u00bb,,,,,,,,,Testing Flask Applications,\u00b6,,,Something that is untested is broken.,,The origin of this quote is unknown and while it is not entirely correct, it\nis also not far from the truth.  Untested applications make it hard to\nimprove existing code and developers of untested applications tend to\nbecome pretty paranoid.  If an application has automated tests, you can\nsafely make changes and instantly know if anything breaks.,,Flask provides a way to test your application by exposing the Werkzeug\ntest,Client,and handling the context locals for you.\nYou can then use that with your favourite testing solution.,,In this documentation we will use the,pytest,package as the base\nframework for our tests. You can install it with,pip,, like so:,,pip,,install,,pytest,,,,,The Application,\u00b6,,First, we need an application to test; we will use the application from\nthe,Tutorial,.  If you don\u2019t have that application yet, get the\nsource code from,the examples,.,,,,The Testing Skeleton,\u00b6,,We begin by adding a tests directory under the application root.  Then\ncreate a Python file to store our tests (,test_flaskr.py,). When we\nformat the filename like,test_*.py,, it will be auto-discoverable by\npytest.,,Next, we create a,pytest fixture,called,client(),that configures\nthe application for testing and initializes a new database.:,,import,,os,,import,,tempfile,,import,,pytest,,from,,flaskr,,import,,flaskr,,@pytest,.,fixture,,def,,client,():,,db_fd,,,,flaskr,.,app,.,config,[,'DATABASE',],,=,,tempfile,.,mkstemp,(),,flaskr,.,app,.,config,[,'TESTING',],,=,,True,,client,,=,,flaskr,.,app,.,test_client,(),,with,,flaskr,.,app,.,app_context,():,,flaskr,.,init_db,(),,yield,,client,,os,.,close,(,db_fd,),,os,.,unlink,(,flaskr,.,app,.,config,[,'DATABASE',]),,,,This client fixture will be called by each individual test.  It gives us a\nsimple interface to the application, where we can trigger test requests to the\napplication.  The client will also keep track of cookies for us.,,During setup, the,TESTING,config flag is activated.  What\nthis does is disable error catching during request handling, so that\nyou get better error reports when performing test requests against the\napplication.,,Because SQLite3 is filesystem-based, we can easily use the,tempfile,module\nto create a temporary database and initialize it.  The,mkstemp(),function does two things for us: it returns a\nlow-level file handle and a random file name, the latter we use as\ndatabase name.  We just have to keep the,db_fd,around so that we can use\nthe,os.close(),function to close the file.,,To delete the database after the test, the fixture closes the file and removes\nit from the filesystem.,,If we now run the test suite, we should see the following output:,,$ pytest\n\n================ test session starts ================\nrootdir: ./flask/examples/flaskr, inifile: setup.cfg\ncollected 0 items\n\n=========== no tests ran in 0.07 seconds ============,,,Even though it did not run any actual tests, we already know that our,flaskr,application is syntactically valid, otherwise the import would have died\nwith an exception.,,,,The First Test,\u00b6,,Now it\u2019s time to start testing the functionality of the application.\nLet\u2019s check that the application shows \u201cNo entries here so far\u201d if we\naccess the root of the application (,/,).  To do this, we add a new\ntest function to,test_flaskr.py,, like this:,,def,,test_empty_db,(,client,):,,\"\"\"Start with a blank database.\"\"\",,rv,,=,,client,.,get,(,'/',),,assert,,b,'No entries here so far',,in,,rv,.,data,,,,Notice that our test functions begin with the word,test,; this allows,pytest,to automatically identify the function as a test to run.,,By using,client.get,we can send an HTTP,GET,request to the application with\nthe given path.  The return value will be a,response_class,object.\nWe can now use the,data,attribute to inspect\nthe return value (as string) from the application.  In this case, we ensure that,'No,,entries,,here,,so,,far',is part of the output.,,Run it again and you should see one passing test:,,$ pytest -v\n\n================ test session starts ================\nrootdir: ./flask/examples/flaskr, inifile: setup.cfg\ncollected 1 items\n\ntests/test_flaskr.py::test_empty_db PASSED\n\n============= 1 passed in 0.10 seconds ==============,,,,,Logging In and Out,\u00b6,,The majority of the functionality of our application is only available for\nthe administrative user, so we need a way to log our test client in and out\nof the application.  To do this, we fire some requests to the login and logout\npages with the required form data (username and password).  And because the\nlogin and logout pages redirect, we tell the client to,follow_redirects,.,,Add the following two functions to your,test_flaskr.py,file:,,def,,login,(,client,,,,username,,,,password,):,,return,,client,.,post,(,'/login',,,,data,=,dict,(,,username,=,username,,,,password,=,password,,),,,follow_redirects,=,True,),,def,,logout,(,client,):,,return,,client,.,get,(,'/logout',,,,follow_redirects,=,True,),,,,Now we can easily test that logging in and out works and that it fails with\ninvalid credentials.  Add this new test function:,,def,,test_login_logout,(,client,):,,\"\"\"Make sure login and logout works.\"\"\",,rv,,=,,login,(,client,,,,flaskr,.,app,.,config,[,'USERNAME',],,,flaskr,.,app,.,config,[,'PASSWORD',]),,assert,,b,'You were logged in',,in,,rv,.,data,,rv,,=,,logout,(,client,),,assert,,b,'You were logged out',,in,,rv,.,data,,rv,,=,,login,(,client,,,,flaskr,.,app,.,config,[,'USERNAME',],,+,,'x',,,,flaskr,.,app,.,config,[,'PASSWORD',]),,assert,,b,'Invalid username',,in,,rv,.,data,,rv,,=,,login,(,client,,,,flaskr,.,app,.,config,[,'USERNAME',],,,flaskr,.,app,.,config,[,'PASSWORD',],,+,,'x',),,assert,,b,'Invalid password',,in,,rv,.,data,,,,,,Test Adding Messages,\u00b6,,We should also test that adding messages works.  Add a new test function\nlike this:,,def,,test_messages,(,client,):,,\"\"\"Test that messages work.\"\"\",,login,(,client,,,,flaskr,.,app,.,config,[,'USERNAME',],,,flaskr,.,app,.,config,[,'PASSWORD',]),,rv,,=,,client,.,post,(,'/add',,,,data,=,dict,(,,title,=,'<Hello>',,,,text,=,'<strong>HTML</strong> allowed here',,),,,follow_redirects,=,True,),,assert,,b,'No entries here so far',,not,,in,,rv,.,data,,assert,,b,'&lt;Hello&gt;',,in,,rv,.,data,,assert,,b,'<strong>HTML</strong> allowed here',,in,,rv,.,data,,,,Here we check that HTML is allowed in the text but not in the title,\nwhich is the intended behavior.,,Running that should now give us three passing tests:,,$ pytest -v\n\n================ test session starts ================\nrootdir: ./flask/examples/flaskr, inifile: setup.cfg\ncollected 3 items\n\ntests/test_flaskr.py::test_empty_db PASSED\ntests/test_flaskr.py::test_login_logout PASSED\ntests/test_flaskr.py::test_messages PASSED\n\n============= 3 passed in 0.23 seconds ==============,,,,,Other Testing Tricks,\u00b6,,Besides using the test client as shown above, there is also the,test_request_context(),method that can be used\nin combination with the,with,statement to activate a request context\ntemporarily.  With this you can access the,request,,,g,and,session,objects like in view\nfunctions.  Here is a full example that demonstrates this approach:,,import,,flask,,app,,=,,flask,.,Flask,(,__name__,),,with,,app,.,test_request_context,(,'/?name=Peter',):,,assert,,flask,.,request,.,path,,==,,'/',,assert,,flask,.,request,.,args,[,'name',],,==,,'Peter',,,,All the other objects that are context bound can be used in the same\nway.,,If you want to test your application with different configurations and\nthere does not seem to be a good way to do that, consider switching to\napplication factories (see,Application Factories,).,,Note however that if you are using a test request context, the,before_request(),and,after_request(),functions are not called automatically.  However,teardown_request(),functions are indeed executed when\nthe test request context leaves the,with,block.  If you do want the,before_request(),functions to be called as well, you\nneed to call,preprocess_request(),yourself:,,app,,=,,flask,.,Flask,(,__name__,),,with,,app,.,test_request_context,(,'/?name=Peter',):,,app,.,preprocess_request,(),,...,,,,This can be necessary to open database connections or something similar\ndepending on how your application was designed.,,If you want to call the,after_request(),functions you\nneed to call into,process_response(),which however\nrequires that you pass it a response object:,,app,,=,,flask,.,Flask,(,__name__,),,with,,app,.,test_request_context,(,'/?name=Peter',):,,resp,,=,,Response,(,'...',),,resp,,=,,app,.,process_response,(,resp,),,...,,,,This in general is less useful because at that point you can directly\nstart using the test client.,,,,Faking Resources and Context,\u00b6,,,Changelog,,New in version 0.10.,,,A very common pattern is to store user authorization information and\ndatabase connections on the application context or the,flask.g,object.  The general pattern for this is to put the object on there on\nfirst usage and then to remove it on a teardown.  Imagine for instance\nthis code to get the current user:,,def,,get_user,():,,user,,=,,getattr,(,g,,,,'user',,,,None,),,if,,user,,is,,None,:,,user,,=,,fetch_current_user_from_database,(),,g,.,user,,=,,user,,return,,user,,,,For a test it would be nice to override this user from the outside without\nhaving to change some code.  This can be accomplished with\nhooking the,flask.appcontext_pushed,signal:,,from,,contextlib,,import,,contextmanager,,from,,flask,,import,,appcontext_pushed,,,,g,,@contextmanager,,def,,user_set,(,app,,,,user,):,,def,,handler,(,sender,,,,**,kwargs,):,,g,.,user,,=,,user,,with,,appcontext_pushed,.,connected_to,(,handler,,,,app,):,,yield,,,,And then to use it:,,from,,flask,,import,,json,,,,jsonify,,@app,.,route,(,'/users/me',),,def,,users_me,():,,return,,jsonify,(,username,=,g,.,user,.,username,),,with,,user_set,(,app,,,,my_user,):,,with,,app,.,test_client,(),,as,,c,:,,resp,,=,,c,.,get,(,'/users/me',),,data,,=,,json,.,loads,(,resp,.,data,),,self,.,assert_equal,(,data,[,'username',],,,my_user,.,username,),,,,,,Keeping the Context Around,\u00b6,,,Changelog,,New in version 0.4.,,,Sometimes it is helpful to trigger a regular request but still keep the\ncontext around for a little longer so that additional introspection can\nhappen.  With Flask 0.4 this is possible by using the,test_client(),with a,with,block:,,app,,=,,flask,.,Flask,(,__name__,),,with,,app,.,test_client,(),,as,,c,:,,rv,,=,,c,.,get,(,'/?tequila=42',),,assert,,request,.,args,[,'tequila',],,==,,'42',,,,If you were to use just the,test_client(),without\nthe,with,block, the,assert,would fail with an error because,request,is no longer available (because you are trying to use it outside of the actual request).,,,,Accessing and Modifying Sessions,\u00b6,,,Changelog,,New in version 0.8.,,,Sometimes it can be very helpful to access or modify the sessions from the\ntest client.  Generally there are two ways for this.  If you just want to\nensure that a session has certain keys set to certain values you can just\nkeep the context around and access,flask.session,:,,with,,app,.,test_client,(),,as,,c,:,,rv,,=,,c,.,get,(,'/',),,assert,,flask,.,session,[,'foo',],,==,,42,,,,This however does not make it possible to also modify the session or to\naccess the session before a request was fired.  Starting with Flask 0.8 we\nprovide a so called \u201csession transaction\u201d which simulates the appropriate\ncalls to open a session in the context of the test client and to modify\nit.  At the end of the transaction the session is stored.  This works\nindependently of the session backend used:,,with,,app,.,test_client,(),,as,,c,:,,with,,c,.,session_transaction,(),,as,,sess,:,,sess,[,'a_key',],,=,,'a value',,# once this is reached the session was stored,,,,Note that in this case you have to use the,sess,object instead of the,flask.session,proxy.  The object however itself will provide the\nsame interface.,,,,Testing JSON APIs,\u00b6,,,New in version 1.0.,,,,Changelog,Flask has great support for JSON, and is a popular choice for building JSON\nAPIs. Making requests with JSON data and examining JSON data in responses is\nvery convenient:,,from,,flask,,import,,request,,,,jsonify,,@app,.,route,(,'/api/auth',),,def,,auth,():,,json_data,,=,,request,.,get_json,(),,email,,=,,json_data,[,'email',],,password,,=,,json_data,[,'password',],,return,,jsonify,(,token,=,generate_token,(,email,,,,password,)),,with,,app,.,test_client,(),,as,,c,:,,rv,,=,,c,.,post,(,'/api/auth',,,,json,=,{,,'username',:,,'flask',,,,'password',:,,'secret',,}),,json_data,,=,,rv,.,get_json,(),,assert,,verify_token,(,email,,,,json_data,[,'token',]),,,,Passing the,json,argument in the test client methods sets the request data\nto the JSON-serialized object and sets the content type to,application/json,. You can get the JSON data from the request or response\nwith,get_json,.,,,,Testing CLI Commands,\u00b6,,Click comes with,utilities for testing,your CLI commands. A,CliRunner,runs commands in isolation and\ncaptures the output in a,Result,object.,,Flask provides,test_cli_runner(),to create a,FlaskCliRunner,that passes the Flask app to the\nCLI automatically. Use its,invoke(),method to call commands in the same way they would be called from the\ncommand line.,,import,,click,,@app,.,cli,.,command,(,'hello',),,@click,.,option,(,'--name',,,,default,=,'World',),,def,,hello_command,(,name,),,click,.,echo,(,f,'Hello,,{name},!',),,def,,test_hello,():,,runner,,=,,app,.,test_cli_runner,(),,# invoke the command directly,,result,,=,,runner,.,invoke,(,hello_command,,,,[,'--name',,,,'Flask',]),,assert,,'Hello, Flask',,in,,result,.,output,,# or by name,,result,,=,,runner,.,invoke,(,args,=,[,'hello',]),,assert,,'World',,in,,result,.,output,,,,In the example above, invoking the command by name is useful because it\nverifies that the command was correctly registered with the app.,,If you want to test how your command parses parameters, without running\nthe command, use its,make_context(),method.\nThis is useful for testing complex validation rules and custom types.,,def,,upper,(,ctx,,,,param,,,,value,):,,if,,value,,is,,not,,None,:,,return,,value,.,upper,(),,@app,.,cli,.,command,(,'hello',),,@click,.,option,(,'--name',,,,default,=,'World',,,,callback,=,upper,),,def,,hello_command,(,name,),,click,.,echo,(,f,'Hello,,{name},!',),,def,,test_hello_params,():,,context,,=,,hello_command,.,make_context,(,'hello',,,,[,'--name',,,,'flask',]),,assert,,context,.,params,[,'name',],,==,,'FLASK',,,,,,,,,,,,,,,Contents,,,Testing Flask Applications,,The Application,,The Testing Skeleton,,The First Test,,Logging In and Out,,Test Adding Messages,,Other Testing Tricks,,Faking Resources and Context,,Keeping the Context Around,,Accessing and Modifying Sessions,,Testing JSON APIs,,Testing CLI Commands,,,,,Navigation,,,Overview,,,Previous:,Templates,,Next:,Application Errors,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Adding HTTP Method Overrides", "url": "http://flask.pocoo.org/docs/0.12/patterns/methodoverrides/", "content": ",,,,,Adding HTTP Method Overrides \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,Adding HTTP Method Overrides,\u00b6,,Some HTTP proxies do not support arbitrary HTTP methods or newer HTTP\nmethods (such as PATCH).  In that case it\u2019s possible to \u201cproxy\u201d HTTP\nmethods through another HTTP method in total violation of the protocol.,,The way this works is by letting the client do an HTTP POST request and\nset the,X-HTTP-Method-Override,header and set the value to the\nintended HTTP method (such as,PATCH,).,,This can easily be accomplished with an HTTP middleware:,,class,,HTTPMethodOverrideMiddleware,(,object,):,,allowed_methods,,=,,frozenset,([,,'GET',,,,'HEAD',,,,'POST',,,,'DELETE',,,,'PUT',,,,'PATCH',,,,'OPTIONS',,]),,bodyless_methods,,=,,frozenset,([,'GET',,,,'HEAD',,,,'OPTIONS',,,,'DELETE',]),,def,,__init__,(,self,,,,app,):,,self,.,app,,=,,app,,def,,__call__,(,self,,,,environ,,,,start_response,):,,method,,=,,environ,.,get,(,'HTTP_X_HTTP_METHOD_OVERRIDE',,,,'',),.,upper,(),,if,,method,,in,,self,.,allowed_methods,:,,method,,=,,method,.,encode,(,'ascii',,,,'replace',),,environ,[,'REQUEST_METHOD',],,=,,method,,if,,method,,in,,self,.,bodyless_methods,:,,environ,[,'CONTENT_LENGTH',],,=,,'0',,return,,self,.,app,(,environ,,,,start_response,),,,,To use this with Flask this is all that is necessary:,,from,,flask,,import,,Flask,,app,,=,,Flask,(,__name__,),,app,.,wsgi_app,,=,,HTTPMethodOverrideMiddleware,(,app,.,wsgi_app,),,,,,,,,,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,Deferred Request Callbacks,,Next:,Request Content Checksums,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Deferred Request Callbacks", "url": "http://flask.pocoo.org/docs/0.12/patterns/deferredcallbacks/", "content": ",,,,,Deferred Request Callbacks \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,Deferred Request Callbacks,\u00b6,,One of the design principles of Flask is that response objects are created\nand passed down a chain of potential callbacks that can modify them or\nreplace them.  When the request handling starts, there is no response\nobject yet.  It is created as necessary either by a view function or by\nsome other component in the system.,,But what happens if you want to modify the response at a point where the\nresponse does not exist yet?  A common example for that would be a\nbefore-request function that wants to set a cookie on the response object.,,One way is to avoid the situation.  Very often that is possible.  For\ninstance you can try to move that logic into an after-request callback\ninstead.  Sometimes however moving that code there is just not a very\npleasant experience or makes code look very awkward.,,As an alternative possibility you can attach a bunch of callback functions\nto the,g,object and call them at the end of the request.\nThis way you can defer code execution from anywhere in the application.,,,The Decorator,\u00b6,,The following decorator is the key.  It registers a function on a list on\nthe,g,object:,,from,,flask,,import,,g,,def,,after_this_request,(,f,):,,if,,not,,hasattr,(,g,,,,'after_request_callbacks',):,,g,.,after_request_callbacks,,=,,[],,g,.,after_request_callbacks,.,append,(,f,),,return,,f,,,,,,Calling the Deferred,\u00b6,,Now you can use the,after_this_request,decorator to mark a function to\nbe called at the end of the request.  But we still need to call them.  For\nthis the following function needs to be registered as,after_request(),callback:,,@app,.,after_request,,def,,call_after_request_callbacks,(,response,):,,for,,callback,,in,,getattr,(,g,,,,'after_request_callbacks',,,,()):,,callback,(,response,),,return,,response,,,,,,A Practical Example,\u00b6,,At any time during a request, we can register a function to be called at the\nend of the request.  For example you can remember the current language of the\nuser in a cookie in the before-request function:,,from,,flask,,import,,request,,@app,.,before_request,,def,,detect_user_language,():,,language,,=,,request,.,cookies,.,get,(,'user_lang',),,if,,language,,is,,None,:,,language,,=,,guess_language_from_request,(),,@after_this_request,,def,,remember_language,(,response,):,,response,.,set_cookie,(,'user_lang',,,,language,),,g,.,language,,=,,language,,,,,,,,,,,,,,,Contents,,,Deferred Request Callbacks,,The Decorator,,Calling the Deferred,,A Practical Example,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,Streaming Contents,,Next:,Adding HTTP Method Overrides,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Streaming Contents", "url": "http://flask.pocoo.org/docs/0.12/patterns/streaming/", "content": ",,,,,Streaming Contents \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,Streaming Contents,\u00b6,,Sometimes you want to send an enormous amount of data to the client, much\nmore than you want to keep in memory.  When you are generating the data on\nthe fly though, how do you send that back to the client without the\nroundtrip to the filesystem?,,The answer is by using generators and direct responses.,,,Basic Usage,\u00b6,,This is a basic view function that generates a lot of CSV data on the fly.\nThe trick is to have an inner function that uses a generator to generate\ndata and to then invoke that function and pass it to a response object:,,from,,flask,,import,,Response,,@app,.,route,(,'/large.csv',),,def,,generate_large_csv,():,,def,,generate,():,,for,,row,,in,,iter_all_rows,():,,yield,,',',.,join,(,row,),,+,,',\\n,',,return,,Response,(,generate,(),,,mimetype,=,'text/csv',),,,,Each,yield,expression is directly sent to the browser.  Note though\nthat some WSGI middlewares might break streaming, so be careful there in\ndebug environments with profilers and other things you might have enabled.,,,,Streaming from Templates,\u00b6,,The Jinja2 template engine also supports rendering templates piece by\npiece.  This functionality is not directly exposed by Flask because it is\nquite uncommon, but you can easily do it yourself:,,from,,flask,,import,,Response,,def,,stream_template,(,template_name,,,,**,context,):,,app,.,update_template_context,(,context,),,t,,=,,app,.,jinja_env,.,get_template,(,template_name,),,rv,,=,,t,.,stream,(,context,),,rv,.,enable_buffering,(,5,),,return,,rv,,@app,.,route,(,'/my-large-page.html',),,def,,render_large_template,():,,rows,,=,,iter_all_rows,(),,return,,Response,(,stream_template,(,'the_template.html',,,,rows,=,rows,)),,,,The trick here is to get the template object from the Jinja2 environment\non the application and to call,stream(),instead of,render(),which returns a stream object instead of a\nstring.  Since we\u2019re bypassing the Flask template render functions and\nusing the template object itself we have to make sure to update the render\ncontext ourselves by calling,update_template_context(),.\nThe template is then evaluated as the stream is iterated over.  Since each\ntime you do a yield the server will flush the content to the client you\nmight want to buffer up a few items in the template which you can do with,rv.enable_buffering(size),.,5,is a sane default.,,,,Streaming with Context,\u00b6,,,Changelog,,New in version 0.9.,,,Note that when you stream data, the request context is already gone the\nmoment the function executes.  Flask 0.9 provides you with a helper that\ncan keep the request context around during the execution of the\ngenerator:,,from,,flask,,import,,stream_with_context,,,,request,,,,Response,,@app,.,route,(,'/stream',),,def,,streamed_response,():,,def,,generate,():,,yield,,'Hello ',,yield,,request,.,args,[,'name',],,yield,,'!',,return,,Response,(,stream_with_context,(,generate,())),,,,Without the,stream_with_context(),function you would get a,RuntimeError,at that point.,,,,,,,,,,,,,Contents,,,Streaming Contents,,Basic Usage,,Streaming from Templates,,Streaming with Context,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,Adding a favicon,,Next:,Deferred Request Callbacks,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Adding a favicon", "url": "http://flask.pocoo.org/docs/0.12/patterns/favicon/", "content": ",,,,,Adding a favicon \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,Adding a favicon,\u00b6,,A \u201cfavicon\u201d is an icon used by browsers for tabs and bookmarks. This helps\nto distinguish your website and to give it a unique brand.,,A common question is how to add a favicon to a Flask application. First, of\ncourse, you need an icon. It should be 16 \u00d7 16 pixels and in the ICO file\nformat. This is not a requirement but a de-facto standard supported by all\nrelevant browsers. Put the icon in your static directory as,favicon.ico,.,,Now, to get browsers to find your icon, the correct way is to add a link\ntag in your HTML. So, for example:,,<,link,,rel,=,\"shortcut icon\",,href,=,\",{{,,url_for,(,'static',,,,filename,=,'favicon.ico',),,}},\",>,,,,That\u2019s all you need for most browsers, however some really old ones do not\nsupport this standard. The old de-facto standard is to serve this file,\nwith this name, at the website root. If your application is not mounted at\nthe root path of the domain you either need to configure the web server to\nserve the icon at the root or if you can\u2019t do that you\u2019re out of luck. If\nhowever your application is the root you can simply route a redirect:,,app,.,add_url_rule,(,'/favicon.ico',,,,redirect_to,=,url_for,(,'static',,,,filename,=,'favicon.ico',)),,,,If you want to save the extra redirect request you can also write a view\nusing,send_from_directory(),:,,import,,os,,from,,flask,,import,,send_from_directory,,@app,.,route,(,'/favicon.ico',),,def,,favicon,():,,return,,send_from_directory,(,os,.,path,.,join,(,app,.,root_path,,,,'static',),,,'favicon.ico',,,,mimetype,=,'image/vnd.microsoft.icon',),,,,We can leave out the explicit mimetype and it will be guessed, but we may\nas well specify it to avoid the extra guessing, as it will always be the\nsame.,,The above will serve the icon via your application and if possible it\u2019s\nbetter to configure your dedicated web server to serve it; refer to the\nweb server\u2019s documentation.,,,See also,\u00b6,,,The,Favicon,article on\nWikipedia,,,,,,,,,,,,,,Contents,,,Adding a favicon,,See also,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,MongoKit in Flask,,Next:,Streaming Contents,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "MongoKit in Flask", "url": "http://flask.pocoo.org/docs/0.12/patterns/mongokit/", "content": ",,,,,MongoKit in Flask \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,MongoKit in Flask,\u00b6,,Using a document database rather than a full DBMS gets more common these days.\nThis pattern shows how to use MongoKit, a document mapper library, to\nintegrate with MongoDB.,,This pattern requires a running MongoDB server and the MongoKit library\ninstalled.,,There are two very common ways to use MongoKit.  I will outline each of them\nhere:,,,Declarative,\u00b6,,The default behavior of MongoKit is the declarative one that is based on\ncommon ideas from Django or the SQLAlchemy declarative extension.,,Here an example,app.py,module for your application:,,from,,flask,,import,,Flask,,from,,mongokit,,import,,Connection,,,,Document,,# configuration,,MONGODB_HOST,,=,,'localhost',,MONGODB_PORT,,=,,27017,,# create the little application object,,app,,=,,Flask,(,__name__,),,app,.,config,.,from_object,(,__name__,),,# connect to the database,,connection,,=,,Connection,(,app,.,config,[,'MONGODB_HOST',],,,app,.,config,[,'MONGODB_PORT',]),,,,To define your models, just subclass the,Document,class that is imported\nfrom MongoKit.  If you\u2019ve seen the SQLAlchemy pattern you may wonder why we do\nnot have a session and even do not define a,init_db,function here.  On the\none hand, MongoKit does not have something like a session.  This sometimes\nmakes it more to type but also makes it blazingly fast.  On the other hand,\nMongoDB is schemaless.  This means you can modify the data structure from one\ninsert query to the next without any problem.  MongoKit is just schemaless\ntoo, but implements some validation to ensure data integrity.,,Here is an example document (put this also into,app.py,, e.g.):,,from,,mongokit,,import,,ValidationError,,def,,max_length,(,length,):,,def,,validate,(,value,):,,if,,len,(,value,),,<=,,length,:,,return,,True,,# must have %s in error format string to have mongokit place key in there,,raise,,ValidationError,(,',%s,must be at most,{},characters long',.,format,(,length,)),,return,,validate,,class,,User,(,Document,):,,structure,,=,,{,,'name',:,,unicode,,,,'email',:,,unicode,,,,},,validators,,=,,{,,'name',:,,max_length,(,50,),,,'email',:,,max_length,(,120,),,},,use_dot_notation,,=,,True,,def,,__repr__,(,self,):,,return,,'<User,%r,>',,%,,(,self,.,name,),,# register the User document with our current connection,,connection,.,register,([,User,]),,,,This example shows you how to define your schema (named structure), a\nvalidator for the maximum character length and uses a special MongoKit feature\ncalled,use_dot_notation,.  Per default MongoKit behaves like a python\ndictionary but with,use_dot_notation,set to,True,you can use your\ndocuments like you use models in nearly any other ORM by using dots to\nseparate between attributes.,,You can insert entries into the database like this:,,>>>,from,,yourapplication.database,,import,,connection,,>>>,from,,yourapplication.models,,import,,User,,>>>,collection,,=,,connection,[,'test',],.,users,,>>>,user,,=,,collection,.,User,(),,>>>,user,[,'name',],,=,,u,'admin',,>>>,user,[,'email',],,=,,u,'admin@localhost',,>>>,user,.,save,(),,,,Note that MongoKit is kinda strict with used column types, you must not use a\ncommon,str,type for either,name,or,email,but unicode.,,Querying is simple as well:,,>>>,list,(,collection,.,User,.,find,()),,[<User u'admin'>],,>>>,collection,.,User,.,find_one,({,'name',:,,u,'admin',}),,<User u'admin'>,,,,,,PyMongo Compatibility Layer,\u00b6,,If you just want to use PyMongo, you can do that with MongoKit as well.  You\nmay use this process if you need the best performance to get.  Note that this\nexample does not show how to couple it with Flask, see the above MongoKit code\nfor examples:,,from,,MongoKit,,import,,Connection,,connection,,=,,Connection,(),,,,To insert data you can use the,insert,method.  We have to get a\ncollection first, this is somewhat the same as a table in the SQL world.,,>>>,collection,,=,,connection,[,'test',],.,users,,>>>,user,,=,,{,'name',:,,u,'admin',,,,'email',:,,u,'admin@localhost',},,>>>,collection,.,insert,(,user,),,,,MongoKit will automatically commit for us.,,To query your database, you use the collection directly:,,>>>,list,(,collection,.,find,()),,[{u'_id': ObjectId('4c271729e13823182f000000'), u'name': u'admin', u'email': u'admin@localhost'}],,>>>,collection,.,find_one,({,'name',:,,u,'admin',}),,{u'_id': ObjectId('4c271729e13823182f000000'), u'name': u'admin', u'email': u'admin@localhost'},,,,These results are also dict-like objects:,,>>>,r,,=,,collection,.,find_one,({,'name',:,,u,'admin',}),,>>>,r,[,'email',],,u'admin@localhost',,,,For more information about MongoKit, head over to the,website,.,,,,,,,,,,,,,Contents,,,MongoKit in Flask,,Declarative,,PyMongo Compatibility Layer,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,Lazily Loading Views,,Next:,Adding a favicon,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/category/urls/", "content": "URLs | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,URLs,,,Catch-All URL,,(2011-07-15),,Generating a sitemap.xml,,(2013-02-21),,Generating Slugs,,(2010-05-03),,Handling URLs containing slash '/' character,,(2011-10-14),,Helper to list routes (like Rail's rake routes),,(2013-10-03),,Permalink function decorator,,(2010-05-04),,python tutor,,(2012-05-09),,static url cache buster,,(2010-09-24),,Supporting \u201c;\u201d as Delimiter in Legacy Query Strings,,(2011-02-17),,URLs with Payload,,(2011-06-24),,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/category/template-tricks/", "content": "Template Tricks | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Template Tricks,,,Enable jinja2 line statements,,(2012-09-29),,Generating PDF from Flask template (using xhtml2pdf),,(2011-09-07),,link_to and form_tag macros,,(2010-05-07),,nl2br filter,,(2010-06-17),,number_format filter,,(2010-06-26),,Override which templates are autoescaped,,(2011-01-29),,Show correct Tracebacks for some Errors triggered inside a Template on GAE,,(2011-09-26),,timesince filter,,(2010-07-13),,Using a second Jinja environment for LaTeX templates.,,(2011-07-12),,Using Genshi with Flask,,(2010-05-15),,Using the markdown language,,(2010-05-25),,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/category/sessions/", "content": "Sessions | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Sessions,,,Beaker session in Flask,,(2014-01-22),,Better Client-side sessions,,(2011-07-07),,Chunked Secure Cookie Session (Client Side),,(2015-10-07),,Counting Online Users with Redis,,(2011-09-10),,Generic server-based sessions (file-system, etc),,(2013-04-12),,Server-side sessions with MongoDB (pymongo),,(2013-05-01),,Server-side sessions with Pickle.,,(2015-08-04),,Server-side Sessions with Redis,,(2011-10-11),,Server-side sessions with SQLite,,(2012-02-10),,Support for Old and New Sessions,,(2011-07-07),,Unittest example with before and after function calls,,(2011-07-20),,Using Beaker session with Flask,,(2011-07-25),,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/category/security/", "content": "Security | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Security,,,CSRF Protection,,(2010-05-03),,How to serve HTTPS *directly* from Flask (no nginx, no apache, no gunicorn),,(2013-05-03),,Salted Passwords,,(2011-07-11),,Securely Redirect Back,,(2011-07-28),,Selectively Redirect Back,,(2014-01-07),,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/category/performance/", "content": "Performance | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Performance,,,Adding caching to Flask apps,,(2010-05-05),,Cache implementation using SQLite,,(2012-02-10),,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/category/javascript/", "content": "JavaScript | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,JavaScript,,,A Filter for the jQuery Timeago Plugin,,(2011-06-18),,Push Notifications with socket.io and Juggernaut,,(2011-12-06),,Realtime server using the SSE protocol,,(2013-08-01),,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/category/internationalization/", "content": "Internationalization | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Internationalization,,,Language Switcher via Cookie, Accept Headers,,(2015-02-24),,Using Babel's LazyProxy with gettext,,(2010-05-03),,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/category/forms/", "content": "Forms | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Forms,,,Automatically create a WTForms Form from model,,(2011-07-21),,Complex Validation with Flask-WTF,,(2011-07-29),,Flask-WTF multiple inheritance,,(2016-07-20),,Render WTForm fields with html attributes that cause TemplateSyntaxErrors,,(2013-02-14),,Secure Back Redirects with WTForms,,(2011-07-28),,Validating a Flatland Schema,,(2011-09-14),,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/category/authentication/", "content": "Authentication | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Authentication,,,HTTP Basic Auth,,(2010-05-04),,HTTP Digest Auth,,(2010-07-01),,Sign in with Steam ID,,(2011-02-17),,Simple OpenID with Flask,,(2010-05-04),,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/category/database/", "content": "Database | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Database,,,get_object_or_404,,(2013-07-25),,Getting an object from a SQLAlchemy model or abort,,(2010-08-24),,Lazy SQLAlchemy setup,,(2010-05-27),,MongoKit multithreaded authentication,,(2011-08-19),,Simple insertion and row id,,(2010-08-05),,Simple persistence,,(2010-06-01),,Support PyMongo ObjectIDs in URLs,,(2013-01-27),,Testing Issues with SQLAlchemy,,(2010-08-05),,Using tornado.database with MySQL,,(2010-05-07),,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/category/application-structure/", "content": "Application Structure | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Application Structure,,,Admin Blueprint,,(2011-07-21),,Config-based static_folder,,(2012-10-05),,Create your app with a function,,(2010-05-25),,Deploying Flask on Cherrypy WSGI server,,(2010-05-31),,Deploy using zc.buildout and PythonPaste,,(2010-06-04),,Simple Configuration Module,,(2010-05-03),,Simple Pagination,,(2011-02-17),,Simple static page rendering,,(2014-10-23),,Specialized JSON-oriented Flask App,,(2012-01-27),,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/category/apis-and-microformats/", "content": "APIs and Microformats | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,APIs and Microformats,,,Configure SECRET_KEY from a file in the instance directory.,,(2012-12-11),,Generating Feeds with Flask,,(2010-05-05),,Handling Accept Headers,,(2011-02-17),,Paypal IPN Verifier for Flask,,(2013-06-21),,Wordpress-compatible XML-RPC API,,(2012-07-20),,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/category/decorators/", "content": "Decorators | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Decorators,,,app.before_request handlers for less and coffeescript,,(2012-05-19),,Conditional Requests with ETags,,(2012-07-06),,Decorator for the HTTP Access Control,,(2011-07-14),,Generic HTTP headers decorator,,(2012-09-28),,Gzip for particular views,,(2014-02-10),,JSONP decorator,,(2011-11-23),,Rate Limiting Decorator with Redis,,(2011-09-09),,Routing via decorators with Flask-RESTful,,(2015-02-24),,Simple Authorization,,(2012-08-20),,SSL for particular views,,(2012-05-18),,Verify a Google authentication token,,(2014-10-05),,View Rendering Decorator,,(2010-05-22),,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/17/", "content": "Using Genshi with Flask | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Using Genshi with Flask,,Posted by Dag Odenhall\n    on 2010-05-15 @ 17:27\n    and filed in,Template Tricks,,Jinja is a very nice text-based templating engine, but if you want an XML-based templating engine, Genshi is a good choice.,,Flask-Genshi,is a Flask extension that makes it easy. First install it:,,$ easy_install Flask-Genshi,,Here's a simple app:,,from,,flask,,import,,Flask,,from,,flaskext.genshi,,import,,Genshi,,,,render_response,,app,,=,,Flask,(,__name__,),,genshi,,=,,Genshi,(,app,),,@app.route,(,'/',),,def,,index,():,,render_response,(,'index.html',),,,For documentation on Genshi see,the Genshi wiki,.,,This snippet by Dag Odenhall can be used freely for\n    anything you like. Consider it public domain.,,,Comments,,,,Updated: text serializer does not take a doctype\n          by Dag Odenhall\n          on 2010-05-18 @ 22:04,Added these lines in the template method:,,,if,,not,,doctype,:,,return,,tmpl,.,generate,(,**,context,),.,render,(,serializer,),,,This solves an issue with the text method failing with a TypeError.,,,,Updated\n          by Dag Odenhall\n          on 2010-05-26 @ 14:38,Configurable types and defaults,New response method handles mimetype,Removed type-specific methods, use,response(type=x),if you need to override the default,,,,Mako and Breve\n          by Domingo Aguilera\n          on 2010-06-09 @ 02:33,It would be great if it would be possible to use Mako and Breve ( Nevow's Stan clon ) with Flask.,,,,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/19/", "content": "Using the markdown language | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Using the markdown language,,Posted by Stephane Wirtel\n    on 2010-05-25 @ 08:07\n    and filed in,Template Tricks,,The,Markdown language,is very useful if you don't know the html language\nIn this snippet, I want to show you how to include this language in your Flask App,,The markdown library,,easy_install markdown,,The code of your Flask application:,demo.py,,# We import the markdown library,,import,,markdown,,from,,flask,,import,,Flask,,from,,flask,,import,,render_template,,from,,flask,,import,,Markup,,app,,=,,Flask,(,__name__,),,@app.route,(,'/',),,def,,index,():,,content,,=,,\"\"\",,Chapter,,=======,,Section,,-------,,* Item 1,,* Item 2,,\"\"\",,content,,=,,Markup,(,markdown,.,markdown,(,content,)),,return,,render_template,(,'index.html',,,,**,locals,()),,app,.,run,(,debug,=,True,),,,The Jinja template file:,templates/index.html,,<,html,>,,<,head,>,,<,title,>,Markdown Snippet,</,title,>,,</,head,>,,<,body,>,,{{,,content,,}},,</,body,>,,</,html,>,,,This snippet by Stephane Wirtel can be used freely for\n    anything you like. Consider it public domain.,,,Comments,,,,Flask-Markdown\n          by Sean Lynch\n          on 2011-07-21 @ 02:12,There is also an extension [Flask-Markdown](,http://packages.python.org/Flask-Markdown/,) that adds some Jinja2 template filters and provides an easier way to write Markdown extensions.,,,,Oops\n          by Sean Lynch\n          on 2011-07-21 @ 02:14,I thought comments supported Markdown, guess I was wrong :),,,,Comment\n          by Sean Lynch\n          on 2011-07-21 @ 02:18,Just read on another snippet I should have used Creole, oops.,,,,Or as filter\n          by \u041e\u043b\u0435\u0433 \u0412\u0430\u0441\u0438\u043b\u044c\u0435\u0432\u0438\u0447\n          on 2012-11-07 @ 21:09,@app.template_filter('markdown')\ndef markdown_filter(data):\n\tfrom flask import Markup\n\tfrom markdown import markdown\n\treturn Markup(markdown(data)),,use in template: {{ comment.content|markdown }},,,,Flask-Misaka\n          by David Baumgold\n          on 2013-03-06 @ 05:34,You can also use the Flask-Misaka library to render Markdown:,https://flask-misaka.readthedocs.org,It's faster and better-integrated than the markdown library.,,,,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/55/", "content": "Using a second Jinja environment for LaTeX templates. | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Using a second Jinja environment for LaTeX templates.,,Posted by Clemens Kaposi\n    on 2011-07-12 @ 14:44\n    and filed in,Template Tricks,,If you use your Flask application to primarily generate (X)HTML content, but you also have views where you need to do some LaTeX, you will soon run into a problem: Jinja\u2019s default syntax doesn\u2019t really play well when creating LaTeX documents, as curly braces are an integral part of LaTeX\u2019s syntax as well.,,Of course, you could change Jinja\u2019s delimiters for this application.  You cannot do it for a single call to render_template() though, so this means you\u2019d have to change the markup in all (X)HTML templates as well.  As a consequence, this wouldn\u2019t exactly leverage the re-use of a template file in other project, e.g., one that contains only macros.,,A more viable solution is to create a second Jinja environment with a different set of delimiters.  (Hail to EftarjinK for proposing this solution on the Pocoo IRC channel!)  Bonus feature: you can also create a custom filter function that escapes LaTeX\u2019s reserved characters for you.,,app,,=,,Flask,(,__name__,),,LATEX_SUBS,,=,,(,,(,re,.,compile,(,r,',\\\\,',),,,r,',\\\\,textbackslash',),,,(,re,.,compile,(,r,'([{}_#%&$])',),,,r,',\\\\,\\1',),,,(,re,.,compile,(,r,'~',),,,r,'\\~{}',),,,(,re,.,compile,(,r,'\\^',),,,r,'\\^{}',),,,(,re,.,compile,(,r,'\"',),,,r,\"''\",),,,(,re,.,compile,(,r,'\\.\\.\\.+',),,,r,',\\\\,ldots',),,,),,def,,escape_tex,(,value,):,,newval,,=,,value,,for,,pattern,,,,replacement,,in,,LATEX_SUBS,:,,newval,,=,,pattern,.,sub,(,replacement,,,,newval,),,return,,newval,,texenv,,=,,app,.,create_jinja_environment,(),,texenv,.,block_start_string,,=,,'((*',,texenv,.,block_end_string,,=,,'*))',,texenv,.,variable_start_string,,=,,'(((',,texenv,.,variable_end_string,,=,,')))',,texenv,.,comment_start_string,,=,,'((=',,texenv,.,comment_end_string,,=,,'=))',,texenv,.,filters,[,'escape_tex',],,=,,escape_tex,,,Once setup, you can use the new environment to render your LaTeX templates.,,template,,=,,texenv,.,get_template,(,'template.tex',),,template,.,render,(,name,=,'Tom',),,,Your LaTeX template might look like this:,,\\documentclass,{,article,},,\\begin,{,document,},Hello, ((( name|escape,_,tex )))!,\\end,{,document,},,,This snippet by Clemens Kaposi can be used freely for\n    anything you like. Consider it public domain.,,,Comments,,,,Once again\n          by Simon Sapin\n          on 2011-07-13 @ 10:15,Once again, when trying to do something unusual, we discover that Armin had already thought of this particular use case and made a function/method doing precisely what we need, before we knew we needed it.,,,,Alternative solution\n          by Armin Ronacher\n          on 2011-07-13 @ 07:52,Alternatively you can use an overlay Jinja environment (,app.jinja_env.overlay(),).  It will create a Jinja2 environment that inherits all the settings from another one, which however also means that filters are shared.,,,,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/74/", "content": "Show correct Tracebacks for some Errors triggered inside a Template on GAE | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Show correct Tracebacks for some Errors triggered inside a Template on GAE,,Posted by Joshua Bronson\n    on 2011-09-26 @ 16:55\n    and filed in,Template Tricks,,This may only be an issue if you're using an environment like Google App Engine.,,If you've ever had an error triggered somewhere in a template and the traceback displayed in the browser did not point to the line causing the error (but instead to a line like,{% extends '_base.html' %},), this might cause a more helpful traceback to be displayed:,,def,,format_exception,(,tb,):,,return,,tb,.,render_as_text,(),,# undocumented feature,,app,.,jinja_env,.,exception_formatter,,=,,format_exception,,,Add this hack to get the browser to respect the plaintext whitespace:,,from,,flask,,import,,make_response,,def,,format_exception,(,tb,):,,res,,=,,make_response,(,tb,.,render_as_text,()),,res,.,content_type,,=,,'text/plain',,return,,res,,app,.,jinja_env,.,exception_formatter,,=,,format_exception,,,If jinja2.debugrenderer is implemented in the future,,tb.render_as_html,would be even better.,,This snippet by Joshua Bronson can be used freely for\n    anything you like. Consider it public domain.,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/33/", "content": "timesince filter | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,timesince filter,,Posted by Dan Jacob\n    on 2010-07-13 @ 10:45\n    and filed in,Template Tricks,,This is a filter that takes a datetime instance and returns a \"time since\" string. For example, \"3 minutes ago\" or \"4 weeks ago\":,,from,,datetime,,import,,datetime,,@app.template_filter,(),,def,,timesince,(,dt,,,,default,=,\"just now\",):,,\"\"\",,Returns string representing \"time since\" e.g.,,3 days ago, 5 hours ago etc.,,\"\"\",,now,,=,,datetime,.,utcnow,(),,diff,,=,,now,,-,,dt,,periods,,=,,(,,(,diff,.,days,,/,,365,,,,\"year\",,,,\"years\",),,,(,diff,.,days,,/,,30,,,,\"month\",,,,\"months\",),,,(,diff,.,days,,/,,7,,,,\"week\",,,,\"weeks\",),,,(,diff,.,days,,,,\"day\",,,,\"days\",),,,(,diff,.,seconds,,/,,3600,,,,\"hour\",,,,\"hours\",),,,(,diff,.,seconds,,/,,60,,,,\"minute\",,,,\"minutes\",),,,(,diff,.,seconds,,,,\"second\",,,,\"seconds\",),,,),,for,,period,,,,singular,,,,plural,,in,,periods,:,,if,,period,:,,return,,\",%d,,%s,ago\",,%,,(,period,,,,singular,,if,,period,,==,,1,,else,,plural,),,return,,default,,,Further enhancement would include localization support for the various strings and a \"timeuntil\" filter that returns e.g. \"3 minutes from now\".,,This snippet by Dan Jacob can be used freely for\n    anything you like. Consider it public domain.,,,Comments,,,,This should handle both past and present\n          by Sean Vieira\n          on 2010-07-19 @ 18:01,from datetime import datetime,,@app.template_filter()\ndef friendly_time(dt, past_=\"ago\", future_=\"from now\", default=\"just now\"):\n    \"\"\"\n    Returns string representing \"time since\"\n    or \"time until\" e.g.\n    3 days ago, 5 hours from now etc.\n    \"\"\",,now = datetime.utcnow()\n    if now > dt:\n        diff = now - dt\n        dt_is_past = True\n    else:\n        diff = dt - now\n        dt_is_past = False,,periods = (\n        (diff.days / 365, \"year\", \"years\"),\n        (diff.days / 30, \"month\", \"months\"),\n        (diff.days / 7, \"week\", \"weeks\"),\n        (diff.days, \"day\", \"days\"),\n        (diff.seconds / 3600, \"hour\", \"hours\"),\n        (diff.seconds / 60, \"minute\", \"minutes\"),\n        (diff.seconds, \"second\", \"seconds\"),\n    ),,for period, singular, plural in periods:,,if period:\n            return \"%d %s %s\" % (period, \\\n                singular if period == 1 else plural, \\\n                past_ if dt_is_past else future_),,return default,,,,Hopefully this preserves formating properly\n          by Sean Vieira\n          on 2010-07-19 @ 18:03,!python\nfrom datetime import datetime,,@app.template_filter()\ndef friendly_time(dt, past_=\"ago\", future_=\"from now\", default=\"just now\"):\n    \"\"\"\n    Returns string representing \"time since\"\n    or \"time until\" e.g.\n    3 days ago, 5 hours from now etc.\n    \"\"\",,now = datetime.utcnow()\n    if now > dt:\n        diff = now - dt\n        dt_is_past = True\n    else:\n        diff = dt - now\n        dt_is_past = False,,periods = (\n        (diff.days / 365, \"year\", \"years\"),\n        (diff.days / 30, \"month\", \"months\"),\n        (diff.days / 7, \"week\", \"weeks\"),\n        (diff.days, \"day\", \"days\"),\n        (diff.seconds / 3600, \"hour\", \"hours\"),\n        (diff.seconds / 60, \"minute\", \"minutes\"),\n        (diff.seconds, \"second\", \"seconds\"),\n    ),,for period, singular, plural in periods:,,if period:\n            return \"%d %s %s\" % (period, \\\n                singular if period == 1 else plural, \\\n                past_ if dt_is_past else future_),,return default,,,,Blast!\n          by Sean Vieira\n          on 2010-07-19 @ 18:04,Well, that's twice now -- if someone who knows could update the above to be properly formatted, that would be greatly appreciated!,,,,This should handle both past and present\n          by Sean Vieira\n          on 2010-07-19 @ 18:10,from,,datetime,,import,,datetime,,@app.template_filter,(),,def,,friendly_time,(,dt,,,,past_,=,\"ago\",,,,future_,=,\"from now\",,,,default,=,\"just now\",):,,\"\"\",,Returns string representing \"time since\",,or \"time until\" e.g.,,3 days ago, 5 hours from now etc.,,\"\"\",,now,,=,,datetime,.,utcnow,(),,if,,now,,>,,dt,:,,diff,,=,,now,,-,,dt,,dt_is_past,,=,,True,,else,:,,diff,,=,,dt,,-,,now,,dt_is_past,,=,,False,,periods,,=,,(,,(,diff,.,days,,/,,365,,,,\"year\",,,,\"years\",),,,(,diff,.,days,,/,,30,,,,\"month\",,,,\"months\",),,,(,diff,.,days,,/,,7,,,,\"week\",,,,\"weeks\",),,,(,diff,.,days,,,,\"day\",,,,\"days\",),,,(,diff,.,seconds,,/,,3600,,,,\"hour\",,,,\"hours\",),,,(,diff,.,seconds,,/,,60,,,,\"minute\",,,,\"minutes\",),,,(,diff,.,seconds,,,,\"second\",,,,\"seconds\",),,,),,for,,period,,,,singular,,,,plural,,in,,periods,:,,if,,period,:,,return,,\",%d,,%s,,%s,\",,%,,(,period,,,\\,singular,,if,,period,,==,,1,,else,,plural,,,\\,past_,,if,,dt_is_past,,else,,future_,),,return,,default,,,Apologies for the multiple submits above -- unfortunately the warning that comments should be formatted with Creole is only in the Create new snippets page, and I only saw it after I went digging.,,,,How would you apply this to template?\n          by Delilah\n          on 2012-02-14 @ 05:07,The template code would be helpful here as well.,,,,Humanize implementation\n          by Sergey Prokhorov\n          on 2013-05-17 @ 23:44,This can be acchieved using,humanize,library. Example:,,{{{ #!python\nimport humanize\nfrom flask.ext import  babel,,@app.template_filter()\ndef naturaltime(datetime):\n    locale = babel.get_locale()\n    locale_name = '_'.join([locale.language, locale.territory])\n    humanize.activate(locale_name)\n    return humanize.naturaltime(datetime)\n}}},,,,Humanize implementation\n          by Sergey Prokhorov\n          on 2013-05-17 @ 23:45,This can be acchieved using,humanize,library. Example:,,import,,humanize,,from,,flask.ext,,import,,babel,,@app.template_filter,(),,def,,naturaltime,(,datetime,):,,locale,,=,,babel,.,get_locale,(),,locale_name,,=,,'_',.,join,([,locale,.,language,,,,locale,.,territory,]),,humanize,.,activate,(,locale_name,),,return,,humanize,.,naturaltime,(,datetime,),,,,,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/41/", "content": "Override which templates are autoescaped | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Override which templates are autoescaped,,Posted by Dag Odenhall\n    on 2011-01-29 @ 00:28\n    and filed in,Template Tricks,,from,,flask,,import,,Flask,,class,,JHtmlEscapingFlask,(,Flask,):,,def,,select_jinja_autoescape,(,self,,,,filename,):,,if,,filename,.,endswith,(,'.jhtml',):,,return,,True,,return,,Flask,.,select_jinja_autoescape,(,self,,,,filename,),,app,,=,,JHtmlEscapingFlask,(,__name__,),,,This snippet by Dag Odenhall can be used freely for\n    anything you like. Consider it public domain.,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/29/", "content": "number_format filter | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,number_format filter,,Posted by Eunjin Lee\n    on 2010-06-26 @ 07:53\n    and filed in,Template Tricks,,This a thousand seperator filter as PHP number_format() function:,,@app.template_filter,(),,def,,number_format,(,value,,,,tsep,=,',',,,,dsep,=,'.',):,,s,,=,,unicode,(,value,),,cnt,,=,,0,,numchars,,=,,dsep,,+,,'0123456789',,ls,,=,,len,(,s,),,while,,cnt,,<,,ls,,and,,s,[,cnt,],,not,,in,,numchars,:,,cnt,,+=,,1,,lhs,,=,,s,[:,cnt,],,s,,=,,s,[,cnt,:],,if,,not,,dsep,:,,cnt,,=,,-,1,,else,:,,cnt,,=,,s,.,rfind,(,dsep,),,if,,cnt,,>,,0,:,,rhs,,=,,dsep,,+,,s,[,cnt,+,1,:],,s,,=,,s,[:,cnt,],,else,:,,rhs,,=,,'',,splt,,=,,'',,while,,s,,!=,,'',:,,splt,,=,,s,[,-,3,:],,+,,tsep,,+,,splt,,s,,=,,s,[:,-,3,],,return,,lhs,,+,,splt,[:,-,1,],,+,,rhs,,,Based on a snippet on activestate:,Thousands Separator,.  Original code by Michael Robellard.,,This snippet by Eunjin Lee can be used freely for\n    anything you like. Consider it public domain.,,,Comments,,,,alternative (python 2.7+)\n          by B S\n          on 2013-04-09 @ 22:21,An alternative for this in python 2.7+ that will work with a float `value` is:,,@app.template_filter\n    def number_format(value)\n        return '{:,.2f}'.format(value),,will turn 123456789.1234 into '123,456,789.12',,It is also possible to remove the `.2f` to work with integers... more info on `format()` here:,http://docs.python.org/2/library/string.html#formatspec,,,,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/72/", "content": "Validating a Flatland Schema | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Validating a Flatland Schema,,Posted by Dag Odenhall\n    on 2011-09-14 @ 17:25\n    and filed in,Forms,,Given this example Flatland schema,,,from,,flatland,,import,,Form,,,,String,,class,,SignInForm,(,Form,):,,username,,=,,String,,password,,=,,String,,,The correct way to create an element instance from a Flask request is as follows:,,if,,request,.,method,,in,,[,'POST',,,,'PUT',]:,,form,,=,,SignInForm,.,from_flat,(,request,.,form,.,items,(,multi,=,True,)),,,A little wordy, so you might want to write a little helper function:,,def,,form_from_request,(,schema,):,,return,,schema,.,from_flat,(,request,.,form,.,items,(,multi,=,True,)),,,Now you can simply do this in a view:,,if,,request,.,method,,in,,[,'POST',,,,'PUT',]:,,form,,=,,form_from_request,(,SignInForm,),,,An alternative could be to subclass Form and add a validate_on_submit method similar to what Flask-WTF does, so that you can refactor out the request.method check.,,This snippet by Dag Odenhall can be used freely for\n    anything you like. Consider it public domain.,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/28/", "content": "nl2br filter | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,nl2br filter,,Posted by Dan Jacob\n    on 2010-06-17 @ 05:03\n    and filed in,Template Tricks,,This is a nl2br (newline to <BR>) filter, adapted from the Jinja2 example here:,,http://jinja.pocoo.org/2/documentation/api#custom-filters,,import,,re,,from,,jinja2,,import,,evalcontextfilter,,,,Markup,,,,escape,,_paragraph_re,,=,,re,.,compile,(,r,'(?:\\r\\n|\\r|\\n){2,}',),,app,,=,,Flask,(,__name__,),,@app.template_filter,(),,@evalcontextfilter,,def,,nl2br,(,eval_ctx,,,,value,):,,result,,=,,u,',\\n\\n,',.,join,(,u,'<p>,%s,</p>',,%,,p,.,replace,(,',\\n,',,,,'<br>,\\n,',),\\,for,,p,,in,,_paragraph_re,.,split,(,escape,(,value,))),,if,,eval_ctx,.,autoescape,:,,result,,=,,Markup,(,result,),,return,,result,,,This snippet by Dan Jacob can be used freely for\n    anything you like. Consider it public domain.,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/107/", "content": "Render WTForm fields with html attributes that cause TemplateSyntaxErrors | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Render WTForm fields with html attributes that cause TemplateSyntaxErrors,,Posted by Josh Klein\n    on 2013-02-14 @ 19:07\n    and filed in,Forms,,Suppose you had a WTForm TextField that you wanted to use a javascript library like bootstrap-typeahead.js on. You might want the field to render as:,,<input type=\"text\" data-provide='typeahead', data-items='3', data-source='[\"x\",\"y\",\"z\"]'>,,After creating a WTForm in the view and passing it to your template, your first attempt would be to pass the additional keyword arguments:,,{{ form.myfield(name='test', data-provide='typeahead', data-data-items='3', data-source='[\"x\",\"y\",\"z\"]') }},,But this will lead to a TemplateSyntaxError because a dash is the subtraction operator in Python, and we can't escape the character in a keyword argument's key.,,Instead, pass the HTML attributes that contain invalid syntax as an ad-hoc dictionary:,,{{ form.myfield(name='test', **{'data-provide':'typeahead','data-items':'3','data-source': '[\"x\",\"y\",\"z\"]'}) }},,This snippet by Josh Klein can be used freely for\n    anything you like. Consider it public domain.,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/63/", "content": "Secure Back Redirects with WTForms | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Secure Back Redirects with WTForms,,Posted by Armin Ronacher\n    on 2011-07-28 @ 11:47\n    and filed in,Forms,,With Flask-WTF it's easy to build a base form that handles automatic redirects to the previous page for you.  This extends the,Secure back redirect snippet,for Flask-WTF.,,from,,urlparse,,import,,urlparse,,,,urljoin,,from,,flask,,import,,request,,,,url_for,,,,redirect,,from,,flaskext.wtf,,import,,Form,,,,TextField,,,,HiddenField,,def,,is_safe_url,(,target,):,,ref_url,,=,,urlparse,(,request,.,host_url,),,test_url,,=,,urlparse,(,urljoin,(,request,.,host_url,,,,target,)),,return,,test_url,.,scheme,,in,,(,'http',,,,'https',),,and,\\,ref_url,.,netloc,,==,,test_url,.,netloc,,def,,get_redirect_target,():,,for,,target,,in,,request,.,args,.,get,(,'next',),,,request,.,referrer,:,,if,,not,,target,:,,continue,,if,,is_safe_url,(,target,):,,return,,target,,class,,RedirectForm,(,Form,):,,next,,=,,HiddenField,(),,def,,__init__,(,self,,,,*,args,,,,**,kwargs,):,,Form,.,__init__,(,self,,,,*,args,,,,**,kwargs,),,if,,not,,self,.,next,.,data,:,,self,.,next,.,data,,=,,get_redirect_target,(),,or,,'',,def,,redirect,(,self,,,,endpoint,=,'index',,,,**,values,):,,if,,is_safe_url,(,self,.,next,.,data,):,,return,,redirect,(,self,.,next,.,data,),,target,,=,,get_redirect_target,(),,return,,redirect,(,target,,or,,url_for,(,endpoint,,,,**,values,)),,,Example form and view:,,class,,LoginForm,(,RedirectForm,):,,username,,=,,TextField,(,'Username',),,password,,=,,TextField,(,'Password',),,@app.route,(,'/login',,,,methods,=,[,'GET',,,,'POST',]),,def,,login,():,,form,,=,,LoginForm,(),,if,,form,.,validate_on_submit,():,,# do something with the form data here,,return,,form,.,redirect,(,'index',),,return,,render_template,(,'login.html',,,,form,=,form,),,,This snippet by Armin Ronacher can be used freely for\n    anything you like. Consider it public domain.,,,Comments,,,,Fallback to endpoint does not work\n          by John Cass\n          on 2016-11-20 @ 07:18,I noticed an error in the code above while preparing a few unit tests.,,The way the code is currently written, `self.next.data` will always be defined which means that `if is_safe_url(self.next.data)` will always evaluate to 'True'.,,This causes the fallback to the 'index' endpoint in `redirect()` to fail because the last two lines in that method are not reachable.,,,,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/135/", "content": "Flask-WTF multiple inheritance | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Flask-WTF multiple inheritance,,Posted by majorasflask\n    on 2016-07-20 @ 09:40\n    and filed in,Forms,,Ever wanted to reuse fields from multiple forms?,,class,,BaseForm,(,Form,):,,def,,__iter__,(,self,):,,token,,=,,self,.,csrf_token,,yield,,token,,field_names,,=,,{,token,.,name,},,for,,cls,,in,,self,.,__class__,.,__bases__,:,,for,,field,,in,,cls,():,,field_name,,=,,field,.,name,,if,,field_name,,not,,in,,field_names,:,,field_names,.,add,(,field_name,),,yield,,self,[,field_name,],,for,,field_name,,in,,self,.,_fields,:,,if,,field_name,,not,,in,,field_names,:,,yield,,self,[,field_name,],,,Usage:,,# forms.py,,class,,EmailForm,(,BaseForm,):,,email,,=,,EmailField,(,'Email',),,class,,PasswordForm,(,BaseForm,):,,password,,=,,PasswordField,(,'Password',),,class,,EmailPasswordForm,(,EmailForm,,,,PasswordForm,):,,pass,,class,,NamesForm,(,BaseForm,):,,first_name,,=,,StringField,(,'First name',),,last_name,,=,,StringField,(,'Last name',),,class,,ProfileForm,(,EmailPasswordForm,,,,NamesForm,):,,pass,,,{# form.html #},,{%,,for,,field,,in,,form,,%},,{{,,field.label,,}},,{{,,field,(),,}},,{%,,endfor,,%},,,This would render the,ProfileForm,fields in following order:,,email,,password,,first_name,,last_name,,,This snippet by majorasflask can be used freely for\n    anything you like. Consider it public domain.,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/64/", "content": "Complex Validation with Flask-WTF | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Complex Validation with Flask-WTF,,Posted by Armin Ronacher\n    on 2011-07-29 @ 09:08\n    and filed in,Forms,,Sometimes you are in the situation where you need to validate a form with custom logic that can not necessarily be reduced to a validator on a single field.  A good example are login forms where you have to make sure a user exists in the database and has a specific password.,,Thankfully Flask-WTF makes this very easy since you can hook into the whole validation process:,,from,,flask.wtf,,import,,Form,,,,TextField,,,,PasswordField,,,,validators,,from,,myapplication.models,,import,,User,,class,,LoginForm,(,Form,):,,username,,=,,TextField,(,'Username',,,,[,validators,.,Required,()]),,password,,=,,PasswordField,(,'Password',,,,[,validators,.,Required,()]),,def,,__init__,(,self,,,,*,args,,,,**,kwargs,):,,Form,.,__init__,(,self,,,,*,args,,,,**,kwargs,),,self,.,user,,=,,None,,def,,validate,(,self,):,,rv,,=,,Form,.,validate,(,self,),,if,,not,,rv,:,,return,,False,,user,,=,,User,.,query,.,filter_by,(,,username,=,self,.,username,.,data,),.,first,(),,if,,user,,is,,None,:,,self,.,username,.,errors,.,append,(,'Unknown username',),,return,,False,,if,,not,,user,.,check_password,(,self,.,password,.,data,):,,self,.,password,.,errors,.,append,(,'Invalid password',),,return,,False,,self,.,user,,=,,user,,return,,True,,,Here we pull the user from the database in the general validation step, validate username and password by hand and attach errors to the individual fields if something goes wrong.  We then also keep the user object around so that we can use it in a view:,,from,,flask,,import,,flash,,,,redirect,,,,url_for,,,,session,,,,render_template,,@app.route,(,'/login',,,,methods,=,[,'GET',,,,'POST',]),,def,,login,():,,form,,=,,LoginForm,(),,if,,form,.,validate_on_submit,():,,flash,(,u,'Successfully logged in as,%s,',,%,,form,.,user,.,username,),,session,[,'user_id',],,=,,form,.,user,.,id,,return,,redirect,(,url_for,(,'index',)),,return,,render_template,(,'login.html',,,,form,=,form,),,,Login forms are perfectly paired with the,secure redirect form,from the snippet database which redirects a user back to the page they came from.,,This snippet by Armin Ronacher can be used freely for\n    anything you like. Consider it public domain.,,,Comments,,,,Or you can validate like this\n          by K. El Kouhen\n          on 2013-02-12 @ 16:03,https://gist.github.com/mickey06/4770903,,,,Use StringField instead of TextField\n          by Brett Gerry\n          on 2015-01-13 @ 22:56,TextField has been deprecated in WTForms so StringField should be used instead.,,See,http://wtforms.readthedocs.org/en/latest/whats_new.html#deprecated-api-s,,,,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/60/", "content": "Automatically create a WTForms Form from model | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Automatically create a WTForms Form from model,,Posted by Sean Lynch\n    on 2011-07-21 @ 14:31\n    and filed in,Forms,,There are some helpful,extensions,for many popular model mappings (SQLAlchemy, App Engine, and Django) bundled with,WTForms,that allow you to easily create a,wtforms.form.Form,from a model.,,If using the,Flask-WTForms,extension, however, you'll want to make sure you pass the base_class as,flaskext.wtf.Form,from the Flask extension so the created form includes all the,API improvements,from the extension (ex.,form.validate_on_submit(),).,,from,,flaskext.wtf,,import,,Form,,from,,wtforms.ext.appengine.db,,import,,model_form,,from,,models,,import,,MyModel,,MyForm,,=,,model_form,(,MyModel,,,,Form,),,,Note: In this example I am using App Engine's models and thus using,model_form(),from,wtforms.ext.appengine.db,.  If using SQLAlchemy, you will want to use,model_form(),from,wtforms.ext.sqlalchemy.orm,.  This is currently not documented on WTForms extensions page, but you can see it's been available since 0.5 (,source,|,changelog,).,,Customize created form,,You will want to refer the WTForms extension,docs,for more details, but one nice item to mention is you can customize the created form at creation.  Here is an example of adding an extra validator to one of the fields,,from,,flaskext.wtf,,import,,Form,,from,,wtforms.ext.appengine.db,,import,,model_form,,from,,wtforms,,import,,validators,,from,,models,,import,,MyModel,,MyForm,,=,,model_form,(,MyModel,,,,Form,,,,field_args,,=,,{,,'name',,:,,{,,'validators',,:,,[,validators,.,Length,(,max,=,10,)],,},,}),,,Note:,model_form(),will add validators automatically to the created Form based on your model definitions, such as if a field is required.,,Usage example,,Here is a full example using a created form.,,from,,flaskext.wtf,,import,,Form,,from,,wtforms.ext.appengine.db,,import,,model_form,,from,,models,,import,,MyModel,,@app.route,(,\"/edit<id>\",),,def,,edit,(,id,):,,MyForm,,=,,model_form,(,MyModel,,,,Form,),,model,,=,,MyModel,.,get,(,id,),,form,,=,,MyForm,(,request,.,form,,,,model,),,if,,form,.,validate_on_submit,():,,form,.,populate_obj,(,model,),,model,.,put,(),,flash,(,\"MyModel updated\",),,return,,redirect,(,url_for,(,\"index\",)),,return,,render_template,(,\"edit.html\",,,,form,=,form,),,,This snippet by Sean Lynch can be used freely for\n    anything you like. Consider it public domain.,,,Comments,,,,Comment\n          by Sean Lynch\n          on 2012-06-14 @ 14:59,Sorry, just now seeing this (I don't receive email notifications on comments).  The example was using appengine, and properties() is a class method on the base Model.  Since you are using SqlAlchemy, were you sure to use `from wtforms.ext.sqlalchemy.orm import model_form` and not `from wtforms.ext.appengine.db import model_form`?  Just a guess without seeing the code.,,,,Typo on first line of usage example\n          by Matt Carrier\n          on 2013-02-27 @ 06:32,Hi I'm not sure if this is like a wiki anyone can edit? I think there is a typo on the first line of the example snippet.,,from flaskext.wtf import Form,,Should be:,,from flask.ext.wtf import Form,,,,Out of Date?\n          by Adrian Mouat\n          on 2013-04-19 @ 14:17,This snippet confused me for a while.,,Either it's out of date or I'm using slightly different libraries.,,In particular I had to change:,,if form.validate_on_submit():,,to,,if request.method == 'POST' and form.validate():,,and I had to remove the model.put() line (I replaced it with db.session.commit(), but I guess this might not be required in some set-ups).,,,,Ooops\n          by Adrian Mouat\n          on 2013-04-19 @ 14:38,It still seems slightly out-of-date, but the reason for validate_on_submit not being available was that the flask.ext.wtf version of Form wasn't be passed properly. Try changing:,,MyForm = model_form(MyModel, Form),,To:,,MyForm = model_form(MyModel, base_class=Form),,I think this was caused by arguments changing order between versions of wtforms.ext.sqlalchemy.orm.,,,,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/4/", "content": "Using Babel's LazyProxy with gettext | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Using Babel's LazyProxy with gettext,,Posted by Dan Jacob\n    on 2010-05-03 @ 16:14\n    and filed in,Internationalization,,Babel has a lazy proxy function under,babel.support,, that you can use when you need a lazy gettext string.,,For example if you are defining field labels in a WTForms class:,,from,,wtforms,,import,,Form,,,,fields,,from,,myapp.utils,,import,,ugettext_lazy,,as,,_,,class,,MyForm,(,Form,):,,name,,=,,fields,.,TextField,(,_,(,\"Name\",)),,,The string will be translated in the request thread rather than immediately, as in most cases you will want to provide the translation based on user settings (browser, session or database).,,from,,flask,,import,,g,,from,,babel.support,,import,,LazyProxy,,def,,ugettext,(,s,):,,# we assume a before_request function,,# assigns the correct user-specific,,# translations,,return,,g,.,translations,.,ugettext,(,s,),,ugettext_lazy,,=,,LazyProxy,(,ugettext,),,,This snippet by Dan Jacob can be used freely for\n    anything you like. Consider it public domain.,,,Comments,,,,Comment\n          by Armin Ronacher\n          on 2010-05-03 @ 16:30,Alternatively there is also,speaklater,which does not cache the value which makes it possible to switch the language at runtime.,,,,Speaklater implementation \n          by justquick\n          on 2010-05-07 @ 09:14,Here's how to do it in speaklater,,from,,flask,,import,,g,,from,,speaklater,,import,,make_lazy_gettext,,ugettext_lazy,,=,,make_lazy_gettext,(,lambda,:,,g,.,translations,.,get,),,,,,Comment\n          by Philippe Granger\n          on 2011-11-29 @ 20:39,For me this work but not original code::,,from,,babel.support,,import,,LazyProxy,,from,,flask,,import,,g,,def,,ugettext_lazy,(,s,):,,\"\"\"Like ugettext, but lazy\"\"\",,def,,get_translation,():,,return,,g,.,translations,.,ugettext,(,s,),,return,,LazyProxy,(,get_translation,),,,,,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/128/", "content": "Language Switcher via Cookie, Accept Headers | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Language Switcher via Cookie, Accept Headers,,Posted by Paul\n    on 2015-02-24 @ 15:05\n    and filed in,Internationalization,,A combination of Decorator, Context Processor and Post-Request Injection\nto handle switching languages by first looking at the Accept Language Header\nand subsequently giving the user control over the preset language,\nas mirrored by a cookie.,,def,,match_languages,(,f,):,,@wraps,(,f,),,def,,decorated,(,*,args,,,,**,kwargs,):,,'''Decorator to determine preferred language by Accept,,Language Header. Switching Languages is provided through,,an injected unordered list.,,''',,cookie,,=,,request,.,cookies,.,get,(,\"App-Language\",),,'''Ping flask for available languages''',,AVAILABLE_LOCALES,,=,,flask,.,g,.,i10n,.,get_available_locales,(),,if,,not,,cookie,,in,,AVAILABLE_LOCALES,:,,cookie,,=,,None,,if,,cookie,,is,,None,:,,UA_langs,,=,,request,.,headers,.,get,(,'Accept-Language',),.,split,(,\",\",),,matches,,=,,filter,(,lambda,,x,:,,x,.,split,(,\";\",)[,0,],,in,,AVAILABLE_LOCALES,,,,UA_langs,),,lang,,=,,matches,[,0,],,if,,matches,,else,,AVAILABLE_LOCALES,[,0,],,pass_language,(),,'''Set best match as global language''',,flask,.,g,.,lang,,=,,cookie,,if,,cookie,,else,,lang,,return,,f,(,*,args,,,,**,kwargs,),,return,,decorated,,,The Post-Request Cookie Setter,,def,,pass_language,():,,@after_this_request,,def,,set_lang_cookie,(,response,):,,response,.,set_cookie,(,'App-Language',,,,flask,.,g,.,lang,),,return,,response,,,Inject Language Dictionary into Template,,@app.context_processor,,def,,inject_lang_switcher,():,,'''Inject prefixes of available feed languages in unordered list,,Test root langs in Accept-Language Header,,against langs in aufschaltung''',,if,,request,.,is_xhr,,or,\\,not,,flask,.,g,.,i10n,.,has_langs,:,,return,,[],,AVAILABLE_LOCALES,,=,,flask,.,g,.,i10n,.,get_available_locales,(),,lang_prefixes,,=,,[,dict,(,prefix,,=,,l,.,split,(,\"-\",)[,0,],,,lang,,=,,l,,,,selected,,=,,l,,==,,flask,.,g,.,lang,),,for,,l,,in,,AVAILABLE_LOCALES,],,return,,dict,(,lang_switcher,,=,,lang_prefixes,),,,This snippet by Paul can be used freely for\n    anything you like. Consider it public domain.,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/116/", "content": "Realtime server using the SSE protocol | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Realtime server using the SSE protocol,,Posted by Oskar Blom\n    on 2013-08-01 @ 11:48\n    and filed in,JavaScript,,# author: oskar.blom@gmail.com,,#,,# Make sure your gevent version is >= 1.0,,import,,gevent,,from,,gevent.wsgi,,import,,WSGIServer,,from,,gevent.queue,,import,,Queue,,from,,flask,,import,,Flask,,,,Response,,import,,time,,# SSE \"protocol\" is described here: http://mzl.la/UPFyxY,,class,,ServerSentEvent,(,object,):,,def,,__init__,(,self,,,,data,):,,self,.,data,,=,,data,,self,.,event,,=,,None,,self,.,id,,=,,None,,self,.,desc_map,,=,,{,,self,.,data,,:,,\"data\",,,,self,.,event,,:,,\"event\",,,,self,.,id,,:,,\"id\",,},,def,,encode,(,self,):,,if,,not,,self,.,data,:,,return,,\"\",,lines,,=,,[,\",%s,:,%s,\",,%,,(,v,,,,k,),,for,,k,,,,v,,in,,self,.,desc_map,.,iteritems,(),,if,,k,],,return,,\",%s,\\n\\n,\",,%,,\",\\n,\",.,join,(,lines,),,app,,=,,Flask,(,__name__,),,subscriptions,,=,,[],,# Client code consumes like this.,,@app.route,(,\"/\",),,def,,index,():,,debug_template,,=,,\"\"\",,<html>,,<head>,,</head>,,<body>,,<h1>Server sent events</h1>,,<div id=\"event\"></div>,,<script type=\"text/javascript\">,,var eventOutputContainer = document.getElementById(\"event\");,,var evtSrc = new EventSource(\"/subscribe\");,,evtSrc.onmessage = function(e) {,,console.log(e.data);,,eventOutputContainer.innerHTML = e.data;,,};,,</script>,,</body>,,</html>,,\"\"\",,return,(,debug_template,),,@app.route,(,\"/debug\",),,def,,debug,():,,return,,\"Currently,%d,subscriptions\",,%,,len,(,subscriptions,),,@app.route,(,\"/publish\",),,def,,publish,():,,#Dummy data - pick up from request for real data,,def,,notify,():,,msg,,=,,str,(,time,.,time,()),,for,,sub,,in,,subscriptions,[:]:,,sub,.,put,(,msg,),,gevent,.,spawn,(,notify,),,return,,\"OK\",,@app.route,(,\"/subscribe\",),,def,,subscribe,():,,def,,gen,():,,q,,=,,Queue,(),,subscriptions,.,append,(,q,),,try,:,,while,,True,:,,result,,=,,q,.,get,(),,ev,,=,,ServerSentEvent,(,str,(,result,)),,yield,,ev,.,encode,(),,except,,GeneratorExit,:,,# Or maybe use flask signals,,subscriptions,.,remove,(,q,),,return,,Response,(,gen,(),,,mimetype,=,\"text/event-stream\",),,if,,__name__,,==,,\"__main__\",:,,app,.,debug,,=,,True,,server,,=,,WSGIServer,((,\"\",,,,5000,),,,app,),,server,.,serve_forever,(),,# Then visit http://localhost:5000 to subscribe,,# and send messages by visiting http://localhost:5000/publish,,,This snippet by Oskar Blom can be used freely for\n    anything you like. Consider it public domain.,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/49/", "content": "A Filter for the jQuery Timeago Plugin | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,A Filter for the jQuery Timeago Plugin,,Posted by Armin Ronacher\n    on 2011-06-18 @ 01:33\n    and filed in,JavaScript,,Timeago,is a jQuery plugin that makes it easy to support automatically updating fuzzy timestamps (e.g. \u201c4 minutes ago\u201d or \u201cabout 1 day ago\u201d).  It automatically keeps them updated and only needs a very basic,span,tag or something similar with a certain class and title attribute.,,For instance,,<,span,,class,=,timeago,,title,=,\"2008-07-17T09:24:17Z\",>,...,</,span,>,,,turns into something like this:,,<,span,,class,=,timeago,,title,=,\"July 17, 2008\",>,2 years ago,</,span,>,,,Because generating the HTML can be quite annoying to do by hand, here is a simple filter that does that for you:,,@app.template_filter,(),,def,,datetimeformat,(,datetime,,,,timeago,=,True,):,,readable,,=,,datetime,.,strftime,(,'%Y-%m-,%d,@ %H:%M',),,if,,not,,timeago,:,,return,,readable,,iso_format,,=,,datetime,.,strftime,(,'%Y-%m-,%d,T%H:%M:%SZ',),,return,,'<span class=timeago title=\",%s,\">,%s,</span>',,%,,(,,iso_format,,,,readable,,),,,And here is how you use it:,,<,p,,class,=,date,>,Date:,{{,,the_date,|,datetimeformat,,}},,,Don't forget to include the Timeago plugin and to initialize it:,,$,(,function,(),,{,,$,(,'span.timeago',).,timeago,();,,});,,,This snippet by Armin Ronacher can be used freely for\n    anything you like. Consider it public domain.,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/80/", "content": "Push Notifications with socket.io and Juggernaut | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Push Notifications with socket.io and Juggernaut,,Posted by Armin Ronacher\n    on 2011-12-06 @ 04:07\n    and filed in,JavaScript,,Talking from the client to the server is easy.  Just use,XMLHttpRequest,to send an HTTP request to the server and you're done.  But what about talking from the server to the client in realtime?,,Turns out WSGI and traditional frameworks are not exactly suited for that.  However they don't have to since you can keep the web socket connection around somewhere else.,,This is how,Juggernaut,works.  It's a server written with node that uses redis to communicate with your server side application and websockets, long polling or flash to talk to the client.,,So how does it work?  First of all you need to have Juggernaut installed and running (also make sure to have redis running):,,$ npm install -g juggernaut\n$ juggernaut,,For talking to juggernaut from Python you can use redis directly or the,juggernaut,client library:,,pip install juggernaut,,At that point you can use juggernaut to talk to your clients.  On the client side you need to include the juggernaut driver script and subscribe to a channel:,,<,script,,type,=,text/javascript,,src,=,http://localhost:8080/application.js,></,script,>,,<,script,,type,=,text/javascript,>,,var,,jug,,=,,new,,Juggernaut,();,,jug,.,subscribe,(,'channel',,,,function,(,data,),,{,,alert,(,'Got message: ',,+,,data,);,,});,,</,script,>,,,In this case Juggernaut is running on,localhost:8080,.  It makes sense to make this configurable.,,To send a message now with Python you can do it like this:,,>>>,from,,juggernaut,,import,,Juggernaut,,>>>,jug,,=,,Juggernaut,(),,>>>,jug,.,publish,(,'channel',,,,'The message',),,,If redis is running somewhere else you will need to pass a redis instance to,Juggernaut,and the,juggernaut,daemon.,,For a full fledged example see,Flask-Pastebin,.,,This snippet by Armin Ronacher can be used freely for\n    anything you like. Consider it public domain.,,,Comments,,,,Comment\n          by Gilles Passe\n          on 2013-11-18 @ 08:41,Juggernaut is deprecated,http://blog.alexmaccaw.com/killing-a-library,use HTML5 Server-Sent Events (SSEs) instead,,,,Finished\n          by Gilles Passe\n          on 2013-11-18 @ 08:41,Juggernaut is deprecated,http://blog.alexmaccaw.com/killing-a-library,use HTML5 Server-Sent Events (SSEs) instead,,,,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/87/", "content": "Cache implementation using SQLite | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Cache implementation using SQLite,,Posted by Thiago Arruda\n    on 2012-02-10 @ 12:51\n    and filed in,Performance,,Simple but powerful implementation of a web application cache based on sqlite. \nThis cache can\nexist on a directory exported by NFS, which allows sharing the cache between multiple servers. \nIt should support an average level of concurrency, since it stores values into separate files which are named after the key's hash(Similar to a hashtable).,,import,,os,,,,errno,,,,sqlite3,,from,,time,,import,,sleep,,,,time,,from,,cPickle,,import,,loads,,,,dumps,,try,:,,from,,thread,,import,,get_ident,,except,,ImportError,:,,from,,dummy_thread,,import,,get_ident,,from,,werkzeug.contrib.cache,,import,,BaseCache,,class,,SqliteCache,(,BaseCache,):,,_create_sql,,=,,(,,'CREATE TABLE IF NOT EXISTS bucket ',,'(',,'  key TEXT PRIMARY KEY,',,'  val BLOB,',,'  exp FLOAT',,')',,),,_get_sql,,=,,'SELECT val, exp FROM bucket WHERE key = ?',,_del_sql,,=,,'DELETE FROM bucket WHERE key = ?',,_set_sql,,=,,'REPLACE INTO bucket (key, val, exp) VALUES (?, ?, ?)',,_add_sql,,=,,'INSERT INTO bucket (key, val, exp) VALUES (?, ?, ?)',,def,,__init__,(,self,,,,path,,,,default_timeout,=,300,):,,self,.,path,,=,,os,.,path,.,abspath,(,path,),,try,:,,os,.,mkdir,(,self,.,path,),,except,,OSError,,,,e,:,,if,,e,.,errno,,!=,,errno,.,EEXIST,,or,,not,,os,.,path,.,isdir,(,self,.,path,):,,raise,,self,.,default_timeout,,=,,default_timeout,,self,.,connection_cache,,=,,{},,def,,_get_conn,(,self,,,,key,):,,key,,=,,dumps,(,key,,,,0,),,t_id,,=,,get_ident,(),,if,,t_id,,not,,in,,self,.,connection_cache,:,,self,.,connection_cache,[,t_id,],,=,,{},,if,,key,,not,,in,,self,.,connection_cache,[,t_id,]:,,bucket_name,,=,,str,(,hash,(,key,)),,bucket_path,,=,,os,.,path,.,join,(,self,.,path,,,,bucket_name,),,conn,,=,,sqlite3,.,Connection,(,bucket_path,,,,timeout,=,60,),,with,,conn,:,,conn,.,execute,(,self,.,_create_sql,),,self,.,connection_cache,[,t_id,][,key,],,=,,conn,,return,,self,.,connection_cache,[,t_id,][,key,],,def,,get,(,self,,,,key,):,,rv,,=,,None,,with,,self,.,_get_conn,(,key,),,as,,conn,:,,for,,row,,in,,conn,.,execute,(,self,.,_get_sql,,,,(,key,,)):,,expire,,=,,row,[,1,],,if,,expire,,>,,time,():,,rv,,=,,loads,(,str,(,row,[,0,])),,break,,return,,rv,,def,,delete,(,self,,,,key,):,,with,,self,.,_get_conn,(,key,),,as,,conn,:,,conn,.,execute,(,self,.,_del_sql,,,,(,key,,)),,def,,set,(,self,,,,key,,,,value,,,,timeout,=,None,):,,if,,not,,timeout,:,,timeout,,=,,self,.,default_timeout,,value,,=,,buffer,(,dumps,(,value,,,,2,)),,expire,,=,,time,(),,+,,timeout,,with,,self,.,_get_conn,(,key,),,as,,conn,:,,conn,.,execute,(,self,.,_set_sql,,,,(,key,,,,value,,,,expire,)),,def,,add,(,self,,,,key,,,,value,,,,timeout,=,None,):,,if,,not,,timeout,:,,timeout,,=,,self,.,default_timeout,,expire,,=,,time,(),,+,,timeout,,value,,=,,buffer,(,dumps,(,value,,,,2,)),,with,,self,.,_get_conn,(,key,),,as,,conn,:,,try,:,,conn,.,execute,(,self,.,_add_sql,,,,(,key,,,,value,,,,expire,)),,except,,sqlite3,.,IntegrityError,:,,pass,,def,,clear,(,self,):,,for,,bucket,,in,,os,.,listdir,(,self,.,path,):,,os,.,unlink,(,os,.,path,.,join,(,self,.,path,,,,bucket,)),,,Here's a simple comparison of running it in shared memory against redis running on localhost (run from an ubuntu vm in a core i7),,# Setting some key,$ python -mtimeit -s,'from sqlite_cache import SqliteCache;c = SqliteCache(\"/run/shm/cache\")',,'c.set(\"somekey\", \"somevalue\")',,1000,loops, best of,3,:,414,usec per loop\n$ python -mtimeit -s,'from redis import Redis; c = Redis()',,'c.set(\"somekey\", \"stubvalue\")',,1000,loops, best of,3,:,228,usec per loop,# Now for retrieving it,$ python -mtimeit -s,'from sqlite_cache import SqliteCache;c = SqliteCache(\"/run/shm/cache\")',,'c.get(\"somekey\")',,10000,loops, best of,3,:,152,usec per loop\n$ python -mtimeit -s,'from redis import Redis;c = Redis()',,'c.get(\"somekey\")',,1000,loops, best of,3,:,215,usec per loop,,Besides the good speed, this doesn't require a server process managing the cache, which means\nno setup besides choosing a directory for the cache.,,This snippet by Thiago Arruda can be used freely for\n    anything you like. Consider it public domain.,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/9/", "content": "Adding caching to Flask apps | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Adding caching to Flask apps,,Posted by Dan Jacob\n    on 2010-05-05 @ 10:26\n    and filed in,Performance,,Werkzeug includes a number of caching options in the werkzeug.contrib.cache\npackage:,werkzeug.contrib.cache,,However the API just handles low-level caching - this is handy for caching\nindividual objects (such as the results of a database query) but not if\nyou want to cache an entire view, or even a whole site.,,For a per-view cache we can use a decorator:,,from,,werkzeug.contrib.cache,,import,,SimpleCache,,CACHE_TIMEOUT,,=,,300,,cache,,=,,SimpleCache,(),,class,,cached,(,object,):,,def,,__init__,(,self,,,,timeout,=,None,):,,self,.,timeout,,=,,timeout,,or,,CACHE_TIMEOUT,,def,,__call__,(,self,,,,f,):,,def,,decorator,(,*,args,,,,**,kwargs,):,,response,,=,,cache,.,get,(,request,.,path,),,if,,response,,is,,None,:,,response,,=,,f,(,*,args,,,,**,kwargs,),,cache,.,set,(,request,.,path,,,,response,,,,self,.,timeout,),,return,,response,,return,,decorator,,@app.route,(,\"/\",),,@cached,(),,def,,index,():,,return,,render_template,(,\"index.html\",),,,This example uses SimpleCache, for production you probably want to use memcached.,,To cache your whole application, you can use before_request and after_request:,,@app.before_request,,def,,return_cached,():,,# if GET and POST not empty,,if,,not,,request,.,values,:,,response,,=,,cache,.,get,(,request,.,path,),,if,,response,:,,return,,response,,@app.after_request,,def,,cache_response,(,response,):,,if,,not,,request,.,values,:,,cache,.,set,(,request,.,path,,,,response,,,,CACHE_TIMEOUT,),,return,,response,,,We ignore the cache if the GET or POST are not empty.,,You might want to modify these functions further; for example, you might want\nto ignore the cache in certain views by setting an \"ignore_cache\" flag in the\nrequest or g objects, or if the user is authenticated.,,For template-level caching in Jinja2, see this example:,Cache Example Extension,,This snippet by Dan Jacob can be used freely for\n    anything you like. Consider it public domain.,,,Comments,,,,Duplicate from Docs\n          by Armin Ronacher\n          on 2010-05-05 @ 15:03,The documentation also contain a very similar decorator:,http://flask.pocoo.org/docs/patterns/caching/,,In this example however one should use,functools.wraps,or,functools.update_wrapper,to set,__name__,and other special attributes of a function when decorating.,,,,Caching example URL\n          by Dan Jacob\n          on 2010-05-05 @ 15:37,I think the correct URL is,http://flask.pocoo.org/docs/patterns/viewdecorators/,which includes both a caching example and use of @wraps.,,,,Comment\n          by Armin Ronacher\n          on 2010-05-05 @ 15:42,Yes indeed, linked to the wrong page :(,,,,Extension\n          by Sean Lynch\n          on 2011-07-21 @ 13:08,Also worth pointing out there is also the,Flask-Cache extension,,,,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/98/", "content": "Simple Authorization | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Simple Authorization,,Posted by Alex Abbott\n    on 2012-08-20 @ 23:40\n    and filed in,Decorators,,Before you use this snippet, I urge you to look at using,Flask-Principal,. It is a great piece of software, and is probably more secure than this, and definitely better maintained. However, I found that it was too much for my needs, and so I created this snippet.,,Snippet,,This snippet is pretty simple. You just need to replace get_current_user_role() with however you get the user's current role and error_response() with however you want to notify the user that they are not logged in. After you do that, you should be good to go.,,from,,functools,,import,,wraps,,def,,requires_roles,(,*,roles,):,,def,,wrapper,(,f,):,,@wraps,(,f,),,def,,wrapped,(,*,args,,,,**,kwargs,):,,if,,get_current_user_role,(),,not,,in,,roles,:,,return,,error_response,(),,return,,f,(,*,args,,,,**,kwargs,),,return,,wrapped,,return,,wrapper,,,Usage,,Usage is equally as simple as the snippet itself. This is just a decorator that you pass the required roles into. The required roles can be any type of object, not just strings. Do note that if you use a login extension such as Flask-Login, you should call it after the login_required (or equivalent) decorator.,,@app.route,(,'/user',),,@requires_roles,(,'admin',,,,'user',),,def,,user_page,():,,return,,\"You've got permission to access this page.\",,,This snippet by Alex Abbott can be used freely for\n    anything you like. Consider it public domain.,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/125/", "content": "Verify a Google authentication token | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Verify a Google authentication token,,Posted by SpaceCowboy\n    on 2014-10-05 @ 21:35\n    and filed in,Decorators,,For my simple REST API, I needed to verify bearer tokens to get the email of the user. The token is retrieved by the client via an Android app, so I didn't need any of the login features offered in other solutions.,,A requirement is 'httplib2', so do:,,pip install httplib2,,Then the code is very simple:,,# put this in for example gauth.py,,def,,validate_token,(,access_token,):,,'''Verifies that an access-token is valid and,,meant for this app.,,Returns None on fail, and an e-mail on success''',,h,,=,,Http,(),,resp,,,,cont,,=,,h,.,request,(,\"https://www.googleapis.com/oauth2/v2/userinfo\",,,,headers,=,{,'Host',:,,'www.googleapis.com',,,,'Authorization',:,,access_token,}),,if,,not,,resp,[,'status',],,==,,'200',:,,return,,None,,try,:,,data,,=,,json,.,loads,(,cont,),,except,,TypeError,:,,# Running this in Python3,,# httplib2 returns byte objects,,data,,=,,json,.,loads,(,cont,.,decode,()),,return,,data,[,'email',],,def,,authorized,(,fn,):,,\"\"\"Decorator that checks that requests,,contain an id-token in the request header.,,userid will be None if the,,authentication failed, and have an id otherwise.,,Usage:,,@app.route(\"/\"),,@authorized,,def secured_root(userid=None):,,pass,,\"\"\",,def,,_wrap,(,*,args,,,,**,kwargs,):,,if,,'Authorization',,not,,in,,request,.,headers,:,,# Unauthorized,,print,(,\"No token in header\",),,abort,(,401,),,return,,None,,print,(,\"Checking token...\",),,userid,,=,,validate_token,(,request,.,headers,[,'Authorization',]),,if,,userid,,is,,None,:,,print,(,\"Check returned FAIL!\",),,# Unauthorized,,abort,(,401,),,return,,None,,return,,fn,(,userid,=,userid,,,,*,args,,,,**,kwargs,),,return,,_wrap,,,An example would be:,,from,,gauth,,import,,authorized,,@app.route,(,'/',),,@authorized,,def,,root,(,self,,,,userid,):,,return,,\"Hello {}\",.,format,(,userid,),,,Any route decorated with @authorized has to have the keyword argument 'userid'.,,This snippet by SpaceCowboy can be used freely for\n    anything you like. Consider it public domain.,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/18/", "content": "View Rendering Decorator | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,View Rendering Decorator,,Posted by Peter Ward\n    on 2010-05-22 @ 06:03\n    and filed in,Decorators,,If you are planning on providing your views in multiple formats (e.g.: templated html, json, xml, whatever), you may like to return a dict from your views, and use a function to render the response.\nThis snippet makes it easy to do that.,,Usage:,,from,,helpers,,import,,view,,,,render_html,,,,render_json,,@view,(,app,,,,'/<name>',,,,render_html,(,'page.html',)),,@view,(,app,,,,'/api/page/<name>',,,,render_json,),,def,,show_page,(,name,):,,page,,=,,load_page,(,name,),,return,,dict,(,title,=,page,.,title,,,,contents,=,page,.,contents,),,,The decorator to put in helpers.py is:,,from,,myapp,,import,,app,,from,,werkzeug,,import,,BaseResponse,,def,,render_html,(,template,,,,**,defaults,):,,def,,wrapped,(,result,):,,variables,,=,,defaults,.,copy,(),,variables,.,update,(,result,),,return,,render_template,(,template,,,,**,variables,),,return,,wrapped,,def,,view,(,self,,,,url,,,,renderer,=,None,,,,*,args,,,,**,kwargs,):,,super_route,,=,,self,.,route,,defaults,,=,,kwargs,.,pop,(,'defaults',,,,{}),,route_id,,=,,object,(),,defaults,[,'_route_id',],,=,,route_id,,def,,deco,(,f,):,,@super_route,(,url,,,,defaults,=,defaults,,,,*,args,,,,**,kwargs,),,@wraps,(,f,),,def,,decorated_function,(,*,args,,,,**,kwargs,):,,this_route,,=,,kwargs,.,get,(,'_route_id',),,if,,not,,getattr,(,f,,,,'is_route',,,,False,):,,del,,kwargs,[,'_route_id',],,result,,=,,f,(,*,args,,,,**,kwargs,),,if,,this_route,,is,,not,,route_id,:,,return,,result,,# catch redirects.,,if,,isinstance,(,result,,,,(,app,.,response_class,,,,BaseResponse,)):,,return,,result,,if,,renderer,,is,,None,:,,return,,result,,return,,renderer,(,result,),,decorated_function,.,is_route,,=,,True,,return,,decorated_function,,return,,deco,,,Other rendering functions (render_json, render_xml, etc.) are left as an exercise for the reader. ;),,This snippet by Peter Ward can be used freely for\n    anything you like. Consider it public domain.,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/129/", "content": "Routing via decorators with Flask-RESTful | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Routing via decorators with Flask-RESTful,,Posted by Gil Shotan\n    on 2015-02-24 @ 17:56\n    and filed in,Decorators,,from,,flask,,import,,Flask,,from,,flask.ext,,import,,restful,,import,,types,,app,,=,,Flask,(,__name__,),,api,,=,,restful,.,Api,(,app,),,def,,api_route,(,self,,,,*,args,,,,**,kwargs,):,,def,,wrapper,(,cls,):,,self,.,add_resource,(,cls,,,,*,args,,,,**,kwargs,),,return,,cls,,return,,wrapper,,api,.,route,,=,,types,.,MethodType,(,api_route,,,,api,),,,Now you can use the api object for routing just like you use the regular flask object,,from,,flask.ext,,import,,restful,,from,,yourapplication,,import,,api,,@api.route,(,'/users/{username}',),,class,,User,(,restful,.,Resource,):,,def,,get,(,self,,,,username,):,,return,,{,'username',:,,username,},,,This snippet by Gil Shotan can be used freely for\n    anything you like. Consider it public domain.,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/120/", "content": "Selectively Redirect Back | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Selectively Redirect Back,,Posted by Danya Alexeyevsky\n    on 2014-01-07 @ 16:17\n    and filed in,Security,,It is usually a good idea to redirect the user back to the page they\nwere viewing after they've logged in or edited their profile.,,This is frequently done by either passing a,next,parameter in a form\nor by looking at the referer in HTTP headers. Both of these approaches\ncause either major headache or failure to redirect properly in case of\nmultistep login process or static-HTML form validation. Both of them\nalso require you to validate if the specified referer or form argument\nactually belongs to your site.,,If none of this scares you, there exists a wonderful snippet,Securely Redirect Back,by Armin Ronacher for such validation.,,However, quite often it's much easier and safer to white-list the\nlocations that we wish to allow our app to automatically return to, and store the last\nwhite-listed location in a signed cookie. Fortunately,,flask,already\ndoes the cookie signing for us, so the rest is very straightforward.,,# This snippet is in public domain.,,# However, please retain this link in your sources:,,# http://flask.pocoo.org/snippets/120/,,# Danya Alexeyevsky,,from,,flask,,import,,session,,,,redirect,,,,current_app,,class,,back,(,object,):,,\"\"\"To be used in views.,,Use `anchor` decorator to mark a view as a possible point of return.,,`url()` is the last saved url.,,Use `redirect` to return to the last return point visited.,,\"\"\",,cfg,,=,,current_app,.,config,.,get,,cookie,,=,,cfg,(,'REDIRECT_BACK_COOKIE',,,,'back',),,default_view,,=,,cfg,(,'REDIRECT_BACK_DEFAULT',,,,'index',),,@staticmethod,,def,,anchor,(,func,,,,cookie,=,cookie,):,,@functools.wraps,(,func,),,def,,result,(,*,args,,,,**,kwargs,):,,session,[,cookie,],,=,,request,.,url,,return,,func,(,*,args,,,,**,kwargs,),,return,,result,,@staticmethod,,def,,url,(,default,=,default_view,,,,cookie,=,cookie,):,,return,,session,.,get,(,cookie,,,,url_for,(,default,)),,@staticmethod,,def,,redirect,(,default,=,default_view,,,,cookie,=,cookie,):,,return,,redirect,(,back,.,url,(,default,,,,cookie,)),,back,,=,,back,(),,,Please note, this code looks like class, but actually it's just namespace, like module. In fact, you can just put it into module,back.py,, unindent the code, remove,class,,,staticmethod,'s and the last\nline, and it works the same way! (Also, you can cut the snippet down to 8 lines of code, and it still does the same job).,,To use it, we decorate our important views with,back.anchor,:,,@app.route,(,\"/\",),,@back.anchor,,def,,index,():,,...,,@app.route,(,\"/view/<int:entrynum>\",),,@back.anchor,,def,,view,(,entrynum,):,,...,,,It is very important that the,back.anchor,decorators come,after,all the,app.route,decorators, since otherwise the latter,app.route,s will bypass the anchor code.,,And then within the views that we want to return from we call,back.redirect(),:,,@app.route,(,\"/login\",),,def,,login_stage1,():,,...,,# stuff that sends us to login_stage2, e.g. OpenID,,@app.route,(,\"/validate\",),,def,,login_stage2,():,,...,,if,,everything,,is,,ok,:,,return,,back,.,redirect,(),,abort,(,401,),,,You can create templates with the link back:,,{%,,extends,,\"base.html\",,%},,{%,,block,,body,,%},,<,h1,>,Error!,</,h1,>,...,<,a,,href,=,\",{{,,back.url,(),,}},\",>,Back,</,a,>,,{%,,endblock,,%},,,Or else it makes it very easy to convert error pages into flash messages:,,@app.errorhandler,(,404,),,def,,not_found,():,,flash,(,\"Sorry, the requested page is not found\",,,,\"error\",),,return,,back,.,redirect,(),,,Of course, in this case you have to add flash messages support to your\ntemplates too.,,The snippet is configured with two configuration options:,,REDIRECT_BACK_COOKIE,is the name of the cookie in which the last location is stored,REDIRECT_BACK_DEFAULT,is the name of the default view if there is no cookie,,This snippet by Danya Alexeyevsky can be used freely for\n    anything you like. Consider it public domain.,,,Comments,,,,Build Error\n          by Michael Patini\n          on 2014-03-10 @ 22:10,Hi,\nWhy might I be getting the following error:,,BuildError: ('index', {}, None),,I added the code exactly as is, except I put in the back() class:\ncfg = app.config.get.\nThanks,\nMichael,,,,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/93/", "content": "SSL for particular views | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,SSL for particular views,,Posted by Dmitry Chaplinsky\n    on 2012-05-18 @ 21:30\n    and filed in,Decorators,,Sometime you want to enable https only for some of ulrs on your website. For example, login, registration, checkout etc.,,In this case you can use decorator like this:,,from,,functools,,import,,wraps,,from,,flask,,import,,request,,,,redirect,,,,current_app,,def,,ssl_required,(,fn,):,,@wraps,(,fn,),,def,,decorated_view,(,*,args,,,,**,kwargs,):,,if,,current_app,.,config,.,get,(,\"SSL\",):,,if,,request,.,is_secure,:,,return,,fn,(,*,args,,,,**,kwargs,),,else,:,,return,,redirect,(,request,.,url,.,replace,(,\"http://\",,,,\"https://\",)),,return,,fn,(,*,args,,,,**,kwargs,),,return,,decorated_view,,,This snippet by Dmitry Chaplinsky can be used freely for\n    anything you like. Consider it public domain.,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/70/", "content": "Rate Limiting Decorator with Redis | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Rate Limiting Decorator with Redis,,Posted by Armin Ronacher\n    on 2011-09-09 @ 23:43\n    and filed in,Decorators,,Sometimes you want to rate limit a view (for example an API).  This is very simple to do with redis and a simple decorator.  The idea is that we limit a view for a certain period of time and increment a counter in redis.  The key for this counter shall be the current IP (or userid) plus the current endpoint plus the time when the rate limit resets.,,Connecting to Redis,,In case you don't have a connection to redis yet, open with with those two simple lines:,,from,,redis,,import,,Redis,,redis,,=,,Redis,(),,,A redis instance is thread safe so you can just keep this on the global level and use it directly.  If you want to connect to a different redis instance just pass the address to the constructor.  More in the pyredis docs.,,Rate Limit Code,,The actual rate limiting looks like this:,,import,,time,,from,,functools,,import,,update_wrapper,,from,,flask,,import,,request,,,,g,,class,,RateLimit,(,object,):,,expiration_window,,=,,10,,def,,__init__,(,self,,,,key_prefix,,,,limit,,,,per,,,,send_x_headers,):,,self,.,reset,,=,,(,int,(,time,.,time,()),,//,,per,),,*,,per,,+,,per,,self,.,key,,=,,key_prefix,,+,,str,(,self,.,reset,),,self,.,limit,,=,,limit,,self,.,per,,=,,per,,self,.,send_x_headers,,=,,send_x_headers,,p,,=,,redis,.,pipeline,(),,p,.,incr,(,self,.,key,),,p,.,expireat,(,self,.,key,,,,self,.,reset,,+,,self,.,expiration_window,),,self,.,current,,=,,min,(,p,.,execute,()[,0,],,,limit,),,remaining,,=,,property,(,lambda,,x,:,,x,.,limit,,-,,x,.,current,),,over_limit,,=,,property,(,lambda,,x,:,,x,.,current,,>=,,x,.,limit,),,def,,get_view_rate_limit,():,,return,,getattr,(,g,,,,'_view_rate_limit',,,,None,),,def,,on_over_limit,(,limit,):,,return,,'You hit the rate limit',,,,400,,def,,ratelimit,(,limit,,,,per,=,300,,,,send_x_headers,=,True,,,,over_limit,=,on_over_limit,,,,scope_func,=,lambda,:,,request,.,remote_addr,,,,key_func,=,lambda,:,,request,.,endpoint,):,,def,,decorator,(,f,):,,def,,rate_limited,(,*,args,,,,**,kwargs,):,,key,,=,,'rate-limit/,%s,/,%s,/',,%,,(,key_func,(),,,scope_func,()),,rlimit,,=,,RateLimit,(,key,,,,limit,,,,per,,,,send_x_headers,),,g,.,_view_rate_limit,,=,,rlimit,,if,,over_limit,,is,,not,,None,,and,,rlimit,.,over_limit,:,,return,,over_limit,(,rlimit,),,return,,f,(,*,args,,,,**,kwargs,),,return,,update_wrapper,(,rate_limited,,,,f,),,return,,decorator,,,The key is constructed by default from the remote address and the current endpoint (name of the view function).  Before the function is executed it increments the rate limit with the help of the,RateLimit,class and stores an instance on,g,as,g._view_rate_limit,.  Also if the view is indeed over limit we automatically call a different function instead.,,The view function itself can get hold of the current rate limit by calling,get_rate_limit(),.,,We also give the key extra,expiration_window,seconds time to expire in redis so that badly synchronized clocks between the workers and the redis server do not cause problems.  Furthermore we use a pipeline (uses MULTI behind the scenes) to make sure that we never increment a key without also setting the key expiration in case an exception happens between those lines (for instance if the process is killed).,,X-RateLimit Headers,,If we you to automatically emit,X-RateLimit,headers you can attach this after-request function:,,@app.after_request,,def,,inject_x_rate_headers,(,response,):,,limit,,=,,get_view_rate_limit,(),,if,,limit,,and,,limit,.,send_x_headers,:,,h,,=,,response,.,headers,,h,.,add,(,'X-RateLimit-Remaining',,,,str,(,limit,.,remaining,)),,h,.,add,(,'X-RateLimit-Limit',,,,str,(,limit,.,limit,)),,h,.,add,(,'X-RateLimit-Reset',,,,str,(,limit,.,reset,)),,return,,response,,,Using the Decorator,,To use the decorator just apply it to a function:,,@app.route,(,'/rate-limited',),,@ratelimit,(,limit,=,300,,,,per,=,60,,*,,15,),,def,,index,():,,return,,'<h1>This is a rate limited response</h1>',,,This would limit the function to be called 300 times per 15 minutes.,,This snippet by Armin Ronacher can be used freely for\n    anything you like. Consider it public domain.,,,Comments,,,,New  http error code draft\n          by K. El Kouhen\n          on 2012-03-31 @ 11:43,http://tools.ietf.org/html/draft-nottingham-http-new-status-04#section-4,,400 -> 429,,,,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/79/", "content": "JSONP decorator | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,JSONP decorator,,Posted by zachwill\n    on 2011-11-23 @ 20:37\n    and filed in,Decorators,,\"\"\",,Taken from:  https://gist.github.com/1094140,,\"\"\",,from,,functools,,import,,wraps,,from,,flask,,import,,request,,,,current_app,,def,,jsonp,(,func,):,,\"\"\"Wraps JSONified output for JSONP requests.\"\"\",,@wraps,(,func,),,def,,decorated_function,(,*,args,,,,**,kwargs,):,,callback,,=,,request,.,args,.,get,(,'callback',,,,False,),,if,,callback,:,,data,,=,,str,(,func,(,*,args,,,,**,kwargs,),.,data,),,content,,=,,str,(,callback,),,+,,'(',,+,,data,,+,,')',,mimetype,,=,,'application/javascript',,return,,current_app,.,response_class,(,content,,,,mimetype,=,mimetype,),,else,:,,return,,func,(,*,args,,,,**,kwargs,),,return,,decorated_function,,,This snippet by zachwill can be used freely for\n    anything you like. Consider it public domain.,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/122/", "content": "Gzip for particular views | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Gzip for particular views,,Posted by taehyun kang\n    on 2014-02-10 @ 22:52\n    and filed in,Decorators,,Normally, the task of gzipping responses before sending them to clients is handled by web servers, like apache or nginx. In such cases, the web server acts as a middleman between client's request and your app's response.,,However on some environments it is not possible to deploy with such 'middleman'. One of example of that environment is Heroku: even their documentation says your app should be connected directly to clients via Gunicorn. Therefore, gzipping has to be implemented on your app's end.,,Below is code that I shamelessly modified from,https://github.com/wichitacode/flask-compress,, which is a great extension but unfortunately applys gzipping to entire response. What I needed was gzipping for some particular views.,,from,,flask,,import,,after_this_request,,,,request,,from,,cStringIO,,import,,StringIO,,as,,IO,,import,,gzip,,import,,functools,,def,,gzipped,(,f,):,,@functools.wraps,(,f,),,def,,view_func,(,*,args,,,,**,kwargs,):,,@after_this_request,,def,,zipper,(,response,):,,accept_encoding,,=,,request,.,headers,.,get,(,'Accept-Encoding',,,,'',),,if,,'gzip',,not,,in,,accept_encoding,.,lower,():,,return,,response,,response,.,direct_passthrough,,=,,False,,if,,(,response,.,status_code,,<,,200,,or,,response,.,status_code,,>=,,300,,or,,'Content-Encoding',,in,,response,.,headers,):,,return,,response,,gzip_buffer,,=,,IO,(),,gzip_file,,=,,gzip,.,GzipFile,(,mode,=,'wb',,,,fileobj,=,gzip_buffer,),,gzip_file,.,write,(,response,.,data,),,gzip_file,.,close,(),,response,.,data,,=,,gzip_buffer,.,getvalue,(),,response,.,headers,[,'Content-Encoding',],,=,,'gzip',,response,.,headers,[,'Vary',],,=,,'Accept-Encoding',,response,.,headers,[,'Content-Length',],,=,,len,(,response,.,data,),,return,,response,,return,,f,(,*,args,,,,**,kwargs,),,return,,view_func,,,usage:,,@app.route,(,'/',),,@gzipped,,def,,gzip_me,():,,return,,\"this response has to be gzipped\",,,This snippet by taehyun kang can be used freely for\n    anything you like. Consider it public domain.,,,Comments,,,,More space savings\n          by Sandy Chapman\n          on 2014-04-07 @ 12:59,Hi,,,Just one comment. Since we're using gzip, it's likely we're trying to squeek out as much size savings as we can get. As such, you can likely use,,gzip_file.write(response.data.replace(' ', '')),,in your snippet to save a bit more space. Flask's jsonify has pretty print on by default, so you could disable that to get the same behaviour, but you may want to have pretty print on for non-gzipped responses and pretty print off for gzipped ones.,,,,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/100/", "content": "Generic HTTP headers decorator | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Generic HTTP headers decorator,,Posted by Edward Stone\n    on 2012-09-28 @ 13:14\n    and filed in,Decorators,,If you need to add response header(s) to a view, this,add_response_headers,decorator does that - pass it a dict of header names and values.,,You can wrap the decorator to make convenience decorators for headers you need to add often, as shown by the,no index,decorator, which adds,X-Robots-Tag: noindex,to the response.,,from,,functools,,import,,wraps,,from,,flask,,import,,Flask,,,,make_response,,app,,=,,Flask,(,__name__,),,def,,add_response_headers,(,headers,=,{}):,,\"\"\"This decorator adds the headers passed in to the response\"\"\",,def,,decorator,(,f,):,,@wraps,(,f,),,def,,decorated_function,(,*,args,,,,**,kwargs,):,,resp,,=,,make_response,(,f,(,*,args,,,,**,kwargs,)),,h,,=,,resp,.,headers,,for,,header,,,,value,,in,,headers,.,items,():,,h,[,header,],,=,,value,,return,,resp,,return,,decorated_function,,return,,decorator,,def,,noindex,(,f,):,,\"\"\"This decorator passes X-Robots-Tag: noindex\"\"\",,@wraps,(,f,),,@add_response_headers,({,'X-Robots-Tag',:,,'noindex',}),,def,,decorated_function,(,*,args,,,,**,kwargs,):,,return,,f,(,*,args,,,,**,kwargs,),,return,,decorated_function,,@app.route,(,'/',),,@noindex,,def,,not_indexed,():,,\"\"\",,This page will be served with X-Robots-Tag: noindex,,in the response headers,,\"\"\",,return,,\"Check my headers!\",,if,,__name__,,==,,\"__main__\",:,,app,.,run,(,host,=,'0.0.0.0',),,# check the headers with: curl -I http://0.0.0.0:5000/,,,This snippet by Edward Stone can be used freely for\n    anything you like. Consider it public domain.,,,Comments,,,,Simplify decorators\n          by Simon Sapin\n          on 2012-09-28 @ 17:41,decorated_function,in,not_indexed,is not necessary since it does nothing but call f. This should behave the same but be simpler:,,def,,noindex,(,f,):,,\"\"\"This decorator passes X-Robots-Tag: noindex\"\"\",,return,,add_response_headers,({,'X-Robots-Tag',:,,'noindex',})(,f,),,,,,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/56/", "content": "Decorator for the HTTP Access Control | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Decorator for the HTTP Access Control,,Posted by Armin Ronacher\n    on 2011-07-14 @ 12:44\n    and filed in,Decorators,,Cross-site HTTP requests are HTTP requests for resources from a different domain than the domain of the resource making the request.  For instance, a resource loaded from Domain A makes a request for a resource on Domain B.  The way this is implemented in modern browsers is by using HTTP Access Control headers:,Documentation on developer.mozilla.org,.,,The following view decorator implements this:,,from,,datetime,,import,,timedelta,,from,,flask,,import,,make_response,,,,request,,,,current_app,,from,,functools,,import,,update_wrapper,,def,,crossdomain,(,origin,=,None,,,,methods,=,None,,,,headers,=,None,,,,max_age,=,21600,,,,attach_to_all,=,True,,,,automatic_options,=,True,):,,if,,methods,,is,,not,,None,:,,methods,,=,,', ',.,join,(,sorted,(,x,.,upper,(),,for,,x,,in,,methods,)),,if,,headers,,is,,not,,None,,and,,not,,isinstance,(,headers,,,,basestring,):,,headers,,=,,', ',.,join,(,x,.,upper,(),,for,,x,,in,,headers,),,if,,not,,isinstance,(,origin,,,,basestring,):,,origin,,=,,', ',.,join,(,origin,),,if,,isinstance,(,max_age,,,,timedelta,):,,max_age,,=,,max_age,.,total_seconds,(),,def,,get_methods,():,,if,,methods,,is,,not,,None,:,,return,,methods,,options_resp,,=,,current_app,.,make_default_options_response,(),,return,,options_resp,.,headers,[,'allow',],,def,,decorator,(,f,):,,def,,wrapped_function,(,*,args,,,,**,kwargs,):,,if,,automatic_options,,and,,request,.,method,,==,,'OPTIONS',:,,resp,,=,,current_app,.,make_default_options_response,(),,else,:,,resp,,=,,make_response,(,f,(,*,args,,,,**,kwargs,)),,if,,not,,attach_to_all,,and,,request,.,method,,!=,,'OPTIONS',:,,return,,resp,,h,,=,,resp,.,headers,,h,[,'Access-Control-Allow-Origin',],,=,,origin,,h,[,'Access-Control-Allow-Methods',],,=,,get_methods,(),,h,[,'Access-Control-Max-Age',],,=,,str,(,max_age,),,if,,headers,,is,,not,,None,:,,h,[,'Access-Control-Allow-Headers',],,=,,headers,,return,,resp,,f,.,provide_automatic_options,,=,,False,,return,,update_wrapper,(,wrapped_function,,,,f,),,return,,decorator,,,Unmodified this decorator requires Flask 0.8.  If you want to use it with earlier versions of Flask you need to make sure to explicitly enable,'OPTIONS',as method when creating the route.,,Here a basic overview of what the parameters do:,,methods,: Optionally a list of methods that are allowed for this view.  If not provided it will allow all methods that are implemented.,headers,: Optionally a list of headers that are allowed for this request.,origin,:,'*',to allow all origins, otherwise a string with a URL or a list of URLs that might access the resource.,max_age,: The number of seconds as integer or timedelta object for which the preflighted request is valid.,attach_to_all,:,True,if the decorator should add the access control headers to all HTTP methods or,False,if it should only add them to,OPTIONS,responses.,automatic_options,: If enabled the decorator will use the default Flask,OPTIONS,response and attach the headers there, otherwise the view function will be called to generate an appropriate response.,,And here is how you can use it:,,@app.route,(,'/my_service',),,@crossdomain,(,origin,=,'*',),,def,,my_service,():,,return,,jsonify,(,foo,=,'cross domain ftw',),,,Please keep in mind that with Flask 0.7 you need to explicitly provide,OPTIONS,:,,@app.route,(,'/my_service',,,,methods,=,[,'GET',,,,'OPTIONS',]),,@crossdomain,(,origin,=,'*',),,def,,my_service,():,,return,,jsonify,(,foo,=,'cross domain ftw',),,,This snippet by Armin Ronacher can be used freely for\n    anything you like. Consider it public domain.,,,Comments,,,,Small fix\n          by Audrius Ka\u017eukauskas\n          on 2012-10-12 @ 12:38,Needed to add \"f.required_methods = ['OPTIONS']\" after \"f.provide_automatic_options = False\" line, otherwise my route with methods=['POST'] wasn't working (405 response for OPTIONS request).,,,,Small change for flask-restless\n          by Nico Gevers\n          on 2013-04-10 @ 13:47,Thanks for the decorator and making my life a lot easier.,,I needed it to work for my flask-restless endpoints. I changed the decorator slightly to only return the origin headers if the response is a 2xx response (ie ignore 404s and other errors). I simply check the first character of the response status to make sure it starts with a 2.,,if not attach_to_all and request.method != 'OPTIONS' or args[0].status[0] != '2':\n                return resp,,In my actual app I decorate every response as follows:,,@app.after_request\n    @crossdomain(origin=\"*\")\n    def after(response):\n        return response,,,,make_response not always fitted\n          by Julien Guery\n          on 2013-06-19 @ 11:53,Thanks for the great tip.,,However I would change this line:,,resp = make_response(f(*args,,kwargs)),,with this:\n                res = f(*args,,kwargs)\n                if isinstance(res, Response):\n                    resp = res\n                else:\n                    data, code, headers = unpack(res)\n                    resp = make_response(json.dumps(data), code, headers),,Indeed, make_reponse doesn't accept many types of data as its first argument.,,,,List of Origins not Supported?\n          by Brett Francis\n          on 2013-10-06 @ 07:40,Firefox documentation here:<br/>,https://developer.mozilla.org/en-US/docs/HTTP/Access_control_CORS#Access-Control-Allow-Origin,<br/>\nSeems to imply that a list of URLs is not supported. In fact that is also what I've experienced.<br/>\nWhen trying to inject a list of Origins into this Decorator my responses are not available in the browser, but if I use a single URL or '*' everything works fine with this decorator.,,,,Easier way\n          by Jonathan L\n          on 2013-10-30 @ 00:28,I couldn't get this decorator to work, not sure why. But if you're just trying to enable CORS\nYou can change it from this:\n    return str(response),,To this:\n    response = make_response(response)\n    response.headers['Access-Control-Allow-Origin'] = \"*\"\n    return response,,,,Having multiple origins\n          by Stephen Hofmeyr\n          on 2015-03-04 @ 16:15,Just noticed that the correct way to server multiple origins is:\nAccess-Control-Allow-Origin:,http://domain1.com,Access-Control-Allow-Origin:,http://domain2.com,,not as the above code implies: \nAccess-Control-Allow-Origin:,http://domain1.com,,,http://domain2.com,,It is simple enough to modify the above to use resp.headers.add to add multiple origins.,,i.e. modify the line to \nh.extend([(\"Access-Control-Allow-Origin\", orig) for orig in origin])\nand keep/convert origin to a list,,,,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/94/", "content": "app.before_request handlers for less and coffeescript | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,app.before_request handlers for less and coffeescript,,Posted by Rahul Kumar\n    on 2012-05-19 @ 11:15\n    and filed in,Decorators,,Hi,,,I am using less and coffee in one of my projects. I found Steve Losh's extension which does the less compilation,https://github.com/sjl/flask-lesscss/blob/master/flaskext/lesscss.py,and I read somewhere there is another based on it for coffeescript.,,The extension, though quite simple, does a os.walk for each request irrespective of what the request does.,,I am using a slightly modified version which doesn't do an os.walk and handles blueprints.,,EDIT: I can't figure out how to paste code.,,https://gist.github.com/2730487,,This snippet by Rahul Kumar can be used freely for\n    anything you like. Consider it public domain.,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/95/", "content": "Conditional Requests with ETags | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Conditional Requests with ETags,,Posted by Jess Austin\n    on 2012-07-06 @ 05:06\n    and filed in,Decorators,,Here we demonstrate conditional request execution using the,If-Match,and,If-None-Match,headers with a monkeypatched Werkzeug method, triggered by a decorator in Flask. This technique is flexible about how and when we calculate,ETag,s.,,Decorator,,First let's examine the decorator. This is really simple: it just sets a flag on the,flask.g,object before every invocation of the view method. In a previous version of this decorator we had created an object at this level on each invocation, but that was before I really grokked the Tao of,g,.,,def,,conditional,(,func,):,,'''Start conditional method execution for this resource''',,@functools.wraps,(,func,),,def,,wrapper,(,*,args,,,,**,kwargs,):,,flask,.,g,.,condtnl_etags_start,,=,,True,,return,,func,(,*,args,,,,**,kwargs,),,return,,wrapper,,,Monkeypatch,,By monkeypatching the,set_etag(),method, we run the conditional logic exactly when it needs to be run, but only in view functions that are decorated by,@conditional,, and only the first time that,set_etag(),is called in those decorated functions.,,_old_set_etag,,=,,werkzeug,.,ETagResponseMixin,.,set_etag,,@functools.wraps,(,werkzeug,.,ETagResponseMixin,.,set_etag,),,def,,_new_set_etag,(,self,,,,etag,,,,weak,=,False,):,,# only check the first time through; when called twice,,# we're modifying,,if,,(,hasattr,(,flask,.,g,,,,'condtnl_etags_start',),,and,,flask,.,g,.,condtnl_etags_start,):,,if,,flask,.,request,.,method,,in,,(,'PUT',,,,'DELETE',,,,'PATCH',):,,if,,not,,flask,.,request,.,if_match,:,,raise,,PreconditionRequired,,if,,etag,,not,,in,,flask,.,request,.,if_match,:,,flask,.,abort,(,412,),,elif,,(,flask,.,request,.,method,,==,,'GET',,and,,flask,.,request,.,if_none_match,,and,,etag,,in,,flask,.,request,.,if_none_match,):,,raise,,NotModified,,flask,.,g,.,condtnl_etags_start,,=,,False,,_old_set_etag,(,self,,,,etag,,,,weak,),,werkzeug,.,ETagResponseMixin,.,set_etag,,=,,_new_set_etag,,,Application,,Here's how we can use these tools in an application. After decorating with,@conditional,, the normal,set_etag(),method will check the calculated,etag,against the conditional headers. Since the,PUT,and,PATCH,verbs change a resource,,set_etag(),is called again after the change to provide an updated,ETag,on the ensuing,204 No Content,response.,,app,,=,,flask,.,Flask,(,__name__,),,d,,=,,{,'a',:,,'This is \"a\".,\\n,',,,,'b',:,,'This is \"b\".,\\n,',},,@app.route,(,'/<path>',,,,methods,,=,,[,'GET',,,,'PUT',,,,'DELETE',,,,'PATCH',]),,@conditional,,def,,view,(,path,):,,try,:,,# SHA1 should generate well-behaved etags,,etag,,=,,hashlib,.,sha1,(,d,[,path,]),.,hexdigest,(),,if,,flask,.,request,.,method,,==,,'GET',:,,response,,=,,flask,.,make_response,(,d,[,path,]),,response,.,set_etag,(,etag,),,else,:,,response,,=,,flask,.,Response,(,status,=,204,),,del,,response,.,headers,[,'content-type',],,response,.,set_etag,(,etag,),,if,,flask,.,request,.,method,,==,,'DELETE',:,,del,,d,[,path,],,del,,response,.,headers,[,'etag',],,else,:,,if,,flask,.,request,.,method,,==,,'PUT',:,,d,[,path,],,=,,flask,.,request,.,data,,else,:,,# (PATCH),,# lame PATCH technique,,d,[,path,],,+=,,flask,.,request,.,data,,response,.,set_etag,(,hashlib,.,sha1,(,d,[,path,]),,.,hexdigest,()),,return,,response,,except,,KeyError,:,,flask,.,abort,(,404,),,app,.,run,(),,,Testing with,curl,,The behavior seems correct. It's the server's option whether or not to force conditional updates with the brand new,428 Precondition Required,status as we've done here.,,$ curl -i localhost:5000/a\nHTTP/1.0 200 OK\nContent-Type: text/html; charset=utf-8\nContent-Length: 13\nETag: \"56eaadbbd9fa287e7270cf13a41083c94f52ab9b\"\nServer: Werkzeug/0.8.3 Python/2.7.3\nDate: Sat, 07 Jul 2012 00:45:03 GMT\n\nThis is \"a\".\n\n$ curl -iH 'If-None-Match: \\\n\"56eaadbbd9fa287e7270cf13a41083c94f52ab9b\"' localhost:5000/a\nHTTP/1.0 304 NOT MODIFIED\nConnection: close\nServer: Werkzeug/0.8.3 Python/2.7.3\nDate: Sat, 07 Jul 2012 00:45:12 GMT\n\n$ curl -iX DELETE localhost:5000/a\nHTTP/1.0 428 PRECONDITION REQUIRED\nContent-Type: text/html\nContent-Length: 214\nServer: Werkzeug/0.8.3 Python/2.7.3\nDate: Sat, 07 Jul 2012 00:45:19 GMT\n\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">\n<title>428 Precondition Required</title>\n<h1>Precondition Required</h1>\n<p>This request is required to be conditional; try using\n\"If-Match\".\n\n$ curl -iX DELETE -H 'If-Match: \"badmatch\"' localhost:5000/a \nHTTP/1.0 412 PRECONDITION FAILED\nContent-Type: text/html\nContent-Length: 203\nServer: Werkzeug/0.8.3 Python/2.7.3\nDate: Sat, 07 Jul 2012 00:45:23 GMT\n\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">\n<title>412 Precondition Failed</title>\n<h1>Precondition Failed</h1>\n<p>The precondition on the request for the URL failed positive\nevaluation.</p>\n\n$ curl -iX DELETE -H 'If-Match: \\\n\"56eaadbbd9fa287e7270cf13a41083c94f52ab9b\"' localhost:5000/a\nHTTP/1.0 204 NO CONTENT\nContent-Length: 0\nServer: Werkzeug/0.8.3 Python/2.7.3\nDate: Sat, 07 Jul 2012 00:45:30 GMT\n\n$ curl -i localhost:5000/a\nHTTP/1.0 404 NOT FOUND\nContent-Type: text/html\nContent-Length: 238\nServer: Werkzeug/0.8.3 Python/2.7.3\nDate: Sat, 07 Jul 2012 00:45:35 GMT\n\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server.</p><p>If you\nentered the URL manually please check your spelling and try\nagain.</p>,,...and so on like that!,PUT,and,PATCH,are handled similarly to,DELETE,.,,Weren't there some exceptions?,,There are two custom HTTP status exceptions.,428 Precondition Required,was just introduced in,RFC 6585,.,304 Not Modified,isn't an error per se, but it's handy to use an exception for a short-circuit response like this.,,class,,NotModified,(,werkzeug,.,exceptions,.,HTTPException,):,,code,,=,,304,,def,,get_response,(,self,,,,environment,):,,return,,flask,.,Response,(,status,=,304,),,class,,PreconditionRequired,(,werkzeug,.,exceptions,.,HTTPException,):,,code,,=,,428,,description,,=,,(,'<p>This request is required to be ',,'conditional; try using \"If-Match\".',),,name,,=,,'Precondition Required',,def,,get_response,(,self,,,,environment,):,,resp,,=,,super,(,PreconditionRequired,,,,self,),.,get_response,(,environment,),,resp,.,status,,=,,str,(,self,.,code,),,+,,' ',,+,,self,.,name,.,upper,(),,return,,resp,,,Suggestions for improvement are very welcome!,,This snippet by Jess Austin can be used freely for\n    anything you like. Consider it public domain.,,,Comments,,,,indentation error\n          by fsp\n          on 2013-11-26 @ 04:09,Inside the view func, `response.set_etag(hashlib.sha1(d[path]).hexdigest())`.,,,,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/96/", "content": "Wordpress-compatible XML-RPC API | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Wordpress-compatible XML-RPC API,,Posted by Mike McGahan\n    on 2012-07-20 @ 21:01\n    and filed in,APIs and Microformats,,Many blogging tools such as MarsEdit support the XML-RPC standard for managing content, using APIs defined by Wordpress, MetaWeblog, MoveableType, and Blogger.,,Combined with the Flask-XML-RPC extension, the following code provides a reasonably complete foundation for interfacing between your blog data models and XML-RPC-API-based content management software.,,The api is accessible from '/api' and authorizes against a User object specified by name and password.,,import,,string,,from,,datetime,,import,,datetime,,from,,flask,,import,,url_for,,from,,flask.ext.xmlrpc,,import,,XMLRPCHandler,,,,Fault,,from,,labs,,import,,app,,,,db,,from,,labs.models,,import,,User,,,,Post,,,,Tag,,,,Category,,POST_ROOT,,=,,'http://127.0.0.1/post/',,# MetaWeblogAPI XML-RPC,,handler,,=,,XMLRPCHandler,(,'api',),,handler,.,connect,(,app,,,,'/api',),,metaweblog,,=,,handler,.,namespace,(,'metaWeblog',),,blogger,,=,,handler,.,namespace,(,'blogger',),,wordpress,,=,,handler,.,namespace,(,'wp',),,moveabletype,,=,,handler,.,namespace,(,'mt',),,@metaweblog.register,,def,,newPost,(,blog_id,,,,username,,,,password,,,,content,,,,publish,):,,user,,=,,db,.,session,.,query,(,User,),.,filter,(,User,.,username,,==,,username,),.,first,(),,if,,user,,is,,None,,or,,not,,user,.,check_password,(,password,):,,raise,,Fault,(,\"invalid_user\",,,,\"Invalid username/password, please try again.\",),,post,,=,,Post,(,content,[,'title',],,,content,[,'description',]),,post,.,author,,=,,user,,post,.,teaser,,=,,content,[,'mt_excerpt',],,if,,'wp_slug',,in,,content,:,,post,.,slug,,=,,content,[,'wp_slug',],,if,,'dateCreated',,in,,content,:,,post,.,create_date,,=,,datetime,.,strptime,(,str,(,content,[,'dateCreated',]),,,\"%Y%m,%d,T%H:%M:%SZ\",),,if,,'custom_fields',,in,,content,:,,for,,custom_field,,in,,content,[,'custom_fields',]:,,if,,custom_field,[,'key',],,==,,'subtitle',:,,post,.,subtitle,,=,,custom_field,[,'value',],,elif,,custom_field,[,'key',],,==,,'lead_img',:,,post,.,lead_img,,=,,custom_field,[,'value',],,tag_names,,=,,string,.,split,(,content,[,'mt_tags',],,,',',),,for,,tag_name,,in,,tag_names,:,,tag,,=,,Tag,.,query,.,filter,(,Tag,.,name,,==,,tag_name,),.,first,(),,if,,tag,,is,,None,:,,tag,,=,,Tag,(,tag_name,),,db,.,session,.,add,(,tag,),,db,.,session,.,commit,(),,post,.,tags,.,append,(,tag,),,db,.,session,.,add,(,post,),,db,.,session,.,commit,(),,return,,post,.,id,,@metaweblog.register,,def,,editPost,(,post_id,,,,username,,,,password,,,,content,,,,publish,):,,user,,=,,db,.,session,.,query,(,User,),.,filter,(,User,.,username,,==,,username,),.,first,(),,if,,user,,is,,None,,or,,not,,user,.,check_password,(,password,):,,raise,,Fault,(,\"invalid_user\",,,,\"Invalid username/password, please try again.\",),,post,,=,,Post,.,query,.,get,(,post_id,),,post,.,title,,=,,content,[,'title',],,post,.,markdown,,=,,content,[,'description',],,post,.,set_html,(),,post,.,teaser,,=,,content,[,'mt_excerpt',],,if,,'wp_slug',,in,,content,:,,post,.,slug,,=,,content,[,'wp_slug',],,if,,'dateCreated',,in,,content,:,,post,.,create_date,,=,,datetime,.,strptime,(,str,(,content,[,'dateCreated',]),,,\"%Y%m,%d,T%H:%M:%SZ\",),,if,,'custom_fields',,in,,content,:,,for,,custom_field,,in,,content,[,'custom_fields',]:,,if,,custom_field,[,'key',],,==,,'subtitle',:,,post,.,subtitle,,=,,custom_field,[,'value',],,elif,,custom_field,[,'key',],,==,,'lead_img',:,,post,.,lead_img,,=,,custom_field,[,'value',],,tag_names,,=,,string,.,split,(,content,[,'mt_tags',],,,',',),,tags,,=,,[],,for,,tag_name,,in,,tag_names,:,,tag,,=,,Tag,.,query,.,filter,(,Tag,.,name,,==,,tag_name,),.,first,(),,if,,tag,,is,,None,:,,tag,,=,,Tag,(,tag_name,),,db,.,session,.,add,(,tag,),,db,.,session,.,commit,(),,tags,.,append,(,tag,),,post,.,tags,,=,,tags,,db,.,session,.,add,(,post,),,db,.,session,.,commit,(),,return,,True,,@metaweblog.register,,def,,getPost,(,post_id,,,,username,,,,password,):,,user,,=,,db,.,session,.,query,(,User,),.,filter,(,User,.,username,,==,,username,),.,first,(),,if,,user,,is,,None,,or,,not,,user,.,check_password,(,password,):,,raise,,Fault,(,\"invalid_user\",,,,\"Invalid username/password, please try again.\",),,post,,=,,Post,.,query,.,filter,(,Post,.,id,,==,,post_id,),.,first,(),,if,,not,,post,:,,raise,,Fault,(,\"not_found\",,,,\"Post not found.\",),,item,,=,,{},,item,[,'title',],,=,,post,.,title,,item,[,'link',],,=,,POST_ROOT,,+,,post,.,slug,,item,[,'description',],,=,,post,.,markdown,,item,[,'postid',],,=,,post,.,id,,item,[,'mt_excerpt',],,=,,post,.,teaser,,item,[,'custom_fields',],,=,,[,,{,,'key',:,,'subtitle',,,,'value',:,,post,.,subtitle,,},,,{,,'key',:,,'lead_img',,,,'value',:,,post,.,lead_img,,},,],,item,[,'wp_slug',],,=,,post,.,slug,,if,,post,.,tags,:,,item,[,'mt_tags',],,=,,',',.,join,(,map,(,lambda,,tag,:,,tag,.,name,,,,post,.,tags,)),,item,[,'dateCreated',],,=,,post,.,create_date,,return,,item,,@metaweblog.register,,def,,getRecentPosts,(,blogid,,,,username,,,,password,,,,numberOfPosts,):,,user,,=,,db,.,session,.,query,(,User,),.,filter,(,User,.,username,,==,,username,),.,first,(),,if,,user,,is,,None,,or,,not,,user,.,check_password,(,password,):,,raise,,Fault,(,\"invalid_user\",,,,\"Invalid username/password, please try again.\",),,posts,,=,,Post,.,query,.,order_by,(,'create_date',),.,all,(),,response,,=,,[],,for,,post,,in,,posts,:,,item,,=,,{},,item,[,'title',],,=,,post,.,title,,item,[,'link',],,=,,POST_ROOT,,+,,post,.,slug,,item,[,'description',],,=,,post,.,markdown,,item,[,'postid',],,=,,post,.,id,,item,[,'mt_excerpt',],,=,,post,.,teaser,,item,[,'wp_slug',],,=,,post,.,slug,,item,[,'custom_fields',],,=,,[,,{,,'key',:,,'subtitle',,,,'value',:,,post,.,subtitle,,},,,{,,'key',:,,'lead_img',,,,'value',:,,post,.,lead_img,,},,],,tags,,=,,[],,for,,tag,,in,,post,.,tags,:,,tags,.,append,(,tag,.,name,),,item,[,'mt_tags',],,=,,',',.,join,(,tags,),,item,[,'dateCreated',],,=,,post,.,create_date,,# if post['draft']:,,#     item['draft'] = 'Yes',,response,.,append,(,item,),,return,,response,,@wordpress.register,,def,,getPages,(,blogid,,,,username,,,,password,,,,numberOfPages,):,,return,,[],,@wordpress.register,,def,,newCategory,(,blogid,,,,username,,,,password,,,,new_category,):,,user,,=,,db,.,session,.,query,(,User,),.,filter,(,User,.,username,,==,,username,),.,first,(),,if,,user,,is,,None,,or,,not,,user,.,check_password,(,password,):,,raise,,Fault,(,\"invalid_user\",,,,\"Invalid username/password, please try again.\",),,category,,=,,Category,.,query,.,filter,(,Category,.,name,,==,,new_category,[,'name',]),.,first,(),,if,,category,,is,,None,:,,category,,=,,Category,(,new_category,[,'name',]),,db,.,session,.,add,(,category,),,db,.,session,.,commit,(),,return,,category,.,id,,@wordpress.register,,def,,getTags,(,blogid,,,,username,,,,password,):,,return,,map,(,lambda,,tag,:,,{,,'tag_id',:,,tag,.,id,,,,'name',:,,tag,.,name,,},,,Tag,.,query,.,all,()),,@wordpress.register,,def,,getCategories,(,blogid,,,,username,,,,password,):,,return,,map,(,lambda,,category,:,,{,,'categoryId',:,,category,.,id,,,,'categoryName',:,,category,.,name,,,,'categoryDescription',:,,category,.,description,,},,,Category,.,query,.,all,()),,@moveabletype.register,,def,,setPostCategories,(,post_id,,,,username,,,,password,,,,post_categories,):,,post,,=,,Post,.,query,.,get,(,post_id,),,for,,post_category,,in,,post_categories,:,,category,,=,,Category,.,query,.,filter,(,,Category,.,name,,==,,post_category,[,'categoryName',],,),.,first,(),,# only single category per post supported,,post,.,category,,=,,category,,db,.,session,.,add,(,post,),,db,.,session,.,commit,(),,return,,True,,@moveabletype.register,,def,,getPostCategories,(,post_id,,,,username,,,,password,):,,# only single per post supported,,category,,=,,Post,.,query,.,get,(,post_id,),.,category,,if,,category,,is,,not,,None,:,,post_category,,=,,{,,'categoryId',:,,category,.,id,,,,'categoryName',:,,category,.,name,,,,'categoryDescription',:,,category,.,description,,},,return,,[,post_category,],,return,,[],,@moveabletype.register,,def,,supportedTextFilters,():,,return,,[],,@blogger.register,,def,,deletePost,(,appkey,,,,post_id,,,,username,,,,password,,,,publish,):,,user,,=,,db,.,session,.,query,(,User,),.,filter,(,User,.,username,,==,,username,),.,first,(),,if,,user,,is,,None,,or,,not,,user,.,check_password,(,password,):,,raise,,Fault,(,\"invalid_user\",,,,\"Invalid username/password, please try again.\",),,post,,=,,Post,.,query,.,get,(,int,(,post_id,)),,db,.,session,.,delete,(,post,),,db,.,session,.,commit,(),,pass,,,This snippet by Mike McGahan can be used freely for\n    anything you like. Consider it public domain.,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/112/", "content": "Paypal IPN Verifier for Flask | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Paypal IPN Verifier for Flask,,Posted by Manu\n    on 2013-06-21 @ 07:00\n    and filed in,APIs and Microformats,,I had been trying to verify paypal IPN using Flask. After researching a bit, i found a good,snippet,in GIST, by,cbsmith,. I did a little modification to make it work in all cases.,,IPN_URLSTRING,,=,,'https://www.sandbox.paypal.com/cgi-bin/webscr',,IPN_VERIFY_EXTRA_PARAMS,,=,,((,'cmd',,,,'_notify-validate',),),,from,,itertools,,import,,chain,,def,,ordered_storage,(,f,):,,import,,werkzeug.datastructures,,import,,flask,,def,,decorator,(,*,args,,,,**,kwargs,):,,flask,.,request,.,parameter_storage_class,,=,,werkzeug,.,datastructures,.,ImmutableOrderedMultiDict,,return,,f,(,*,args,,,,**,kwargs,),,return,,decorator,,@app.route,(,'/paypal/',,,,methods,=,[,'POST',]),,@ordered_storage,,def,,paypal_webhook,():,,#probably should have a sanity check here on the size of the form data to guard against DoS attacks,,verify_args,,=,,chain,(,request,.,form,.,iteritems,(),,,IPN_VERIFY_EXTRA_PARAMS,),,verify_string,,=,,'&',.,join,((,',%s,=,%s,',,%,,(,param,,,,value,),,for,,param,,,,value,,in,,verify_args,)),,#req = Request(verify_string),,response,,=,,urlopen,(,IPN_URLSTRING,,,,data,=,verify_string,),,status,,=,,response,.,read,(),,print,,status,,if,,status,,==,,'VERIFIED',:,,print,,\"PayPal transaction was verified successfully.\",,# Do something with the verified transaction details.,,payer_email,,=,,request,.,form,.,get,(,'payer_email',),,print,,\"Pulled {email} from transaction\",.,format,(,email,=,payer_email,),,else,:,,print,,'Paypal IPN string {arg} did not validate',.,format,(,arg,=,verify_string,),,return,,jsonify,({,'status',:,'complete',}),,,This snippet by Manu can be used freely for\n    anything you like. Consider it public domain.,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/45/", "content": "Handling Accept Headers | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Handling Accept Headers,,Posted by Armin Ronacher\n    on 2011-02-17 @ 21:08\n    and filed in,APIs and Microformats,,If you send an HTTP request to this website it will send you some HTML back which your browser will render.  However if you provide an,Accept,header and give,application/json,a higher quality than HTML or any other mimetype (or specify it as only accepted mimetype) it will send you back some JSON instead.,,The Helper Function,,How does this magic work?  With this little helper function:,,from,,flask,,import,,request,,def,,request_wants_json,():,,best,,=,,request,.,accept_mimetypes,\\,.,best_match,([,'application/json',,,,'text/html',]),,return,,best,,==,,'application/json',,and,\\,request,.,accept_mimetypes,[,best,],,>,\\,request,.,accept_mimetypes,[,'text/html',],,,Why check if json has a higher quality than HTML and not just go with the best match?  Because some browsers accept on,*/*,and we don't want to deliver JSON to an ordinary browser.,,Usage,,You can easily use this in your functions like this:,,from,,flask,,import,,jsonify,,,,render_template,,@app.route,(,'/',),,def,,show_items,():,,items,,=,,get_items_from_database,(),,if,,request_wants_json,():,,return,,jsonify,(,items,=,[,x,.,to_json,(),,for,,x,,in,,items,]),,return,,render_template,(,'show_items.html',,,,items,=,items,),,,I recommend implementing,to_json,methods on your objects that return a Python object (dictionary etc.) that can be safely converted to JSON by,jsonify,.,,Testing,,To test if that works you can use the,curl,command line utility:,,$ curl -Haccept:application/json http://localhost:5000/,,This snippet by Armin Ronacher can be used freely for\n    anything you like. Consider it public domain.,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/10/", "content": "Generating Feeds with Flask | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Generating Feeds with Flask,,Posted by Armin Ronacher\n    on 2010-05-05 @ 16:06\n    and filed in,APIs and Microformats,,Atom is an easy way to let other people subscribe to changes on your website.  For example people can subscribe to the recent additions of content on your website.,,Assuming you already have a way to access that information (database query for most recent blog posts for example) generating an Atom feed is easy as pie.,,All you need is the,AtomFeed,class from the Werkzeug contrib package (this is there for you in any Flask application).  Just create a view function like this:,,from,,urlparse,,import,,urljoin,,from,,flask,,import,,request,,from,,werkzeug.contrib.atom,,import,,AtomFeed,,def,,make_external,(,url,):,,return,,urljoin,(,request,.,url_root,,,,url,),,@app.route,(,'/recent.atom',),,def,,recent_feed,():,,feed,,=,,AtomFeed,(,'Recent Articles',,,,feed_url,=,request,.,url,,,,url,=,request,.,url_root,),,articles,,=,,Article,.,query,.,order_by,(,Article,.,pub_date,.,desc,()),\\,.,limit,(,15,),.,all,(),,for,,article,,in,,articles,:,,feed,.,add,(,article,.,title,,,,unicode,(,article,.,rendered_text,),,,content_type,=,'html',,,,author,=,article,.,author,.,name,,,,url,=,make_external,(,article,.,url,),,,updated,=,article,.,last_update,,,,published,=,article,.,published,),,return,,feed,.,get_response,(),,,Some things to keep in mind:,published,is optional,,updated,is not.  A feed should not contain all items but only the most recent ones and it should be ordered by date.  Also the URLs should be external, to ensure that you can use,urlparse.urljoin,with the current request's root URL as first argument and the one to externalize as second.,,Extra attention: if the content (rendered_text) is marked as,Markup,you will have to convert it to standard,unicode,.  The snippet above does that in any situation, because it cannot do any harm.,,To tell browsers about a feed on a page, you can embed the following code in the,<head>,section of your site:,,<,link,,href,=,\",{{,,url_for,(,'recent_feed',),,}},\",,rel,=,\"alternate\",,title,=,\"Recent Changes\",,type,=,\"application/atom+xml\",>,,,For more information, consult the Werkzeug documentation:,Atom Syndication,.,,This snippet by Armin Ronacher can be used freely for\n    anything you like. Consider it public domain.,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/104/", "content": "Configure SECRET_KEY from a file in the instance directory. | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Configure SECRET_KEY from a file in the instance directory.,,Posted by Simon Sapin\n    on 2012-12-11 @ 14:04\n    and filed in,APIs and Microformats,,import,,sys,,import,,os.path,,def,,install_secret_key,(,app,,,,filename,=,'secret_key',):,,\"\"\"Configure the SECRET_KEY from a file,,in the instance directory.,,If the file does not exist, print instructions,,to create it from a shell with a random key,,,then exit.,,\"\"\",,filename,,=,,os,.,path,.,join,(,app,.,instance_path,,,,filename,),,try,:,,app,.,config,[,'SECRET_KEY',],,=,,open,(,filename,,,,'rb',),.,read,(),,except,,IOError,:,,print,,'Error: No secret key. Create it with:',,if,,not,,os,.,path,.,isdir,(,os,.,path,.,dirname,(,filename,)):,,print,,'mkdir -p',,,,os,.,path,.,dirname,(,filename,),,print,,'head -c 24 /dev/urandom >',,,,filename,,sys,.,exit,(,1,),,,Usage example, after deploying to a new machine:,,$ ./run.py\nError: No secret key. Create it with:\nmkdir -p /home/simon/exampleapp/instance\nhead -c,24,/dev/urandom > /home/simon/exampleapp/instance/secret_key,# Copy-and-paste the two commands,$ ./run.py \n * Running on http://127.0.0.1:5000/\n * Restarting with reloader,,This snippet by Simon Sapin can be used freely for\n    anything you like. Consider it public domain.,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/126/", "content": "Simple static page rendering | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Simple static page rendering,,Posted by Leandro Poblet\n    on 2014-10-23 @ 12:20\n    and filed in,Application Structure,,If you needed a static pages and fast, like me, here's a simple approach to your problem:,,from,,flask,,import,,Flask,,,,render_template,,app,,=,,Flask,(,__name__,),,@app.route,(,'/<string:page_name>/',),,def,,static_page,(,page_name,):,,return,,render_template,(,',%s,.html',,%,,page_name,),,if,,__name__,,==,,'__main__',:,,app,.,run,(),,,This snippet by Leandro Poblet can be used freely for\n    anything you like. Consider it public domain.,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/83/", "content": "Specialized JSON-oriented Flask App | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Specialized JSON-oriented Flask App,,Posted by Pavel Repin\n    on 2012-01-27 @ 22:17\n    and filed in,Application Structure,,Let's say you are creating a RESTful web service that typically sees JSON requests and responds with JSON back. When things go wrong, default errors that Flask/Werkzeug respond with are all HTML. Which breaks the clients who expect JSON back even in case of errors.,,Here's an approach to mitigate this. All errors that Werkzeug may throw are now intercepted and converted into JSON response. You can customize what goes into the response by tweaking the line with,response = jsonify(...),.,,Also note that,make_json_error,will be used when your code throws an arbitrary exception (e.g. division by zero) not derived from,HTTPException,.,,from,,flask,,import,,Flask,,,,jsonify,,from,,werkzeug.exceptions,,import,,default_exceptions,,from,,werkzeug.exceptions,,import,,HTTPException,,__all__,,=,,[,'make_json_app',],,def,,make_json_app,(,import_name,,,,**,kwargs,):,,\"\"\",,Creates a JSON-oriented Flask app.,,All error responses that you don't specifically,,manage yourself will have application/json content,,type, and will contain JSON like this (just an example):,,{ \"message\": \"405: Method Not Allowed\" },,\"\"\",,def,,make_json_error,(,ex,):,,response,,=,,jsonify,(,message,=,str,(,ex,)),,response,.,status_code,,=,,(,ex,.,code,,if,,isinstance,(,ex,,,,HTTPException,),,else,,500,),,return,,response,,app,,=,,Flask,(,import_name,,,,**,kwargs,),,for,,code,,in,,default_exceptions,.,iterkeys,():,,app,.,error_handler_spec,[,None,][,code,],,=,,make_json_error,,return,,app,,,This snippet by Pavel Repin can be used freely for\n    anything you like. Consider it public domain.,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/44/", "content": "Simple Pagination | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Simple Pagination,,Posted by Armin Ronacher\n    on 2011-02-17 @ 20:26\n    and filed in,Application Structure,,Unless you are using JavaScript to dynamically load more contents pagination is a neat concept to structure many items of information into multiple pages.  The idea is that if you have 100 items you show 20 per page and have 5 pages in total then.,,Simple Pagination Class,,If you are using,Flask-SQLAlchemy,you can use the integrated pagination class it provides.  Here is a simple pagination class that does roughly the same without the support for slicing SQLAlchemy query objects:,,from,,math,,import,,ceil,,class,,Pagination,(,object,):,,def,,__init__,(,self,,,,page,,,,per_page,,,,total_count,):,,self,.,page,,=,,page,,self,.,per_page,,=,,per_page,,self,.,total_count,,=,,total_count,,@property,,def,,pages,(,self,):,,return,,int,(,ceil,(,self,.,total_count,,/,,float,(,self,.,per_page,))),,@property,,def,,has_prev,(,self,):,,return,,self,.,page,,>,,1,,@property,,def,,has_next,(,self,):,,return,,self,.,page,,<,,self,.,pages,,def,,iter_pages,(,self,,,,left_edge,=,2,,,,left_current,=,2,,,,right_current,=,5,,,,right_edge,=,2,):,,last,,=,,0,,for,,num,,in,,xrange,(,1,,,,self,.,pages,,+,,1,):,,if,,num,,<=,,left_edge,,or,\\,(,num,,>,,self,.,page,,-,,left_current,,-,,1,,and,\\,num,,<,,self,.,page,,+,,right_current,),,or,\\,num,,>,,self,.,pages,,-,,right_edge,:,,if,,last,,+,,1,,!=,,num,:,,yield,,None,,yield,,num,,last,,=,,num,,,URLs and Views,,So how do you declare URLs and views when using Pagination?  The Werkzeug routing system which Flask use supports this nicely with route level defaults.  You specify a \u201cdefault\u201d for page 1 for the bare URL and provide an integer wildcard for other pages:,,from,,flask,,import,,redirect,,PER_PAGE,,=,,20,,@app.route,(,'/users/',,,,defaults,=,{,'page',:,,1,}),,@app.route,(,'/users/page/<int:page>',),,def,,show_users,(,page,):,,count,,=,,count_all_users,(),,users,,=,,get_users_for_page,(,page,,,,PER_PAGE,,,,count,),,if,,not,,users,,and,,page,,!=,,1,:,,abort,(,404,),,pagination,,=,,Pagination,(,page,,,,PER_PAGE,,,,count,),,return,,render_template,(,'users.html',,,,pagination,=,pagination,,,,users,=,users,,),,,Note how this code is returning an 404 error for all pages besides the first page if no items were there to display.  This is generally a good idea.,,When a user heads to,/users/page/1,Flask will redirect him automatically to,/users/,to keep the URL unique.,,URL Generation Helper,,Now how can a template generate a URL to a different page without much hassle?  Because the only difference from one URL to the other is the page part in it we can provide a little helper function that wraps,url_for,to generate a new URL to the same endpoint with a different page:,,def,,url_for_other_page,(,page,):,,args,,=,,request,.,view_args,.,copy,(),,args,[,'page',],,=,,page,,return,,url_for,(,request,.,endpoint,,,,**,args,),,app,.,jinja_env,.,globals,[,'url_for_other_page',],,=,,url_for_other_page,,,Rendering The Pagination,,So how do you render such a pagination?  Here is a simple macro that uses the,iter_pages,method of the pagination class to show a simple pagination:,,{%,,macro,,render_pagination,(,pagination,),,%},,<,div,,class,=,pagination,>,,{%,-,for,,page,,in,,pagination.iter_pages,(),,%},,{%,,if,,page,,%},,{%,,if,,page,,!,=,,pagination.page,,%},,<,a,,href,=,\",{{,,url_for_other_page,(,page,),,}},\",>,{{,,page,,}},</,a,>,,{%,,else,,%},,<,strong,>,{{,,page,,}},</,strong,>,,{%,,endif,,%},,{%,,else,,%},,<,span,,class,=,ellipsis,>,\u2026,</,span,>,,{%,,endif,,%},,{%,-,endfor,,%},,{%,,if,,pagination.has_next,,%},,<,a,,href,=,\",{{,,url_for_other_page,(,pagination.page,,+,,1,),,}},\",>,Next,&raquo;,</,a,>,,{%,,endif,,%},,</,div,>,,{%,,endmacro,,%},,,This snippet by Armin Ronacher can be used freely for\n    anything you like. Consider it public domain.,,,Comments,,,,small typo\n          by Christian \u015etef\u0103nescu\n          on 2011-06-08 @ 10:35,In the 'URLs and Views' section, there's a small typo:\n Pagiation(...\ninstead of\n Pagination(...,,,,Comment\n          by Wieland Hoffmann\n          on 2011-10-18 @ 20:20,The macro is missing::,,{% if pagination.has_prev %}<\n      <a href=\"{{ url_for_other_page(pagination.page - 1)\n        }}\">&laquo; Previous</a><\n    {% endif %}<,,,,Query string\n          by Geoffroy\n          on 2013-10-07 @ 09:30,The url_for_other_page function is not handling query strings in the URL. Just change the line :\nargs = request.view_args.copy() to\nargs = dict(request.view_args.items() +  request.args.to_dict().items())\nand it works fine.,,,,Comment\n          by hilfi alkaff\n          on 2014-01-29 @ 18:50,Somehow my request.view_args is empty when I have previous search results on the paginated data. I had to use request.args.copy() instead.,,,,What about zero\n          by Johnny\n          on 2014-12-06 @ 16:14,You are starting offset from 1. What about zero?\nI am getting something like select from user limit 1,20 instead 0,20 from page number 1.,,Can you somehow fix that?,,,,Fix for zero\n          by Johnny\n          on 2014-12-06 @ 17:01,In order for zero to work in you user query you could add something like (page-1):\n<pre>\nusers = get_users_for_page(page-1, PER_PAGE, count)\n</pre>,,But than query for last page will not work since you will have for example last page 10 is with -1 = 9,,,,Comment\n          by Johnny\n          on 2014-12-06 @ 17:04,anyway it would be great to have fix fro this zero problem.,,,,Comment\n          by Johnny\n          on 2014-12-06 @ 17:10,this fix thing for me:,,if pagination.pages == page:\n    page=pagination.pages\nelse:\n    page-=1,,enjoy!,,,,Comment\n          by Johnny\n          on 2014-12-06 @ 17:12,crap this last code is not working for lastpage -1 ignoreeeee!,,,,Comment\n          by Johnny\n          on 2014-12-06 @ 17:33,Finnally:,,page -=1,,and in your  Pagination class,,for num in xrange(1, self.pages + 2):,,now everything is ok.,,,,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/2/", "content": "Simple Configuration Module | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Simple Configuration Module,,Posted by Armin Ronacher\n    on 2010-05-03 @ 10:44\n    and filed in,Application Structure,,When it comes to structuring your application the question about a configuration comes up.  The easiest way to use a configuration files is to import a configuration module.,,For example you could have a file called,websiteconfig.py,that looks like this:,,DEBUG,,=,,False,,SECRET_KEY,,=,,'mysecretkey',,DATABASE_URI,,=,,'sqlite:////tmp/myapp.db,,,Then you could use it in your application as follows:,,import,,websiteconfig,,app,.,debug,,=,,websiteconfig,.,DEBUG,,app,.,secret_key,,=,,websiteconfig,.,SECRET_KEY,,,If you are using packages like outlined in the,documentation,you can put something like this into your,__init__.py,:,,import,,websiteconfig,,as,,config,,,Then you can import the config like this in any module:,,from,,yourapplication,,import,,config,,,This makes it very easy to later change the name of the config filename, to load different configuration modules based on environment or to switch the module to an INI file later.,,This snippet by Armin Ronacher can be used freely for\n    anything you like. Consider it public domain.,,,Comments,,,,Use a local_config\n          by Dan Jacob\n          on 2010-05-03 @ 11:08,Another way is to always use the same name for your config module, but to have a \"local_config\" imported into the module:,,# config.py,,DATABASE_URI,,=,,\"sqlite://\",,try,:,,from,,local_config,,import,,*,,except,,ImportError,:,,# no local config found,,pass,,,That way you can keep all your defaults the same, but provide overridden values as needed. The local_config module presumably would not be in your public repository.,,,,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/24/", "content": "Deploying Flask on Cherrypy WSGI server | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Deploying Flask on Cherrypy WSGI server,,Posted by esaurito\n    on 2010-05-31 @ 20:52\n    and filed in,Application Structure,,CherryPy,comes with a,WSGI compliant server,, so running a Flask application on top of CherryPy is a piece of cake.,,Here is the Flask hello world app for reference:,,from,,flask,,import,,Flask,,app,,=,,Flask,(,__name__,),,@app.route,(,\"/\",),,def,,hello,():,,return,,\"Hello World!\",,if,,__name__,,==,,\"__main__\",:,,app,.,run,(),,,The following snippet let you run the Flask app on top of the WSGI server shipped with CherryPy.,,from,,cherrypy,,import,,wsgiserver,,from,,hello,,import,,app,,d,,=,,wsgiserver,.,WSGIPathInfoDispatcher,({,'/',:,,app,}),,server,,=,,wsgiserver,.,CherryPyWSGIServer,((,'0.0.0.0',,,,8080,),,,d,),,if,,__name__,,==,,'__main__',:,,try,:,,server,.,start,(),,except,,KeyboardInterrupt,:,,server,.,stop,(),,,You can access the server running on 0.0.0.0:8080.\nWSGIPathInfoDispatcher take as argument a dictionary mapping a path to an application object, so you can easily deploy multiple (Flask) application on a single CherryPy server.,,This snippet by esaurito can be used freely for\n    anything you like. Consider it public domain.,,,Comments,,,,Update to snippet\n          by Keith\n          on 2013-11-28 @ 11:09,I found this worked better:,,http://fgimian.github.io/blog/2012/12/08/setting-up-a-rock-solid-python-development-web-server/,,,,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/102/", "content": "Config-based static_folder | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Config-based static_folder,,Posted by Simon Sapin\n    on 2012-10-05 @ 12:02\n    and filed in,Application Structure,,A response to,a question on the mailing-list,: how replace the,static_folder parameter,by a config value?,,import,,flask,,class,,MyFlask,(,flask,.,Flask,):,,@property,,def,,static_folder,(,self,):,,if,,self,.,config,.,get,(,'STATIC_FOLDER',),,is,,not,,None,:,,return,,os,.,path,.,join,(,self,.,root_path,,,,self,.,config,.,get,(,'STATIC_FOLDER',)),,@static_folder.setter,,def,,static_folder,(,self,,,,value,):,,self,.,config,.,get,(,'STATIC_FOLDER',),,=,,value,,# Now these are equivalent:,,app,,=,,Flask,(,__name__,,,,static_folder,=,'foo',),,app,,=,,MyFlask,(,__name__,),,app,.,config,[,'STATIC_FOLDER',],,=,,'foo',,,However since the URL rule is still created in __init__ this only work for setting a different path, not for disabling it completely with None.,,# Still no static URL rule, /static/foo.png gives HTTP 404,,app,,=,,MyFlask,(,__name__,,,,static_folder,=,None,),,app,.,config,[,'STATIC_FOLDER',],,=,,'foo',,# /static/foo.png gives HTTP 500 rather than 404:,,app,,=,,Flask,(,__name__,),,app,.,config,[,'STATIC_FOLDER',],,=,,None,,,This snippet by Simon Sapin can be used freely for\n    anything you like. Consider it public domain.,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/27/", "content": "Deploy using zc.buildout and PythonPaste | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Deploy using zc.buildout and PythonPaste,,Posted by Florent Xicluna\n    on 2010-06-04 @ 00:42\n    and filed in,Application Structure,,Foreword,,There are two common ways to develop Python applications:,,virtualenv,,zc.buildout,,,This article describes how to use,zc.buildout,to develop, deploy and run a Flask application.,,In addition it features some,pythonpaste,utilities:,,Paste,for the WSGI HTTP server (with a thread pool).,PasteDeploy,for the WSGI server (and logging) configuration.,PasteScript,to serve the application (command,bin/paster,).,,Outstanding features:,,central configuration for application and server:,buildout.cfg,,easy and repeatable deployment,run the application with different configurations,(development, production),run the server as a daemon (*nix only),run the test suite using,nose,,,Create the buildout environment,,The buildout directory should look like this:,,+-buildout_env/\n  +-bootstrap.py\n  +-buildout.cfg\n  +-etc/,|,+-deploy.ini.in\n  +-README\n  +-setup.py\n  +-src/\n    +-hello/\n      +-__init__.py\n      +-script.py\n      +-tests.py,,First create the directory structure,,~ $ mkdir buildout_env\n~ $,cd,buildout_env\n~/buildout_env $ mkdir -p etc src/hello,,Then download the,bootstrap.py,file in the buildout directory.,,Edit the,src/hello/__init__.py,file:,,# -*- coding: utf-8 -*-,,from,,flask,,import,,Flask,,,,request,,class,,_DefaultSettings,(,object,):,,USERNAME,,=,,'world',,SECRET_KEY,,=,,'development key',,DEBUG,,=,,True,,# create the application,,app,,=,,Flask,(,__name__,),,app,.,config,.,from_object,(,_DefaultSettings,),,del,,_DefaultSettings,,def,,init_db,():,,\"\"\"Create the database tables.\"\"\",,pass,,@app.route,(,'/',),,def,,index,():,,if,,request,.,args,:,,BREAK,,(,with_NameError,),,return,,'Hello,%s,!',,%,,app,.,config,[,'USERNAME',],.,title,(),,,Edit the,src/hello/tests.py,file:,,# -*- coding: utf-8 -*-,,import,,unittest,,import,,hello,,class,,HelloTestCase,(,unittest,.,TestCase,):,,def,,setUp,(,self,):,,\"\"\"Before each test, set up a blank database\"\"\",,self,.,app,,=,,hello,.,app,.,test_client,(),,hello,.,init_db,(),,def,,tearDown,(,self,):,,\"\"\"Get rid of the database again after each test.\"\"\",,pass,,def,,test_hello,(,self,):,,\"\"\"Test rendered page.\"\"\",,hello,.,app,.,config,[,'USERNAME',],,=,,'jean',,rv,,=,,self,.,app,.,get,(,'/',),,assert,,'Hello Jean!',,in,,rv,.,data,,def,,suite,():,,suite,,=,,unittest,.,TestSuite,(),,suite,.,addTest,(,unittest,.,makeSuite,(,HelloTestCase,)),,return,,suite,,if,,__name__,,==,,'__main__',:,,unittest,.,main,(),,,Edit the,src/hello/script.py,file:,,# -*- coding: utf-8 -*-,,\"\"\"Startup utilities\"\"\",,import,,os,,import,,sys,,from,,functools,,import,,partial,,import,,paste.script.command,,import,,werkzeug.script,,etc,,=,,partial,(,os,.,path,.,join,,,,'parts',,,,'etc',),,DEPLOY_INI,,=,,etc,(,'deploy.ini',),,DEPLOY_CFG,,=,,etc,(,'deploy.cfg',),,DEBUG_INI,,=,,etc,(,'debug.ini',),,DEBUG_CFG,,=,,etc,(,'debug.cfg',),,_buildout_path,,=,,__file__,,for,,i,,in,,range,(,2,,+,,__name__,.,count,(,'.',)):,,_buildout_path,,=,,os,.,path,.,dirname,(,_buildout_path,),,abspath,,=,,partial,(,os,.,path,.,join,,,,_buildout_path,),,del,,_buildout_path,,# bin/paster serve parts/etc/deploy.ini,,def,,make_app,(,global_conf,=,{},,,config,=,DEPLOY_CFG,,,,debug,=,False,):,,from,,hello,,import,,app,,app,.,config,.,from_pyfile,(,abspath,(,config,)),,app,.,debug,,=,,debug,,return,,app,,# bin/paster serve parts/etc/debug.ini,,def,,make_debug,(,global_conf,=,{},,,**,conf,):,,from,,werkzeug.debug,,import,,DebuggedApplication,,app,,=,,make_app,(,global_conf,,,,config,=,DEBUG_CFG,,,,debug,=,True,),,return,,DebuggedApplication,(,app,,,,evalex,=,True,),,# bin/flask-ctl shell,,def,,make_shell,():,,\"\"\"Interactive Flask Shell\"\"\",,from,,flask,,import,,request,,from,,hello,,import,,init_db,,as,,initdb,,app,,=,,make_app,(),,http,,=,,app,.,test_client,(),,reqctx,,=,,app,.,test_request_context,,return,,locals,(),,def,,_init_db,(,debug,=,False,,,,dry_run,=,False,):,,\"\"\"Initialize the database.\"\"\",,from,,hello,,import,,init_db,,print,,'init_db()',,if,,dry_run,:,,return,,# Configure the application,,if,,debug,:,,make_debug,(),,else,:,,make_app,(),,# Create the tables,,init_db,(),,def,,_serve,(,action,,,,debug,=,False,,,,dry_run,=,False,):,,\"\"\"Build paster command from 'action' and 'debug' flag.\"\"\",,if,,action,,==,,'initdb',:,,# First, create the tables,,return,,_init_db,(,debug,=,debug,,,,dry_run,=,dry_run,),,if,,debug,:,,config,,=,,DEBUG_INI,,else,:,,config,,=,,DEPLOY_INI,,argv,,=,,[,'bin/paster',,,,'serve',,,,config,],,if,,action,,in,,(,'start',,,,'restart',):,,argv,,+=,,[,action,,,,'--daemon',],,elif,,action,,in,,(,'',,,,'fg',,,,'foreground',):,,argv,,+=,,[,'--reload',],,else,:,,argv,,+=,,[,action,],,# Print the 'paster' command,,print,,' ',.,join,(,argv,),,if,,dry_run,:,,return,,# Configure logging and lock file,,if,,action,,in,,(,'start',,,,'stop',,,,'restart',,,,'status',):,,argv,,+=,,[,,'--log-file',,,,abspath,(,'var',,,,'log',,,,'paster.log',),,,'--pid-file',,,,abspath,(,'var',,,,'log',,,,'.paster.pid',),,,],,sys,.,argv,,=,,argv,[:,2,],,+,,[,abspath,(,config,)],,+,,argv,[,3,:],,# Run the 'paster' command,,paste,.,script,.,command,.,run,(),,# bin/flask-ctl ...,,def,,run,():,,action_shell,,=,,werkzeug,.,script,.,make_shell,(,make_shell,,,,make_shell,.,__doc__,),,# bin/flask-ctl serve [fg|start|stop|restart|status|initdb],,def,,action_serve,(,action,=,(,'a',,,,'start',),,,dry_run,=,False,):,,\"\"\"Serve the application.,,This command serves a web application that uses a paste.deploy,,configuration file for the server and application.,,Options:,,- 'action' is one of [fg|start|stop|restart|status|initdb],,- '--dry-run' print the paster command and exit,,\"\"\",,_serve,(,action,,,,debug,=,False,,,,dry_run,=,dry_run,),,# bin/flask-ctl debug [fg|start|stop|restart|status|initdb],,def,,action_debug,(,action,=,(,'a',,,,'start',),,,dry_run,=,False,):,,\"\"\"Serve the debugging application.\"\"\",,_serve,(,action,,,,debug,=,True,,,,dry_run,=,dry_run,),,# bin/flask-ctl status,,def,,action_status,(,dry_run,=,False,):,,\"\"\"Status of the application.\"\"\",,_serve,(,'status',,,,dry_run,=,dry_run,),,# bin/flask-ctl stop,,def,,action_stop,(,dry_run,=,False,):,,\"\"\"Stop the application.\"\"\",,_serve,(,'stop',,,,dry_run,=,dry_run,),,werkzeug,.,script,.,run,(),,,Create the,README,file:,,/ hello /\n\n                \"Hello World!\" application,,Edit the,setup.py,file:,,from,,setuptools,,import,,setup,,,,find_packages,,import,,os,,name,,=,,\"hello\",,version,,=,,\"0.1\",,def,,read,(,*,rnames,):,,return,,open,(,os,.,path,.,join,(,os,.,path,.,dirname,(,__file__,),,,*,rnames,)),.,read,(),,setup,(,,name,=,name,,,,version,=,version,,,,description,=,\"a hello world demo\",,,,long_description,=,read,(,'README',),,,# Get strings from http://www.python.org/pypi?%3Aaction=list_classifiers,,classifiers,=,[],,,keywords,=,\"\",,,,author,=,\"\",,,,author_email,=,'',,,,url,=,'',,,,license,=,'',,,,package_dir,=,{,'',:,,'src',},,,packages,=,find_packages,(,'src',),,,include_package_data,=,True,,,,zip_safe,=,False,,,,install_requires,=,[,,'setuptools',,,,'Flask',,,,],,,entry_points,=,\"\"\",,[console_scripts],,flask-ctl = hello.script:run,,[paste.app_factory],,main = hello.script:make_app,,debug = hello.script:make_debug,,\"\"\",,,,),,,Edit the,etc/deploy.ini.in,file:,,# ${:outfile},,#,,# Configuration for use with paster/WSGI,,#,,[loggers],,keys,,=,,root, wsgi,,[handlers],,keys,,=,,console, accesslog,,[formatters],,keys,,=,,generic, accesslog,,[formatter_generic],,format,,=,,%(asctime)s %(levelname)s [%(name)s] %(message)s,,[formatter_accesslog],,format,,=,,%(message)s,,[handler_console],,class,,=,,StreamHandler,,args,,=,,(sys.stderr,),,level,,=,,NOTSET,,formatter,,=,,generic,,[handler_accesslog],,class,,=,,FileHandler,,args,,=,,(os.path.join(r'${server:logfiles}', 'access.log'), 'a'),,level,,=,,INFO,,formatter,,=,,accesslog,,[logger_root],,level,,=,,INFO,,handlers,,=,,console,,[logger_wsgi],,level,,=,,INFO,,handlers,,=,,accesslog,,qualname,,=,,wsgi,,propagate,,=,,0,,[filter:translogger],,use,,=,,egg:Paste#translogger,,setup_console_handler,,=,,False,,logger_name,,=,,wsgi,,[app:main],,use,,=,,egg:${:app},,filter-with,,=,,translogger,,[server:main],,use,,=,,egg:Paste#http,,host,,=,,${server:host},,port,,=,,${server:port},,threadpool_workers,,=,,${:workers},,threadpool_spawn_if_under,,=,,${:spawn_if_under},,threadpool_max_requests,,=,,${:max_requests},,,Edit the,buildout.cfg,file:,,[buildout],,develop,,=,,.,,parts,,=,,app,,mkdirs,,deploy_ini,,deploy_cfg,,debug_ini,,debug_cfg,,test,,newest,,=,,false,,# eggs will be installed in the default buildout location,,# (see .buildout/default.cfg in your home directory),,# unless you specify an eggs-directory option here.,,[server],,host,,=,,127.0.0.1,,port,,=,,5000,,logfiles,,=,,${buildout:directory}/var/log,,[app],,recipe,,=,,zc.recipe.egg,,eggs,,=,,hello,,Paste,,PasteScript,,PasteDeploy,,interpreter,,=,,python-console,,[mkdirs],,recipe,,=,,z3c.recipe.mkdir,,paths,,=,,${server:logfiles},,[deploy_ini],,recipe,,=,,collective.recipe.template,,input,,=,,etc/deploy.ini.in,,output,,=,,${buildout:parts-directory}/etc/${:outfile},,outfile,,=,,deploy.ini,,app,,=,,hello,,workers,,=,,10,,spawn_if_under,,=,,5,,max_requests,,=,,100,,[debug_ini],,<,=,,deploy_ini,,outfile,,=,,debug.ini,,app,,=,,hello#debug,,workers,,=,,1,,spawn_if_under,,=,,1,,max_requests,,=,,0,,[deploy_cfg],,recipe,,=,,collective.recipe.template,,input,,=,,inline:,,# Deployment configuration,,DEBUG = False,,SECRET_KEY = 'production key',,USERNAME = 'Fernand',,output,,=,,${buildout:parts-directory}/etc/deploy.cfg,,[debug_cfg],,recipe,,=,,collective.recipe.template,,input,,=,,inline:,,# Debugging configuration,,DEBUG = True,,SECRET_KEY = 'development key',,USERNAME = 'Raoul',,output,,=,,${buildout:parts-directory}/etc/debug.cfg,,[test],,recipe,,=,,pbp.recipe.noserunner,,eggs,,=,,hello,,defaults,,=,,-v,,,Deploy the application,,First, you could save the buildout directory using your favorite DVCS, or create a tarball for future deployments.,,Then bootstrap the buildout:,,~/buildout_env $ python bootstrap.py --distribute,,Adjust your settings in,buildout.cfg,, and build the application:,,~/buildout_env $ bin/buildout,,Run the tests:,,~/buildout_env $ bin/test\nTest rendered page. ... ok\n\n------------------------------------------------------------\nRan,1,,test,in,0,.055s\n\nOK\n~/buildout_env $,,Now launch the server:,,~/buildout_env $ bin/flask-ctl debug,fg,bin/paster serve parts/etc/debug.ini --reload\nStarting subprocess with file monitor\nStarting server in PID,24862,.\nserving on http://127.0.0.1:5000,,Visit,http://127.0.0.1:5000,with your browser.,Visit,http://127.0.0.1:5000/?broken,to bring the,Werkzeug Debugger,.\nQuit the application with,Ctrl+C,.,,Note: when you change the configuration in,buildout.cfg,, you need to rebuild the application using,bin/buildout,.,,Further reading:,,http://www.buildout.org,,http://pythonpaste.org,,,This snippet by Florent Xicluna can be used freely for\n    anything you like. Consider it public domain.,,,Comments,,,,with friendly debugger\n          by Florent Xicluna\n          on 2010-06-05 @ 12:35,The multi-threading capability of the Paste server is not compatible with Werkzeug Debugger.\nI've added settings to buildout.cfg to run a single thread in debug mode, and never kill the thread.\nThe production mode is not affected.\n(See threadpool options 'workers', 'spawn_if_under' and 'max_requests'),,,,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/20/", "content": "Create your app with a function | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Create your app with a function,,Posted by Dan Jacob\n    on 2010-05-25 @ 09:05\n    and filed in,Application Structure,,A useful pattern is creating your application using a function. This allows you to pass in different configuration settings, for example in unit tests.,,For example:,,from,,flask,,import,,Flask,,from,,sqlalchemy,,import,,create_engine,,from,,myapp,,import,,config,,from,,myapp.views,,import,,frontend,,def,,create_app,(,database_uri,,,,debug,=,False,):,,app,,=,,Flask,(,__name__,),,app,.,debug,,=,,debug,,# set up your database,,app,.,engine,,=,,create_engine,(,database_uri,),,# add your modules,,app,.,register_module,(,frontend,),,# other setup tasks,,return,,app,,,Then you can do this:,,if,,__name__,,==,,\"__main__\",:,,app,,=,,create_app,(,config,.,DATABASE_URI,,,,debug,=,True,),,app,.,run,(),,,or in your unit tests:,,import,,unittest,,from,,myapp,,import,,config,,from,,myapp,,import,,create_app,,class,,TestCase,(,unittest,.,TestCase,):,,def,,setUp,(,self,):,,self,.,app,,=,,create_app,(,config,.,TEST_DATABASE_URI,),,self,.,client,,=,,self,.,app,.,test_client,(),,,This snippet by Dan Jacob can be used freely for\n    anything you like. Consider it public domain.,,,Comments,,,,Here's another use case\n          by Thiago Arruda\n          on 2011-12-31 @ 01:53,Directory structure:,,web_app/\nweb_app/locale/\nweb_app/templates/\nweb_app/static/\nweb_app/sample_app.py\nweb_app/views.py\nweb_app/run_debug.py\nweb_app/run_production.py\nweb_app/common.ini\nweb_app/development.ini\nweb_app/production.ini,,The file 'common.ini' contains some common configuration:,,BABEL_DEFAULT_LOCALE = 'pt_BR'\nBABEL_DEFAULT_TIMEZONE = 'UTC-3'\nLOGGER_NAME = 'sample_app',,LOGGING_CONFIG = {\n        'version': 1,\n        'formatters': {\n            'long': {\n                'format': '%(asctime)s %(levelname)-5.5s [%(name)s][%(threadName)s] %(message)s'\n                },\n            'short': {\n                'format': '%(message)s'\n                }\n            },\n        'handlers': {\n            'console': {\n                'class': 'logging.StreamHandler',\n                'formatter': 'short',\n                'stream': 'ext:,sys.stderr'\n                },\n            'file': {\n                'class': 'logging.handlers.RotatingFileHandler', \n                'formatter': 'long',\n                'filename': 'sample_app.log',\n                'maxBytes': 16384,\n                'backupCount': 5\n                }\n            },\n        'loggers': {\n            'sample_app': {\n                'level': 'DEBUG'\n                },\n            'sqlalchemy.engine': {\n                'propagate': True\n                },\n            'werkzeug': {\n                'propagate': True\n                }\n            },\n        'root': {\n            'level': 'INFO',\n            'handlers': ['console']\n            }\n        },,Here is 'development.ini':,,DEBUG = True\nSQLALCHEMY_DATABASE_URI = \\\n       'sqlite:,/development.db',,And here is 'production.ini':,,DEBUG = False\nSQLALCHEMY_DATABASE_URI = \\\n       'mysql:,username:password@server/db',,The 'sample_app.py' file:,,from logging.config import dictConfig\nfrom flask import Flask\nfrom flaskext.babel import Babel\nfrom flaskext.sqlalchemy import SQLAlchemy,,app = None\nbabel = None\ndb = None,,def make_app(config_files=None,\\\n             logging_config_callback=None):,,global app, babel, db\n    app = Flask(__name__)\n    app.config.from_pyfile('common.ini'),,if config_files:\n        for conf in config_files:\n            app.config.from_pyfile(conf),,logging_config = app.config['LOGGING_CONFIG']\n    if callable(logging_config_callback):\n        logging_config_callback(logging_config),,dictConfig(logging_config),,Setup extensions\n    babel = Babel(app)\n    db = SQLAlchemy(app),,Since the app object is created,we can import our views module,that depends on the 'app.route',decorator\n    from .views import *,,return app,,The 'logging_config_callback' parameter can be used to modify logging configuration. 'config_files' can be used to add a list of additional configuration files specific to some deployment. Here is run_debug.py:,,!/usr/bin/env python\nimport sample_app,,app = sample_app.make_app(config_files=\\\n     'development.ini',))\napp.run(host='127.0.0.1', port=8080),,and run_production.py:,,!/usr/bin/env python\nimport sample_app,,app = sample_app.make_app(config_files=\\\n     'production.ini',))\napp.run(host='0.0.0.0', port=80),,,,Another use case\n          by Thiago Arruda\n          on 2011-12-31 @ 04:31,Directory structure:,,web_app/\nweb_app/locale/\nweb_app/templates/\nweb_app/static/\nweb_app/sample_app.py\nweb_app/views.py\nweb_app/run_debug.py\nweb_app/run_production.py\nweb_app/common.ini\nweb_app/development.ini\nweb_app/production.ini,,The file 'common.ini' contains some common configuration:,,!python{{{\nBABEL_DEFAULT_LOCALE = 'pt_BR'\nBABEL_DEFAULT_TIMEZONE = 'UTC-3'\nLOGGER_NAME = 'sample_app',,LOGGING_CONFIG = {\n        'version': 1,\n        'formatters': {\n            'long': {\n                'format': '%(asctime)s %(levelname)-5.5s [%(name)s][%(threadName)s] %(message)s'\n                },\n            'short': {\n                'format': '%(message)s'\n                }\n            },\n        'handlers': {\n            'console': {\n                'class': 'logging.StreamHandler',\n                'formatter': 'short',\n                'stream': 'ext:,sys.stderr'\n                },\n            'file': {\n                'class': 'logging.handlers.RotatingFileHandler', \n                'formatter': 'long',\n                'filename': 'sample_app.log',\n                'maxBytes': 16384,\n                'backupCount': 5\n                }\n            },\n        'loggers': {\n            'sample_app': {\n                'level': 'DEBUG'\n                },\n            'sqlalchemy.engine': {\n                'propagate': True\n                },\n            'werkzeug': {\n                'propagate': True\n                }\n            },\n        'root': {\n            'level': 'INFO',\n            'handlers': ['console']\n            }\n        }\n}}},,Here is 'development.ini':,,!python,DEBUG = True\nSQLALCHEMY_DATABASE_URI = \\\n       'sqlite:///development.db',,,And here is 'production.ini':,,!python,DEBUG = False\nSQLALCHEMY_DATABASE_URI = \\\n       'mysql://username:password@server/db',,,The 'sample_app.py' file:,,!python{{{\nfrom logging.config import dictConfig\nfrom flask import Flask\nfrom flaskext.babel import Babel\nfrom flaskext.sqlalchemy import SQLAlchemy,,app = None\nbabel = None\ndb = None,,def make_app(config_files=None,\\\n             logging_config_callback=None):,,global app, babel, db\n    app = Flask(__name__)\n    app.config.from_pyfile('common.ini'),,if config_files:\n        for conf in config_files:\n            app.config.from_pyfile(conf),,logging_config = app.config['LOGGING_CONFIG']\n    if callable(logging_config_callback):\n        logging_config_callback(logging_config),,dictConfig(logging_config),,Setup extensions\n    babel = Babel(app)\n    db = SQLAlchemy(app),,Since the app object is created,we can import our views module,that depends on the 'app.route',decorator\n    from .views import *,,return app\n}}},,The 'logging_config_callback' parameter can be used to modify logging configuration. 'config_files' can be used to add a list of additional configuration files specific to some deployment. Here is run_debug.py:,,!python{{{,!/usr/bin/env python\nimport sample_app,,app = sample_app.make_app(config_files=\\\n     'development.ini',))\napp.run(host='127.0.0.1', port=8080)\n}}},,and run_production.py:,,!python{{{,!/usr/bin/env python\nimport sample_app,,app = sample_app.make_app(config_files=\\\n     'production.ini',))\napp.run(host='0.0.0.0', port=80)\n}}},,,,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/59/", "content": "Admin Blueprint | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Admin Blueprint,,Posted by Sean Lynch\n    on 2011-07-21 @ 03:41\n    and filed in,Application Structure,,A common need of a website is to have an admin interface that is only accessible to a subset of users (ex. users with an admin role).  Putting this code in the same modules (files) as the rest of the site can clutter things quickly.,,Here is some boilerplate that leverages the power of,Blueprints,to separate the admin views/forms/etc from the rest of the site, as well as conveniently handle the need to restrict all requests to admin views.,,__init__.py,,from,,flask,,import,,Flask,,import,,admin,,app,,=,,Flask,(,__name__,),,app,.,register_blueprint,(,admin,.,bp,,,,url_prefix,=,'/admin',),,,admin/__init__.py,,from,,flask,,import,,Blueprint,,from,,flask,,import,,redirect,,,,request,,from,,google.appengine.api,,import,,users,,bp,,=,,Blueprint,(,'admin',,,,__name__,),,@bp.before_request,,def,,restrict_bp_to_admins,():,,if,,not,,users,.,is_current_user_admin,():,,return,,redirect,(,users,.,create_login_url,(,request,.,url,)),,,This example makes use of Google App Engine's,User API,for authentication/authorization, but could easily be modified to support another authorization mechanism.,,You may also prefer to abort the request with a HTTP 403 (,abort(403),) instead of returning the user back to the login page.,,This snippet by Sean Lynch can be used freely for\n    anything you like. Consider it public domain.,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/11/", "content": "Using tornado.database with MySQL | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Using tornado.database with MySQL,,Posted by Dan Jacob\n    on 2010-05-07 @ 09:51\n    and filed in,Database,,The Tornado framework has a handy lightweight wrapper around MySQLdb:,tornado.database,,If you are using MySQL and SQLAlchemy is too much overhead this is a nicer way of working with SQL directly than using DB API, as it includes a number of convenience methods and defaults, for example hiding the underlying cursors and accessing columns through dict or object syntax. The code is small enough that it should be easy to modify to your requirements.,,Example usage in Flask:,,from,,tornado.database,,import,,Connection,,from,,flask,,import,,Flask,,,,g,,,,render_template,,app,,=,,Flask,(,__name__,),,import,,config,,@app.before_request,,def,,connect_db,():,,g,.,db,,=,,Connection,(,config,.,DB_HOST,,,,config,.,DB_NAME,,,,config,.,DB_USER,,,,config,.,DB_PASSWD,),,@app.after_request,,def,,close_connection,(,response,):,,g,.,db,.,close,(),,return,,response,,@app.route,(,\"/\",),,def,,index,():,,newsitems,,=,,g,.,db,.,iter,(,\"select * from newsitems\",),,return,,render_template,(,\"index.html\",,,,newsitems,=,newsitems,),,,{%,,for,,item,,in,,newsitems,,%},,<,h3,>,{{,,item.title,,}},</,h3,>,,{%,,endfor,,%},,,You can get much of the same functionality in SQLAlchemy 0.6 using NamedTuples, without using the ORM:,,from,,sqlalchemy,,import,,create_engine,,@app.before_request,,def,,connect_db,():,,g,.,db,,=,,create_engine,(,config,.,DB_URI,),,@app.route,(,\"/\",),,def,,index,():,,newsitems,,=,,g,.,db,.,execute,(,\"select * from newsitems\",),,# now you can do newsitem.title...,,,This snippet by Dan Jacob can be used freely for\n    anything you like. Consider it public domain.,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "librelist archives", "url": "http://librelist.com/browser/flask/", "content": "[flask] archives,,,,,,librelist archives,,,home,//,archives,//,[flask] archives,,,Fwd: Query regarding Python Flask,,by seochinna prasad\n        \n        on 2015-10-20 @ 13:07\n        \n        (0 replies),,Architecture advice for flask and nginx,,by Andrew Boag\n        \n        on 2015-09-10 @ 00:49\n        \n        (1 reply),,Using flask as a reverse proxy,,by Xavier claude\n        \n        on 2015-07-28 @ 08:15\n        \n        (0 replies),,The correct way to generate paths for files,,by Nicky Chorley\n        \n        on 2015-07-26 @ 16:36\n        \n        (1 reply),,Unsubscribe Spam?,,by Max Countryman\n        \n        on 2015-07-22 @ 15:20\n        \n        (4 replies),,Unsuscribe,,by Gabriel de Maeztu\n        \n        on 2015-07-22 @ 13:49\n        \n        (0 replies),,How to unsubscribe,,by Brad Derstine\n        \n        on 2015-07-22 @ 13:38\n        \n        (2 replies),,DRe: [flask] unsubscribe,,by andy\n        \n        on 2015-07-22 @ 11:51\n        \n        (0 replies),,Re: [Flask] using flask to build interactive web apps,,by Matt Fields\n        \n        on 2015-07-22 @ 04:12\n        \n        (1 reply),,Fwd: Mailing list,,by Cookey Ezekiel\n        \n        on 2015-07-20 @ 18:00\n        \n        (0 replies),,URL Building,,by Yannick Hagmann\n        \n        on 2015-07-20 @ 08:33\n        \n        (0 replies),,Simplest method of caching some integers,,by Corey Boyle\n        \n        on 2015-07-18 @ 19:22\n        \n        (1 reply),,Control of werkzeug logging,,by Jason Harris\n        \n        on 2015-07-18 @ 17:21\n        \n        (0 replies),,Help with a Flask Implementation,,by Shantanoo Desai\n        \n        on 2015-07-15 @ 21:16\n        \n        (0 replies),,Serving a file from a temporary subdirectory,,by rory donovan\n        \n        on 2015-07-14 @ 19:14\n        \n        (4 replies),,Switch mailing list software away from librelist?,,by Jeff Widman\n        \n        on 2015-07-14 @ 09:47\n        \n        (7 replies),,Config problems,,by Xavier\n        \n        on 2015-07-13 @ 20:46\n        \n        (8 replies),,Problem with session variable,,by Roberto Pinto\n        \n        on 2015-07-13 @ 09:35\n        \n        (0 replies),,How to send file and JSON in single POST-request with test_client()  of Flask-instance?,,by NtVisigoth\n        \n        on 2015-07-12 @ 20:35\n        \n        (0 replies),,Future of flask,,by Scott Czepiel\n        \n        on 2015-07-12 @ 00:44\n        \n        (3 replies),,C&C app with Flask,,by Reznov Ammar\n        \n        on 2015-07-09 @ 21:55\n        \n        (0 replies),,MultiThreading development:need suggestion,,by wm140906\",on 2015-07-09 @ 21:17\n        \n        (4 replies),,Flask Web Application: Need Suggestion,,by khushboo Vashi\n        \n        on 2015-07-08 @ 04:16\n        \n        (1 reply),,Fill out form + upload files -> return modified files to user,,by rory donovan\n        \n        on 2015-07-06 @ 19:12\n        \n        (3 replies),,CoAP implementation,,by Shantanoo Desai\n        \n        on 2015-07-02 @ 13:00\n        \n        (4 replies),,External functions in @hybrid_property (or other?),,by J\u00f3n Ragnarsson\n        \n        on 2015-06-26 @ 14:28\n        \n        (0 replies),,Re: Confirmation required,,by NonProprio\n        \n        on 2015-06-26 @ 14:12\n        \n        (3 replies),,Re: [flask] Flask add a back button,,by Cornejo, Brandon\n        \n        on 2015-06-24 @ 20:42\n        \n        (0 replies),,Flask add a back button,,by k_q_11\n        \n        on 2015-06-24 @ 20:07\n        \n        (0 replies),,join,,by k_q_11\n        \n        on 2015-06-24 @ 20:01\n        \n        (0 replies),,Fwd:  join,,by k_q_11\n        \n        on 2015-06-24 @ 20:00\n        \n        (2 replies),,How to get wsgi.input?,,by james hedley\n        \n        on 2015-06-23 @ 19:28\n        \n        (0 replies),,Is there any option getting ipython command prompt while running  flask ?,,by Rahul K P\n        \n        on 2015-06-23 @ 07:15\n        \n        (3 replies),,Calculating sums in jinja?,,by Alexandru\n        \n        on 2015-06-16 @ 13:48\n        \n        (7 replies),,Pagination problems,,by Faryus\n        \n        on 2015-06-15 @ 09:20\n        \n        (5 replies),,Growing pains,,by Matt Shields\n        \n        on 2015-06-08 @ 16:56\n        \n        (4 replies),,subscribe the flask mailinglist,,by lenbias34\n        \n        on 2015-06-01 @ 12:32\n        \n        (1 reply),,Fwd: Suscribe to the mailinglist,,by Anass Lahlali\n        \n        on 2015-05-20 @ 21:00\n        \n        (0 replies),,Creating nested list from one database table,,by Jerry Mccreary (Bixley)\n        \n        on 2015-05-18 @ 22:24\n        \n        (2 replies),,how to add a security context to flask?,,by David Chavez\n        \n        on 2015-05-13 @ 08:24\n        \n        (0 replies),,(Job) Get paid for extending Sphinx,,by Blaise Pabon\n        \n        on 2015-05-08 @ 06:41\n        \n        (0 replies),,@app.before_first_request,,by Erik Forsberg\n        \n        on 2015-05-06 @ 08:30\n        \n        (1 reply),,Re: marketing secrets!,,by Ted Rich\n        \n        on 2015-04-30 @ 03:49\n        \n        (0 replies),,Re: Newbie,,by bah mohamed\n        \n        on 2015-04-27 @ 17:25\n        \n        (2 replies),,Flask running on ipython interactive mode.,,by Rahul K P\n        \n        on 2015-04-26 @ 18:31\n        \n        (0 replies),,Please add me to to your SLACK channel and mailing list,,by Tamara Y. Washington\n        \n        on 2015-04-26 @ 15:49\n        \n        (0 replies),,Re: please add me to your mailing list!,,by Samuel Walsh\n        \n        on 2015-04-26 @ 04:08\n        \n        (0 replies),,wtforms.ext.sqlalchemy.fields.QuerySelectField,,by Corey Boyle\n        \n        on 2015-04-21 @ 23:00\n        \n        (0 replies),,Please help me to solve the question put i stackoverflow.,,by Rahul K P\n        \n        on 2015-04-17 @ 12:19\n        \n        (0 replies),,Ask for guideliens to extension dev,,by Sadeghi, Mehdi\n        \n        on 2015-04-14 @ 10:25\n        \n        (0 replies),,Problem with redirect crashing my app,,by Federico Delgado Doyle\n        \n        on 2015-04-10 @ 21:20\n        \n        (3 replies),,Re: [flask] How to add fields to a request?,,by Samuel \u010cavoj\n        \n        on 2015-04-10 @ 12:52\n        \n        (1 reply),,How to add fields to a request?,,by Jean Jordaan\n        \n        on 2015-04-10 @ 11:36\n        \n        (0 replies),,Re: [flask] js and flask templating,,by Samuel \u010cavoj\n        \n        on 2015-04-07 @ 09:27\n        \n        (3 replies),,js and flask templating,,by Ivan Sergio Borgonovo\n        \n        on 2015-04-06 @ 22:08\n        \n        (0 replies),,How to download the PDF documentation for flash?,,by Daisy Chou\n        \n        on 2015-04-06 @ 11:21\n        \n        (1 reply),,http://web-framework-comparison.blogspot.ie/,,by archerydwd\n        \n        on 2015-04-05 @ 12:56\n        \n        (2 replies),,Another fileformats in Flask,,by Mikko Koho\n        \n        on 2015-03-31 @ 11:28\n        \n        (3 replies),,Problems with Flask-Admin,,by Quim Moncanut\n        \n        on 2015-03-31 @ 11:15\n        \n        (1 reply),,Fwd: request to join,,by John Boyd\n        \n        on 2015-03-29 @ 11:48\n        \n        (0 replies),,Hello.py help,,by Adam Sorel\n        \n        on 2015-03-25 @ 23:17\n        \n        (4 replies),,How can I know the server has done sending my response to the client?,,by David Chavez\n        \n        on 2015-03-24 @ 08:57\n        \n        (3 replies),,Flask, external URLs, and Host headers,,by David King\n        \n        on 2015-03-22 @ 06:54\n        \n        (1 reply),,Feedback on a new flask extension,,by Sudheer Satyanarayana\n        \n        on 2015-03-21 @ 15:11\n        \n        (0 replies),,Show full http request and response on console.,,by Juan Jos\u00e9 Denis Corrales\n        \n        on 2015-03-14 @ 18:41\n        \n        (5 replies),,Trying to split a project into multiple files,,by Faryus\n        \n        on 2015-03-12 @ 11:56\n        \n        (3 replies),,Flask-swagger,,by Atli Thorbjornsson\n        \n        on 2015-03-12 @ 08:50\n        \n        (0 replies),,Session deletion?,,by Neil Sheth\n        \n        on 2015-03-11 @ 23:51\n        \n        (1 reply),,Flask development contributions,,by Winston K\n        \n        on 2015-03-11 @ 00:56\n        \n        (2 replies),,Using application context in rq worker,,by Michael Graupner\n        \n        on 2015-03-10 @ 16:55\n        \n        (2 replies),,Need alternative way to set host and port,,by Bruce Eckel\n        \n        on 2015-03-04 @ 20:41\n        \n        (3 replies),,Integrate models into flask extension,,by fouad Chennouf\n        \n        on 2015-03-03 @ 18:28\n        \n        (0 replies),,why can't install  flaskbb on my local machine?,,by \u6c34\u9759\u6d41\u6df1\n        \n        on 2015-03-03 @ 07:54\n        \n        (0 replies),,Re: TEST,,by Mathew Walton-Lamming\n        \n        on 2015-03-03 @ 07:45\n        \n        (0 replies),,Pass variable from template to view?,,by Alex C.\n        \n        on 2015-02-28 @ 09:06\n        \n        (0 replies),,Flask + hid module conflict,,by Jon Christopher\n        \n        on 2015-02-24 @ 20:01\n        \n        (2 replies),,How to refer main app's variable in app's modules?,,by Tomek Sz.\n        \n        on 2015-02-23 @ 11:46\n        \n        (3 replies),,Help on SelectMultipleField,,by Brad Hudson\n        \n        on 2015-02-18 @ 17:11\n        \n        (5 replies),,Modifying jinja loader on per request basis,,by Mark Holland\n        \n        on 2015-02-10 @ 22:40\n        \n        (1 reply),,Flask multi tenancy,,by Daniel Ferreira Jorge\n        \n        on 2015-02-06 @ 13:18\n        \n        (1 reply),,Having trouble to show uploaded image,,by Huseyin Inciler\n        \n        on 2015-02-05 @ 09:05\n        \n        (0 replies),,Testing a stream response causes trouble,,by Cornelius K\u00f6lbel\n        \n        on 2015-02-04 @ 16:25\n        \n        (0 replies),,Help with Flask-Security,,by Matt Shields\n        \n        on 2015-01-30 @ 16:50\n        \n        (3 replies),,instance_path seems not what I need,,by Cornelius K\u00f6lbel\n        \n        on 2015-01-27 @ 09:36\n        \n        (0 replies),,Hints for hosting,,by steve\n        \n        on 2015-01-18 @ 05:33\n        \n        (10 replies),,about sqlalchemy,,by \u5f20\u5b50\u817e\n        \n        on 2015-01-13 @ 05:30\n        \n        (2 replies),,question about sqlalchemy,,by \u5f20\u5b50\u817e\n        \n        on 2015-01-13 @ 05:21\n        \n        (2 replies),,Newbie question: how to query a preexisting Sqlite DB with flask-sqlalchemy,,by David Li\n        \n        on 2015-01-12 @ 21:15\n        \n        (2 replies),,Flask Divisional Blueprint,,by john\n        \n        on 2015-01-11 @ 16:01\n        \n        (7 replies),,Copy text to clipboard with ZeroClipboard,,by Mic\n        \n        on 2015-01-08 @ 05:24\n        \n        (2 replies),,Help with Json return using flask.ext.restful (marshal). Null values  on One-To-Many tables.,,by Edson Lopes\n        \n        on 2015-01-07 @ 11:21\n        \n        (0 replies),,Python 3,,by john\n        \n        on 2015-01-05 @ 15:26\n        \n        (4 replies),,show the name of friends,,by peg kh\n        \n        on 2015-01-01 @ 17:56\n        \n        (1 reply),,create a new job per HTTP request,,by sam pendleton\n        \n        on 2014-12-30 @ 20:27\n        \n        (1 reply),,raise exceptions.DatabaseAlreadyControlledError(migrate),,by peg kh\n        \n        on 2014-12-29 @ 18:00\n        \n        (1 reply),,difference between request.data and request.values,,by Cornelius K\u00f6lbel\n        \n        on 2014-12-29 @ 17:49\n        \n        (2 replies),,check the user login from database,,by peg kh\n        \n        on 2014-12-29 @ 12:27\n        \n        (1 reply),,sqlite,,by Ali Reza Zamani\n        \n        on 2014-12-23 @ 15:00\n        \n        (3 replies),,flask.ext.wtf returns only None,,by Mic\n        \n        on 2014-12-20 @ 14:38\n        \n        (2 replies),,Customize Flask WTF Forms,,by peg kh\n        \n        on 2014-12-19 @ 19:50\n        \n        (1 reply),,how validate forms in Flask-Admin,,by peg kh\n        \n        on 2014-12-18 @ 23:19\n        \n        (4 replies),,Requirement (?) to use flask.ext?,,by Joshua J. Kugler\n        \n        on 2014-12-18 @ 19:52\n        \n        (6 replies),,Declarative enum (SQLAlchemy) with WTForms,,by Dries De Smet\n        \n        on 2014-12-18 @ 17:26\n        \n        (0 replies),,accessing request object within custom decorator,,by Cornelius K\u00f6lbel\n        \n        on 2014-12-18 @ 12:23\n        \n        (1 reply),,User Management (Registration, Authentication, Sessions, etc) in Flask,,by Yaroslav Kyrpych\n        \n        on 2014-12-17 @ 22:46\n        \n        (3 replies),,Subscripting form fields,,by Dun Peal\n        \n        on 2014-12-16 @ 19:44\n        \n        (2 replies),,Strange behavior during deployment using wsgi and apache2,,by Yaroslav Kyrpych\n        \n        on 2014-12-14 @ 07:44\n        \n        (10 replies),,flask jinja looping,,by peg kh\n        \n        on 2014-12-12 @ 07:50\n        \n        (1 reply),,Flask/Flask-SQLAlchemy with Celery worker gives DetachedInstanceError's  ?,,by Dries De Smet\n        \n        on 2014-12-12 @ 07:11\n        \n        (2 replies),,flash won't show in (try, except),,by peg kh\n        \n        on 2014-12-11 @ 23:13\n        \n        (1 reply),,route information (decorator) in sphinx doc,,by Cornelius K\u00f6lbel\n        \n        on 2014-12-11 @ 18:16\n        \n        (4 replies),,Fwd: Flask-sqlalchemy Flask,,by peg kh\n        \n        on 2014-12-11 @ 15:08\n        \n        (2 replies),,Redirect form data extarnal URL with post,,by Raimon Esteve\n        \n        on 2014-12-09 @ 15:32\n        \n        (4 replies),,[flask] flask cache redis server connection timeout,,by Heejoon Lee\n        \n        on 2014-12-03 @ 09:37\n        \n        (2 replies),,Celery and SQLAlchemy: ImportError: No module named 'sqla',,by Juan Christian\n        \n        on 2014-12-01 @ 16:38\n        \n        (3 replies),,HTTPS Redirect,,by Daniel N\u00fcmm\n        \n        on 2014-12-01 @ 13:34\n        \n        (8 replies),,Why web service API in Flask is not work,,by Jerry OELoo\n        \n        on 2014-12-01 @ 08:55\n        \n        (2 replies),,How to share object between blueprint in Flask,,by \u8d75\u78ca\n        \n        on 2014-11-29 @ 05:17\n        \n        (2 replies),,validate JSON post data,,by Paul Korzhyk\n        \n        on 2014-11-28 @ 04:44\n        \n        (4 replies),,Changing Localhost,,by Sayth Renshaw\n        \n        on 2014-11-28 @ 02:59\n        \n        (2 replies),,sqlalchemy table class, inherit from base,,by Cornelius K\u00f6lbel\n        \n        on 2014-11-26 @ 14:37\n        \n        (4 replies),,Front-End Frameworks,,by Aaron Crowder\n        \n        on 2014-11-18 @ 03:33\n        \n        (17 replies),,How to create URLs from DB,,by Carlos Vazquez\n        \n        on 2014-11-17 @ 19:34\n        \n        (3 replies),,Re: Flask: pass JS variable (Ajax) to Jinja2,,by Nikos Skalis\n        \n        on 2014-11-16 @ 20:32\n        \n        (5 replies),,Fwd: Subscribe,,by Ana Py\n        \n        on 2014-11-15 @ 00:45\n        \n        (0 replies),,sqlalchemy: deleting objects,,by Cornelius K\u00f6lbel\n        \n        on 2014-11-13 @ 20:38\n        \n        (3 replies),,how to dropping privileges for different requests?,,by Artem Chekunov\n        \n        on 2014-11-13 @ 09:56\n        \n        (11 replies),,app context with configuration data from database,,by Cornelius K\u00f6lbel\n        \n        on 2014-11-12 @ 10:11\n        \n        (3 replies),,Grouping views in classes, Rails-style,,by Dun Peal\n        \n        on 2014-11-12 @ 01:00\n        \n        (6 replies),,Deploying Flask as CGI,,by Parashar Dhapola\n        \n        on 2014-11-10 @ 11:11\n        \n        (2 replies),,Using two blueprints on / and /something,,by Sudaraka Wijesinghe\n        \n        on 2014-11-10 @ 11:07\n        \n        (2 replies),,Flask curve fitting tutorial online,,by James Phillips\n        \n        on 2014-11-10 @ 00:42\n        \n        (0 replies),,How use  cache  the  jsonify(data)  by  the redis backend.,,by ydf\n        \n        on 2014-11-07 @ 09:58\n        \n        (3 replies),,Re: [flask] different domain for a url shortener within larger  application,,by \u00c5smund Tokheim\n        \n        on 2014-11-05 @ 19:02\n        \n        (1 reply),,different domain for a url shortener within larger application,,by Stephen Fuhry\n        \n        on 2014-11-05 @ 04:39\n        \n        (1 reply),,Too big data to store in session,,by Mic\n        \n        on 2014-11-05 @ 04:03\n        \n        (2 replies),,newbie help,,by Larry Martell\n        \n        on 2014-11-04 @ 13:16\n        \n        (17 replies),,migrating from pylons,,by Cornelius K\u00f6lbel\n        \n        on 2014-11-03 @ 19:58\n        \n        (1 reply),,Pagination: avoiding to rerun each time count(),,by Mic\n        \n        on 2014-10-31 @ 11:52\n        \n        (7 replies),,Looking for a Flask developer for project,,by Jerry Mccreary (Bixley)\n        \n        on 2014-10-29 @ 17:09\n        \n        (0 replies),,flask subscription,,by Hao Fu\n        \n        on 2014-10-25 @ 03:37\n        \n        (0 replies),,Flask and Postgresql Stored Procedures/Functions,,by Zanzibar Hercules\n        \n        on 2014-10-24 @ 05:24\n        \n        (2 replies),,RuntimeError Application not registered on db and no application context,,by Blake Adams\n        \n        on 2014-10-23 @ 13:00\n        \n        (7 replies),,Subdomain routing for specific blueprint,,by \uae40\ud604\uc900\n        \n        on 2014-10-23 @ 03:47\n        \n        (0 replies),,Prevent model column from being directly modified,,by Sudaraka Wijesinghe\n        \n        on 2014-10-19 @ 20:21\n        \n        (2 replies),,string parameter containing = sign,,by Mellan, Alain\n        \n        on 2014-10-17 @ 00:01\n        \n        (7 replies),,Continuous call to a thir-party site,,by Juan Christian\n        \n        on 2014-10-14 @ 23:31\n        \n        (31 replies),,Introducing Flask-Dance,,by David Baumgold\n        \n        on 2014-10-13 @ 20:05\n        \n        (2 replies),,Handling the 'remember me' login (for logging),,by Wells Oliver\n        \n        on 2014-10-11 @ 02:06\n        \n        (4 replies),,'remember me' functionality & populating the session,,by Wells Oliver\n        \n        on 2014-10-10 @ 23:34\n        \n        (1 reply),,Multi Step (Wizard) Form,,by Silviu Dicu\n        \n        on 2014-10-10 @ 01:56\n        \n        (1 reply),,How to get search form value?,,by Juan Christian\n        \n        on 2014-10-09 @ 15:14\n        \n        (6 replies),,Adding a custom jinja2 filter: I just can't get this to work!,,by Guy Matz\n        \n        on 2014-10-07 @ 12:54\n        \n        (7 replies),,How to send entire css folder to Jinja2?,,by Juan Christian\n        \n        on 2014-10-06 @ 23:12\n        \n        (5 replies),,Flask: How to show the current connections number in webpage?,,by os\n        \n        on 2014-10-05 @ 13:04\n        \n        (0 replies),,Running minitwit on Windows,,by austin aigbe\n        \n        on 2014-10-01 @ 15:31\n        \n        (4 replies),,Where to put Javascript files?,,by David Li\n        \n        on 2014-09-28 @ 04:11\n        \n        (9 replies),,Newbie Flask: How to make a continuous loop using Python 3.4.1 + Flask,,by Juan Christian\n        \n        on 2014-09-27 @ 17:05\n        \n        (7 replies),,Delegate request to one flask app to another one (on different machines),,by Office\n        \n        on 2014-09-27 @ 11:10\n        \n        (2 replies),,Re: Subscribe to flask mailinglist,,by Hakim Benoudjit\n        \n        on 2014-09-26 @ 09:50\n        \n        (1 reply),,Where to put code to authenticate a flask webapp with twitter app,,by h.benoudjit\n        \n        on 2014-09-26 @ 09:48\n        \n        (2 replies),,Refactoring views into submodules,,by Jack Maney\n        \n        on 2014-09-20 @ 00:02\n        \n        (2 replies),,Sessions using flask-sqlalchemy?,,by Nicholas Earl\n        \n        on 2014-09-18 @ 19:55\n        \n        (5 replies),,want a mail,,by \u53f6\u656c\u9633\n        \n        on 2014-09-16 @ 03:52\n        \n        (0 replies),,How does flask.g work?,,by Methos\n        \n        on 2014-09-12 @ 01:34\n        \n        (2 replies),,Re: [flask] Flask with MongoDB,,by J\u00f6rg B\u00f6nisch\n        \n        on 2014-09-04 @ 04:42\n        \n        (3 replies),,Flask with MongoDB,,by Yaroslav Kyrpych\n        \n        on 2014-09-04 @ 03:56\n        \n        (0 replies),,Fwd: DoS via SocketServer,,by Gregory Disney\n        \n        on 2014-09-02 @ 20:42\n        \n        (7 replies),,request.form and 400 Bad Request,,by Jon Ribbens\n        \n        on 2014-08-31 @ 16:58\n        \n        (2 replies),,Releases,,by boreq\n        \n        on 2014-08-29 @ 10:00\n        \n        (1 reply),,Flask freezes when visiting site with IE,,by Dennis Scheiba\n        \n        on 2014-08-29 @ 08:40\n        \n        (5 replies),,en fran\u00e7ais dans le texte,,by patrice.lecacheux@laposte.net\n        \n        on 2014-08-29 @ 08:25\n        \n        (2 replies),,Import problem with Python 3 and __main__.py,,by Jon Ribbens\n        \n        on 2014-08-27 @ 11:31\n        \n        (12 replies),,Re: [flask] getting pip installed flask to work on a debian 7  running in lxc debian hos,,by suprotip@gmail.com\n        \n        on 2014-08-25 @ 07:13\n        \n        (0 replies),,getting pip installed flask to work on a debian 7 running in lxc  debian hos,,by Suprotip\n        \n        on 2014-08-25 @ 06:20\n        \n        (1 reply),,Stream console output to Website,,by Dennis Scheiba\n        \n        on 2014-08-22 @ 11:32\n        \n        (2 replies),,virtualenv is not compatible with this system or executable,,by luofeiyu\n        \n        on 2014-08-18 @ 01:48\n        \n        (0 replies),,How can i install flask in the microblog directory?,,by luofeiyu\n        \n        on 2014-08-18 @ 01:30\n        \n        (2 replies),,encodage,,by patrice.lecacheux@laposte.net\n        \n        on 2014-08-15 @ 08:46\n        \n        (2 replies),,Re: subscribe Flask,,by Alex Yen\n        \n        on 2014-08-07 @ 23:16\n        \n        (0 replies),,Unit testing Form objects,,by Edd Grant\n        \n        on 2014-08-07 @ 13:58\n        \n        (3 replies),,embeded queue,,by bino oetomo\n        \n        on 2014-08-07 @ 09:22\n        \n        (2 replies),,Multiple Forms of the same Class,,by Christoph Blau\n        \n        on 2014-07-29 @ 13:11\n        \n        (0 replies),,To subscribe,,by JeremyWang\n        \n        on 2014-07-27 @ 15:34\n        \n        (4 replies),,Fw: Create a simple web server,,by Malviya, Urvi\n        \n        on 2014-07-22 @ 12:04\n        \n        (0 replies),,basic  question,,by \u6c34\u9759\u6d41\u6df1\n        \n        on 2014-07-22 @ 05:54\n        \n        (4 replies),,flask@librelist.com,,by zming371@gmail.com\n        \n        on 2014-07-14 @ 01:55\n        \n        (0 replies),,Authomatic and Flask - google OAuth giving None result,,by Paolo Villaflores\n        \n        on 2014-07-10 @ 00:25\n        \n        (0 replies),,Flask-WTFroms populate,,by Christoph Blau\n        \n        on 2014-07-09 @ 15:01\n        \n        (3 replies),,How to stream http request with Flask-Oauthlib,,by suefantasy .\n        \n        on 2014-07-08 @ 11:15\n        \n        (2 replies),,Test Two Flask Applications Talking To Each Other?,,by Derek Gaston\n        \n        on 2014-07-04 @ 21:53\n        \n        (0 replies),,[ANN] Introducing Metaflask,,by Armin Ronacher\n        \n        on 2014-07-03 @ 14:47\n        \n        (0 replies),,Flask, Gunicorn, SSL and /static content,,by Henry Cooke\n        \n        on 2014-06-30 @ 17:02\n        \n        (2 replies),,Flask-Login remember_me and Flask-Principal identity_loaded,,by Bouni\n        \n        on 2014-06-30 @ 15:09\n        \n        (0 replies),,Flask with multiprocessing/threading,,by Martin Piper\n        \n        on 2014-06-28 @ 14:36\n        \n        (0 replies),,teardown_appcontext and teardown_request,,by Jie Jiang\n        \n        on 2014-06-26 @ 16:06\n        \n        (7 replies),,Application Context & Best Practices,,by Rich W\n        \n        on 2014-06-26 @ 00:27\n        \n        (0 replies),,response based on accept headers,,by Daniele Sluijters\n        \n        on 2014-06-25 @ 12:20\n        \n        (1 reply),,Flask Flask-WTF Apache form does not validate,,by Moritz Beber\n        \n        on 2014-06-24 @ 16:14\n        \n        (6 replies),,User log-in with just session['id'],,by Dorian Hoxha\n        \n        on 2014-06-23 @ 17:43\n        \n        (0 replies),,Blueprint like structure but with shared templates/static dir,,by Charles Law\n        \n        on 2014-06-16 @ 23:24\n        \n        (0 replies),,Third-Party Themes,,by Greg Lindstrom\n        \n        on 2014-06-11 @ 15:23\n        \n        (1 reply),,Flash from another thread,,by Mr antback\n        \n        on 2014-05-29 @ 19:56\n        \n        (3 replies),,flask extension and init_app,,by daniel gaspar\n        \n        on 2014-05-23 @ 23:34\n        \n        (0 replies),,Problem with Flask and Serving HTTPS --,,by Marg Lyell\n        \n        on 2014-05-23 @ 16:43\n        \n        (6 replies),,Flask v0.10.1 contains a `.git` directory,,by Antoine Pelisse\n        \n        on 2014-05-21 @ 14:28\n        \n        (0 replies),,html5 and session identification,,by Bruce Adams\n        \n        on 2014-05-19 @ 07:55\n        \n        (2 replies),,Contexts,,by Anant Rao\n        \n        on 2014-05-14 @ 02:19\n        \n        (2 replies),,Jinja2 Custom Filter,,by Gary Chambers\n        \n        on 2014-05-14 @ 02:02\n        \n        (0 replies),,AttributeError: 'Flask' object has no attribute 'cli',,by Angus Macnab\n        \n        on 2014-05-09 @ 20:49\n        \n        (2 replies),,Flask Cache Busting Static Content (incl. Images),,by Fotis Gimian\n        \n        on 2014-05-08 @ 13:26\n        \n        (2 replies),,Dynamically update a validator's property for a wtforms HTML5 field?,,by Scott Werner\n        \n        on 2014-05-04 @ 03:37\n        \n        (0 replies),,Problem generating Flask docs with papersize letterpaper PDF,,by Martin Betz\n        \n        on 2014-05-01 @ 10:56\n        \n        (1 reply),,Invalid transaction persisting across requests,,by Matt Phipps\n        \n        on 2014-04-28 @ 15:27\n        \n        (0 replies),,where to put caching code in flask?,,by Oby Sumampouw\n        \n        on 2014-04-28 @ 04:00\n        \n        (0 replies),,flash a message from trigger,,by sonic steph\n        \n        on 2014-04-26 @ 17:03\n        \n        (1 reply),,Flask Restful - Return String,,by Michael Montero\n        \n        on 2014-04-25 @ 21:43\n        \n        (5 replies),,Getting Extensions Added to the Registry?,,by Randall Degges\n        \n        on 2014-04-22 @ 15:50\n        \n        (2 replies),,MarkupSafe 0.21 Released [Potentially Security Critical],,by Armin Ronacher\n        \n        on 2014-04-17 @ 09:57\n        \n        (0 replies),,Question on Application Context.,,by Byungchan An\n        \n        on 2014-04-12 @ 17:36\n        \n        (1 reply),,super object has no attribute handle_error,,by Michael Montero\n        \n        on 2014-04-08 @ 23:47\n        \n        (5 replies),,[flask-sqlalchemy] MySQL server has gone away,,by Drew Larson\n        \n        on 2014-04-08 @ 21:06\n        \n        (2 replies),,Exception Handling & MySQL Connections,,by Michael Montero\n        \n        on 2014-04-07 @ 19:11\n        \n        (1 reply),,New extension: Flask-EnvConfig,,by Lars Hansson\n        \n        on 2014-04-07 @ 08:07\n        \n        (3 replies),,mysql socket,,by St\u00e9phane Guedon\n        \n        on 2014-04-04 @ 09:33\n        \n        (1 reply),,Feedback on new authorization extension: flask-bouncer,,by Jonathan Tushman\n        \n        on 2014-04-01 @ 19:02\n        \n        (0 replies),,Possible blueprint setup race condition,,by Clemens Kolbitsch\n        \n        on 2014-04-01 @ 02:23\n        \n        (7 replies),,Flask website is not responding,,by Stefane Fermigier\n        \n        on 2014-03-28 @ 08:31\n        \n        (2 replies),,Best Practice for Adding DB Auditing with Flask and Flask-SQLAlchemy,,by Farhan\n        \n        on 2014-03-27 @ 20:51\n        \n        (3 replies),,Filtering Requests,,by Ari King\n        \n        on 2014-03-26 @ 23:15\n        \n        (3 replies),,Anyone using Flask and FoundationDB or CouchDB,,by Ethan Whitt\n        \n        on 2014-03-26 @ 00:48\n        \n        (1 reply),,Werkzeug logging of request variables,,by Sjoerd Huisman\n        \n        on 2014-03-25 @ 10:41\n        \n        (0 replies),,Flask-Restful Decimal is not JSON serializable,,by Michael Montero\n        \n        on 2014-03-24 @ 20:19\n        \n        (18 replies),,How to search items in mailing list archive,,by Byungchan An\n        \n        on 2014-03-21 @ 15:36\n        \n        (4 replies),,numerous selectfields in a html page,,by St\u00e9phane Guedon\n        \n        on 2014-03-21 @ 09:15\n        \n        (5 replies),,sub flask,,by Pengyun Li\n        \n        on 2014-03-21 @ 01:34\n        \n        (2 replies),,Form Validation with Files Attached,,by Gary Chambers\n        \n        on 2014-03-19 @ 14:46\n        \n        (7 replies),,Flask is seen POST as GET,,by Marcio Andrey Oliveira\n        \n        on 2014-03-11 @ 15:25\n        \n        (8 replies),,Extension review process,,by Ling Thio\n        \n        on 2014-03-10 @ 18:30\n        \n        (0 replies),,Getting acces to the mod_ssl environment variables through flask,,by Nicolas Pedneault\n        \n        on 2014-03-09 @ 16:23\n        \n        (3 replies),,does flask-admin work with one-to-one relationships?,,by Ricardo Filipe Soares Garcia da\n        \n        on 2014-02-26 @ 16:55\n        \n        (1 reply),,Communicating between tornado and flask,,by Hegemone Sosapi\n        \n        on 2014-02-19 @ 19:14\n        \n        (0 replies),,Flask-oauthlib for Authentication,,by Sjoerd Huisman\n        \n        on 2014-02-19 @ 10:03\n        \n        (2 replies),,Automated browser-based testing with a separate test DB,,by Peter Kehl\n        \n        on 2014-02-17 @ 06:29\n        \n        (0 replies),,flask-sqlalchemy change poolclass,,by Rafa\u0142 Bolanowski\n        \n        on 2014-02-15 @ 10:58\n        \n        (0 replies),,Best practices: flask and celery custom classes,,by Viacheslav Biriukov\n        \n        on 2014-02-14 @ 20:25\n        \n        (0 replies),,Serving static files with dev server,,by Michael Hipp\n        \n        on 2014-02-14 @ 14:52\n        \n        (10 replies),,Flask App Config SERVER_NAME,,by McCully, Sean\n        \n        on 2014-02-13 @ 15:56\n        \n        (2 replies),,WSGI Initialization and Cleanup Code?,,by Andy Sayler\n        \n        on 2014-02-10 @ 06:56\n        \n        (0 replies),,.pyc files,,by Liam J Thompson\n        \n        on 2014-02-07 @ 11:22\n        \n        (3 replies),,uwsgi + nginx + flask + sqlalchemy,,by Michael Rau\n        \n        on 2014-02-05 @ 20:48\n        \n        (0 replies),,Re: [flask] Build Array From Text File,,by Stephen Wood\n        \n        on 2014-02-04 @ 17:43\n        \n        (8 replies),,Build Array From Text File,,by Iv0ryW0lf\n        \n        on 2014-02-04 @ 16:54\n        \n        (0 replies),,Subdomain dispatching with two separate Flask app,,by Adam Jacobus\n        \n        on 2014-01-30 @ 01:26\n        \n        (7 replies),,flask_oauth OAuthException, OAuthException: Invalid response from,,by Btara Truhandarien\n        \n        on 2014-01-28 @ 12:30\n        \n        (0 replies),,debug + relative imports == fail?,,by Ben Beuchler\n        \n        on 2014-01-23 @ 16:24\n        \n        (2 replies),,Running an app on the background,,by Btara Truhandarien\n        \n        on 2014-01-23 @ 05:56\n        \n        (8 replies),,app design pattern - are Blueprints right for me?,,by Martijn van Exel\n        \n        on 2014-01-21 @ 16:32\n        \n        (1 reply),,flask autocompletion,,by Tom\u00e1\u0161 Pelka\n        \n        on 2014-01-21 @ 12:13\n        \n        (1 reply),,Flask ported to asyncio,,by Don Brown\n        \n        on 2014-01-20 @ 23:47\n        \n        (0 replies),,Need some help with streaming a movie (mp4) file,,by hbd\n        \n        on 2014-01-20 @ 08:38\n        \n        (3 replies),,Flask-SQLAlchemy: Can't query related fielsd,,by Denis Gaydukov\n        \n        on 2014-01-19 @ 12:33\n        \n        (0 replies),,Error during flask installation on W7 (Solved),,by Lo\u00efc Espern\n        \n        on 2014-01-17 @ 16:33\n        \n        (0 replies),,Fwd: How to make a drop down menu specific to an element in a table,,by Marcello Bachechi\n        \n        on 2014-01-15 @ 04:57\n        \n        (0 replies),,Waiting on I/O,,by Gary Chambers\n        \n        on 2014-01-14 @ 21:47\n        \n        (7 replies),,Exception email extension?,,by Chris Rebert\n        \n        on 2014-01-09 @ 23:28\n        \n        (3 replies),,Seeking Freelancer: Flask API,,by Miles Richardson\n        \n        on 2014-01-08 @ 00:56\n        \n        (0 replies),,cannot get url_for to work with Flask-RESTful,,by Charles Bueche\n        \n        on 2014-01-05 @ 16:49\n        \n        (10 replies),,Request for feedback on Flask-Cors,,by Cory Dolphin\n        \n        on 2013-12-30 @ 20:52\n        \n        (0 replies),,Protecting user passwords from dictionary attacks,,by J\u00f3an Petur Petersen\n        \n        on 2013-12-29 @ 18:09\n        \n        (2 replies),,developing a pastebin,,by Yasoob Khalid\n        \n        on 2013-12-27 @ 19:34\n        \n        (16 replies),,Fwd: Help with memory leak,,by mail@totokaka.io\n        \n        on 2013-12-25 @ 18:01\n        \n        (4 replies),,Hello Flask!,,by Matt Starcrest\n        \n        on 2013-12-24 @ 18:24\n        \n        (0 replies),,two instances on two ports,,by Robert Voigtl\u00e4nder\n        \n        on 2013-12-19 @ 19:56\n        \n        (1 reply),,Optional Subdomain,,by Casey Milford\n        \n        on 2013-12-16 @ 18:07\n        \n        (0 replies),,Celery, blueprints, and application factories,,by Bing Xia\n        \n        on 2013-12-16 @ 15:41\n        \n        (4 replies),,[Code review ]: Caching a function for a day,,by amri.aymen@gmail.com\n        \n        on 2013-12-14 @ 18:33\n        \n        (0 replies),,How to setup authentication with Flask plugin \"Authomatic\" ?,,by Julien Meyer\n        \n        on 2013-12-11 @ 18:12\n        \n        (4 replies),,400 error, nulls in request.data,,by Jason Corbett\n        \n        on 2013-12-06 @ 19:05\n        \n        (4 replies),,test runner never returns,,by Kees Hink\n        \n        on 2013-12-06 @ 14:12\n        \n        (1 reply),,Contacting the mailing list admin,,by Laszlo Papp\n        \n        on 2013-12-04 @ 19:01\n        \n        (0 replies),,Don't receive anymore emails in my email + can't resubscribe,,by Webmaster Shqiptarja\n        \n        on 2013-12-04 @ 16:42\n        \n        (6 replies),,Psycopg2 connection pool ? (without sqlalchemy),,by Webmaster Shqiptarja\n        \n        on 2013-12-04 @ 16:35\n        \n        (4 replies),,IE10: application error handler issue,,by Laszlo Papp\n        \n        on 2013-12-04 @ 12:05\n        \n        (5 replies),,Flask-Restless Routing Exceptions,,by Russell Holloway\n        \n        on 2013-12-02 @ 23:12\n        \n        (2 replies),,Extension : Flask-CodeMirror,,by joachim trouverie\n        \n        on 2013-12-02 @ 16:23\n        \n        (4 replies),,Flask Project Idea, share your thoughts,,by \u00d3scar M. Lage Guiti\u00e1n\n        \n        on 2013-12-02 @ 10:09\n        \n        (0 replies),,Fabrik: issue with authentication and uncompression,,by Laszlo Papp\n        \n        on 2013-12-01 @ 18:53\n        \n        (14 replies),,Help integrating app into Apache,,by Robert Schweikert\n        \n        on 2013-11-22 @ 23:02\n        \n        (4 replies),,Flask & Bower,,by Nathan Farrar\n        \n        on 2013-11-20 @ 15:07\n        \n        (3 replies),,extension: Flask + MongoDB frontend,,by Jay Goel\n        \n        on 2013-11-11 @ 06:03\n        \n        (0 replies),,Embedded controllers?,,by Torrance Hodgson\n        \n        on 2013-11-10 @ 21:55\n        \n        (4 replies),,Can we use Flask-WTF validation in Ajax based dialog forms?,,by Eko S.Wibowo\n        \n        on 2013-11-10 @ 21:40\n        \n        (3 replies),,extension: Flask-ThriftClient,,by Pierre Lamot\n        \n        on 2013-11-10 @ 19:02\n        \n        (0 replies),,Routing to links using variables defined in knockoutjs,,by Chitrank Dixit\n        \n        on 2013-11-08 @ 20:12\n        \n        (1 reply),,Flask+SSL+gunicorn+static files=problem,,by Todd Gureckis\n        \n        on 2013-11-08 @ 04:30\n        \n        (4 replies),,ImportError in nested structure,,by Marian Steinbach\n        \n        on 2013-11-07 @ 12:06\n        \n        (1 reply),,Can you use flask-wtf CSRF protection in flask-admin?,,by Tim Egbert\n        \n        on 2013-11-06 @ 23:10\n        \n        (2 replies),,Accessing Request & Session from Blueprints,,by Andy Bowes\n        \n        on 2013-11-04 @ 15:32\n        \n        (5 replies),,Flask/Django role in ExtJS application development,,by Eko S.Wibowo\n        \n        on 2013-11-03 @ 13:24\n        \n        (3 replies),,How can I solve this error from flask-admin extension when creating a ModelView?,,by Kush Goyal\n        \n        on 2013-11-02 @ 13:48\n        \n        (0 replies),,Interesting conversation on Reddit,,by Stefane Fermigier\n        \n        on 2013-10-30 @ 08:29\n        \n        (0 replies),,file size and 413,,by \u041c\u0430\u043a\u0441\u0438\u043c \u041a\u0430\u0440\u0435\u043b\u043e\u0432\n        \n        on 2013-10-29 @ 21:53\n        \n        (3 replies),,Command line tool,,by Stef K.\n        \n        on 2013-10-16 @ 10:22\n        \n        (0 replies),,Same URL pattern calling different view functions in Flask,,by Sasa Trifunovic\n        \n        on 2013-10-14 @ 16:37\n        \n        (5 replies),,Getting a blueprint to respond to its URL prefix without the trailing slash,,by Emanuil Tolev\n        \n        on 2013-10-13 @ 14:32\n        \n        (3 replies),,Logging form data for unexpected exceptions,,by Laszlo Papp\n        \n        on 2013-10-11 @ 17:47\n        \n        (1 reply),,Fwd: Flask subscription,,by Pranav R\n        \n        on 2013-10-08 @ 23:29\n        \n        (0 replies),,Flask-MongoEngine - Building Models from Existing Data,,by Nathan Farrar\n        \n        on 2013-10-07 @ 00:21\n        \n        (1 reply),,Flask-Sijax with chained selects,,by dukijub dukijub\n        \n        on 2013-10-05 @ 13:14\n        \n        (0 replies),,Using backbone with Flask and Google NDB,,by Chitrank Dixit\n        \n        on 2013-10-05 @ 05:48\n        \n        (0 replies),,New flask extension: Flask-Autodoc,,by Arnaud Coomans\n        \n        on 2013-10-01 @ 05:56\n        \n        (2 replies),,Develop flaskr on apache, 404 ERROR,,by \u6881\u6797\n        \n        on 2013-09-29 @ 03:13\n        \n        (0 replies),,flask_login and heroku,,by Marcin Szamotulski\n        \n        on 2013-09-26 @ 17:08\n        \n        (1 reply),,Aliasing one URL to another,,by Rollin Thomas\n        \n        on 2013-09-25 @ 06:49\n        \n        (3 replies),,Avoiding before_request and teardown_request for static content?,,by Stephen Wood\n        \n        on 2013-09-24 @ 22:10\n        \n        (0 replies),,Problem with Integrating Flask with Google Plus Oauth,,by Chitrank Dixit\n        \n        on 2013-09-24 @ 20:42\n        \n        (0 replies),,Flask-Login make_secure_token Question,,by D Owlf\n        \n        on 2013-09-22 @ 18:53\n        \n        (0 replies),,Flask hangs when Form Submitted,,by d hee\n        \n        on 2013-09-22 @ 05:52\n        \n        (0 replies),,Abdul Bijur V A, Joseph N. Mutumi, and Atef Haque are still waiting  for you to join Twitter...,,by Twitter\n        \n        on 2013-09-21 @ 14:33\n        \n        (0 replies),,Datetime of the Request,,by Alberto Megia\n        \n        on 2013-09-19 @ 14:22\n        \n        (8 replies),,Apache (mod-wsgi) issue,,by Laszlo Papp\n        \n        on 2013-09-19 @ 09:19\n        \n        (2 replies),,Problem debugging Flask under Python 3.3,,by Eric Smith\n        \n        on 2013-09-18 @ 16:34\n        \n        (0 replies),,Character + in a url parameter,,by S\u00e9bastien Billion\n        \n        on 2013-09-15 @ 23:35\n        \n        (6 replies),,How can I override request.form values,,by Guy Jacks\n        \n        on 2013-09-10 @ 16:49\n        \n        (9 replies),,Existing templates for flask?,,by Peter Sanders\n        \n        on 2013-09-10 @ 14:58\n        \n        (3 replies),,Packaging an application for reuse and extensibility,,by Clayton Cafiero\n        \n        on 2013-09-10 @ 13:15\n        \n        (0 replies),,another question about background queue processing (without celery/...),,by gaikokujin kun\n        \n        on 2013-09-10 @ 11:31\n        \n        (2 replies),,Reusing code across multiple sites,,by James Willson\n        \n        on 2013-09-09 @ 21:53\n        \n        (9 replies),,Populating TextField from Database,,by Gary Chambers\n        \n        on 2013-09-09 @ 15:08\n        \n        (6 replies),,Create a MultiDict in Flask,,by Guy Jacks\n        \n        on 2013-09-08 @ 21:29\n        \n        (2 replies),,Questions on CMS,,by Jonathan Chen\n        \n        on 2013-09-06 @ 08:08\n        \n        (11 replies),,Structure for small search app,,by James Willson\n        \n        on 2013-09-04 @ 16:08\n        \n        (8 replies),,Disabling stderr logging,,by Anna Sirota\n        \n        on 2013-09-04 @ 09:04\n        \n        (3 replies),,Flask-Configuration,,by Mauricio de Abreu Antunes\n        \n        on 2013-09-03 @ 19:25\n        \n        (2 replies),,Flask Web Development book now available through Packt,,by Ron DuPlain\n        \n        on 2013-08-28 @ 12:54\n        \n        (6 replies),,Paid Work [Integrate Eleastic-search with Flask],,by James Willson\n        \n        on 2013-08-27 @ 08:25\n        \n        (8 replies),,Choose Flask-based framework for REST API,,by Chu Duc Minh\n        \n        on 2013-08-27 @ 07:03\n        \n        (7 replies),,Flask + uWSGI + Nginx 502 error pages,,by Franklyn Tackitt\n        \n        on 2013-08-26 @ 22:47\n        \n        (1 reply),,more app factory help,,by Matthew Hoopes\n        \n        on 2013-08-26 @ 14:27\n        \n        (0 replies),,unicode not properly converted into pdf using xhtml2pdf,,by bibek chitrakar\n        \n        on 2013-08-25 @ 16:24\n        \n        (1 reply),,Trouble using url_for outside of templates,,by Slater Victoroff\n        \n        on 2013-08-23 @ 18:38\n        \n        (5 replies),,Many-to-many relationship model,,by Shams Madhani\n        \n        on 2013-08-23 @ 15:25\n        \n        (4 replies),,Where to start,,by Mike Sluyter\n        \n        on 2013-08-22 @ 13:44\n        \n        (2 replies),,Switching SQLAlchemy binds on the fly?,,by Matthew Hoopes\n        \n        on 2013-08-21 @ 14:20\n        \n        (3 replies),,Flask-PyMongo and Blueprint,,by Nicholas\n        \n        on 2013-08-21 @ 13:07\n        \n        (3 replies),,Alternative routing and app structure - drawbacks?,,by Cliff Kachinske\n        \n        on 2013-08-21 @ 09:19\n        \n        (4 replies),,[flask] query for date on Flask-Restless / SQLAlchemy / Postgres,,by Florian Baumgartner\n        \n        on 2013-08-19 @ 15:01\n        \n        (0 replies),,Flask / Werkzeug changes to session handling?,,by Robert Shady\n        \n        on 2013-08-19 @ 09:59\n        \n        (1 reply),,Cache on Flask-RestLess,,by Jociel Andrade\n        \n        on 2013-08-18 @ 14:49\n        \n        (1 reply),,Flask, unittests and sqlalchemy using all connections,,by Adam Patterson\n        \n        on 2013-08-17 @ 19:28\n        \n        (0 replies),,from simple app to blueprint, initialising and getting a backend,,by Daniele Sluijters\n        \n        on 2013-08-15 @ 15:06\n        \n        (2 replies),,multiple require for single route,,by bibek chitrakar\n        \n        on 2013-08-14 @ 13:36\n        \n        (1 reply),,How coule I use 'g' object?,,by Robin\n        \n        on 2013-08-11 @ 13:53\n        \n        (4 replies),,Nested recursive lazy joins with Flask-SQLAlchemy,,by Franklyn Tackitt\n        \n        on 2013-08-09 @ 18:00\n        \n        (0 replies),,Import problem using blueprints,,by Philippe Ndiaye\n        \n        on 2013-08-07 @ 19:47\n        \n        (2 replies),,Flask, mod_wsgi and apache issues,,by Laszlo Papp\n        \n        on 2013-08-07 @ 19:10\n        \n        (14 replies),,Flask, a jinja2 template and generators,,by Daniele Sluijters\n        \n        on 2013-08-05 @ 19:00\n        \n        (3 replies),,New extension Flask-Logging,,by James Ayvaz\n        \n        on 2013-08-05 @ 11:55\n        \n        (7 replies),,flask render_template url for index.html#contact,,by Uday Choudhary\n        \n        on 2013-08-05 @ 03:49\n        \n        (9 replies),,render template according to user's internet speed,,by Uday Choudhary\n        \n        on 2013-08-01 @ 07:18\n        \n        (1 reply),,Re: [flask] Understand piece of code,,by Mark Teisman\n        \n        on 2013-07-31 @ 20:50\n        \n        (1 reply),,Understand piece of code,,by Julien Debaru\n        \n        on 2013-07-31 @ 20:08\n        \n        (2 replies),,Utility for BDD/functional testing of Flask apps,,by Peter Hudec\n        \n        on 2013-07-31 @ 17:45\n        \n        (1 reply),,TemplateSyntaxError: expected token ',', got t,,by Uday Choudhary\n        \n        on 2013-07-31 @ 10:10\n        \n        (1 reply),,Get the Flask to work with python-fastcgi,,by \u0414\u0438\u043d\u0430\u0440 \u0420\u0430\u0445\u0438\u043c\u0431\u0430\u0435\u0432\n        \n        on 2013-07-30 @ 16:40\n        \n        (0 replies),,Per request, change template folders,,by Sjoerd Huisman | Congressus\n        \n        on 2013-07-30 @ 09:26\n        \n        (8 replies),,Problem with file binary data,,by Bruno Garcia\n        \n        on 2013-07-27 @ 01:43\n        \n        (2 replies),,Flask-Dropbox, login without user input.,,by lynadge\n        \n        on 2013-07-26 @ 23:27\n        \n        (4 replies),,Problem with gunicorn+flask+sqlalchemy,,by Eduardo Robles Elvira\n        \n        on 2013-07-24 @ 17:31\n        \n        (4 replies),,PDF form field submit and process,,by Co\u015fkun Deniz\n        \n        on 2013-07-23 @ 09:29\n        \n        (0 replies),,unable to properly embed and execute jQuery into flask app template,,by Uday Choudhary\n        \n        on 2013-07-21 @ 08:52\n        \n        (4 replies),,Flask-admin: problemi with custom field (re-password) immediatly  after password field,,by Massimiliano Dal Cero\n        \n        on 2013-07-19 @ 18:05\n        \n        (3 replies),,Authentication / read netrc from flask?,,by thatsanicehatyouhave@me.com\n        \n        on 2013-07-19 @ 17:06\n        \n        (0 replies),,FileStorage and excel file,,by Jay Baker\n        \n        on 2013-07-18 @ 23:51\n        \n        (4 replies),,Html and text,,by Alessio Civitillo\n        \n        on 2013-07-18 @ 16:41\n        \n        (7 replies),,Flask-Fundatio 0.1 - Flask extension to integrate the Foundation  front-end framework,,by Wouter Bolsterlee\n        \n        on 2013-07-17 @ 20:11\n        \n        (2 replies),,Blueprint only showing the rool url,,by Philippe Ndiaye\n        \n        on 2013-07-16 @ 20:08\n        \n        (5 replies),,Circular Imports and Larger Applications Doc,,by John Hutchison\n        \n        on 2013-07-16 @ 17:28\n        \n        (2 replies),,Flask applications monitoring tool,,by Yann Lambret\n        \n        on 2013-07-16 @ 12:46\n        \n        (0 replies),,how to select data from one table to insert into other in sqllite,,by Uday Choudhary\n        \n        on 2013-07-16 @ 12:33\n        \n        (8 replies),,New extension: Github-Flask,,by Cenk Alt\u0131\n        \n        on 2013-07-16 @ 07:21\n        \n        (0 replies),,WSGI performance,,by Braddock\n        \n        on 2013-07-16 @ 00:01\n        \n        (2 replies),,Parameters for the instantiation of flask.ext.restful.Resource,,by Rainer Poisel\n        \n        on 2013-07-14 @ 13:24\n        \n        (0 replies),,error: Target WSGI script not found or unable to stat,,by Kundan Singh\n        \n        on 2013-07-14 @ 07:39\n        \n        (1 reply),,Flask: should I initiate one application per file or share same application?,,by sean chen\n        \n        on 2013-07-13 @ 18:58\n        \n        (3 replies),,Regular expressions in flask urls,,by Gamesbrainiac\n        \n        on 2013-07-13 @ 10:22\n        \n        (12 replies),,Understanding WTForms,,by Gamesbrainiac\n        \n        on 2013-07-13 @ 09:59\n        \n        (3 replies),,Flask + MongoEngine + MPTT?,,by Bruno Rocha\n        \n        on 2013-07-13 @ 05:16\n        \n        (1 reply),,Multiple Database Binds without SQLAlchemy,,by Gary Chambers\n        \n        on 2013-07-12 @ 21:08\n        \n        (6 replies),,how to insert data into main table from two another tables in sqlalchemy?,,by Kundan Singh\n        \n        on 2013-07-12 @ 12:30\n        \n        (5 replies),,bubbling errors and flashing those errors,,by Daniele Sluijters\n        \n        on 2013-07-12 @ 11:35\n        \n        (0 replies),,Flask-OAuthlib extension registry,,by Hsiaoming\n        \n        on 2013-07-11 @ 04:03\n        \n        (0 replies),,Hidden Field Lost When Query Parameter is Present,,by Raj Bala\n        \n        on 2013-07-10 @ 16:38\n        \n        (6 replies),,Are you successful with Rauth and Twitter v1.1?,,by Nguy\u1ec5n H\u1ed3ng Qu\u00e2n\n        \n        on 2013-07-10 @ 08:20\n        \n        (4 replies),,Single Site with Multiple, Separate Database Connections,,by Gary Chambers\n        \n        on 2013-07-10 @ 01:53\n        \n        (4 replies),,Sharing objects in multi-module applications,,by wouter-flask@publica.duodecim.org\n        \n        on 2013-07-09 @ 10:37\n        \n        (5 replies),,Question on add_url_rule and routes,,by Harihara Vinayakaram\n        \n        on 2013-07-06 @ 17:31\n        \n        (1 reply),,Authorization hold payment system,,by Alessio Civitillo\n        \n        on 2013-07-06 @ 11:06\n        \n        (3 replies),,Using Versioned Objects recipe with Flask-sqlalchemy,,by A B\n        \n        on 2013-07-05 @ 22:25\n        \n        (0 replies),,reponsive template not working in flask app,,by Kundan Singh\n        \n        on 2013-07-05 @ 11:21\n        \n        (2 replies),,How to merge multiple message catalog files(message.po)?,,by \u8c22\u8d85\n        \n        on 2013-07-05 @ 10:40\n        \n        (0 replies),,Feedback for Flask-Kerberos extension,,by Michael Komitee\n        \n        on 2013-07-03 @ 00:28\n        \n        (0 replies),,best practices for reponsive tempates for my flask app,,by Kundan Singh\n        \n        on 2013-07-02 @ 12:41\n        \n        (2 replies),,Single Sign On,,by Jonathan Chen\n        \n        on 2013-07-01 @ 16:03\n        \n        (3 replies),,Clustering/High Availability,,by Franky Diaz Trepat\n        \n        on 2013-06-29 @ 22:04\n        \n        (1 reply),,Flask : How to make call-back fuction non-blocking using thread.,,by Parakrant Sarkar\n        \n        on 2013-06-29 @ 13:00\n        \n        (3 replies),,Pluggable Views - Assertion Error,,by Anthony Ford\n        \n        on 2013-06-29 @ 06:49\n        \n        (0 replies),,Playing a wav file from html in flask,,by Parakrant Sarkar\n        \n        on 2013-06-28 @ 09:37\n        \n        (1 reply),,How to disable session creation for an app/blueprint?,,by dorian i\n        \n        on 2013-06-27 @ 22:22\n        \n        (1 reply),,How to test a webservice,,by Pierre Aubert\n        \n        on 2013-06-27 @ 14:58\n        \n        (5 replies),,Ajax Image Uploading,,by James Willson\n        \n        on 2013-06-24 @ 14:59\n        \n        (4 replies),,Chicken and the app,,by thatsanicehatyouhave@me.com\n        \n        on 2013-06-23 @ 23:32\n        \n        (3 replies),,Solving cache issues with ETag,,by Tim Huegdon\n        \n        on 2013-06-23 @ 14:43\n        \n        (2 replies),,sharing between apps,,by Sjoerd Huisman | Congressus\n        \n        on 2013-06-23 @ 09:36\n        \n        (1 reply),,Flask as mod_wsgi - webfaction,,by Paolo Galletto\n        \n        on 2013-06-23 @ 09:12\n        \n        (7 replies),,Super simple logins,,by George Trevill\n        \n        on 2013-06-20 @ 16:36\n        \n        (5 replies),,Turn off strict_slashes on all routes,,by Matthew Lewis\n        \n        on 2013-06-19 @ 19:31\n        \n        (6 replies),,Detecting debug mode,,by thatsanicehatyouhave@me.com\n        \n        on 2013-06-19 @ 19:05\n        \n        (4 replies),,Problem using Flask-Enterprise and hyphen in SOAP method,,by Rinke Hoekstra\n        \n        on 2013-06-19 @ 18:27\n        \n        (0 replies),,flask.g change,,by Joe Angell\n        \n        on 2013-06-18 @ 18:10\n        \n        (5 replies),,Practical Flask Book Project on Kickstarter,,by Robert Picard\n        \n        on 2013-06-18 @ 13:23\n        \n        (6 replies),,Folder structure of a meaningful sized Restful API service,,by sean chen\n        \n        on 2013-06-18 @ 05:24\n        \n        (0 replies),,Security issues with top-level arrays in JSON,,by Christopher O'Donnell\n        \n        on 2013-06-18 @ 00:05\n        \n        (0 replies),,Re: Flask Problems,,by Rich Shepard\n        \n        on 2013-06-14 @ 19:59\n        \n        (3 replies),,New User: Questions on Developing an Application,,by Rich Shepard\n        \n        on 2013-06-14 @ 18:39\n        \n        (7 replies),,redis flask extension,,by Sandeep Raju\n        \n        on 2013-06-13 @ 05:33\n        \n        (6 replies),,Faking resource and context - question to the document,,by sean chen\n        \n        on 2013-06-11 @ 18:10\n        \n        (1 reply),,Hosting for less than $10 per month.,,by Mahesh Lal\n        \n        on 2013-06-11 @ 11:20\n        \n        (17 replies),,data validation?,,by thatsanicehatyouhave@me.com\n        \n        on 2013-06-09 @ 14:02\n        \n        (5 replies),,Architecture discussion,,by Ivan Kleshnin\n        \n        on 2013-06-08 @ 16:37\n        \n        (1 reply),,Need code review for a new Flask extension,,by Baiju M\n        \n        on 2013-06-07 @ 18:59\n        \n        (0 replies),,Static URL building,,by Ivan Kleshnin\n        \n        on 2013-06-06 @ 09:00\n        \n        (4 replies),,REST authentication / security.,,by Liam Atkinson\n        \n        on 2013-06-05 @ 20:36\n        \n        (2 replies),,Simple authorization / authentication on Flask with Authomatic,,by Peter Hudec\n        \n        on 2013-06-05 @ 14:16\n        \n        (0 replies),,url_for and SERVER_NAMEissues,,by Thibaut Colar\n        \n        on 2013-06-05 @ 06:48\n        \n        (0 replies),,Problem with directory names,,by Mmn\n        \n        on 2013-06-01 @ 15:26\n        \n        (2 replies),,developers for hire,,by James Lindsay\n        \n        on 2013-05-30 @ 21:13\n        \n        (0 replies),,Flask-Assets and Heroku,,by Freedom Dumlao\n        \n        on 2013-05-29 @ 17:33\n        \n        (1 reply),,Pocoo theme,,by Mark Grey\n        \n        on 2013-05-29 @ 15:11\n        \n        (5 replies),,flask website getting nginx, uwsgi error,,by Kundan Singh\n        \n        on 2013-05-27 @ 09:40\n        \n        (0 replies),,Unable to add user through Facebook login,,by Kundan Singh\n        \n        on 2013-05-25 @ 11:31\n        \n        (2 replies),,uWSGI configuration for flask app,,by Kundan Singh\n        \n        on 2013-05-25 @ 07:53\n        \n        (1 reply),,Error: uWSGI Error, Python application not found,,by Kundan Singh\n        \n        on 2013-05-25 @ 04:58\n        \n        (13 replies),,Command line arguments,,by Philip Goh\n        \n        on 2013-05-24 @ 10:38\n        \n        (1 reply),,JSON, POST responses, and quotes,,by thatsanicehatyouhave@me.com\n        \n        on 2013-05-23 @ 22:08\n        \n        (3 replies),,I'm writing a book on Flask -- suggestions wanted,,by Robert Picard\n        \n        on 2013-05-23 @ 05:36\n        \n        (13 replies),,any good Starter or Boilerplate flask app to start quickly?,,by Kundan Singh\n        \n        on 2013-05-22 @ 12:05\n        \n        (6 replies),,[ANN] Flask-RedisConfig,,by Mark Steve Samson\n        \n        on 2013-05-22 @ 02:56\n        \n        (0 replies),,uwsgi + configuration outside of app,,by thatsanicehatyouhave@me.com\n        \n        on 2013-05-21 @ 15:49\n        \n        (8 replies),,Upload file without leaving page,,by Norbert Markowicz\n        \n        on 2013-05-21 @ 03:26\n        \n        (4 replies),,http request without waiting for a response,,by Norbert Markowicz\n        \n        on 2013-05-19 @ 14:26\n        \n        (3 replies),,error: 502 bad gateway in flask app on nginx and uwsgi,,by Kundan Singh\n        \n        on 2013-05-19 @ 11:35\n        \n        (3 replies),,Regarding Flask-Mail,,by Mmn\n        \n        on 2013-05-19 @ 01:58\n        \n        (1 reply),,Error: 502 Bad Gateway while setuping up Flask app on Nignx,,by Kundan Singh\n        \n        on 2013-05-18 @ 16:17\n        \n        (2 replies),,The teardown_request can not get exception object under debug mode  (always None, but normal when debug=True)?,,by Terry Zhao\n        \n        on 2013-05-12 @ 23:42\n        \n        (2 replies),,Instances of the Dispatcher example,,by Sjoerd Huisman | Congressus\n        \n        on 2013-05-10 @ 20:16\n        \n        (0 replies),,[ANN] flask-canvas,,by Demian Brecht\n        \n        on 2013-05-09 @ 05:50\n        \n        (2 replies),,Could not configure Flask + uWSGI emperor,,by Andrey Zhidenkov\n        \n        on 2013-05-08 @ 06:50\n        \n        (8 replies),,@import less file from other blueprint.,,by lynadge\n        \n        on 2013-05-07 @ 15:42\n        \n        (4 replies),,how to do unitest for flask with g and session object,,by justy\n        \n        on 2013-05-07 @ 09:06\n        \n        (3 replies),,How to configure flask app for Ubuntu server,,by Kundan Singh\n        \n        on 2013-05-06 @ 14:34\n        \n        (2 replies),,Possible to have a thread that always runs inside the flask process?,,by dorian i\n        \n        on 2013-05-04 @ 13:59\n        \n        (1 reply),,running flask app in Ubuntu?,,by Kundan Singh\n        \n        on 2013-05-04 @ 00:55\n        \n        (4 replies),,Extend Request Timeout Time,,by Norbert Markowicz\n        \n        on 2013-05-03 @ 21:50\n        \n        (4 replies),,Flask-WTForms \"csrf_token missing\" when using SelectMultipleField,,by Bouni\n        \n        on 2013-05-03 @ 14:13\n        \n        (0 replies),,Cache for flask-sqlalchemy,,by Leon Zhou\n        \n        on 2013-05-02 @ 06:21\n        \n        (1 reply),,subscrib,,by Terry Zhao\n        \n        on 2013-05-01 @ 23:23\n        \n        (4 replies),,[flask] Obtain order of input fields from POST,,by Jakub Muszynski\n        \n        on 2013-05-01 @ 14:10\n        \n        (1 reply),,Obtain order of input fields from POST,,by Jakub Muszynski\n        \n        on 2013-05-01 @ 13:44\n        \n        (0 replies),,Logging exceptions,,by Lucas Vickers\n        \n        on 2013-04-30 @ 19:13\n        \n        (6 replies),,Static Folder Configuration - Returning HTTP 400 (Debug View),,by Kurtis Mullins\n        \n        on 2013-04-30 @ 16:50\n        \n        (2 replies),,strange redirect behaviour for canonical url in lighttpd,,by Christoph Mathys\n        \n        on 2013-04-30 @ 09:17\n        \n        (0 replies),,KVSession trouble,,by Remy Pirson\n        \n        on 2013-04-29 @ 13:15\n        \n        (3 replies),,How to resolve FastCGI process exceeded configured request timeout,,by Kundan Singh\n        \n        on 2013-04-28 @ 11:09\n        \n        (0 replies),,My register_blueprint functions got 404 error,,by \u9093\u8d85\n        \n        on 2013-04-28 @ 07:24\n        \n        (8 replies),,What is the best way to debug a flask app in deployment?,,by Adam Hogan\n        \n        on 2013-04-27 @ 22:31\n        \n        (4 replies),,Storing in app-context space?,,by David Oberst\n        \n        on 2013-04-27 @ 17:16\n        \n        (0 replies),,Re: [flask] Is there a way of serving HTTPS in Flask? -- SOLUTION,,by 0byte\n        \n        on 2013-04-27 @ 17:01\n        \n        (1 reply),,Flask-FeatureFlags 0.1 - simple feature flagging,,by Rachel Sanders\n        \n        on 2013-04-27 @ 15:57\n        \n        (5 replies),,Is there a way of serving HTTPS in Flask?,,by 0byte\n        \n        on 2013-04-27 @ 15:28\n        \n        (8 replies),,Custom Domains With Flask,,by Raj Bala\n        \n        on 2013-04-25 @ 04:19\n        \n        (2 replies),,Web framework benchmarks (techempower.com),,by Younggun Kim\n        \n        on 2013-04-24 @ 14:13\n        \n        (1 reply),,Flask app hosting option,,by Kundan Singh\n        \n        on 2013-04-23 @ 16:42\n        \n        (13 replies),,How to get Django like login page for Flask-Admin,,by Kundan Singh\n        \n        on 2013-04-22 @ 02:32\n        \n        (2 replies),,strange root_path on production with mod_wsgi,,by paalzza\n        \n        on 2013-04-21 @ 22:39\n        \n        (0 replies),,Warning: Property sortable_columns is obsolete, please use  column_sortable_list i nstead,,by Kundan Singh\n        \n        on 2013-04-21 @ 15:16\n        \n        (5 replies),,gunicorn and flask problem?,,by Tom Whitcomb\n        \n        on 2013-04-19 @ 21:58\n        \n        (0 replies),,render_template with path,,by Tom Whitcomb\n        \n        on 2013-04-19 @ 03:24\n        \n        (4 replies),,uwsgi error with 'no python application found',,by Ankun Lee\n        \n        on 2013-04-18 @ 09:42\n        \n        (1 reply),,A question in regards to integrating a horizonal sharder from the  example with flask-sqlalchemy,,by Rob Fowler\n        \n        on 2013-04-16 @ 07:21\n        \n        (0 replies),,KeyError: 'REQUEST_METHOD' when running Getting Started application  on uwsgi,,by Hsu, Ryan\n        \n        on 2013-04-15 @ 23:39\n        \n        (2 replies),,filter/tests per Blueprint,,by Ren\u00e9 Neumann\n        \n        on 2013-04-14 @ 18:58\n        \n        (1 reply),,Flask & queue design pattern,,by thatsanicehatyouhave@me.com\n        \n        on 2013-04-12 @ 22:35\n        \n        (9 replies),,how to preserve request.data,,by Dilshod Tadjibaev\n        \n        on 2013-04-12 @ 03:08\n        \n        (3 replies),,I wrote a small flask extension for managing SQLAlchemy declarative models,,by Daniel Holmstr\u00f6m\n        \n        on 2013-04-09 @ 16:25\n        \n        (3 replies),,render_template outside of blueprint,,by Peter\n        \n        on 2013-04-09 @ 13:40\n        \n        (0 replies),,How to send var to jinja from flask decorator?,,by chrickso\n        \n        on 2013-04-07 @ 04:47\n        \n        (3 replies),,Flask Digest Authentication,,by Harit Himanshu\n        \n        on 2013-04-04 @ 16:41\n        \n        (2 replies),,ur_for and blueprints.,,by Wawrzek Niewodniczanski\n        \n        on 2013-04-03 @ 08:40\n        \n        (2 replies),,Access control pattern for Flask + PG,,by Christian Jauvin\n        \n        on 2013-04-02 @ 03:26\n        \n        (7 replies),,Documentation Localization,,by Younggun Kim\n        \n        on 2013-04-01 @ 15:59\n        \n        (5 replies),,Uploading to S3 directly,,by Joe Esposito\n        \n        on 2013-04-01 @ 04:17\n        \n        (2 replies),,flask sqlalchemy setting schema,,by Jeremiah Campbell\n        \n        on 2013-03-30 @ 02:58\n        \n        (8 replies),,Circular Imports,,by Joe Greenawalt\n        \n        on 2013-03-30 @ 00:20\n        \n        (7 replies),,strange problem with gunicorn,,by Spacelee\n        \n        on 2013-03-29 @ 06:51\n        \n        (13 replies),,app.handle_exception and app.test_request_context,,by Christian Jauvin\n        \n        on 2013-03-29 @ 02:18\n        \n        (0 replies),,Testing subdomains locally,,by Adam Markham\n        \n        on 2013-03-28 @ 13:38\n        \n        (3 replies),,Trouble with login redirect,,by michael kosacki\n        \n        on 2013-03-23 @ 03:34\n        \n        (6 replies),,Questions regarding a flask project with rss and backend,,by Carsten Brueggenolte\n        \n        on 2013-03-21 @ 17:06\n        \n        (9 replies),,Announcing Korean Flask Developer's Group has just organized!,,by YoungGun Kim\n        \n        on 2013-03-21 @ 16:18\n        \n        (1 reply),,Quickest and cheapest deployment,,by Mark Grey\n        \n        on 2013-03-21 @ 15:55\n        \n        (6 replies),,Filtering unsubscribe messages,,by Mark Grey\n        \n        on 2013-03-19 @ 16:55\n        \n        (8 replies),,dynamically register blueprint...,,by Remy Pirson\n        \n        on 2013-03-19 @ 15:27\n        \n        (5 replies),,Commercial Flask project,,by bruce bushby\n        \n        on 2013-03-19 @ 13:15\n        \n        (1 reply),,Re: [flask] Re: flask-oauth and blueprints,,by Wouter Bolsterlee\n        \n        on 2013-03-19 @ 07:50\n        \n        (0 replies),,flask-oauth and blueprints,,by Alexis Georges\n        \n        on 2013-03-19 @ 07:12\n        \n        (6 replies),,Parallel execution with Sqlite access ?,,by Christophe Meessen\n        \n        on 2013-03-18 @ 10:21\n        \n        (20 replies),,Parent Jinja template cannot see Flask global object,,by \u0410\u043c\u0438\u0440 \u0410\u0445\u043c\u0430\u0434\u043e\u0432\u0438\u0447 \u041a\u0430\u0441\u0438\u043c\u043e\u0432\n        \n        on 2013-03-16 @ 13:00\n        \n        (2 replies),,Flask hosting for Flask list members,,by bruce bushby\n        \n        on 2013-03-16 @ 12:36\n        \n        (1 reply),,Cannot access global object in parent template,,by Ameretat Reith\n        \n        on 2013-03-16 @ 09:46\n        \n        (0 replies),,Announcing Flask-UUID 0.1,,by Wouter Bolsterlee\n        \n        on 2013-03-15 @ 22:32\n        \n        (0 replies),,Issue with flask not accepting commands after a certain time,,by Norbert Markowicz\n        \n        on 2013-03-14 @ 17:54\n        \n        (2 replies),,Flask Login, 2 Blueprints each with it's own Login Manager with  different user classes ?,,by dorian i\n        \n        on 2013-03-13 @ 00:16\n        \n        (1 reply),,upstream prematurely closed connection while reading response header  from upstream,,by Mario Campos\n        \n        on 2013-03-12 @ 18:38\n        \n        (5 replies),,Jinja Template Design and Variable Question,,by Carsten Br\u00fcggenolte\n        \n        on 2013-03-12 @ 18:29\n        \n        (5 replies),,Flask-Restful redirect,,by Leon Zhou\n        \n        on 2013-03-12 @ 08:07\n        \n        (5 replies),,Flask App starting twice?,,by Daniel Alan Miller\n        \n        on 2013-03-11 @ 18:11\n        \n        (2 replies),,run twisted reactor under Flask server,,by Vassili Gontcharov\n        \n        on 2013-03-09 @ 21:26\n        \n        (1 reply),,Paths,,by Wawrzek Niewodniczanski\n        \n        on 2013-03-08 @ 21:27\n        \n        (5 replies),,question about flask internals,,by paalzza\n        \n        on 2013-03-08 @ 17:00\n        \n        (5 replies),,apache question,,by Chengi Liu\n        \n        on 2013-03-07 @ 20:28\n        \n        (2 replies),,Flask application logfile is not written under Apache deployment,,by Claudio Sparpaglione\n        \n        on 2013-03-07 @ 10:20\n        \n        (2 replies),,a very noob question,,by Chengi Liu\n        \n        on 2013-03-07 @ 04:14\n        \n        (10 replies),,question on internals: LocalProxy(),,by paalzza\n        \n        on 2013-03-06 @ 23:55\n        \n        (0 replies),,redirecting in flask,,by Mohit Singh\n        \n        on 2013-03-06 @ 19:57\n        \n        (4 replies),,How to access confing settings in a view decorator,,by Alex\n        \n        on 2013-03-06 @ 15:25\n        \n        (5 replies),,deploying flask app.,,by jamal sasha\n        \n        on 2013-03-05 @ 22:59\n        \n        (6 replies),,Failing to get POST data from request.data,,by Christophe Meessen\n        \n        on 2013-03-03 @ 18:25\n        \n        (5 replies),,how can I return a file without using static folder?,,by Fazheng Li\n        \n        on 2013-03-02 @ 13:32\n        \n        (6 replies),,diagnosing http server 500 error,,by Norbert Markowicz\n        \n        on 2013-03-02 @ 02:41\n        \n        (2 replies),,Roadmap,,by Jonathan Chen\n        \n        on 2013-03-01 @ 07:00\n        \n        (13 replies),,Unknown error when doing a request,,by Jose Ayerdis\n        \n        on 2013-02-28 @ 00:12\n        \n        (2 replies),,flask static file with blueprint,,by \u6a31\u5b9d\u5b9d\n        \n        on 2013-02-25 @ 09:06\n        \n        (2 replies),,WebFaction and intermittent session variables,,by Leslie Cordell\n        \n        on 2013-02-23 @ 21:44\n        \n        (1 reply),,freelancer needed for flask project,,by jamal sasha\n        \n        on 2013-02-23 @ 21:04\n        \n        (5 replies),,[flask] URL prefix,,by William Huang\n        \n        on 2013-02-22 @ 08:12\n        \n        (10 replies),,\u56de\u590d\uff1a [flask] [off-topic] IDE for Flask, Django, Python,,by \u6a31\u5b9d\u5b9d\n        \n        on 2013-02-22 @ 07:20\n        \n        (2 replies),,cleanly exiting in flask,,by Chengi Liu\n        \n        on 2013-02-20 @ 06:07\n        \n        (2 replies),,Trailing slash inconsistency/madness between flask app on MacOS X and Linux,,by Giovanni Di Milia\n        \n        on 2013-02-19 @ 16:13\n        \n        (4 replies),,Projects to read and learn,,by Mauricio de Abreu Antunes\n        \n        on 2013-02-19 @ 11:47\n        \n        (4 replies),,Re: [flask] [off-topic] IDE for Flask, Django, Python,,by kracekumar ramaraju\n        \n        on 2013-02-19 @ 08:51\n        \n        (40 replies),,[Flask-OAuth] Multiple Twitter app?,,by Nguy\u1ec5n H\u1ed3ng Qu\u00e2n\n        \n        on 2013-02-19 @ 07:19\n        \n        (7 replies),,why does manipulation on one route function affects other,,by Chengi Liu\n        \n        on 2013-02-18 @ 21:54\n        \n        (4 replies),,Thread Locals in Flask,,by Raj Nathani\n        \n        on 2013-02-17 @ 21:06\n        \n        (5 replies),,Priority for before_request,,by Jose Ayerdis\n        \n        on 2013-02-17 @ 15:52\n        \n        (2 replies),,ds,,by \u5ba3\u94ed\u827a\n        \n        on 2013-02-17 @ 11:52\n        \n        (0 replies),,get,,by \u6a31\u5b9d\u5b9d\n        \n        on 2013-02-17 @ 11:07\n        \n        (0 replies),,Fwd:,,by \u6768\u626c authenticated\n        \n        on 2013-02-16 @ 05:42\n        \n        (1 reply),,Advice on handling request that take long time in backend,,by Chengi Liu\n        \n        on 2013-02-15 @ 22:31\n        \n        (3 replies),,Pass another object to the main flask application,,by julien lengrand-lambert\n        \n        on 2013-02-14 @ 11:59\n        \n        (5 replies),,Re: Project Hosting,,by vivek poddar\n        \n        on 2013-02-14 @ 09:46\n        \n        (20 replies),,Automatching ReWrite rules in Flask like Wordpress,,by cbrueggenolte\n        \n        on 2013-02-14 @ 08:37\n        \n        (5 replies),,Re: [flask] Known issue of Flask KVSession(Version 0.3.2) on,,by Shriram Kunchanapalli\n        \n        on 2013-02-12 @ 10:49\n        \n        (1 reply),,opening a socket at new port in flaskapp,,by Chengi Liu\n        \n        on 2013-02-12 @ 09:38\n        \n        (0 replies),,Known issue of Flask KVSession(Version 0.3.2) on apache ?,,by Bhavana Bajaj\n        \n        on 2013-02-12 @ 07:37\n        \n        (0 replies),,getting data from form and sending over a socket listening at  different port,,by jamal sasha\n        \n        on 2013-02-12 @ 01:25\n        \n        (0 replies),,Socket server - reading from socket using flask,,by Apostolos Kechagias\n        \n        on 2013-02-11 @ 13:43\n        \n        (0 replies),,autorefresh in flask,,by jamal sasha\n        \n        on 2013-02-10 @ 01:29\n        \n        (3 replies),,dynamically place decorators on all endpoint,,by Sjoerd Huisman | Congressus\n        \n        on 2013-02-09 @ 16:18\n        \n        (2 replies),,Newbie.. interacting with another python program,,by Chengi Liu\n        \n        on 2013-02-09 @ 00:09\n        \n        (8 replies),,troubleshooting issue serving static folder,,by Josh Klein\n        \n        on 2013-02-08 @ 18:07\n        \n        (3 replies),,WTForm Dropdown Menu not validated,,by Yifan Wu\n        \n        on 2013-02-08 @ 17:13\n        \n        (1 reply),,capturing the responses from page,,by jamal sasha\n        \n        on 2013-02-07 @ 07:59\n        \n        (8 replies),,Reading data from file and displaying it on browser,,by jamal sasha\n        \n        on 2013-02-07 @ 02:53\n        \n        (11 replies),,Flask-Classy view and decorator,,by Jesaja Everling\n        \n        on 2013-02-06 @ 21:29\n        \n        (2 replies),,HTTP caching library for wsgi/Flask,,by Yaniv Aknin\n        \n        on 2013-02-04 @ 09:51\n        \n        (10 replies),,dynamically accessing specific entry in database (SQLAlchemy),,by Yifan Wu\n        \n        on 2013-02-03 @ 15:57\n        \n        (2 replies),,Flask-Classy url_for,,by Luis Fernando Barrera\n        \n        on 2013-02-03 @ 10:19\n        \n        (2 replies),,Testing subdomains locally with flask's add_url_rule,,by Raj Nathani\n        \n        on 2013-02-03 @ 09:01\n        \n        (3 replies),,How to do server side cleanup on session expiration?,,by Sanjay Bhandari\n        \n        on 2013-02-02 @ 05:42\n        \n        (3 replies),,extension development example - calling property object,,by Shantanu\n        \n        on 2013-01-30 @ 05:23\n        \n        (2 replies),,Why url_for with dot work and without it doesn't,,by Jose Ayerdis\n        \n        on 2013-01-28 @ 20:34\n        \n        (4 replies),,Flask Application with multiprocessing and uwsgi,,by Olav Gr\u00f8n\u00e5s Gjerde\n        \n        on 2013-01-28 @ 16:13\n        \n        (1 reply),,Fwd: [flask] Logging errors in flask,,by Shriram Kunchanapalli\n        \n        on 2013-01-27 @ 06:30\n        \n        (0 replies),,Broken sessions with custom heroku domain name,,by Oliver Song\n        \n        on 2013-01-27 @ 05:47\n        \n        (9 replies),,Logging errors in flask,,by Jose Ayerdis\n        \n        on 2013-01-26 @ 20:26\n        \n        (0 replies),,Flask on GAE in 2012/13,,by Paul Walsh\n        \n        on 2013-01-25 @ 05:36\n        \n        (6 replies),,Implementing a Flask blueprint so that it can be safely mounted more  than once?,,by Khalil El Kouhen\n        \n        on 2013-01-24 @ 17:30\n        \n        (3 replies),,proper way to query once,,by Cord Macleod\n        \n        on 2013-01-24 @ 08:02\n        \n        (5 replies),,WSGI Middleware and Responses,,by Trey Long\n        \n        on 2013-01-23 @ 23:46\n        \n        (1 reply),,posting to a flask-restless api endpoint from a view,,by Reuben Cummings\n        \n        on 2013-01-23 @ 17:35\n        \n        (1 reply),,regularly update content,,by David Froger\n        \n        on 2013-01-22 @ 23:20\n        \n        (3 replies),,Creating a portable flask,,by Sayth Renshaw\n        \n        on 2013-01-22 @ 22:27\n        \n        (8 replies),,Advice when routes overlap,,by Desmond Rivet\n        \n        on 2013-01-20 @ 00:40\n        \n        (9 replies),,Call jinja2 macro by passing the name from a variable,,by dorian i\n        \n        on 2013-01-19 @ 18:39\n        \n        (2 replies),,OData client for Flask?,,by Owein Reese\n        \n        on 2013-01-19 @ 18:26\n        \n        (1 reply),,Extends login_required,,by Jose Ayerdis\n        \n        on 2013-01-18 @ 16:39\n        \n        (0 replies),,having many to many model trouble,,by Cord Macleod\n        \n        on 2013-01-18 @ 04:51\n        \n        (2 replies),,returning raw http (header + content ),,by bolang\n        \n        on 2013-01-18 @ 02:26\n        \n        (2 replies),,Flask login mechanisim to authenticate per token my calls,,by Jose Ayerdis\n        \n        on 2013-01-16 @ 14:36\n        \n        (2 replies),,Flask-Principal - Creating multiple identity instances,,by A B\n        \n        on 2013-01-16 @ 07:06\n        \n        (2 replies),,Help/Example for Sqlalchemy-Wtforms Edit Form,,by dorian i\n        \n        on 2013-01-15 @ 22:30\n        \n        (7 replies),,Mailing list archive no longer syncing,,by Sean Lynch\n        \n        on 2013-01-14 @ 19:17\n        \n        (0 replies),,Flask testing output report,,by Jose Ayerdis\n        \n        on 2013-01-14 @ 18:33\n        \n        (2 replies),,flask jinja and wtforms,,by Apostolos Kechagias\n        \n        on 2013-01-14 @ 17:48\n        \n        (3 replies),,ignore some endpoing in before_request validation,,by Jose Ayerdis\n        \n        on 2013-01-14 @ 07:27\n        \n        (1 reply),,Inverse of url_for?,,by Michael Parker\n        \n        on 2013-01-14 @ 03:14\n        \n        (3 replies),,Problem with Flask-Mail when used with Gunicorn only,,by Anthony Ford\n        \n        on 2013-01-13 @ 06:45\n        \n        (1 reply),,How can I simple get page generation time?,,by Tark\n        \n        on 2013-01-12 @ 22:40\n        \n        (7 replies),,New developers looking to contribute,,by satshabad khalsa\n        \n        on 2013-01-11 @ 18:27\n        \n        (2 replies),,flask-admin upload pic,,by genban tade\n        \n        on 2013-01-11 @ 10:18\n        \n        (0 replies),,current request customizing flask object,,by Jose Ayerdis\n        \n        on 2013-01-10 @ 12:19\n        \n        (6 replies),,Fwd: Code Organization,,by George V. Reilly\n        \n        on 2013-01-10 @ 01:22\n        \n        (3 replies),,send_partial_file and send_process,,by Jason A. Donenfeld\n        \n        on 2013-01-09 @ 08:37\n        \n        (1 reply),,Report of a possible bug,,by Christophe Meessen\n        \n        on 2013-01-07 @ 14:05\n        \n        (3 replies),,app.route with class method.,,by Spacelee\n        \n        on 2013-01-07 @ 06:17\n        \n        (4 replies),,Is the extension flask-themes still usable?,,by Fazheng Li\n        \n        on 2013-01-07 @ 00:34\n        \n        (4 replies),,UnicodeDecodeError in Flask app calling pysphere,,by Tames McTigue\n        \n        on 2013-01-04 @ 02:33\n        \n        (6 replies),,Flask-SQLAlchemy not propegating session options,,by Sjoerd Huisman | Congressus\n        \n        on 2013-01-03 @ 21:11\n        \n        (0 replies),,Login with redirect to inbound url,,by James Anderson\n        \n        on 2013-01-03 @ 16:43\n        \n        (4 replies),,Simple (?) Flask-SQLAlchemy problem,,by Bruce Eckel\n        \n        on 2013-01-03 @ 06:43\n        \n        (13 replies),,Static files being overshadowed by another route,,by Desmond Rivet\n        \n        on 2013-01-03 @ 02:26\n        \n        (0 replies),,Transfer-Encoding: chunked,,by James Percent\n        \n        on 2013-01-02 @ 22:21\n        \n        (1 reply),,flask-login and Apache VirtualHost errors,,by joe meiring\n        \n        on 2013-01-02 @ 20:10\n        \n        (3 replies),,Flask-Admin 1.0.4,,by Serge S. Koval\n        \n        on 2012-12-27 @ 16:15\n        \n        (3 replies),,Writing a REST API with flask,,by Todd Kennedy\n        \n        on 2012-12-24 @ 15:13\n        \n        (2 replies),,Implementing dynamic menus with blueprint-based app,,by Philip Pemberton\n        \n        on 2012-12-24 @ 03:05\n        \n        (2 replies),,SMTP logger fails when used with flask-script,,by Sean Whalen\n        \n        on 2012-12-23 @ 14:55\n        \n        (2 replies),,Re: [flask] Can't generate URLs testing Flask from the command,,by Adam Hogan\n        \n        on 2012-12-23 @ 06:30\n        \n        (0 replies),,Can't generate URLs testing Flask from the command line?,,by Adam Hogan\n        \n        on 2012-12-23 @ 05:52\n        \n        (3 replies),,How to serve static files from template directory instead of  /flaskapp/static directory?,,by Anuj Kumar\n        \n        on 2012-12-22 @ 11:02\n        \n        (1 reply),,Problem installing flask-wtf with pip and virtualenv,,by Wael Orabi\n        \n        on 2012-12-21 @ 17:37\n        \n        (5 replies),,Populating the Textarea in HTML form,,by pronoyc@gmail.com\n        \n        on 2012-12-21 @ 11:41\n        \n        (4 replies),,Help on static file in blueprint,,by Duany Baro Menendez\n        \n        on 2012-12-20 @ 20:28\n        \n        (3 replies),,app.route - redirects,,by Lucas Rolff\n        \n        on 2012-12-18 @ 09:53\n        \n        (6 replies),,multi tenancy with Flask / SQL Alchemy,,by Sjoerd Huisman | Congressus\n        \n        on 2012-12-17 @ 10:58\n        \n        (1 reply),,Problem with event streaming and aborted connections,,by Steve Brown\n        \n        on 2012-12-16 @ 15:40\n        \n        (1 reply),,Passing file uploads in forms,,by Owein Reese\n        \n        on 2012-12-15 @ 19:55\n        \n        (6 replies),,Http basic auth logout,,by Chris Fane\n        \n        on 2012-12-14 @ 10:31\n        \n        (6 replies),,Help on makinp a scientific journal with Flask,,by Jean Menezes da Rocha\n        \n        on 2012-12-12 @ 20:00\n        \n        (19 replies),,arguments to flask assets,,by Matthew Hoopes\n        \n        on 2012-12-12 @ 00:50\n        \n        (1 reply),,Re: [flask] MVC Flask SQLAlchemy,,by Kristofer M White\n        \n        on 2012-12-11 @ 07:24\n        \n        (3 replies),,MVC Flask SQLAlchemy,,by Luis Fernando Barrera\n        \n        on 2012-12-11 @ 07:04\n        \n        (2 replies),,Concurrency frameworks in development vs production,,by Haq, Salman\n        \n        on 2012-12-10 @ 18:58\n        \n        (2 replies),,Can not deploy as CGI,,by Jakob Eriksson\n        \n        on 2012-12-07 @ 16:36\n        \n        (5 replies),,Flask Google+ community,,by Sean Lynch\n        \n        on 2012-12-07 @ 05:19\n        \n        (8 replies),,Re: [flask] How do I log request data on exception?,,by Johannes Reichhardt\n        \n        on 2012-12-05 @ 10:10\n        \n        (10 replies),,How do I log request data on exception?,,by Konrad Szyc\n        \n        on 2012-12-05 @ 08:52\n        \n        (0 replies),,Flask-SQLAlchemy: Select distinct(),,by bruce bushby\n        \n        on 2012-12-04 @ 10:14\n        \n        (4 replies),,Flask tests using Flask-Oauth to login?,,by Anders Mars Ytterstr\u00f6m\n        \n        on 2012-11-29 @ 20:47\n        \n        (0 replies),,run_simple's reloader logic,,by Mark Grey\n        \n        on 2012-11-29 @ 18:05\n        \n        (6 replies),,Finding a solution to Connection Pooling,,by Raj Nathani\n        \n        on 2012-11-26 @ 19:26\n        \n        (0 replies),,Python job,,by Radoslaw Dymacz\n        \n        on 2012-11-26 @ 18:29\n        \n        (3 replies),,[flask] open relation,,by Brice Leroy\n        \n        on 2012-11-26 @ 17:12\n        \n        (5 replies),,Fwd: Werkzeug Error,,by Andy Wijaya\n        \n        on 2012-11-26 @ 11:19\n        \n        (2 replies),,Not directly related to flask a function lorem-ipsum,,by Brice Leroy\n        \n        on 2012-11-26 @ 06:51\n        \n        (4 replies),,How to unsubscribe from the Flask list,,by Matthew Frazier\n        \n        on 2012-11-26 @ 00:48\n        \n        (7 replies),,Flask login with mongoengine,,by Imran Khawaja\n        \n        on 2012-11-24 @ 19:06\n        \n        (3 replies),,blueprint state and datastores,,by Struggling Developer\n        \n        on 2012-11-21 @ 18:23\n        \n        (0 replies),,flask openid version 1.1 changes the import statement needed,,by Jason Grout\n        \n        on 2012-11-21 @ 15:19\n        \n        (15 replies),,Logging application errors with Flask,,by Raj Nathani\n        \n        on 2012-11-21 @ 08:49\n        \n        (6 replies),,Is Flask Production ready?,,by Serge G. Spaolonzi\n        \n        on 2012-11-20 @ 18:03\n        \n        (30 replies),,Ajax, Sijax, wait screen,,by Johannes Reichhardt\n        \n        on 2012-11-20 @ 08:47\n        \n        (0 replies),,New extension: static resource management with Flask-Fanstatic,,by Matt Good\n        \n        on 2012-11-19 @ 23:04\n        \n        (0 replies),,Slickspeed with flask (project announcement),,by Italo Maia\n        \n        on 2012-11-19 @ 23:02\n        \n        (1 reply),,use of fixture with Flask-SQLAlchemy and Flask-Testing - need some  help,,by Sina K\n        \n        on 2012-11-19 @ 16:53\n        \n        (17 replies),,Show flask: Tagxt,,by chrickso\n        \n        on 2012-11-19 @ 14:50\n        \n        (0 replies),,Show Flask: Grip,,by Joe Esposito\n        \n        on 2012-11-19 @ 14:16\n        \n        (6 replies),,Flask-Classy 0.5,,by Freedom Dumlao\n        \n        on 2012-11-19 @ 14:03\n        \n        (25 replies),,Accessing flask from another machine on the same network,,by Norbert Markowicz\n        \n        on 2012-11-18 @ 03:52\n        \n        (5 replies),,StatHat extension for Flask,,by Mark Steve Samson\n        \n        on 2012-11-16 @ 04:03\n        \n        (5 replies),,Zine with Flask?,,by Jonathan Chen\n        \n        on 2012-11-15 @ 22:55\n        \n        (2 replies),,Services Layer in MVC Architecture,,by Calvin Young\n        \n        on 2012-11-15 @ 19:40\n        \n        (1 reply),,Flask API design / absence of global response objects,,by Mart\u00edn Blech\n        \n        on 2012-11-15 @ 18:45\n        \n        (6 replies),,Deployment best practices,,by Mark Grey\n        \n        on 2012-11-15 @ 18:32\n        \n        (1 reply),,Confirme : ),,by forNightmare Tf\n        \n        on 2012-11-15 @ 03:38\n        \n        (0 replies),,Issue sending a file with unicode filename,,by Malphas Wats\n        \n        on 2012-11-13 @ 09:03\n        \n        (4 replies),,\"Rich textbox\" for flask,,by Jakub Muszynski\n        \n        on 2012-11-12 @ 19:45\n        \n        (12 replies),,Grequests leads to gevent threading error,,by Dan Frank\n        \n        on 2012-11-12 @ 15:11\n        \n        (1 reply),,Flask + Flask-Login == TypeError?,,by Tark\n        \n        on 2012-11-10 @ 19:14\n        \n        (0 replies),,How to allow access to files stored in a particular directory on the  flask/python server,,by Norbert Markowicz\n        \n        on 2012-11-10 @ 16:39\n        \n        (5 replies),,Bundling/Packaging Flask for Distribution,,by Jonathan Holloway\n        \n        on 2012-11-09 @ 22:50\n        \n        (0 replies),,optimizing jinja2 render,,by Jay Baker\n        \n        on 2012-11-09 @ 00:35\n        \n        (3 replies),,A shameless advert or the calendar I've written,,by Michal Kawalec\n        \n        on 2012-11-08 @ 17:02\n        \n        (0 replies),,Some help with common conventions,,by Mark Grey\n        \n        on 2012-11-07 @ 16:58\n        \n        (2 replies),,The purpose of Flask-SQLAlchemy,,by Philip Goh\n        \n        on 2012-11-07 @ 09:36\n        \n        (13 replies),,404 on first requests in before_request,,by J Glass\n        \n        on 2012-11-07 @ 02:44\n        \n        (0 replies),,Request context when passing a generator to Response(),,by Joe Shaw\n        \n        on 2012-11-05 @ 20:17\n        \n        (1 reply),,Feedback for new Flask extension,,by David Baumgold\n        \n        on 2012-11-04 @ 15:32\n        \n        (4 replies),,psycopg2 connection pool pattern,,by Christian Jauvin\n        \n        on 2012-11-03 @ 16:08\n        \n        (2 replies),,Werkzeug: form parser ignoring Content-Type charset,,by Simon Zimmermann\n        \n        on 2012-11-02 @ 21:42\n        \n        (5 replies),,show images from another folder than static,,by julio bm\n        \n        on 2012-11-02 @ 19:35\n        \n        (2 replies),,Session and store of variables,,by Dimitris Leventeas\n        \n        on 2012-11-02 @ 16:29\n        \n        (0 replies),,Problem using flask with signals,,by Gabriel Jord\u00e3o\n        \n        on 2012-11-01 @ 19:12\n        \n        (0 replies),,Do flask applications work with PyPy,,by Mahesh Lal\n        \n        on 2012-11-01 @ 15:58\n        \n        (12 replies),,[JOB] Need a Web Platform developer for @gazeMetrix,,by Debayan Banerjee\n        \n        on 2012-11-01 @ 08:06\n        \n        (0 replies),,An alternative approach to class based views,,by Freedom Dumlao\n        \n        on 2012-10-31 @ 16:27\n        \n        (26 replies),,Starting to code web python,,by Mauricio de Abreu Antunes\n        \n        on 2012-10-31 @ 00:42\n        \n        (4 replies),,Flask, Mongo,,by Serge S. Koval\n        \n        on 2012-10-30 @ 11:20\n        \n        (11 replies),,Advice on using VIM for flask development,,by Mr. White\n        \n        on 2012-10-30 @ 08:24\n        \n        (25 replies),,Suggestions for managing user settings,,by Anthony Ford\n        \n        on 2012-10-29 @ 05:54\n        \n        (6 replies),,TemplateNotFound in egg deployment,,by Col Wilson\n        \n        on 2012-10-27 @ 10:19\n        \n        (0 replies),,Flask Extension Approval Request,,by Edward Robinson\n        \n        on 2012-10-25 @ 20:52\n        \n        (0 replies),,Request context not available in MethodView,,by me@shamail.in\n        \n        on 2012-10-25 @ 09:43\n        \n        (3 replies),,Mysterious error with ImmutableMultiDict,,by Sam's Lists\n        \n        on 2012-10-25 @ 00:13\n        \n        (1 reply),,Memcached through flask/werkzeug,,by Knacktus\n        \n        on 2012-10-23 @ 15:12\n        \n        (4 replies),,Import loop with MongoEngine,,by Chris Higgins\n        \n        on 2012-10-22 @ 21:32\n        \n        (1 reply),,Blueprint usage advice,,by Desmond Rivet\n        \n        on 2012-10-21 @ 20:07\n        \n        (4 replies),,jinja and handlebars?,,by Matthew Hoopes\n        \n        on 2012-10-21 @ 03:44\n        \n        (2 replies),,advice on flask usage,,by Abhishek Pratap\n        \n        on 2012-10-19 @ 20:17\n        \n        (9 replies),,How to dynamically generate urls for requst outside of jinja?,,by James Anderson\n        \n        on 2012-10-18 @ 21:31\n        \n        (2 replies),,Re: [flask] Flask configuration best practices,,by Aaron Rothenberg\n        \n        on 2012-10-18 @ 00:43\n        \n        (1 reply),,Flask configuration best practices,,by Desmond Rivet\n        \n        on 2012-10-18 @ 00:19\n        \n        (1 reply),,Flask-Pushrod,,by Teo Klestrup R\u00f6ijezon\n        \n        on 2012-10-17 @ 22:19\n        \n        (0 replies),,login required with some public endpoints - better way to do it?,,by Malphas Wats\n        \n        on 2012-10-17 @ 09:25\n        \n        (5 replies),,Always use url_for('...', _external=True )?,,by chrickso\n        \n        on 2012-10-16 @ 13:10\n        \n        (3 replies),,How to get Twitter-Bootstrap navigation to show active link?,,by Eladio Caritos\n        \n        on 2012-10-16 @ 00:56\n        \n        (2 replies),,Flask-login auth tokens,,by Ben Judson\n        \n        on 2012-10-15 @ 22:29\n        \n        (0 replies),,HTTPS scheme in URL rules?,,by Kerem Uluta\u015f\n        \n        on 2012-10-14 @ 17:56\n        \n        (0 replies),,Static file not loading when I have a URL like localhost:5000/do/something,,by Mahesh Lal\n        \n        on 2012-10-14 @ 07:02\n        \n        (1 reply),,Can't use url_for('static', filename='smth') while rendering template  from blueprint's view,,by \u041c\u0456\u0448\u0430 \u0429\u0435\u0442\u0456\u043d\u0456\u043d\n        \n        on 2012-10-13 @ 19:31\n        \n        (0 replies),,What is an endpoint?,,by Michael Parker\n        \n        on 2012-10-13 @ 18:16\n        \n        (2 replies),,Updated Flask-Mail Example?,,by James Anderson\n        \n        on 2012-10-12 @ 23:42\n        \n        (2 replies),,Problem with logging configuration,,by Tomas Zulberti\n        \n        on 2012-10-12 @ 18:35\n        \n        (0 replies),,Strange behavior with flask and sqlalchemy,,by Dominique Schramm\n        \n        on 2012-10-11 @ 18:02\n        \n        (3 replies),,Flask Mail Woes,,by James Willson\n        \n        on 2012-10-10 @ 12:40\n        \n        (3 replies),,Flask app at webroot and delegation to other (php, perhaps) apps off root,,by Sean Davis\n        \n        on 2012-10-09 @ 19:05\n        \n        (2 replies),,_app_ctx_stack - general question,,by Aaron Rothenberg\n        \n        on 2012-10-09 @ 02:00\n        \n        (8 replies),,PyInstaller w/ Flask,,by David McKeone\n        \n        on 2012-10-07 @ 17:33\n        \n        (2 replies),,ANN: Flask 0.10 to break Sessions,,by Armin Ronacher\n        \n        on 2012-10-07 @ 14:02\n        \n        (0 replies),,How to assign a form field to a referenced field in Flask-WTF and Flask-MongoAlchemy?,,by Miquel Joy\n        \n        on 2012-10-07 @ 11:24\n        \n        (2 replies),,Add no-cache to all POST responses,,by David Small\n        \n        on 2012-10-07 @ 11:13\n        \n        (2 replies),,How to properly test a Python Flask system based on SQLAlchemy Declarative?,,by Jamie Starke\n        \n        on 2012-10-07 @ 06:13\n        \n        (2 replies),,import blueprints dynamically?,,by Malphas Wats\n        \n        on 2012-10-06 @ 11:30\n        \n        (10 replies),,Change static_folder From Configuration File,,by Ji Zhang\n        \n        on 2012-10-05 @ 10:25\n        \n        (1 reply),,Populating forms based on initial entry,,by James Anderson\n        \n        on 2012-10-03 @ 16:52\n        \n        (10 replies),,Large-app how to example missing documentation,,by Mr. White\n        \n        on 2012-10-02 @ 20:41\n        \n        (6 replies),,I appreciate any help...,,by Fernando Nava\n        \n        on 2012-10-02 @ 07:44\n        \n        (0 replies),,Detect and deal with rogue abusive web clients/bots?,,by Roman Chyla\n        \n        on 2012-10-01 @ 12:02\n        \n        (5 replies),,Who wants to maintain Flask-FlatPages?,,by Simon Sapin\n        \n        on 2012-09-27 @ 17:50\n        \n        (4 replies),,URL matching in the template,,by Sean Davis\n        \n        on 2012-09-26 @ 16:41\n        \n        (2 replies),,[flask] unsuscribe,,by Roberto Gea\n        \n        on 2012-09-26 @ 13:49\n        \n        (0 replies),,Flask-login token loader,,by Ben Judson\n        \n        on 2012-09-26 @ 13:38\n        \n        (2 replies),,Contact module in Flask,,by Bharadwaj\n        \n        on 2012-09-26 @ 05:36\n        \n        (1 reply),,[newbie] Use Flask with mod_fcgid?,,by Gilles\n        \n        on 2012-09-24 @ 16:15\n        \n        (7 replies),,Logging full URL?,,by Mark E. Haase\n        \n        on 2012-09-23 @ 23:04\n        \n        (2 replies),,How to write a test for file upload.,,by Low Kian Seong\n        \n        on 2012-09-23 @ 09:24\n        \n        (2 replies),,SqlAlchemy + Flask + Apache mod_wsgi strange caching,,by Romeo Mihalcea\n        \n        on 2012-09-22 @ 18:01\n        \n        (0 replies),,Near-English test expectations with Flask-Should-DSL,,by Graeme Coupar\n        \n        on 2012-09-22 @ 15:38\n        \n        (0 replies),,Hierarchical commands (sub-managers) now available in Flask-Script,,by Sean Lynch\n        \n        on 2012-09-22 @ 03:00\n        \n        (2 replies),,attachment filename & wget & X-Accel-Redirect,,by Demitri Muna\n        \n        on 2012-09-21 @ 18:12\n        \n        (4 replies),,How to configure 'session' to execute raw SQL statements in Flask-SQLAlchemy,,by Miquel Joy\n        \n        on 2012-09-19 @ 09:42\n        \n        (4 replies),,UniqueConstraint with flask-sqlalchemy,,by Wael Orabi\n        \n        on 2012-09-18 @ 16:04\n        \n        (2 replies),,little wizard with forms \u00bf?,,by Bernat\n        \n        on 2012-09-18 @ 07:17\n        \n        (4 replies),,Avoid reloader crashes with Flask-Failsafe,,by Matt Good\n        \n        on 2012-09-15 @ 17:36\n        \n        (9 replies),,Re: [flask ] Tag Cloud - How pa ss list of t ags in  each request\u200f,,by Igor Natd\n        \n        on 2012-09-14 @ 22:42\n        \n        (0 replies),,Re: [flask ] Tag Cloud - How pa ss list of t ags in  each   request\u200f,,by Igor Natd\n        \n        on 2012-09-14 @ 22:41\n        \n        (2 replies),,Tag Cloud  - How pass list of t ags in each request\u200f,,by Igor Natd\n        \n        on 2012-09-14 @ 21:28\n        \n        (2 replies),,App Factories + uWSGI Deployment,,by Calvin Young\n        \n        on 2012-09-12 @ 17:07\n        \n        (3 replies),,Import error with Flask Mail,,by James Willson\n        \n        on 2012-09-12 @ 08:22\n        \n        (14 replies),,How can i use backbonejs and flask together in a efficient  way? Can i?,,by lynadge\n        \n        on 2012-09-10 @ 18:28\n        \n        (4 replies),,url_for not recognizing https on heroku,,by Wael Orabi\n        \n        on 2012-09-09 @ 14:08\n        \n        (1 reply),,ValueError,,by jaudat hussain\n        \n        on 2012-09-09 @ 08:43\n        \n        (2 replies),,Weird issue with session variables vanishing,,by Mmn\n        \n        on 2012-09-08 @ 15:41\n        \n        (3 replies),,Session swapping issue on Apache,,by Dong Tao\n        \n        on 2012-09-07 @ 18:46\n        \n        (7 replies),,Deploying to a WSGI container,,by Adam Davis\n        \n        on 2012-09-06 @ 23:01\n        \n        (1 reply),,n:m helper table with additional fields,,by Gunter Vasold\n        \n        on 2012-09-04 @ 15:35\n        \n        (2 replies),,Using Flask-WTF with Flask-Babel,,by Ren\u00e9 Weiss\n        \n        on 2012-09-03 @ 07:40\n        \n        (5 replies),,Logging in third-party libraries breaks Flask logger,,by Calvin Young\n        \n        on 2012-09-02 @ 05:46\n        \n        (0 replies),,Flask at PyCarolinas 2012,,by Matthew Frazier\n        \n        on 2012-09-01 @ 18:09\n        \n        (0 replies),,Flask-SQLAlchemy and (apparently) celery (or threading?),,by Alexander Jung-Loddenkemper\n        \n        on 2012-09-01 @ 12:23\n        \n        (0 replies),,Selectively applying before_request to view functions,,by Calvin Young\n        \n        on 2012-08-31 @ 17:38\n        \n        (4 replies),,Securing Images,,by Jonathan Chen\n        \n        on 2012-08-28 @ 22:27\n        \n        (3 replies),,Flask plugin for PyCharm,,by Stefane Fermigier\n        \n        on 2012-08-28 @ 22:11\n        \n        (1 reply),,Flask-SQLAlchemy caching results?,,by Panayiotis Papadopoulos\n        \n        on 2012-08-27 @ 18:41\n        \n        (2 replies),,serving static files,,by Carlos Gonzales\n        \n        on 2012-08-27 @ 05:34\n        \n        (8 replies),,Not able to pass a URL parameter with // in it,,by Mark Haase\n        \n        on 2012-08-24 @ 22:08\n        \n        (4 replies),,guruplug (sheevaplug, plugcomputer...) what is the best way to deploy  a flask server?,,by Julio Briso-Montiano\n        \n        on 2012-08-24 @ 08:27\n        \n        (4 replies),,Common field to several models (SQLAlchemy extension),,by Carlos A. Carnero Delgado\n        \n        on 2012-08-23 @ 19:00\n        \n        (3 replies),,Flask-SQLAlchemy + Celery,,by Panayiotis Papadopoulos\n        \n        on 2012-08-20 @ 20:42\n        \n        (3 replies),,Question regarding flask mail,,by James Willson\n        \n        on 2012-08-20 @ 12:14\n        \n        (1 reply),,AWS Elastic Beanstalk now supports Python (and Flask!),,by St\u00e9fane Fermigier\n        \n        on 2012-08-20 @ 06:42\n        \n        (0 replies),,Meetup presentations - starting a new open source flask app,,by Bharadwaj Parthasarathy\n        \n        on 2012-08-20 @ 05:59\n        \n        (1 reply),,Threading/Tasking with Flask,,by Jan Riechers\n        \n        on 2012-08-19 @ 09:01\n        \n        (0 replies),,jinja2 filter to transform embeded url into anchor tag,,by Jay Baker\n        \n        on 2012-08-18 @ 19:51\n        \n        (3 replies),,Opt to not render template during tests,,by Paulo Gabriel Poiati\n        \n        on 2012-08-18 @ 02:37\n        \n        (6 replies),,Upload file error with Nginx + uWsgi + Flask,,by G_will\n        \n        on 2012-08-14 @ 16:42\n        \n        (2 replies),,Import problem with appcontext_tearing_down,,by Demitri Muna\n        \n        on 2012-08-13 @ 23:57\n        \n        (3 replies),,Weird user cookie switching problem?,,by Matthew Hoopes\n        \n        on 2012-08-12 @ 14:34\n        \n        (2 replies),,Catch all exceptions,,by Bryan Vicknair\n        \n        on 2012-08-11 @ 13:43\n        \n        (6 replies),,Using Flask-SQLAlchemy within a class,,by Kerem Uluta\u015f\n        \n        on 2012-08-10 @ 23:37\n        \n        (0 replies),,Nesting Post Data,,by blueblank\n        \n        on 2012-08-10 @ 19:40\n        \n        (2 replies),,Standard Request Logging - Not Error Logging,,by MandolinPlayer\n        \n        on 2012-08-10 @ 12:30\n        \n        (6 replies),,Deploying Flask to an Lighttpd environment,,by Daniel\n        \n        on 2012-08-09 @ 18:09\n        \n        (5 replies),,How to test a Flask app that uses WTForms FormFields,,by Scott Sturdivant\n        \n        on 2012-08-08 @ 21:26\n        \n        (0 replies),,Extending 'Flaskr' for Multiple Users?,,by James Anderson\n        \n        on 2012-08-07 @ 17:38\n        \n        (1 reply),,Flask-MongoRest: a restful API framework for MongoEngine,,by Anthony Nemitz\n        \n        on 2012-08-06 @ 22:53\n        \n        (0 replies),,Database initialization,,by Ma\u00ebl Primet\n        \n        on 2012-08-06 @ 16:35\n        \n        (3 replies),,Re: A new project,,by vivek poddar\n        \n        on 2012-08-06 @ 16:32\n        \n        (30 replies),,How to access class attribute of element inside jinja2 block?,,by Viral Sangani\n        \n        on 2012-08-03 @ 16:35\n        \n        (2 replies),,ShiningPanda for Extension Developers,,by Jonathan Zempel\n        \n        on 2012-08-03 @ 15:09\n        \n        (3 replies),,Hello everyone,,by Matias Pansa\n        \n        on 2012-08-02 @ 20:52\n        \n        (2 replies),,Large-app-how-to: TypeError: __init__() takes exactly 1 argument (4 given),,by bruce bushby\n        \n        on 2012-08-01 @ 20:13\n        \n        (5 replies),,Is this a sensible way to handle site internationalization?,,by Charlie Orford\n        \n        on 2012-08-01 @ 16:37\n        \n        (1 reply),,[Flask Login] How do we authenticate the user?,,by Mahesh Lal\n        \n        on 2012-08-01 @ 05:54\n        \n        (1 reply),,Some actions after response sent,,by Aleksandr Dezhin\n        \n        on 2012-07-31 @ 23:19\n        \n        (7 replies),,jinja question about timezone,,by Andreas Christoffersen\n        \n        on 2012-07-30 @ 13:54\n        \n        (4 replies),,Add slider,,by angela martin\n        \n        on 2012-07-30 @ 10:08\n        \n        (4 replies),,Question about Human-readable forms + REST CRUD APIs.,,by Matthew Wood\n        \n        on 2012-07-29 @ 02:39\n        \n        (3 replies),,ANN: pythonpackages.com beta,,by Alex Clark\n        \n        on 2012-07-29 @ 00:06\n        \n        (3 replies),,how to return specific field values from a mongodb document rather  than a template,,by Andrew Gordon\n        \n        on 2012-07-27 @ 23:26\n        \n        (7 replies),,render_to_template,,by Filipe Cifali\n        \n        on 2012-07-27 @ 20:29\n        \n        (3 replies),,About application init: object oriented way?,,by Kerem Uluta\u015f\n        \n        on 2012-07-27 @ 12:14\n        \n        (4 replies),,Re: [flask] flask-celery deprecated?,,by Ask Solem\n        \n        on 2012-07-26 @ 15:12\n        \n        (1 reply),,Registering blueprints makes url_for not use preferred url  scheme,,by Mark Steve Samson\n        \n        on 2012-07-26 @ 13:21\n        \n        (0 replies),,Simple method for Maintenance mode?,,by Anthony Ford\n        \n        on 2012-07-25 @ 16:33\n        \n        (3 replies),,How would I actively display a log file with flask?,,by Eric Sales\n        \n        on 2012-07-24 @ 21:32\n        \n        (5 replies),,Session Cookies and HttpOnly,,by Tobias Oberstein\n        \n        on 2012-07-24 @ 14:04\n        \n        (2 replies),,Method routing,,by Live Flex\n        \n        on 2012-07-24 @ 10:28\n        \n        (4 replies),,OperationalError with Flask-Security,,by Alex\n        \n        on 2012-07-24 @ 10:27\n        \n        (0 replies),,Trying to get AJAX to update a span  updating mongo record, but it's  opening a new page.,,by Andrew Gordon\n        \n        on 2012-07-24 @ 03:56\n        \n        (2 replies),,url with searched word,,by Mihai Sandu\n        \n        on 2012-07-23 @ 13:05\n        \n        (0 replies),,URLs with #,,by Sherjil Ozair\n        \n        on 2012-07-22 @ 22:06\n        \n        (15 replies),,upload and download file,,by Pappu Kumar\n        \n        on 2012-07-22 @ 12:22\n        \n        (0 replies),,Flask sessions,,by Live Flex\n        \n        on 2012-07-21 @ 11:24\n        \n        (9 replies),,Running Flask-Testing tests,,by dalan.miller@gmail.com\n        \n        on 2012-07-20 @ 02:42\n        \n        (7 replies),,Third party session interfaces or Flask-Login broken?,,by Smartboy\n        \n        on 2012-07-20 @ 00:17\n        \n        (1 reply),,NameError: global name 'send_file' is not defined,,by Michael Johnston\n        \n        on 2012-07-19 @ 20:16\n        \n        (1 reply),,Unable to read form data on POST,,by Sean Lynch\n        \n        on 2012-07-19 @ 14:37\n        \n        (0 replies),,[ANN] Flask-WeasyPrint 0.1,,by Simon Sapin\n        \n        on 2012-07-19 @ 13:47\n        \n        (10 replies),,Jinja2 template inheritance: extends templates outside app,,by Sergey Kucheryavski\n        \n        on 2012-07-18 @ 10:29\n        \n        (2 replies),,Flask application standard skeleton,,by bruce bushby\n        \n        on 2012-07-17 @ 09:52\n        \n        (8 replies),,Access module variables in a template,,by Malphas Wats\n        \n        on 2012-07-17 @ 08:38\n        \n        (1 reply),,flask app profiling (visualization?),,by Matthew Hoopes\n        \n        on 2012-07-16 @ 21:02\n        \n        (8 replies),,Providing different views of data over a JSON API,,by Todd Kennedy\n        \n        on 2012-07-16 @ 15:23\n        \n        (1 reply),,Oauth Provider for REST API using Flask ?,,by Anuj Kumar\n        \n        on 2012-07-16 @ 12:13\n        \n        (2 replies),,Is there a way to retrieve the value of a variable set within a for loop?,,by Ben Michie\n        \n        on 2012-07-16 @ 09:40\n        \n        (4 replies),,mod_wsgi: embedded or daemon?,,by Mark E. Haase\n        \n        on 2012-07-16 @ 01:42\n        \n        (1 reply),,How to not handle an error after you have looked at it. Reraise?,,by Adrian Ratnapala\n        \n        on 2012-07-15 @ 10:47\n        \n        (0 replies),,Flask-Mail extension not found?,,by Todd Kennedy\n        \n        on 2012-07-15 @ 05:09\n        \n        (8 replies),,Database bootstrapping,,by Adam Davis\n        \n        on 2012-07-14 @ 17:54\n        \n        (3 replies),,Flask, reverse proxies and request.url,,by Adrian Ratnapala\n        \n        on 2012-07-14 @ 16:24\n        \n        (2 replies),,Find which keys are in a session cookie.,,by Adrian Ratnapala\n        \n        on 2012-07-14 @ 16:10\n        \n        (0 replies),,Help with 1st time mod_wsgi config,,by Andreas Christoffersen\n        \n        on 2012-07-14 @ 15:25\n        \n        (11 replies),,Default error handler?,,by Mark Haase\n        \n        on 2012-07-12 @ 20:22\n        \n        (5 replies),,Accidently a flask opener,,by ol\n        \n        on 2012-07-12 @ 18:15\n        \n        (0 replies),,problem with the Flaskr example in the documentation,,by Tony Wang\n        \n        on 2012-07-11 @ 23:45\n        \n        (3 replies),,Issue with truncate filter,,by Helielson Santos\n        \n        on 2012-07-11 @ 19:20\n        \n        (4 replies),,Flask Blueprints Static,,by lynadge\n        \n        on 2012-07-11 @ 19:15\n        \n        (5 replies),,Blueprint static_folder and send_static_file,,by Malphas Wats\n        \n        on 2012-07-10 @ 12:56\n        \n        (2 replies),,flask-celery deprecated?,,by Jonathan Zempel\n        \n        on 2012-07-09 @ 19:06\n        \n        (0 replies),,Puzzling results from run-test.py,,by Abdul Bijur V A\n        \n        on 2012-07-08 @ 21:04\n        \n        (4 replies),,[Ann] Flask-MakoTemplates,,by B\u00e9renger Enselme\n        \n        on 2012-07-07 @ 21:36\n        \n        (0 replies),,Outgoing POST in Flask POST handler,,by Tobias Oberstein\n        \n        on 2012-07-07 @ 20:19\n        \n        (2 replies),,[flask] Using GridFS for images and resizing,,by Delilah Parks\n        \n        on 2012-07-07 @ 11:09\n        \n        (3 replies),,To send data from the user and use it to dynamically generate Image.,,by angela martin\n        \n        on 2012-07-07 @ 07:09\n        \n        (10 replies),,Re: Project,,by vivek poddar\n        \n        on 2012-07-06 @ 13:54\n        \n        (8 replies),,Flask-Sijax: Setting session cookie on obj_response,,by chrickso\n        \n        on 2012-07-05 @ 19:24\n        \n        (0 replies),,Cannot open file in write mode,,by Shane Cleveland\n        \n        on 2012-07-04 @ 18:55\n        \n        (6 replies),,Using Flask_Sijax with blueprints,,by chrickso\n        \n        on 2012-07-03 @ 17:19\n        \n        (0 replies),,i18n with SQLAlchemy,,by Gba / George Bourazanas\n        \n        on 2012-07-03 @ 16:45\n        \n        (1 reply),,[ANN] flask-testing again under active maintenance/development,,by Christoph Heer\n        \n        on 2012-07-03 @ 14:17\n        \n        (0 replies),,flask-mako: new extension,,by Frank Murphy\n        \n        on 2012-07-02 @ 22:04\n        \n        (4 replies),,Issue with importing and Blueprints,,by Willy Cordeiro\n        \n        on 2012-07-02 @ 00:17\n        \n        (0 replies),,Giving context to test_client(),,by Jack Pearkes\n        \n        on 2012-07-01 @ 17:41\n        \n        (3 replies),,ANN: Flask 0.9 codename Camapri released today,,by Armin Ronacher\n        \n        on 2012-07-01 @ 15:57\n        \n        (12 replies),,Methods to create text preview from a font(.ttf).,,by Ign Aarushi\n        \n        on 2012-07-01 @ 14:18\n        \n        (5 replies),,Deploying Flask UWSGI Nginx VirtualEnv - No luck,,by James Willson\n        \n        on 2012-06-30 @ 22:46\n        \n        (13 replies),,Using AJAX with Flask,,by Pranav Ravichandran\n        \n        on 2012-06-30 @ 19:21\n        \n        (11 replies),,Weird issue with using jinja set and url_for,,by Mmn\n        \n        on 2012-06-29 @ 06:22\n        \n        (1 reply),,[flask] Multiple For loops in Jinja,,by Delilah Parks\n        \n        on 2012-06-29 @ 03:07\n        \n        (4 replies),,Flask Testing and Simulating RESTful requests,,by Jesse Panganiban\n        \n        on 2012-06-28 @ 22:10\n        \n        (2 replies),,Flask REST API /w frontend,,by ol\n        \n        on 2012-06-27 @ 15:55\n        \n        (3 replies),,Flask-SQLAlchemy .commit() not updating database,,by Andrew Kaiser\n        \n        on 2012-06-27 @ 15:47\n        \n        (4 replies),,Problems uploading image during edits,,by Madireddy Samuel Vijaykumar\n        \n        on 2012-06-27 @ 05:11\n        \n        (2 replies),,Flask-OAuth Requests Behind Proxies,,by Ben Tortora\n        \n        on 2012-06-26 @ 19:06\n        \n        (4 replies),,Flask-Admin without flask-sqlalchemy,,by Larry Tjoelker\n        \n        on 2012-06-26 @ 17:47\n        \n        (2 replies),,Adding WWW subdomain to static assets,,by chrickso\n        \n        on 2012-06-26 @ 13:51\n        \n        (7 replies),,Flask upload image,,by d4n1\n        \n        on 2012-06-26 @ 11:30\n        \n        (6 replies),,Realworld Blueprint examples?,,by Willy Cordeiro\n        \n        on 2012-06-25 @ 18:30\n        \n        (6 replies),,How to link the Image to it's thumbnail and get both of the urls?,,by angela martin\n        \n        on 2012-06-25 @ 15:38\n        \n        (2 replies),,To make a Python Image Gallery:,,by angela martin\n        \n        on 2012-06-24 @ 15:01\n        \n        (3 replies),,Lots of static files,,by Juancarlo A\u00f1ez\n        \n        on 2012-06-23 @ 19:07\n        \n        (3 replies),,Issues with Flask-SQLAlchemy and Windows,,by Willy Cordeiro\n        \n        on 2012-06-23 @ 08:40\n        \n        (2 replies),,Problem starting server.,,by Mahesh Lal\n        \n        on 2012-06-21 @ 17:55\n        \n        (3 replies),,Sharing a model between Flask-SQLAlchemy and other apps,,by Luca Lesinigo\n        \n        on 2012-06-21 @ 13:46\n        \n        (1 reply),,facing problems with redirect.,,by Mahesh Lal\n        \n        on 2012-06-21 @ 08:50\n        \n        (1 reply),,Displaying Images,,by angela martin\n        \n        on 2012-06-21 @ 02:57\n        \n        (10 replies),,Fwd: Confirmation required,,by angela martin\n        \n        on 2012-06-21 @ 02:53\n        \n        (2 replies),,Larger Application,,by Yannick Le Teigner\n        \n        on 2012-06-20 @ 21:02\n        \n        (3 replies),,Re: [flask] Hard Flask Crash,,by Clayton Cafiero\n        \n        on 2012-06-20 @ 20:33\n        \n        (10 replies),,Migrating database schemas in a Flask / SQLAlchemy app using  SQLAlchemy-migrate or Alembic?,,by Jurie Horneman\n        \n        on 2012-06-20 @ 15:52\n        \n        (0 replies),,How to calculate the average of an attribute?,,by Clodoaldo Neto\n        \n        on 2012-06-19 @ 15:43\n        \n        (3 replies),,Access to g object,,by arnaud.le-roy@voila.fr\n        \n        on 2012-06-19 @ 14:22\n        \n        (2 replies),,How to convert this Bottle code to Flask?,,by Andrew Stuart (SuperCoders)\n        \n        on 2012-06-19 @ 13:49\n        \n        (3 replies),,Flask & Heroku,,by pronoyc@gmail.com\n        \n        on 2012-06-19 @ 09:35\n        \n        (1 reply),,How do I make a url accept POST,,by Mahesh Lal\n        \n        on 2012-06-19 @ 07:30\n        \n        (3 replies),,URL_FOR() question,,by Vadim Pestovnikov\n        \n        on 2012-06-19 @ 04:05\n        \n        (7 replies),,First Flask-App: blackboard,,by David Nieder\n        \n        on 2012-06-19 @ 01:36\n        \n        (2 replies),,Flask Ahoy!,,by Col Wilson\n        \n        on 2012-06-18 @ 14:19\n        \n        (5 replies),,Several flask extensions (redis, dropbox, lazy views),,by Igor Davydenko\n        \n        on 2012-06-18 @ 08:38\n        \n        (1 reply),,New flask app: Calamansi, a simple libvirt frontend,,by Lars Hansson\n        \n        on 2012-06-18 @ 08:28\n        \n        (0 replies),,How can flask render a page before some task(like email sending) has  not finished.,,by \u65bd\u5fb7\u6765 delai\n        \n        on 2012-06-17 @ 08:55\n        \n        (4 replies),,Peewee - Error when looping - ValueError invalid literal for int()  with base 10: '021-0909545',,by azwar akbar\n        \n        on 2012-06-17 @ 02:49\n        \n        (4 replies),,weird error with flask-oauth and facebook,,by Max Ischenko\n        \n        on 2012-06-16 @ 09:05\n        \n        (3 replies),,sass + compass with flask,,by Paolo Boschini\n        \n        on 2012-06-15 @ 11:58\n        \n        (0 replies),,how to connect to multiple databases and show their data on a single page?,,by Ign Aarushi\n        \n        on 2012-06-15 @ 05:29\n        \n        (9 replies),,Python & Solr - How to create a results page,,by James Willson\n        \n        on 2012-06-13 @ 14:52\n        \n        (9 replies),,Re: WTForms,,by vivek poddar\n        \n        on 2012-06-12 @ 19:46\n        \n        (0 replies),,[flask] Sorting / order_by with pymongo,,by Delilah Parks\n        \n        on 2012-06-12 @ 17:23\n        \n        (8 replies),,400 Bad request on Unit test,,by azwar akbar\n        \n        on 2012-06-12 @ 02:45\n        \n        (2 replies),,Multiple File uploads using flask,,by pronoyc@gmail.com\n        \n        on 2012-06-11 @ 21:02\n        \n        (10 replies),,Map field in Flask,,by Marko Djordjevic\n        \n        on 2012-06-11 @ 07:34\n        \n        (2 replies),,Best way to use Wtforms and MongoDB in Flask,,by lynadge\n        \n        on 2012-06-08 @ 21:45\n        \n        (11 replies),,Building a form from separate components,,by Daniel Fehrenbach\n        \n        on 2012-06-08 @ 18:41\n        \n        (0 replies),,Removing \"db\" prefix in flask-sqlalchemy,,by Wael Orabi\n        \n        on 2012-06-08 @ 00:04\n        \n        (6 replies),,Execute at flask initialization,,by Martin Stiborsk\u00fd\n        \n        on 2012-06-07 @ 20:57\n        \n        (4 replies),,QuerySelectField question,,by Charles Griebel\n        \n        on 2012-06-07 @ 16:00\n        \n        (0 replies),,sessions,,by Mihai Sandu\n        \n        on 2012-06-07 @ 12:11\n        \n        (8 replies),,MethodView and url_prefix for blueprint,,by Alex K\n        \n        on 2012-06-07 @ 10:34\n        \n        (2 replies),,I would make a extension. Is it worthy?,,by \uc724\uc601\ubbfc\n        \n        on 2012-06-07 @ 09:51\n        \n        (0 replies),,Flasky Goodness Talk,,by Kenneth Reitz\n        \n        on 2012-06-07 @ 06:46\n        \n        (1 reply),,Flask/Python/Security,,by ajay menon\n        \n        on 2012-06-07 @ 05:58\n        \n        (12 replies),,newbie database question,,by Vdc\n        \n        on 2012-06-07 @ 02:03\n        \n        (1 reply),,How about a group on Google Groups?,,by Hex\n        \n        on 2012-06-06 @ 12:27\n        \n        (39 replies),,static files do not include www subdomain and cause DNS redirect loop,,by chrickso\n        \n        on 2012-06-06 @ 12:04\n        \n        (0 replies),,First PYCON in the Philippines,,by Jesse Panganiban\n        \n        on 2012-06-06 @ 08:44\n        \n        (0 replies),,BDD in Flask,,by Jesse Panganiban\n        \n        on 2012-06-06 @ 08:41\n        \n        (4 replies),,Re: [flask] flask utf-8 postgresql 9.1 database UnicodeDecodeError [Solved],,by Igor TAmara\n        \n        on 2012-06-02 @ 16:07\n        \n        (0 replies),,flask utf-8 postgresql 9.1 database UnicodeDecodeError,,by Igor TAmara\n        \n        on 2012-06-02 @ 14:12\n        \n        (2 replies),,Flask-SQLAlchemy or Flask-MongoEngine and PyCharm autocomplete problem,,by dorian i\n        \n        on 2012-06-02 @ 11:23\n        \n        (2 replies),,How to set up mako templates with Flask to yield decipherable exceptions?,,by chrickso\n        \n        on 2012-05-30 @ 00:37\n        \n        (3 replies),,Re: Flask-Admin,,by vivek poddar\n        \n        on 2012-05-29 @ 17:12\n        \n        (6 replies),,Prevent XMLHttpRequest caching (in IE),,by Malphas Wats\n        \n        on 2012-05-29 @ 12:20\n        \n        (3 replies),,Get item on pyMongo,,by azwar akbar\n        \n        on 2012-05-29 @ 04:02\n        \n        (2 replies),,Calling for maintenance support for Flask-WTF,,by Ron DuPlain\n        \n        on 2012-05-28 @ 23:08\n        \n        (0 replies),,404 response for static file that is actually there,,by Josh Klein\n        \n        on 2012-05-28 @ 20:19\n        \n        (2 replies),,Access Config in Blueprint outside of request,,by Sean Lynch\n        \n        on 2012-05-28 @ 16:55\n        \n        (4 replies),,Join flask community mailing list,,by A Nash\n        \n        on 2012-05-28 @ 00:34\n        \n        (0 replies),,Re: Technical Help,,by vivek poddar\n        \n        on 2012-05-27 @ 17:56\n        \n        (3 replies),,Please review my blog post on Flask deployment(on nginx+gunicorn),,by Samrat Man Singh\n        \n        on 2012-05-27 @ 09:49\n        \n        (3 replies),,Flask Quoting Everything on Returns from Requests,,by Michael Johnston\n        \n        on 2012-05-26 @ 14:16\n        \n        (2 replies),,flask sqlalchemy fixtures error.,,by maplye\n        \n        on 2012-05-23 @ 23:12\n        \n        (0 replies),,ANN: flask-itemshop (stripe payments for Flask),,by Steven Kryskalla\n        \n        on 2012-05-23 @ 16:40\n        \n        (0 replies),,flask-sqlalchemy with pre-existing database,,by Carlos Gonzales\n        \n        on 2012-05-23 @ 02:17\n        \n        (1 reply),,Another Skeleton Question,,by Col Wilson\n        \n        on 2012-05-22 @ 22:44\n        \n        (19 replies),,404 error,,by Vijayakumar Raju\n        \n        on 2012-05-22 @ 19:40\n        \n        (7 replies),,Flask featured on Light Table demo!,,by Smartboy\n        \n        on 2012-05-22 @ 18:21\n        \n        (7 replies),,Forms - submit values as a list?,,by Malphas Wats\n        \n        on 2012-05-21 @ 10:14\n        \n        (3 replies),,working outside of request context,,by XiaoPing Tang\n        \n        on 2012-05-20 @ 02:01\n        \n        (1 reply),,LockError using flask-zodb,,by Alex\n        \n        on 2012-05-19 @ 22:10\n        \n        (8 replies),,Unwrapping dicts in the template,,by pronoyc@gmail.com\n        \n        on 2012-05-18 @ 11:07\n        \n        (1 reply),,How can I display an image loaded from a database?,,by Malphas Wats\n        \n        on 2012-05-18 @ 09:16\n        \n        (12 replies),,Binary files not getting saved correctly from request.data,,by,on 2012-05-17 @ 23:21\n        \n        (2 replies),,Next Jinja2 release?,,by Stefane Fermigier\n        \n        on 2012-05-17 @ 21:14\n        \n        (0 replies),,[flask] Jquery, static files, and views?,,by Delilah Parks\n        \n        on 2012-05-17 @ 15:33\n        \n        (2 replies),,Import / global question,,by Jurie Horneman\n        \n        on 2012-05-17 @ 15:24\n        \n        (2 replies),,What ways do we have to ship jinja macros and/or templates?,,by herr.kaste\n        \n        on 2012-05-17 @ 14:35\n        \n        (4 replies),,from_pyfile() with arbitrary file?,,by Malphas Wats\n        \n        on 2012-05-14 @ 09:37\n        \n        (3 replies),,Flask-PyMongo inserting into DB,,by pronoyc@gmail.com\n        \n        on 2012-05-14 @ 08:47\n        \n        (4 replies),,Re: [flask] Returning a rendered file without having the html/head\ttags,,by adam.pointer@gmx.com\n        \n        on 2012-05-13 @ 08:27\n        \n        (0 replies),,Returning a rendered file without having the html/head tags,,by Mmn\n        \n        on 2012-05-12 @ 13:50\n        \n        (2 replies),,Flask-WTF problems with CSRF and FormField,,by Michel Albert\n        \n        on 2012-05-11 @ 14:49\n        \n        (0 replies),,Re: [flask] flaskr using SQLAlchemy not working,,by Evan Tangman\n        \n        on 2012-05-10 @ 16:15\n        \n        (7 replies),,flaskr using SQLAlchemy not working,,by Goke Aruna\n        \n        on 2012-05-10 @ 15:27\n        \n        (0 replies),,issues on webfaction,,by Krisnadi Poedjosoedarmo\n        \n        on 2012-05-10 @ 10:12\n        \n        (5 replies),,running in gunicorn vs running with default server,,by Lowell Kirsh\n        \n        on 2012-05-09 @ 23:15\n        \n        (2 replies),,flask traffic not getting past gunicorn,,by Lowell Kirsh\n        \n        on 2012-05-09 @ 22:15\n        \n        (2 replies),,Permanent redirect,,by Ralf Jung\n        \n        on 2012-05-09 @ 17:16\n        \n        (0 replies),,Configure jinja2,,by Ralf Jung\n        \n        on 2012-05-08 @ 20:29\n        \n        (3 replies),,Flask & JSONP,,by Ron DuPlain\n        \n        on 2012-05-08 @ 20:00\n        \n        (8 replies),,Does Flask have a pendant to django's collectstatic?,,by Lars Holm Nielsen\n        \n        on 2012-05-07 @ 11:10\n        \n        (1 reply),,Strange problem with ajax call and jsonify,,by Alessio Civitillo\n        \n        on 2012-05-06 @ 14:34\n        \n        (2 replies),,2 routes to one view,,by lynadge\n        \n        on 2012-05-06 @ 11:10\n        \n        (4 replies),,All exceptions within Flask/Werkzeug,,by Juancarlo A\u00f1ez\n        \n        on 2012-05-05 @ 20:46\n        \n        (2 replies),,Regarding an issue with flask SQLAlchemy.,,by Mmn\n        \n        on 2012-05-05 @ 17:34\n        \n        (1 reply),,ANN: Flask-Admin 1.x,,by Andy Wilson\n        \n        on 2012-05-03 @ 16:42\n        \n        (12 replies),,Re: Hi,,by phil.kosel@gmail.com\n        \n        on 2012-05-03 @ 06:50\n        \n        (3 replies),,Pretty urls for static files,,by Lowell Kirsh\n        \n        on 2012-05-03 @ 01:36\n        \n        (8 replies),,MongoAlchemy + WTForms,,by Pronoy Chopra\n        \n        on 2012-05-02 @ 06:30\n        \n        (3 replies),,Problem testing POST with unicode data,,by Karsten Hoffrath\n        \n        on 2012-05-01 @ 18:02\n        \n        (4 replies),,Flask-Babel change language on user request,,by Frank Lazzarini\n        \n        on 2012-05-01 @ 08:12\n        \n        (2 replies),,flask registration,,by Mohamad Efazati\n        \n        on 2012-04-30 @ 08:29\n        \n        (3 replies),,Logger within Blueprints,,by Mitchell Hashimoto\n        \n        on 2012-04-30 @ 05:42\n        \n        (2 replies),,HTTPS Redirect Extension,,by Kenneth Reitz\n        \n        on 2012-04-29 @ 20:59\n        \n        (1 reply),,Bigger projects and \"import_name\" troubles,,by Mitchell Hashimoto\n        \n        on 2012-04-26 @ 04:47\n        \n        (3 replies),,javascript , jinja2 , routing problem of a noob,,by Edgar Almonte\n        \n        on 2012-04-25 @ 18:02\n        \n        (2 replies),,Jinja filter list, markdown filter,,by Marian Steinbach\n        \n        on 2012-04-24 @ 10:56\n        \n        (4 replies),,Are templates generally cached?,,by Marian Steinbach\n        \n        on 2012-04-23 @ 21:11\n        \n        (2 replies),,New Extension: Flask-Sendmail,,by Anthony Ford\n        \n        on 2012-04-20 @ 18:00\n        \n        (2 replies),,Loop variable in a filtered loop,,by Clodoaldo Neto\n        \n        on 2012-04-20 @ 13:03\n        \n        (2 replies),,flask vs extjs directory structure,,by Gardner Pomper\n        \n        on 2012-04-18 @ 17:11\n        \n        (1 reply),,Flask FastCGI deployment Apache mod_rewrite trouble,,by Vadim Pestovnikov\n        \n        on 2012-04-17 @ 14:55\n        \n        (15 replies),,Help: how to use X-Send-file,,by Lix Xu\n        \n        on 2012-04-17 @ 03:28\n        \n        (0 replies),,OT: flask forums app on app engine,,by Jay Baker\n        \n        on 2012-04-16 @ 23:29\n        \n        (2 replies),,Flask-SQLAlchemy Troubles,,by Anthony Ford\n        \n        on 2012-04-14 @ 14:32\n        \n        (2 replies),,how to check what URL we are on?,,by Charlie Reddington\n        \n        on 2012-04-14 @ 12:26\n        \n        (3 replies),,Integrating gevent-socketio,,by Dave O\n        \n        on 2012-04-14 @ 04:17\n        \n        (0 replies),,using celery with flask-sqlalchemy,,by Bastian Hoyer\n        \n        on 2012-04-13 @ 12:19\n        \n        (6 replies),,,,\u00ab Previous,|,1,|,Next \u00bb,,,Archives based on code by,Armin Ronacher,//"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/36/", "content": "Testing Issues with SQLAlchemy | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Testing Issues with SQLAlchemy,,Posted by csaunders\n    on 2010-08-05 @ 14:08\n    and filed in,Database,,You would like to perform some tests to ensure that you can insert and query for objects.,,Insertions work, but when you try to perform a query in your tests you get a problem like this:,,Failed example:\n    len,(,MyObject.query.all,()),Exception raised:\n    Traceback,(,most recent call last,),:\n      File,\".../lib/python2.6/doctest.py\",, line,1248,, in __run\n        compileflags,,1,),in test.globs\n      File,\"<doctest myapp.MyObject[4]>\",, line,1,, in <module>\n        len,(,MyObject.query.all,()),AttributeError:,'NoneType',object has no attribute,'all',,,What you need to do is ensure that you have initialized a request context for your tests.  This can be done by:,,app,.,test_request_context,(),.,push,(),,,Now when you run your tests and query them they should work.,,This snippet by csaunders can be used freely for\n    anything you like. Consider it public domain.,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/25/", "content": "Simple persistence | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Simple persistence,,Posted by Dag Odenhall\n    on 2010-06-01 @ 21:28\n    and filed in,Database,,People will burn me at the stake for suggesting this \u263a and I must warn you that this is not for large datasets or high-traffic sites; but for that tiny CMS you wrote for grandma's recipes it may do fine. It probably does not work with multiple processes.,,The upside is that you can seamlessly persist almost any object without any dependencies or daemons and with very little code.,,from,,__future__,,import,,with_statement,,import,,shelve,,from,,os,,import,,path,,from,,cPickle,,import,,HIGHEST_PROTOCOL,,from,,contextlib,,import,,closing,,from,,flask,,import,,Flask,,SHELVE_DB,,=,,'shelve.db',,app,,=,,Flask,(,__name__,),,app,.,config,.,from_object,(,__name__,),,db,,=,,shelve,.,open,(,path,.,join,(,app,.,root_path,,,,app,.,config,[,'SHELVE_DB',]),,,protocol,=,HIGHEST_PROTOCOL,,,,writeback,=,True,),,@app.route,(,'/<message>',),,def,,write_and_list,(,message,):,,db,.,setdefault,(,'messages',,,,[]),,db,[,'messages',],.,append,(,message,),,return,,app,.,response_class,(,',\\n,',.,join,(,db,[,'messages',]),,,mimetype,=,'text/plain',),,with,,closing,(,db,):,,app,.,run,(),,,The db object works like a dict and as you see in our view we can add a normal list to it and don't need to do anything special to persist changes.,,If you want something similar that scales better have a look at,ZODB,. I haven't actually used ZODB myself and there seem to be controversy regarding its utility, but it is in use by most Zope sites out there.,,This snippet by Dag Odenhall can be used freely for\n    anything you like. Consider it public domain.,,,Comments,,,,Flask-ZODB\n          by Dag Odenhall\n          on 2011-09-07 @ 23:11,I have now released,Flask-ZODB,.,,,,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/37/", "content": "Simple insertion and row id | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Simple insertion and row id,,Posted by WillyFrog\n    on 2010-08-05 @ 23:50\n    and filed in,Database,,This function lets you abstract the insertion into the database and get it's last id.  This example uses sqlite3.,,def,,insert,(,table,,,,fields,=,(),,,values,=,()):,,# g.db is the database connection,,cur,,=,,g,.,db,.,cursor,(),,query,,=,,'INSERT INTO,%s,(,%s,) VALUES (,%s,)',,%,,(,,table,,,,', ',.,join,(,fields,),,,', ',.,join,([,'?',],,*,,len,(,values,)),,),,cur,.,execute,(,query,,,,values,),,g,.,db,.,commit,(),,id,,=,,cur,.,lastrowid,,cur,.,close,(),,return,,id,,,This snippet by WillyFrog can be used freely for\n    anything you like. Consider it public domain.,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/106/", "content": "Support PyMongo ObjectIDs in URLs | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Support PyMongo ObjectIDs in URLs,,Posted by Armin Ronacher\n    on 2013-01-27 @ 19:57\n    and filed in,Database,,If you are using MongoDB with Flask you might want to consider adding native support for ObjectIDs to the routing system.  With that object IDs will be compressed in URLs and the routing system will reject invalid ObjectIDs automatically.,,Converter Implementation,,from,,flask,,import,,Flask,,from,,werkzeug.routing,,import,,BaseConverter,,,,ValidationError,,from,,itsdangerous,,import,,base64_encode,,,,base64_decode,,from,,bson.objectid,,import,,ObjectId,,from,,bson.errors,,import,,InvalidId,,class,,ObjectIDConverter,(,BaseConverter,):,,def,,to_python,(,self,,,,value,):,,try,:,,return,,ObjectId,(,base64_decode,(,value,)),,except,,(,InvalidId,,,,ValueError,,,,TypeError,):,,raise,,ValidationError,(),,def,,to_url,(,self,,,,value,):,,return,,base64_encode,(,value,.,binary,),,,Example Usage,,And here is a minimal example that shows how it works:,,from,,flask,,import,,Flask,,app,,=,,Flask,(,__name__,),,app,.,url_map,.,converters,[,'objectid',],,=,,ObjectIDConverter,,@app.route,(,'/users/<objectid:user_id>',),,def,,show_user,(,user_id,):,,return,,'User ID:,%r,',,%,,user_id,,,The object IDs are then automatically compressed by,url_for,and decompressed by the routing system.  To test this you can navigate to,http://localhost:5000/users/UQWFb53NMX6iFe0s,in the above example which will then expand to,ObjectId('5105856f9dcd317ea215ed2c'),,This snippet by Armin Ronacher can be used freely for\n    anything you like. Consider it public domain.,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/66/", "content": "MongoKit multithreaded authentication | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,MongoKit multithreaded authentication,,Posted by Laurie Clark-Michalek\n    on 2011-08-19 @ 22:51\n    and filed in,Database,,As pymongo authentication is thread local, we need a seperate MongoKit connection object for each thread. This class provides a simple proxy object for managing the thread local connection objects. It expects a global `get_connection` function that takes a logger and returns a connection object.,,class ThreadLocalConnectionProxy(object):\n    \"\"\"\n    A proxy object for a MongoKit connection object. As pymongo authentication\n    is thread local, we need a seperate connection for each thread, which this\n    proxy provides in a transparent manner.\n    \"\"\"\n    def __init__(self, logger):\n        self.logger = logger\n    \n    def connect(self):\n        \"\"\"\n        Sets the thread local `mongodb_connection` attribute to a new connection\n        aquired with :func:`get_connection`.\n        \"\"\"\n        self.thread_local.mongodb_connection = get_connection(self.logger)\n    \n    @property\n    def connected(self):\n        \"\"\"\n        Returns true if there is a connection object in the thread local\n        storage.\n        \"\"\"\n        return hasattr(self.thread_local, \"mongodb_connection\")\n    \n    @property\n    def thread_local(self):\n        \"\"\"\n        Thread local storage if possible, else object global.\n        \"\"\"\n        return flask._request_ctx_stack.top or self\n    \n    def __getattr__(self, name):\n        if name == \"logger\":\n            return super(ThreadLocalConnectionProxy, self).logger\n        if not self.connected:\n            self.connect()\n        return getattr(self.thread_local.mongodb_connection, name),,This snippet by Laurie Clark-Michalek can be used freely for\n    anything you like. Consider it public domain.,,,Comments,,,,Not necessary with PyMongo >= 2.0\n          by Dan Crosta\n          on 2011-12-27 @ 17:29,Since PyMongo 2.0, PyMongo automatically handles authentication across all threads in your application:,http://api.mongodb.org/python/current/changelog.html#changes-in-version-2-0,,,,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/115/", "content": "get_object_or_404 | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,get_object_or_404,,Posted by Vitaliy Shishorin\n    on 2013-07-25 @ 20:56\n    and filed in,Database,,from,,sqlalchemy.orm,,import,,exc,,from,,werkzeug.exceptions,,import,,abort,,def,,get_object_or_404,(,model,,,,*,criterion,):,,try,:,,return,,model,.,query,.,filter,(,*,criterion,),.,one,(),,except,,exc,.,NoResultFound,,,,exc,.,MultipleResultsFound,:,,abort,(,404,),,,Example:,,board,,=,,get_object_or_404,(,Board,,,,Board,.,slug,,==,,slug,),,,or,,user,,=,,get_object_or_404,(,User,,,,User,.,id,,==,,id,),,,This snippet by Vitaliy Shishorin can be used freely for\n    anything you like. Consider it public domain.,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/39/", "content": "Getting an object from a SQLAlchemy model or abort | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Getting an object from a SQLAlchemy model or abort,,Posted by J\u00e9r\u00f4me Pigeot\n    on 2010-08-24 @ 11:32\n    and filed in,Database,,A simple shortcut which let you returning an,abort code,when the wanted object is not found.,,This kind of trick is already integrated in the,Flask-SQLAlchemy extension,(with the,get_or_404() method,) so it's just usefull if you're using SQLAlchemy natively...,,Here's the code:,,def,,get_or_abort,(,model,,,,object_id,,,,code,=,404,):,,\"\"\",,get an object with his given id or an abort error (404 is the default),,\"\"\",,result,,=,,model,.,query,.,get,(,object_id,),,if,,result,,is,,None,:,,abort,(,code,),,return,,result,,,And now how to use it in your app:,,def,,theme_detail,(,theme_id,):,,# shows a theme,,theme,,=,,get_or_abort,(,Theme,,,,theme_id,),,return,,render_template,(,'theme_detail.html',,,,theme,=,theme,),,,This snippet by J\u00e9r\u00f4me Pigeot can be used freely for\n    anything you like. Consider it public domain.,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/22/", "content": "Lazy SQLAlchemy setup | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Lazy SQLAlchemy setup,,Posted by Dan Jacob\n    on 2010-05-27 @ 20:15\n    and filed in,Database,,If you are using the new Flask configuration together with the application factory pattern, one thing you will want to do if using SQLAlchemy is initialize a SQLAlchemy session for different requirements. For example, for unit tests you don't want to use the production database.,,Furthermore you may need to use a SQLAlchemy session outside the request scope, for example in the shell.,,The,scoped_session,function, which provides a thread-safe session, expects a factory function. Normally we would use,sessionmaker,:,,from,,sqlalchemy,,import,,create_engine,,from,,sqlalchemy.orm,,import,,scoped_session,,,,sessionmaker,,engine,,=,,create_engine,(,\"sqlite:///myapp.db\",),,db_session,,=,,scoped_session,(,sessionmaker,(,bind,=,engine,)),,,In order to initialize SQLAlchemy dynamically however we need to pass in a factory function that does not require a ready engine instance. For this we can use,create_session,:,,from,,sqlalchemy,,import,,create_engine,,from,,sqlalchemy.orm,,import,,scoped_session,,,,create_session,,engine,,=,,None,,db_session,,=,,scoped_session,(,lambda,:,,create_session,(,bind,=,engine,)),,,We then need a function to create the engine when needed:,,def,,init_engine,(,uri,,,,**,kwargs,):,,global,,engine,,engine,,=,,create_engine,(,uri,,,,**,kwargs,),,return,,engine,,,Provided you call,init_engine,first you can then use,db_session,thereafter, as the scoped_session will bind the session to the current value of,engine,.,,You can call,init_engine,in your application factory function:,,def,,create_app,(,config,):,,app,,=,,Flask,(,__name__,),,app,.,config,.,from_pyfile,(,config,),,init_engine,(,app,.,config,[,'DATABASE_URI',]),,return,,app,,,Now you can use the,db_session,anywhere in your application, as long as you first call,create_app,.,,This snippet by Dan Jacob can be used freely for\n    anything you like. Consider it public domain.,,,Comments,,,,Using local context\n          by Dan Jacob\n          on 2010-05-28 @ 08:22,Another pattern is to attach the database engine to the application. Instead of the,engine,global, you can access the engine using,current_app,:,,from,,sqlalchemy,,import,,create_engine,,from,,sqlalchemy.orm,,import,,scoped_session,,,,create_session,,from,,flask,,import,,current_app,,db_session,,=,,scoped_session,(,lambda,:,,create_session,(,bind,=,current_app,.,db_engine,)),,,The pattern for accessing local context is described here:,,http://flask.pocoo.org/docs/shell/#firing-before-after-request,,In your unit tests (and elsewhere where you need to access the database outside the request context) you can do this:,,import unittest\n\nfrom myapp import create_app\nfrom myapp.database import db_session, create_all, drop_all\n\nclass TestCase(unittest.TestCase):\n    def setUp(self):\n        self.app = create_app(\"test.cfg\")\n        self.client = self.app.test_client()\n        self.ctx = self.app.test_request_context()\n        self.ctx.push()\n        create_all()\n\n    def tearDown(self):\n        db_session.remove()\n        drop_all()\n        self.ctx.pop(),,,,Fix your settings\n          by Amit Matani\n          on 2012-01-22 @ 02:22,sessionmaker and create_session have opposite default arguments. If you take this route, make sure to set autoflush, autocommit, and expire_on_commit to the way you want them.,,,,no go for session listener\n          by sebastianmarkow\n          on 2012-09-09 @ 12:14,beware if you want to use a session event listener like 'after_flush'. you will need to register it on the the Session object, thus you can't encapsulate create_session in a lambda function.,,,,This is how I did it\n          by Donald Curtis\n          on 2013-01-27 @ 18:27,engine = None\nsessionmaker = sa.orm.sessionmaker()\nsession = sa.orm.scoped_session(sessionmaker)\n\ndef configure_engine(url):\n    global sessionmaker, engine, session\n\n    engine = sa.create_engine(url)\n    session.remove()\n    sessionmaker.configure(bind=engine),,,,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/7/", "content": "Simple OpenID with Flask | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Simple OpenID with Flask,,Posted by Armin Ronacher\n    on 2010-05-04 @ 09:31\n    and filed in,Authentication,,There is a Flask Addon Library called,Flask-OpenID,that implements basic OpenID authentication for Flask on top of python-openid.,,The included example,shows how this can be done.  Basically all you need to do is this:,,create an instance of,OpenID,with the path to the stored files.  This can be any folder on the filesystem,,OpenID,will use it to store temporary information required for the authentication process.,Define a,loginhandler,function.  That function has to render the form and call into,try_login,with the submitted identity URL (the OpenID the user entered).,Define a,after_login,function.  This function is called with the identity URL if authentication worked.  This function,must,redirect to a different page.  It usually checks if the user is known to the system and if this is the case, logs the user in or otherwise redirects to a page used to create that profile.,,If that is too abstract, look at the,example,for more information about how to use it.,,Note that Flask-OpenID also has basic support for redirections, so the user will after login end up on the page where he or she previously was.  For the redirections to work, it is necessary to have the forms forward the,next,parameter properly.  Make sure to have a look at the template code as well.,,Also check out the website for more information and a detailed documentation:,Flask-OpenID,,This snippet by Armin Ronacher can be used freely for\n    anything you like. Consider it public domain.,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/8/", "content": "HTTP Basic Auth | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,HTTP Basic Auth,,Posted by Armin Ronacher\n    on 2010-05-04 @ 10:25\n    and filed in,Authentication,,For very simple applications HTTP Basic Auth is probably good enough.  Flask makes this very easy.  The following decorator applied around a function that is only available for certain users does exactly that:,,from,,functools,,import,,wraps,,from,,flask,,import,,request,,,,Response,,def,,check_auth,(,username,,,,password,):,,\"\"\"This function is called to check if a username /,,password combination is valid.,,\"\"\",,return,,username,,==,,'admin',,and,,password,,==,,'secret',,def,,authenticate,():,,\"\"\"Sends a 401 response that enables basic auth\"\"\",,return,,Response,(,,'Could not verify your access level for that URL.,\\n,',,'You have to login with proper credentials',,,,401,,,,{,'WWW-Authenticate',:,,'Basic realm=\"Login Required\"',}),,def,,requires_auth,(,f,):,,@wraps,(,f,),,def,,decorated,(,*,args,,,,**,kwargs,):,,auth,,=,,request,.,authorization,,if,,not,,auth,,or,,not,,check_auth,(,auth,.,username,,,,auth,.,password,):,,return,,authenticate,(),,return,,f,(,*,args,,,,**,kwargs,),,return,,decorated,,,To use this decorator, just wrap a view function:,,@app.route,(,'/secret-page',),,@requires_auth,,def,,secret_page,():,,return,,render_template,(,'secret_page.html',),,,If you are using basic auth with mod_wsgi you will have to enable auth forwarding, otherwise apache consumes the required headers and does not send it to your application:,WSGIPassAuthorization,.,,This snippet by Armin Ronacher can be used freely for\n    anything you like. Consider it public domain.,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/42/", "content": "Sign in with Steam ID | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Sign in with Steam ID,,Posted by Armin Ronacher\n    on 2011-02-17 @ 16:47\n    and filed in,Authentication,,If you are planning on developing a website where the target audience are gamers (mainly PC gamers) it might be useful to use,steam,for authentication.  If you want to see this demoed check out,bf3.immersedcode.org,.,,Steam supports OpenID based authentication which is very easy to implement in Flask with the help of the,Flask-OpenID,extension and your ORM of choice (for instance SQLAlchemy via,Flask-SQLAlchemy,).,,0. Create the App,,The application setup with all extensions set up will look like this:,,from,,flask,,import,,Flask,,,,redirect,,,,session,,,,json,,,,g,,from,,flaskext.sqlalchemy,,import,,SQLAlchemy,,from,,flaskext.openid,,import,,OpenID,,app,,=,,Flask,(,__name__,),,app,.,config,.,from_pyfile,(,'settings.cfg',),,db,,=,,SQLAlchemy,(,app,),,oid,,=,,OpenID,(,app,),,,1. Register the API,,In order to use the steam API you have to register for an API key.  That's easy.  Just to go the,registration website,, log in with your personal steam account and enter your domain name.  You will instantly receive an API key which you can add into your config:,,STEAM_API_KEY,,=,,'ABCDEFG-12345',,,2. Use Flask-SQLAlchemy for the User Model,,First we need to create a user model.  Flask-SQLAlchemy makes this pretty easy.  We want to store the steam ID for sign-in and the nickname.  Because the nick name can be changed by the user we will update it whenever the user signs in.,,Furthermore we provide a method that looks up a user by steam ID and will create a new one if a new ID came along.,,class,,User,(,db,.,Model,):,,id,,=,,db,.,Column,(,db,.,Integer,,,,primary_key,=,True,),,steam_id,,=,,db,.,Column,(,db,.,String,(,40,)),,nickname,,=,,db,.,String,(,80,),,@staticmethod,,def,,get_or_create,(,steam_id,):,,rv,,=,,User,.,query,.,filter_by,(,steam_id,=,steam_id,),.,first,(),,if,,rv,,is,,None,:,,rv,,=,,User,(),,rv,.,steam_id,,=,,steam_id,,db,.,session,.,add,(,rv,),,return,,rv,,,3. Bridge the Steam API,,In order to get a user's nickname we have to write a small function that asks the steam API for a user's public information:,,import,,urllib2,,def,,get_steam_userinfo,(,steam_id,):,,options,,=,,{,,'key',:,,app,.,config,[,'STEAM_API_KEY',],,,'steamids',:,,steam_id,,},,url,,=,,'http://api.steampowered.com/ISteamUser/',\\,'GetPlayerSummaries/v0001/?,%s,',,%,,url_encode,(,options,),,rv,,=,,json,.,load,(,urllib2,.,urlopen,(,url,)),,return,,rv,[,'response',][,'players',][,'player',][,0,],,or,,{},,,4. Use Flask-OpenID for sign-in,,Login code is simple now.  We just have to redirect the user to the steam OpenID signin page and register an,after_login,handler that refreshes the nickname and binds the user to the session:,,import,,re,,_steam_id_re,,=,,re,.,compile,(,'steamcommunity.com/openid/id/(.*?)$',),,@app.route,(,'/login',),,@oid.loginhandler,,def,,login,():,,if,,g,.,user,,is,,not,,None,:,,return,,redirect,(,oid,.,get_next_url,()),,return,,oid,.,try_login,(,'http://steamcommunity.com/openid',),,@oid.after_login,,def,,create_or_login,(,resp,):,,match,,=,,_steam_id_re,.,search,(,resp,.,identity_url,),,g,.,user,,=,,User,.,get_or_create,(,match,.,group,(,1,)),,steamdata,,=,,get_steam_userinfo,(,g,.,user,.,steam_id,),,g,.,user,.,nickname,,=,,steamdata,[,'personaname',],,db,.,session,.,commit,(),,session,[,'user_id',],,=,,g,.,user,.,id,,flash,(,'You are logged in as,%s,',,%,,g,.,user,.,nickname,),,return,,redirect,(,oid,.,get_next_url,()),,,5. Logout and Session Handling,,In order to automatically pull in the current user each request we can use a,before_request,handler.  We will also need a logout link:,,@app.before_request,,def,,before_request,():,,g,.,user,,=,,None,,if,,'user_id',,in,,session,:,,g,.,user,,=,,User,.,query,.,get,(,session,[,'user_id',]),,@app.route,(,'/logout',),,def,,logout,():,,session,.,pop,(,'user_id',,,,None,),,return,,redirect,(,oid,.,get_next_url,()),,,6. The Legal Stuff,,Application using steam for signup have to do use certain logos for the signup and put a link to steam into the footer.  More information can be found here:,steamcommunity.com/dev,,This snippet by Armin Ronacher can be used freely for\n    anything you like. Consider it public domain.,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/31/", "content": "HTTP Digest Auth | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,HTTP Digest Auth,,Posted by Shane Holloway\n    on 2010-07-01 @ 02:46\n    and filed in,Authentication,,For more sophisticated authentication needs, HTTP Digest is a ready solution. To use it in your Flask app, start by extending the,authdigest,contribution to werkzeug with Flask knowledge:,,from,,functools,,import,,wraps,,from,,werkzeug.contrib,,import,,authdigest,,import,,flask,,class,,FlaskRealmDigestDB,(,authdigest,.,RealmDigestDB,):,,def,,requires_auth,(,self,,,,f,):,,@wraps,(,f,),,def,,decorated,(,*,args,,,,**,kwargs,):,,request,,=,,flask,.,request,,if,,not,,self,.,isAuthenticated,(,request,):,,return,,self,.,challenge,(),,return,,f,(,*,args,,,,**,kwargs,),,return,,decorated,,,The create a digest database to hold your user authentication data:,,authDB,,=,,FlaskRealmDigestDB,(,'MyAuthRealm',),,authDB,.,add_user,(,'admin',,,,'test',),,,Use the authDB.requires_auth instance method to wrap a view function:,,from,,flask,,import,,request,,,,session,,@app.route,(,'/',),,@authDB.requires_auth,,def,,auth,():,,session,[,'user',],,=,,request,.,authorization,.,username,,return,,\"<h1>Content for authenticated user</h1>\",,,Or use the instance of authDB directly:,,@app.route,(,'/auth',),,def,,authApi,():,,if,,not,,authDB,.,isAuthenticated,(,request,):,,return,,authDB,.,challenge,(),,session,[,'user',],,=,,request,.,authorization,.,username,,return,,\"<h1>Content for authenticated user</h1>\",,,The,authdigest module,was brought to you by,Shane Holloway,, under the same license as Werkzeug and Flask.,,- Updates -,,2013 April: Submit pull requests or fork,flask-digestauth,from BitBucket.,,This snippet by Shane Holloway can be used freely for\n    anything you like. Consider it public domain.,,,Comments,,,,Moved to Github\n          by Shane Holloway\n          on 2012-02-22 @ 15:42,I just moved the fork of werkzeug to github (,https://github.com/shanewholloway/werkzeug/,) from BitBucket.,,,,requests\n          by Peter Douma\n          on 2013-03-23 @ 02:07,Thanks, this works great. But there is one issue. I used the requests library to test it, and if you put in the wrong password or user, in \n    response = requests.get( ',http://localhost:8000/',,\n                             auth = HTTPDigestAuth( 'admin', 'junk')\n                           ),,it goes in a recursive loop.,,,,flask-digestauth repo\n          by Shane Holloway\n          on 2013-04-05 @ 15:19,We just recently migrated a bunch of repositories from our private server to bitbucket. The code can be found at,https://bitbucket.org/shanewholloway/flask-digestauth,,,,@Peter\n          by Shane Holloway\n          on 2013-04-05 @ 15:25,Peter, feel free to fix the issue and submit a pull request to the bitbucket repo.,,,,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/62/", "content": "Securely Redirect Back | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Securely Redirect Back,,Posted by Armin Ronacher\n    on 2011-07-28 @ 11:44\n    and filed in,Security,,A common pattern with form processing is to automatically redirect back to the user.  There are usually two ways this is done: by inspecting a,next,URL parameter or by looking at the HTTP referrer.  Unfortunately you also have to make sure that users are not redirected to malicious attacker's pages and just to the same host.  If you are using Flask-WTF there is a nicer way:,Redirects with Flask-WTF,.,,A function that ensures that a redirect target will lead to the same server is here:,,from,,urlparse,,import,,urlparse,,,,urljoin,,from,,flask,,import,,request,,,,url_for,,def,,is_safe_url,(,target,):,,ref_url,,=,,urlparse,(,request,.,host_url,),,test_url,,=,,urlparse,(,urljoin,(,request,.,host_url,,,,target,)),,return,,test_url,.,scheme,,in,,(,'http',,,,'https',),,and,\\,ref_url,.,netloc,,==,,test_url,.,netloc,,,A simple way to to use it is by writing a,get_redirect_target,function that looks at various hints to find the redirect target:,,def,,get_redirect_target,():,,for,,target,,in,,request,.,values,.,get,(,'next',),,,request,.,referrer,:,,if,,not,,target,:,,continue,,if,,is_safe_url,(,target,):,,return,,target,,,Since we don't want to redirect to the same page we have to make sure that the actual back redirect is slightly different (only use the submitted data, not the referrer).  Also we can have a fallback there:,,def,,redirect_back,(,endpoint,,,,**,values,):,,target,,=,,request,.,form,[,'next',],,if,,not,,target,,or,,not,,is_safe_url,(,target,):,,target,,=,,url_for,(,endpoint,,,,**,values,),,return,,redirect,(,target,),,,It will tried to use next and the referrer first and fall back to a given endpoint.  You can then use it like this in the views:,,@app.route,(,'/login',,,,methods,=,[,'GET',,,,'POST',]),,def,,login,():,,next,,=,,get_redirect_target,(),,if,,request,.,method,,==,,'POST',:,,# login code here,,return,,redirect_back,(,'index',),,return,,render_template,(,'index.html',,,,next,=,next,),,,The,or,is important so that we have a redirect target if all hints fail (in this case the index page).,,In the template you have to make sure to relay the redirect target:,,<,form,,action,=,\"\",,method,=,post,>,,<,dl,>,,<,dt,>,Username:,<,dd,><,input,,type,=,text,,name,=,username,>,,<,dt,>,Password:,<,dd,><,input,,type,=,password,,name,=,password,>,,</,dl,>,,<,p,>,,<,input,,type,=,submit,,value,=,Login,>,,<,input,,type,=,hidden,,value,=,\",{{,,next,,or,,'',,}},\",,name,=,next,>,,</,form,>,,,The,or,here is just here to make,None,become an empty string.,,This snippet by Armin Ronacher can be used freely for\n    anything you like. Consider it public domain.,,,Comments,,,,Open Redirect\n          by stp ra\n          on 2015-01-01 @ 20:12,@addendum: The \"ref_url.netloc == test_url.netloc\" test is what prevents the open redirect here. Am I wrong?,,,,missing import\n          by chrickso\n          on 2012-07-18 @ 18:41,\"from flask import request, url_for\" should also import redirect, needed for last line of def redirect_back():,,,,does not work with subdomains\n          by chrickso\n          on 2012-07-18 @ 20:23,if next == sub1.mydomain.com and you POST to sub2.mydomain.com, redirect_back() will always revert to the fallback.,,,,Vulnerable to Open Redirect\n          by landakram\n          on 2014-09-08 @ 23:43,Please note that redirecting like this is vulnerable to the Open Redirect Vulnerability (,http://homakov.blogspot.com/2014/01/evolution-of-open-redirect-vulnerability.html,) due to the way that python's urlparse module parses URLs.,,You can reproduce the vulnerability with this code by using `next=,/,/google.com` as the URL param to redirect to.,,,,addendum to Open Redirect\n          by landakram\n          on 2014-09-08 @ 23:44,sorry, that should be 5 slashes before google.com.,,,,addendum to Open Redirect\n          by landakram\n          on 2014-09-08 @ 23:44,woops! 6 actually.,,,,Open Redirect\n          by stp ra\n          on 2015-01-01 @ 20:12,@addendum: The \"ref_url.netloc == test_url.netloc\" test is what prevents the open redirect here. Am I wrong?,,,,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/54/", "content": "Salted Passwords | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Salted Passwords,,Posted by Armin Ronacher\n    on 2011-07-11 @ 21:09\n    and filed in,Security,,When you have user accounts and you give them passwords you really don't want to store them in the database unhashed.  However just hashing the passwords is barely more secure because of,Rainbow table,attacks.  What you want to do is to salt the passwords which means that instead of just hashing the password you hash the password + a salt.  And you also don't just want to concatenate them but use HMAC.  And because that's common and easy to make wrong, Werkzeug provides a helper for that which also generates a hash for you.,,Here is how it works.  The following example assumes that you use some class for your user object:,,from,,werkzeug.security,,import,,generate_password_hash,,,\\,check_password_hash,,class,,User,(,object,):,,def,,__init__,(,self,,,,username,,,,password,):,,self,.,username,,=,,username,,self,.,set_password,(,password,),,def,,set_password,(,self,,,,password,):,,self,.,pw_hash,,=,,generate_password_hash,(,password,),,def,,check_password,(,self,,,,password,):,,return,,check_password_hash,(,self,.,pw_hash,,,,password,),,,And here is how it works:,,>>>,me,,=,,User,(,'John Doe',,,,'default',),,>>>,me,.,pw_hash,,'sha1$Z9wtkQam$7e6e814998ab3de2b63401a58063c79d92865d79',,>>>,me,.,check_password,(,'default',),,True,,>>>,me,.,check_password,(,'defaultx',),,False,,,This snippet by Armin Ronacher can be used freely for\n    anything you like. Consider it public domain.,,,Comments,,,,Typo?\n          by Sean Lynch\n          on 2011-07-12 @ 02:23,In the User example, I believe the last line should be:\n\"return check_password_hash(self.pw_hash, password)\" instead of \"return check_password(self.pw_hash, password)\",,,,Length?\n          by Joe Esposito\n          on 2011-07-25 @ 03:00,What's the resulting string length? Is it the same length as the plaintext? Smaller?,,I'd like to know what to make the string size of the password_hash database column.,,,,Length?\n          by Joe Esposito\n          on 2011-07-25 @ 03:05,Asked too soon, found the answer. If using SHA-1, the digest size is 160.,,http://en.wikipedia.org/wiki/SHA-1,,,,Typo? Yes.\n          by Orph\u00e9e Lafond-Lummis\n          on 2011-10-15 @ 14:45,You spotted it. The check_password should indeed be check_password_hash.,,Reference:,http://werkzeug.pocoo.org/docs/utils/#module-werkzeug.security,,,,Still best practice?\n          by Alex Chamberlain\n          on 2012-10-26 @ 13:37,There seem to be a lot of articles about that say this is a bad idea. For example,,,http://security.stackexchange.com/q/3165/10691,,http://www.unlimitednovelty.com/2012/03/dont-use-bcrypt.html,,,,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/111/", "content": "How to serve HTTPS *directly* from Flask (no nginx, no apache, no gunicorn) | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,How to serve HTTPS *directly* from Flask (no nginx, no apache, no gunicorn),,Posted by 0byte\n    on 2013-05-03 @ 13:42\n    and filed in,Security,,This is a great tip for debugging your HTTPS-enabled application.,,Create a SSL context (,http://werkzeug.pocoo.org/docs/serving/,),,from OpenSSL import SSL\ncontext = SSL.Context(SSL.SSLv23_METHOD)\ncontext.use_privatekey_file('yourserver.key')\ncontext.use_certificate_file('yourserver.crt'),,then,,app.run(host='127.0.0.1',port='12344', \n        debug = False/True, ssl_context=context),,Linux-related:,,there is a confirmed bug in pyOpenSSL that generates a runtime error:,https://bugs.launchpad.net/pyopenssl/+bug/900792,,The workaround is to put these 2 lines in werkzeug/serving.py,,in class BaseWSGIServer(HTTPServer, object):\n...\n def shutdown_request(self,request):\n        request.shutdown(),,enjoy,,,0byte,,This snippet by 0byte can be used freely for\n    anything you like. Consider it public domain.,,,Comments,,,,SSLv3 is not secure\n          by Alexey Kinev\n          on 2014-10-23 @ 09:53,As SSLv3 has POODLE vulnerability, it's better to switch to TLS protocols, i.e.:,,from OpenSSL import SSL\n   context = SSL.Context(SSL.PROTOCOL_TLSv1_2),,,,Comment\n          by Alexey Kinev\n          on 2014-10-23 @ 11:34,Seems like more proper would be to use ssl module:,,import,,ssl,,context,,=,,ssl,.,SSLContext,(,ssl,.,PROTOCOL_TLSv1_2,),,context,.,load_cert_chain,(,'yourserver.crt',,,,'yourserver.key',),,,And thanks for the hint! ;),,,,New Werkzeug is even easier\n          by hamx0r\n          on 2016-02-05 @ 18:47,Per the below SO link, for Werkzeug 0.10+, you can just use:\n    if __name__ == \"__main__\":\n        context = ('cert.crt', 'key.key')\n        app.run(host='0.0.0.0', port=80, ssl_context=context,     threaded=True, debug=True),http://stackoverflow.com/a/28590266/682515,,,,New Werkzeug is even easier\n          by hamx0r\n          on 2016-02-05 @ 18:53,Per the below SO link, for Werkzeug 0.10+, you can just use:,,if,,__name__,,==,,\"__main__\",:,,context,,=,,(,'cert.crt',,,,'key.key',),,app,.,run,(,host,=,'0.0.0.0',,,,port,=,80,,,,ssl_context,=,context,,,,threaded,=,True,,,,debug,=,True,),,,http://stackoverflow.com/a/28590266/682515,,,,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/3/", "content": "CSRF Protection | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,CSRF Protection,,Posted by Dan Jacob\n    on 2010-05-03 @ 11:29\n    and filed in,Security,,A common technique against,CSRF,attacks is to add a random string to the session, and check that string against a hidden field in the POST.,,@app.before_request,,def,,csrf_protect,():,,if,,request,.,method,,==,,\"POST\",:,,token,,=,,session,.,pop,(,'_csrf_token',,,,None,),,if,,not,,token,,or,,token,,!=,,request,.,form,.,get,(,'_csrf_token',):,,abort,(,403,),,def,,generate_csrf_token,():,,if,,'_csrf_token',,not,,in,,session,:,,session,[,'_csrf_token',],,=,,some_random_string,(),,return,,session,[,'_csrf_token',],,app,.,jinja_env,.,globals,[,'csrf_token',],,=,,generate_csrf_token,,,And then in your template:,,<,form,,method,=,post,,action,=,\"\",>,,<,input,,name,=,_csrf_token,,type,=,hidden,,value,=,\",{{,,csrf_token,(),,}},\",>,,,This snippet by Dan Jacob can be used freely for\n    anything you like. Consider it public domain.,,,Comments,,,,abort instead of exception\n          by Armin Ronacher\n          on 2010-05-03 @ 11:42,I would recommend using,abort(400),instead of,raise Forbidden,.  First of all it's part of the Flask API (the,abort,) function and it also matches HTTP better here.  It is a bad request and not really a forbidden URL.,,,,403 used in Django\n          by Dan Jacob\n          on 2010-05-03 @ 11:55,Sure - the main reason I used 403 was because (rightly or wrongly) that's what Django uses:,,http://docs.djangoproject.com/en/dev/ref/contrib/csrf/#rejected-requests,,,,Missing name attr\n          by justquick\n          on 2010-05-04 @ 06:13,One last thing I saw missing while trying to get this up myself is the hidden input field is missing the name attribute. It should be,,<,input,,type,=,hidden,,name,=,_csrf_token,,value,=,\",{{,,csrf_token,(),,}},\",>,,,PS - its working wonderfully now,,,,Last line typo\n          by justquick\n          on 2010-05-04 @ 04:38,The last line should read,,app,.,jinja_env,.,globals,[,'csrf_token',],,=,,generate_csrf_token,,,I also think that abort(403) is the best way to handle this,,,,Last line update\n          by Max Countryman\n          on 2011-02-23 @ 22:51,I believe,,`app.jinja_env.globals['csrf_token'] = generate_csrf_token`,,should be,,`app.jinja_env.filters['csrf_token'] = generate_csrf_token`,,,,Please disregard\n          by Max Countryman\n          on 2011-02-24 @ 00:00,I'm sorry, I was wrong about the above post. Please disregard/remove.,,,,What about JSON API?\n          by Shuhao\n          on 2012-06-21 @ 00:44,How would you protect yourself against CSRF if you have JSON apis?,,,,re: What about JSON API?\n          by Nick\n          on 2012-08-22 @ 10:37,Just define a GET method which returns the CSRF token.,,,,how to handle session timeouts\n          by Andrew Kloos\n          on 2012-10-29 @ 18:20,Let's say someone navigates to your page which contains a form with your csrf token.  Now let's says they wait on the page and their session timeout out.  How do you handle them posting while their session has already timed out?  Thanks!,,,,Testing\n          by Geri\n          on 2015-03-11 @ 12:43,In order to disable the CSRF functionality for testing purposes you can set the config entry WTF_CSRF_ENABLED to False.,,,,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/61/", "content": "Using Beaker session with Flask | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Using Beaker session with Flask,,Posted by Simon Lyngshede\n    on 2011-07-25 @ 20:47\n    and filed in,Sessions,,The following is a simple application that shows how to bootstrap beakers session middleware and access the session variables. The example uses memcached as the backend.,,from,,flask,,import,,Flask,,,,request,,from,,beaker.middleware,,import,,SessionMiddleware,,session_opts,,=,,{,,'session.type',:,,'ext:memcached',,,,'session.url',:,,'127.0.0.1:11211',,,,'session.data_dir',:,,'./cache',,,,},,app,,=,,Flask,(,__name__,),,@app.route,(,'/',),,def,,index,():,,session,,=,,request,.,environ,[,'beaker.session',],,if,,not,,session,.,has_key,(,'value',):,,session,[,'value',],,=,,'Save in session',,session,.,save,(),,return,,\"Session value set.\",,else,:,,return,,session,[,'value',],,if,,__name__,,==,,'__main__',:,,app,.,wsgi_app,,=,,SessionMiddleware,(,app,.,wsgi_app,,,,session_opts,),,app,.,run,(,debug,=,True,),,,You might want to use beaker in the situation where you have multiple Flask applications, e.g. load balanced applications, that need to have access to a shared session storage, which beaker can provide.,,This snippet by Simon Lyngshede can be used freely for\n    anything you like. Consider it public domain.,,,Comments,,,,This snippet does not work\n          by John Wheeler\n          on 2013-09-19 @ 19:08,^^,,,,Oops My bad\n          by John Wheeler\n          on 2013-09-19 @ 19:14,does work, just needed to save() the session.,,,,Seamless beaker session\n          by Piotr Sensu\n          on 2014-01-22 @ 08:04,check out,http://flask.pocoo.org/snippets/121/,,,,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/58/", "content": "Unittest example with before and after function calls | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Unittest example with before and after function calls,,Posted by Rock Howard\n    on 2011-07-20 @ 19:46\n    and filed in,Sessions,,The following has been tested with Flask 6 but\nI think that it should work with other releases.,,def test_set_date_range(self):\n    arg_dict = {\n            'min_date': \"2011-7-1\",\n            'max_date': \"2011-7-4\",\n    }\n    with self.app.test_request_context('/date_range/',\n                method=\"POST\", data=arg_dict):\n\n        # call the before funcs\n        rv = self.app.preprocess_request()\n        if rv != None:\n            response = self.app.make_response(rv)\n        else:\n            # do the main dispatch\n            rv = self.app.dispatch_request()\n            response = self.app.make_response(rv)\n\n            # now do the after funcs\n            response = self.app.process_response(response)\n\n    assert response.mimetype == 'application/json'\n    assert \"OK\" in response.data,,There should be a \"Testing\" category.\",,This snippet by Rock Howard can be used freely for\n    anything you like. Consider it public domain.,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/52/", "content": "Support for Old and New Sessions | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Support for Old and New Sessions,,Posted by Armin Ronacher\n    on 2011-07-07 @ 11:08\n    and filed in,Sessions,,If you want to write an extension that supports Flask 0.7 session monkey patching and the new 0.8 session interface we recommend this glue code:,,try,:,,from,,flask.sessions,,import,,SessionMixin,,,,SessionInterface,,except,,ImportError,:,,class,,SessionInterface,(,object,):,,pass,,class,,SessionMixin,(,object,):,,def,,_get_permanent,(,self,):,,return,,self,.,get,(,'_permanent',,,,False,),,def,,_set_permanent,(,self,,,,value,):,,self,[,'_permanent',],,=,,bool,(,value,),,permanent,,=,,property,(,_get_permanent,,,,_set_permanent,),,del,,_get_permanent,,,,_set_permanent,,# you can use a werkzeug.datastructure.CallbackDict,,# to automatically update modified if you want, but,,# it's not a requirement.,,new,,=,,False,,modified,,=,,True,,class,,MySession,(,dict,,,,SessionMixin,):,,pass,,class,,MySessionInterface,(,object,):,,def,,open_session,(,self,,,,app,,,,request,):,,# load the session and return it.,,return,,MySession,(),,def,,save_session,(,self,,,,app,,,,session,,,,response,):,,# save the session,,...,,def,,init_my_extension,(,app,):,,if,,not,,hasattr,(,app,,,,'session_interface',):,,app,.,open_session,,=,,lambda,,r,:,\\,app,.,session_interface,.,open_session,(,app,,,,r,),,app,.,save_session,,=,,lambda,,s,,,,r,:,\\,app,.,session_interface,.,save_session,(,app,,,,s,,,,r,),,app,.,session_interface,,=,,MySessionInterface,(),,,The minimum interface expected is that open session returns an object that implements this:,,1. it has a,permanent,attribute.  The mixing automatically stuffs that into the session itself.\n2. it either has,modified,automatically set to,True,or it tracks assignments to the dict.\n3. it has a,new,attribute which however is not required to be set to,True,for new sessions but if possible, it should be supported.,,Generally it is however recommended that extensions do not attempt to support 0.7 for new session backends due to the added complexity.,,This snippet by Armin Ronacher can be used freely for\n    anything you like. Consider it public domain.,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/86/", "content": "Server-side sessions with SQLite | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Server-side sessions with SQLite,,Posted by Thiago Arruda\n    on 2012-02-10 @ 12:18\n    and filed in,Sessions,,This is based on the snippet at,http://flask.pocoo.org/snippets/75/,.,,Simple but powerful implementation of server-side sessions using sqlite database which comes bundled with python:,,import,,os,,,,errno,,,,sqlite3,,from,,uuid,,import,,uuid4,,from,,cPickle,,import,,dumps,,,,loads,,from,,collections,,import,,MutableMapping,,from,,flask.sessions,,import,,SessionInterface,,,,SessionMixin,,class,,SqliteSession,(,MutableMapping,,,,SessionMixin,):,,_create_sql,,=,,(,,'CREATE TABLE IF NOT EXISTS session ',,'(',,'  key TEXT PRIMARY KEY,',,'  val BLOB',,')',,),,_get_sql,,=,,'SELECT val FROM session WHERE key = ?',,_set_sql,,=,,'REPLACE INTO session (key, val) VALUES (?, ?)',,_del_sql,,=,,'DELETE FROM session WHERE key = ?',,_ite_sql,,=,,'SELECT key FROM session',,_len_sql,,=,,'SELECT COUNT(*) FROM session',,def,,__init__,(,self,,,,directory,,,,sid,,,,*,args,,,,**,kwargs,):,,self,.,path,,=,,os,.,path,.,join,(,directory,,,,sid,),,self,.,directory,,=,,directory,,self,.,sid,,=,,sid,,self,.,modified,,=,,False,,self,.,conn,,=,,None,,if,,not,,os,.,path,.,exists,(,self,.,path,):,,with,,self,.,_get_conn,(),,as,,conn,:,,conn,.,execute,(,self,.,_create_sql,),,self,.,new,,=,,True,,def,,__getitem__,(,self,,,,key,):,,key,,=,,dumps,(,key,,,,0,),,rv,,=,,None,,with,,self,.,_get_conn,(),,as,,conn,:,,for,,row,,in,,conn,.,execute,(,self,.,_get_sql,,,,(,key,,)):,,rv,,=,,loads,(,str,(,row,[,0,])),,break,,if,,rv,,is,,None,:,,raise,,KeyError,(,'Key not in this session',),,return,,rv,,def,,__setitem__,(,self,,,,key,,,,value,):,,key,,=,,dumps,(,key,,,,0,),,value,,=,,buffer,(,dumps,(,value,,,,2,)),,with,,self,.,_get_conn,(),,as,,conn,:,,conn,.,execute,(,self,.,_set_sql,,,,(,key,,,,value,)),,self,.,modified,,=,,True,,def,,__delitem__,(,self,,,,key,):,,key,,=,,dumps,(,key,,,,0,),,with,,self,.,_get_conn,(),,as,,conn,:,,conn,.,execute,(,self,.,_del_sql,,,,(,key,,)),,self,.,modified,,=,,True,,def,,__iter__,(,self,):,,with,,self,.,_get_conn,(),,as,,conn,:,,for,,row,,in,,conn,.,execute,(,self,.,_ite_sql,):,,yield,,loads,(,str,(,row,[,0,])),,def,,__len__,(,self,):,,with,,self,.,_get_conn,(),,as,,conn,:,,for,,row,,in,,conn,.,execute,(,self,.,_len_sql,):,,return,,row,[,0,],,def,,_get_conn,(,self,):,,if,,not,,self,.,conn,:,,self,.,conn,,=,,sqlite3,.,Connection,(,self,.,path,),,return,,self,.,conn,,# These proxy classes are needed in order,,# for this session implementation to work properly.,,# That is because sometimes flask will chain method calls,,# with session'setdefault' calls.,,# Eg: session.setdefault('_flashes', []).append(1),,# With these proxies, the changes made by chained,,# method calls will be persisted back to the sqlite,,# database.,,class,,CallableAttributeProxy,(,object,):,,def,,__init__,(,self,,,,session,,,,key,,,,obj,,,,attr,):,,self,.,session,,=,,session,,self,.,key,,=,,key,,self,.,obj,,=,,obj,,self,.,attr,,=,,attr,,def,,__call__,(,self,,,,*,args,,,,**,kwargs,):,,rv,,=,,self,.,attr,(,*,args,,,,**,kwargs,),,self,.,session,[,self,.,key,],,=,,self,.,obj,,return,,rv,,class,,PersistedObjectProxy,(,object,):,,def,,__init__,(,self,,,,session,,,,key,,,,obj,):,,self,.,session,,=,,session,,self,.,key,,=,,key,,self,.,obj,,=,,obj,,def,,__getattr__,(,self,,,,name,):,,attr,,=,,getattr,(,self,.,obj,,,,name,),,if,,callable,(,attr,):,,return,,SqliteSession,.,CallableAttributeProxy,(,,self,.,session,,,,self,.,key,,,,self,.,obj,,,,attr,),,return,,attr,,def,,setdefault,(,self,,,,key,,,,value,):,,if,,key,,not,,in,,self,:,,self,[,key,],,=,,value,,self,.,modified,,=,,True,,return,,SqliteSession,.,PersistedObjectProxy,(,,self,,,,key,,,,self,[,key,]),,class,,SqliteSessionInterface,(,SessionInterface,):,,def,,__init__,(,self,,,,directory,):,,directory,,=,,os,.,path,.,abspath,(,directory,),,if,,not,,os,.,path,.,exists,(,directory,):,,os,.,mkdir,(,directory,),,self,.,directory,,=,,directory,,def,,open_session,(,self,,,,app,,,,request,):,,sid,,=,,request,.,cookies,.,get,(,app,.,session_cookie_name,),,if,,not,,sid,:,,sid,,=,,str,(,uuid4,()),,rv,,=,,SqliteSession,(,self,.,directory,,,,sid,),,return,,rv,,def,,save_session,(,self,,,,app,,,,session,,,,response,):,,domain,,=,,self,.,get_cookie_domain,(,app,),,if,,not,,session,:,,try,:,,os,.,unlink,(,session,.,path,),,except,,OSError,,,,e,:,,if,,e,.,errno,,!=,,errno,.,ENOENT,:,,raise,,if,,session,.,modified,:,,response,.,delete_cookie,(,app,.,session_cookie_name,,,,domain,=,domain,),,return,,cookie_exp,,=,,self,.,get_expiration_time,(,app,,,,session,),,response,.,set_cookie,(,app,.,session_cookie_name,,,,session,.,sid,,,,expires,=,cookie_exp,,,,httponly,=,True,,,,domain,=,domain,),,,An example on how to use it in a ubuntu production server:,,# Use shared memory (tmpfs) for maximum scalability,,# It is possible to use a NFS directory.,,# Recent NFS implementions have good fcntl support,,# which is the locking mechanism sqlite uses.,,path,,=,,'/run/shm/app_session',,if,,not,,os,.,path,.,exists,(,path,):,,os,.,mkdir,(,path,),,os,.,chmod,(,path,,,,int,(,'700',,,,8,)),,app,.,session_interface,,=,,SqliteSessionInterface,(,path,),,,This snippet by Thiago Arruda can be used freely for\n    anything you like. Consider it public domain.,,,Comments,,,,Expired Sessions\n          by Thiago Arruda\n          on 2012-03-06 @ 10:41,Adrian, the code,,os,.,unlink,(,session,.,path,),,,will delete the session file all keys are removed from the session.,,,,Unlink\n          by Adrian Lopez\n          on 2012-03-07 @ 02:24,os.unlink(session.path) will delete the file belonging to a known session, but what about sessions whose cookies have expired?,,,,One DB per session?\n          by Simon Sapin\n          on 2012-03-03 @ 21:12,The idea is nice, but the implementation looks weird. Apparently, this snippet creates one SQLite DB file per session/user and one row for each key/value pair in the session dict. (Values serialized with pickle.),,Wouldn\u2019t it be better to have a single database and one row per user? (And serialize the whole session dict at once with pickle.),,,,Concurrency\n          by Thiago Arruda\n          on 2012-03-04 @ 10:39,Since SQLite is a single-file database, writes to the database are serialized(It allows multiple simultaneous readers, but only one writer at a time). Since every session will have it's own thread/process, using a single file will eventually lead to scalability problems.,,,,?\n          by Simon Sapin\n          on 2012-03-04 @ 11:10,But then what\u2019s the point of using SQLite vs. plain pickle files? You still have the sames issues in choosing a filename (the tempfile module could help here.),,,,Single Database vs Multiple Databases\n          by Adrian Lopez\n          on 2012-03-04 @ 19:29,Is there any reason not to use separate databases? There's no need or reason to lock unrelated sessions, so why put everything together in a single database? Considering the disadvantages of allowing only one session to be written at a time, one should first have a very good reason for doing it differently than in the snippet.,,,,Expired Sessions\n          by Adrian Lopez\n          on 2012-03-04 @ 19:36,Unless I missed it, there appears to be no mechanism here to delete expired sessions. Is the assumption here that an external process will take care of deleting expired sessions from the server?,,,,SQLite vs Plain pickle\n          by Thiago Arruda\n          on 2012-03-06 @ 10:39,Simon, if you use pickled files, there are three possible problems that I can think of:,,1 - Since it is possible for multiple concurrent requests to access/modify the same session, there can be race conditions when writing back the session data(eg: request1 reads the session file; request2 reads session file; request1 adds a key to the session; request2 adds a  another key to the session; session1 writes back the session file; request2 writes back the session file; Result: request2 overwrites the changes made by request1). With the current implementation there will be no such problems.,,2 - Every request will make a new system call to read the file along with executing the pickling/unpickling code(affecting scalability for highly accessed websites). With the current implementation, you can have requests that don't access sessions, without context switches(the impact will be even greater if the file read from disk) and without pickles/unpickles.,,3 - You will load the session in memory for every request, and it can lead to scalability problems since one of the use cases of server side sessions is the possibility of storing a large amount of data. With the current implementation, you can store gigabytes in the session, and it won't affect the speed of requests that don't need that data.,,,,Non standard behavior\n          by Mum Pitz\n          on 2013-03-13 @ 15:35,With the above implementation the following does not work:\n<code>\nsession['key'] = {}\nsession['key']['subkey'] = value\n</code>,,Does someone know why ?,,A workaround is:\n<code>\ntemp = {}\ntemp['subkey'] = value\nsession['key'] = temp\n</code>,,,,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/75/", "content": "Server-side Sessions with Redis | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Server-side Sessions with Redis,,Posted by Armin Ronacher\n    on 2011-10-11 @ 21:40\n    and filed in,Sessions,,If you need to store a lot of session data it makes sense to move the data from the cookie to the server.  In that case you might want to use redis as the storage backend for the actual session data.,,The following code implements a session backend using redis.  It allows you to either pass in a redis client or will connect to the redis instance on localhost.  All the keys are prefixed with a specified prefix which defaults to,session:,.,,import,,pickle,,from,,datetime,,import,,timedelta,,from,,uuid,,import,,uuid4,,from,,redis,,import,,Redis,,from,,werkzeug.datastructures,,import,,CallbackDict,,from,,flask.sessions,,import,,SessionInterface,,,,SessionMixin,,class,,RedisSession,(,CallbackDict,,,,SessionMixin,):,,def,,__init__,(,self,,,,initial,=,None,,,,sid,=,None,,,,new,=,False,):,,def,,on_update,(,self,):,,self,.,modified,,=,,True,,CallbackDict,.,__init__,(,self,,,,initial,,,,on_update,),,self,.,sid,,=,,sid,,self,.,new,,=,,new,,self,.,modified,,=,,False,,class,,RedisSessionInterface,(,SessionInterface,):,,serializer,,=,,pickle,,session_class,,=,,RedisSession,,def,,__init__,(,self,,,,redis,=,None,,,,prefix,=,'session:',):,,if,,redis,,is,,None,:,,redis,,=,,Redis,(),,self,.,redis,,=,,redis,,self,.,prefix,,=,,prefix,,def,,generate_sid,(,self,):,,return,,str,(,uuid4,()),,def,,get_redis_expiration_time,(,self,,,,app,,,,session,):,,if,,session,.,permanent,:,,return,,app,.,permanent_session_lifetime,,return,,timedelta,(,days,=,1,),,def,,open_session,(,self,,,,app,,,,request,):,,sid,,=,,request,.,cookies,.,get,(,app,.,session_cookie_name,),,if,,not,,sid,:,,sid,,=,,self,.,generate_sid,(),,return,,self,.,session_class,(,sid,=,sid,,,,new,=,True,),,val,,=,,self,.,redis,.,get,(,self,.,prefix,,+,,sid,),,if,,val,,is,,not,,None,:,,data,,=,,self,.,serializer,.,loads,(,val,),,return,,self,.,session_class,(,data,,,,sid,=,sid,),,return,,self,.,session_class,(,sid,=,sid,,,,new,=,True,),,def,,save_session,(,self,,,,app,,,,session,,,,response,):,,domain,,=,,self,.,get_cookie_domain,(,app,),,if,,not,,session,:,,self,.,redis,.,delete,(,self,.,prefix,,+,,session,.,sid,),,if,,session,.,modified,:,,response,.,delete_cookie,(,app,.,session_cookie_name,,,,domain,=,domain,),,return,,redis_exp,,=,,self,.,get_redis_expiration_time,(,app,,,,session,),,cookie_exp,,=,,self,.,get_expiration_time,(,app,,,,session,),,val,,=,,self,.,serializer,.,dumps,(,dict,(,session,)),,self,.,redis,.,setex,(,self,.,prefix,,+,,session,.,sid,,,,val,,,,int,(,redis_exp,.,total_seconds,())),,response,.,set_cookie,(,app,.,session_cookie_name,,,,session,.,sid,,,,expires,=,cookie_exp,,,,httponly,=,True,,,,domain,=,domain,),,,Here is how to enable it:,,app,,=,,Flask,(,__name__,),,app,.,session_interface,,=,,RedisSessionInterface,(),,,If you get an attribute error that,total_seconds,is missing it means you're using a version of Python older than 2.7.  In this case you can use this function as a replacement for the,total_seconds,method:,,def,,total_seconds,(,td,):,,return,,td,.,days,,*,,60,,*,,60,,*,,24,,+,,td,.,seconds,,,This snippet by Armin Ronacher can be used freely for\n    anything you like. Consider it public domain.,,,Comments,,,,what is session.permanent\n          by linnchord gao\n          on 2012-01-10 @ 08:07,the code:,,if session.permanent:\n   return app.permanent_session_lifetime,,Where to config the [session.permanent]? I set the param [PERMANENT_SESSION_LIFETIME] in conf and not available, because the session.permanent is False.,,,,Comment\n          by Armin Ronacher\n          on 2012-01-19 @ 13:30,It's set per session.  Just execute this:,,session,.,permanent,,=,,True,,,Right after login or something.,,,,Comment\n          by Gurteshwar\n          on 2012-06-29 @ 11:34,Hi, There's an error in this snippet, self.redis.setex(self.prefix + session.sid, val,int(redis_exp.total_seconds())) is wrong. The redis SETEX command format is SETEX key seconds value. In the snippet it's SETEX key value seconds. This raises an exception. Please correct it for future readers. Thanks,,,,Comment\n          by Jonathan Drake\n          on 2012-10-16 @ 22:00,@Gurteshwar I just tried the snippet as is as well as with your suggested fix. Your syntax caused an error.,,,,About the implementation of redis and this snippet\n          by Jorge Vazquez\n          on 2013-04-02 @ 16:33,@Jonathan Drake and @Gurteshwar and future readers.,,If you use,,import redis\nredis.StrictRedis(),,@Gurteshwar comment fixes the issue.,,However, if you use,,from redis import Redis\nredis = Redis(),,What you have on this snippet is what you should use.,,Per the code at,https://github.com/andymccurdy/redis-py/blob/master/redis/client.py,, the difference between both implementations,,class StrictRedis(object):\n    def setex(self, name, time, value):\n     ....,,class Redis(StrictRedis):\n    \"\"\"\n    Provides backwards compatibility with older versions of redis-py that\n    changed arguments to some commands to be more Pythonic, sane, or by\n    accident.\n    \"\"\",,def setex(self, name, value, time):\n    ....,,,,Is this check on session correct?\n          by Andy Bowes\n          on 2013-06-07 @ 13:14,We have been using Flask & Redis sessions for a while without too many issues.  I am just making some changes and I am a bit puzzled by this 'if' statement.\nIf the session is None then should the code attempt to get the session.sid on the following line or check the modified flag?,,if not session:\n    self.redis.delete(self.prefix + session.sid)\n    if session.modified:\n       response.delete_cookie(app.session_cookie_name,\n                                       domain=domain)\n        return,,,,Error with StrictRedis\n          by Mike Sukmanowsky\n          on 2013-12-14 @ 17:26,You need to modify how you set your session if passed a StrictRedis instance as it swaps the timeout and value arguments:,,if isinstance(self.redis, Redis):\n            self.redis.setex(key, val, int(redis_exp.total_seconds()))\n        else:,,StrictRedis swaps around the timeout and value args\n            self.redis.setex(key, int(redis_exp.total_seconds()), val),,,,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/132/", "content": "Server-side sessions with Pickle. | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Server-side sessions with Pickle.,,Posted by Robert Bruce Park\n    on 2015-08-04 @ 19:41\n    and filed in,Sessions,,This snippet is based on the sqlite snippet here:,,http://flask.pocoo.org/snippets/86/,,I found that sqlite was giving strange IOErrors some of the time, in a way I wasn't able to troubleshoot, so I thought instead of storing pickled data in sqlite, I'd just store pickled data directly to disk.,,Also this is only tested in python3 but can probably be made to work in python2 with some massaging.,,import,,os,,from,,uuid,,import,,uuid1,,from,,pickle,,import,,UnpicklingError,,,,dumps,,,,loads,,from,,contextlib,,import,,suppress,,from,,collections,,import,,MutableMapping,,from,,flask.sessions,,import,,SessionInterface,,,,SessionMixin,,class,,PickleSession,(,MutableMapping,,,,SessionMixin,):,,\"\"\"Server-side session implementation.,,Uses pickle to achieve a disk-backed session such that multiple,,worker processes can access the same session data.,,\"\"\",,def,,__init__,(,self,,,,directory,,,,sid,,,,*,args,,,,**,kwargs,):,,self,.,path,,=,,os,.,path,.,join,(,directory,,,,sid,),,self,.,directory,,=,,directory,,self,.,sid,,=,,sid,,self,.,read,(),,def,,__getitem__,(,self,,,,key,):,,self,.,read,(),,return,,self,.,data,[,key,],,def,,__setitem__,(,self,,,,key,,,,value,):,,self,.,data,[,key,],,=,,value,,self,.,save,(),,def,,__delitem__,(,self,,,,key,):,,del,,self,.,data,[,key,],,self,.,save,(),,def,,__iter__,(,self,):,,return,,iter,(,self,.,data,),,def,,__len__,(,self,):,,return,,len,(,self,.,data,),,def,,read,(,self,):,,\"\"\"Load pickle from (ram)disk.\"\"\",,try,:,,with,,open,(,self,.,path,,,,'rb',),,as,,blob,:,,self,.,data,,=,,loads,(,blob,.,read,()),,except,,(,FileNotFoundError,,,,ValueError,,,,EOFError,,,,UnpicklingError,):,,self,.,data,,=,,{},,def,,save,(,self,):,,\"\"\"Dump pickle to (ram)disk atomically.\"\"\",,new_name,,=,,',{},.new',.,format,(,self,.,path,),,with,,open,(,new_name,,,,'wb',),,as,,blob,:,,blob,.,write,(,dumps,(,self,.,data,)),,os,.,rename,(,new_name,,,,self,.,path,),,# Note: Newer versions of Flask no longer require,,# CallableAttributeProxy and PersistedObjectProxy,,class,,PickleSessionInterface,(,SessionInterface,):,,\"\"\"Basic SessionInterface which uses the PickleSession.\"\"\",,def,,__init__,(,self,,,,directory,):,,self,.,directory,,=,,os,.,path,.,abspath,(,directory,),,os,.,makedirs,(,self,.,directory,,,,exist_ok,=,True,),,def,,open_session,(,self,,,,app,,,,request,):,,sid,,=,,request,.,cookies,.,get,(,,app,.,session_cookie_name,),,or,,',{},-,{},',.,format,(,uuid1,(),,,os,.,getpid,()),,return,,PickleSession,(,self,.,directory,,,,sid,),,def,,save_session,(,self,,,,app,,,,session,,,,response,):,,domain,,=,,self,.,get_cookie_domain,(,app,),,if,,not,,session,:,,with,,suppress,(,FileNotFoundError,):,,os,.,unlink,(,session,.,path,),,response,.,delete_cookie,(,,app,.,session_cookie_name,,,,domain,=,domain,),,return,,cookie_exp,,=,,self,.,get_expiration_time,(,app,,,,session,),,response,.,set_cookie,(,,app,.,session_cookie_name,,,,session,.,sid,,,,expires,=,cookie_exp,,,,httponly,=,True,,,,domain,=,domain,),,,Can be used like so:,,path,,=,,'/run/shm/app_session',,if,,not,,os,.,path,.,exists,(,path,):,,os,.,mkdir,(,path,),,os,.,chmod,(,path,,,,int,(,'700',,,,8,)),,app,.,session_interface,,=,,PickleSessionInterface,(,path,),,,This snippet by Robert Bruce Park can be used freely for\n    anything you like. Consider it public domain.,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/110/", "content": "Server-side sessions with MongoDB (pymongo) | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Server-side sessions with MongoDB (pymongo),,Posted by Joe Doherty\n    on 2013-05-01 @ 11:24\n    and filed in,Sessions,,A nice easy way to store Flask sessions inside MongoDB. This will just store the session id (sid) in the cookie.,,Database name needs to be passed in when setting the interface. Collection name will default to 'sessions', host to 'localhost', and port to 27017.,,from,,uuid,,import,,uuid4,,from,,datetime,,import,,datetime,,,,timedelta,,from,,flask.sessions,,import,,SessionInterface,,,,SessionMixin,,from,,werkzeug.datastructures,,import,,CallbackDict,,from,,pymongo,,import,,MongoClient,,class,,MongoSession,(,CallbackDict,,,,SessionMixin,):,,def,,__init__,(,self,,,,initial,=,None,,,,sid,=,None,):,,CallbackDict,.,__init__,(,self,,,,initial,),,self,.,sid,,=,,sid,,self,.,modified,,=,,False,,class,,MongoSessionInterface,(,SessionInterface,):,,def,,__init__,(,self,,,,host,=,'localhost',,,,port,=,27017,,,,db,=,'',,,,collection,=,'sessions',):,,client,,=,,MongoClient,(,host,,,,port,),,self,.,store,,=,,client,[,db,][,collection,],,def,,open_session,(,self,,,,app,,,,request,):,,sid,,=,,request,.,cookies,.,get,(,app,.,session_cookie_name,),,if,,sid,:,,stored_session,,=,,self,.,store,.,find_one,({,'sid',:,,sid,}),,if,,stored_session,:,,if,,stored_session,.,get,(,'expiration',),,>,,datetime,.,utcnow,():,,return,,MongoSession,(,initial,=,stored_session,[,'data',],,,sid,=,stored_session,[,'sid',]),,sid,,=,,str,(,uuid4,()),,return,,MongoSession,(,sid,=,sid,),,def,,save_session,(,self,,,,app,,,,session,,,,response,):,,domain,,=,,self,.,get_cookie_domain,(,app,),,if,,not,,session,:,,response,.,delete_cookie,(,app,.,session_cookie_name,,,,domain,=,domain,),,return,,if,,self,.,get_expiration_time,(,app,,,,session,):,,expiration,,=,,self,.,get_expiration_time,(,app,,,,session,),,else,:,,expiration,,=,,datetime,.,utcnow,(),,+,,timedelta,(,hours,=,1,),,self,.,store,.,update,({,'sid',:,,session,.,sid,},,,{,'sid',:,,session,.,sid,,,,'data',:,,session,,,,'expiration',:,,expiration,},,,True,),,response,.,set_cookie,(,app,.,session_cookie_name,,,,session,.,sid,,,,expires,=,self,.,get_expiration_time,(,app,,,,session,),,,httponly,=,True,,,,domain,=,domain,),,,You can enable this with:,,app,,=,,Flask,(,__name__,),,app,.,session_interface,,=,,MongoSessionInterface,(,db,=,'pjuu',),,,This snippet by Joe Doherty can be used freely for\n    anything you like. Consider it public domain.,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/71/", "content": "Counting Online Users with Redis | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Counting Online Users with Redis,,Posted by Armin Ronacher\n    on 2011-09-10 @ 08:32\n    and filed in,Sessions,,Sometimes you might want to show on the index page what users are online.  Sets in redis are perfect for this.  You can take the current time since 1970 in seconds, divide it by 60 and build a key based on that, then add a user to that set.  Make the set expire after the maximum number of seconds you give a user in activity and when you want to query all active users you just build a union of the keys of the last N minutes.,,Connecting to Redis,,In case you don't have a connection to redis yet, open with with those two simple lines:,,from,,redis,,import,,Redis,,redis,,=,,Redis,(),,,A redis instance is thread safe so you can just keep this on the global level and use it directly.  If you want to connect to a different redis instance just pass the address to the constructor.  More in the pyredis docs.,,Helpers,,import,,time,,from,,datetime,,import,,datetime,,ONLINE_LAST_MINUTES,,=,,5,,def,,mark_online,(,user_id,):,,now,,=,,int,(,time,.,time,()),,expires,,=,,now,,+,,(,app,.,config,[,'ONLINE_LAST_MINUTES',],,*,,60,),,+,,10,,all_users_key,,=,,'online-users/,%d,',,%,,(,now,,//,,60,),,user_key,,=,,'user-activity/,%s,',,%,,user_id,,p,,=,,redis,.,pipeline,(),,p,.,sadd,(,all_users_key,,,,user_id,),,p,.,set,(,user_key,,,,now,),,p,.,expireat,(,all_users_key,,,,expires,),,p,.,expireat,(,user_key,,,,expires,),,p,.,execute,(),,def,,get_user_last_activity,(,user_id,):,,last_active,,=,,redis,.,get,(,'user-activity/,%s,',,%,,user_id,),,if,,last_active,,is,,None,:,,return,,None,,return,,datetime,.,utcfromtimestamp,(,int,(,last_active,)),,def,,get_online_users,():,,current,,=,,int,(,time,.,time,()),,//,,60,,minutes,,=,,xrange,(,app,.,config,[,'ONLINE_LAST_MINUTES',]),,return,,redis,.,sunion,([,'online-users/,%d,',,%,,(,current,,-,,x,),,for,,x,,in,,minutes,]),,,Marking a user as Online,,For testing purposes we can just use the remote address (IP) of the connecting user as user id and mark that online.  Normally you would use your actual user id or usernames here.,,@app.before_request,,def,,mark_current_user_online,():,,mark_online,(,request,.,remote_addr,),,,Displaying Online Users,,And here a very simple view that shows all active users in the last,ONLINE_LAST_MINUTES,minutes.,,from,,flask,,import,,Response,,@app.route,(,'/online',),,def,,index,():,,return,,Response,(,'Online:,%s,',,%,,', ',.,join,(,get_online_users,()),,,mimetype,=,'text/plain',),,,To check if a user is online or when he was online the last time you can use the,get_user_last_activity,function which returns the time the user was online the last time or,None,if it's too long in the past.,,This snippet by Armin Ronacher can be used freely for\n    anything you like. Consider it public domain.,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/134/", "content": "Chunked Secure Cookie Session (Client Side) | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Chunked Secure Cookie Session (Client Side),,Posted by RJ Patawaran\n    on 2015-10-07 @ 06:00\n    and filed in,Sessions,,Use this if you need to store large session data (more than 4093 bytes, up to 40930 bytes) and don't want to bother with server side storage.,,import,,hashlib,,from,,flask.sessions,,import,,SessionInterface,,,,SessionMixin,,,,session_json_serializer,,,,SecureCookieSession,,,,URLSafeTimedSerializer,,,,total_seconds,,,,BadSignature,,class,,ChunkedSecureCookieSessionInterface,(,SessionInterface,):,,\"\"\"The default session interface that stores sessions in signed cookies,,through the :mod:`itsdangerous` module.,,\"\"\",,#: the salt that should be applied on top of the secret key for the,,#: signing of cookie based sessions.,,salt,,=,,'cookie-session',,#: the hash function to use for the signature.\tThe default is sha1,,digest_method,,=,,staticmethod,(,hashlib,.,sha1,),,#: the name of the itsdangerous supported key derivation.  The default,,#: is hmac.,,key_derivation,,=,,'hmac',,#: A python serializer for the payload.\t The default is a compact,,#: JSON derived serializer with support for some extra Python types,,#: such as datetime objects or tuples.,,serializer,,=,,session_json_serializer,,session_class,,=,,SecureCookieSession,,def,,get_signing_serializer,(,self,,,,app,):,,if,,not,,app,.,secret_key,:,,return,,None,,signer_kwargs,,=,,dict,(,,key_derivation,=,self,.,key_derivation,,,,digest_method,=,self,.,digest_method,,),,return,,URLSafeTimedSerializer,(,app,.,secret_key,,,,salt,=,self,.,salt,,,,serializer,=,self,.,serializer,,,,signer_kwargs,=,signer_kwargs,),,def,,open_session,(,self,,,,app,,,,request,):,,s,,=,,self,.,get_signing_serializer,(,app,),,if,,s,,is,,None,:,,return,,None,,cookie_vals,,=,,{},,for,,cookie_name,,in,,request,.,cookies,:,,if,,cookie_name,.,startswith,(,app,.,session_cookie_name,):,,cookie_vals,[,cookie_name,],,=,,request,.,cookies,.,get,(,cookie_name,),,vals,,=,,[],,for,,cookie_name,,in,,sorted,(,cookie_vals,.,keys,()):,,vals,.,append,(,cookie_vals,[,cookie_name,]),,val,,=,,'',.,join,(,vals,),,if,,not,,val,:,,return,,self,.,session_class,(),,max_age,,=,,total_seconds,(,app,.,permanent_session_lifetime,),,try,:,,data,,=,,s,.,loads,(,val,,,,max_age,=,max_age,),,return,,self,.,session_class,(,data,),,except,,BadSignature,:,,return,,self,.,session_class,(),,def,,save_session,(,self,,,,app,,,,session,,,,response,):,,domain,,=,,self,.,get_cookie_domain,(,app,),,path,,=,,self,.,get_cookie_path,(,app,),,if,,not,,session,:,,if,,session,.,modified,:,,for,,cookie_idx,,in,,range,(,10,):,,response,.,delete_cookie,(,',%s,:,%s,',,%,,(,app,.,session_cookie_name,,,,cookie_idx,),,,domain,=,domain,,,,path,=,path,),,return,,httponly,,=,,self,.,get_cookie_httponly,(,app,),,secure,,=,,self,.,get_cookie_secure,(,app,),,expires,,=,,self,.,get_expiration_time,(,app,,,,session,),,val,,=,,self,.,get_signing_serializer,(,app,),.,dumps,(,dict,(,session,)),,chunks,,,,chunk_size,,=,,len,(,val,),,,len,(,val,),/,9,,vals,,=,,[,,val,[,i,:,i,+,chunk_size,],,for,,i,,in,,range,(,0,,,,chunks,,,,chunk_size,),,],,for,,i,,in,,range,(,10,):,,try,:,,val,,=,,vals,[,i,],,except,:,,val,,=,,'',,response,.,set_cookie,(,',%s,:,%s,',,%,,(,app,.,session_cookie_name,,,,i,),,,val,,,,expires,=,expires,,,,httponly,=,httponly,,,,domain,=,domain,,,,path,=,path,,,,secure,=,secure,),,,This snippet by RJ Patawaran can be used freely for\n    anything you like. Consider it public domain.,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/51/", "content": "Better Client-side sessions | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Better Client-side sessions,,Posted by Armin Ronacher\n    on 2011-07-07 @ 09:46\n    and filed in,Sessions,,Flask by default uses the Werkzeug provided 'secure cookie' as session system.  It works by pickling the session data, compressing it and base64 encoding it.,,Motivation,,This was a reasonable decision at the time but now there are better modules available and if you are fine with another external dependency you could start using,itsdangerous,instead of the secure cookie which works the same but has a couple of advantages:,,1. the implementation comes from the django signing module and was heavily reviewed in terms of the crypto used.\n2. it can be used for much more than just signing cookies\n3. it uses JSON instead of pickle by default.\n4. it could be implemented client side to read the session data from JavaScript.\n5. it does not rely on Python specifics so your proxy server could be able to read it.,,Implementation,,Starting with Flask 0.8 adding support is easy due to the newly introduced session interface:,,from,,werkzeug.datastructures,,import,,CallbackDict,,from,,flask.sessions,,import,,SessionInterface,,,,SessionMixin,,from,,itsdangerous,,import,,URLSafeTimedSerializer,,,,BadSignature,,class,,ItsdangerousSession,(,CallbackDict,,,,SessionMixin,):,,def,,__init__,(,self,,,,initial,=,None,):,,def,,on_update,(,self,):,,self,.,modified,,=,,True,,CallbackDict,.,__init__,(,self,,,,initial,,,,on_update,),,self,.,modified,,=,,False,,class,,ItsdangerousSessionInterface,(,SessionInterface,):,,salt,,=,,'cookie-session',,session_class,,=,,ItsdangerousSession,,def,,get_serializer,(,self,,,,app,):,,if,,not,,app,.,secret_key,:,,return,,None,,return,,URLSafeTimedSerializer,(,app,.,secret_key,,,,salt,=,self,.,salt,),,def,,open_session,(,self,,,,app,,,,request,):,,s,,=,,self,.,get_serializer,(,app,),,if,,s,,is,,None,:,,return,,None,,val,,=,,request,.,cookies,.,get,(,app,.,session_cookie_name,),,if,,not,,val,:,,return,,self,.,session_class,(),,max_age,,=,,app,.,permanent_session_lifetime,.,total_seconds,(),,try,:,,data,,=,,s,.,loads,(,val,,,,max_age,=,max_age,),,return,,self,.,session_class,(,data,),,except,,BadSignature,:,,return,,self,.,session_class,(),,def,,save_session,(,self,,,,app,,,,session,,,,response,):,,domain,,=,,self,.,get_cookie_domain,(,app,),,if,,not,,session,:,,if,,session,.,modified,:,,response,.,delete_cookie,(,app,.,session_cookie_name,,,,domain,=,domain,),,return,,expires,,=,,self,.,get_expiration_time,(,app,,,,session,),,val,,=,,self,.,get_serializer,(,app,),.,dumps,(,dict,(,session,)),,response,.,set_cookie,(,app,.,session_cookie_name,,,,val,,,,expires,=,expires,,,,httponly,=,True,,,,domain,=,domain,),,,To activate this session interface all you have to do is to change the,session_interface,attribute on your application:,,app,.,session_interface,,=,,ItsdangerousSessionInterface,(),,,This snippet by Armin Ronacher can be used freely for\n    anything you like. Consider it public domain.,,,Comments,,,,UTF-8 encoding error?\n          by Kerem Uluta\u015f\n          on 2012-08-16 @ 12:47,Hi,,,I wanted to use this snippet but I am getting \"UnicodeDecodeError: 'utf8' codec can't decode byte 0xad in position 1: invalid start byte\" error. The object representation is \"<ItsdangerousSession {'_id': '<\\xad;\\xfe\\x8e\\xb5\\x03\\x12\\xf5\\x85+m\\xcd\\x92\\x89J', 'remoteip': '127.0.0.1'}>\" - what might be causing this and how can I fix it?,,,,Figured it out..\n          by Kerem Uluta\u015f\n          on 2012-08-18 @ 03:11,Hi again,,,The exception was caused by Flask-Login extension, a non-JSON serializable _id value was the origin. If anyone gets stuck with the same, see issue 31 (,https://github.com/maxcountryman/flask-login/issues/31,) for an update on the situation.,,,,Not supporting secure cookies\n          by Giovanni Bajo\n          on 2013-02-07 @ 03:07,The snippet doesn't honor the SESSION_COOKIE_SECURE config var.,,,,question ?\n          by Siros\n          on 2013-04-24 @ 18:00,in the development version of flask (0.10),is this the default behaviour now ?,,,,This is now the default in Flask\n          by Randall Ma\n          on 2013-11-21 @ 02:16,@Siros:,,Yes, it looks as if this has been the default behavior as of Aug. 2012.,https://github.com/mitsuhiko/flask/commits/master/flask/sessions.py,,,,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/109/", "content": "Generic server-based sessions (file-system, etc) | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Generic server-based sessions (file-system, etc),,Posted by Marcus Breese\n    on 2013-04-12 @ 00:18\n    and filed in,Sessions,,Implements a generic-managed sessions for Flask,,Sessions are stored by one (or more) SessionManagers. This separates out the\nlogic for storing sessions by different backends. Sessions are keyed by a\nuuid and include a random value that, combined with the session-id, is used\nto calculated an HMAC value to validate the cookie coming back from the user.\nThis is largely overkill, and could probably be accomplished by using larger\nsession-ids, or just a simple HMAC of the session-id.,,Two managers are implemented: FileBackedSessionManager and\nCachingSessionManager. FileBackedSessionManager will store sessions as picked\nfiles in a directory. CachingSessionManager stores sessions in an OrderedDict\ncache and requires another SessionManager as a parent store.,,However, by splitting out the Session storage from the Flask session interface, it is much easier to add new session storage backends.,,Based on the RedisSession from:,http://flask.pocoo.org/snippets/75/,,Because of the OrderedDict import, the Caching Manager requires Python 2.7.,,This may be buggy, no warranties, etc... the caching manager hasn't been extensively tested. Hopefully someone finds this useful.,,import,,os,,import,,cPickle,,as,,pickle,,import,,base64,,import,,hmac,,import,,hashlib,,import,,random,,import,,string,,import,,datetime,,from,,uuid,,import,,uuid4,,from,,collections,,import,,OrderedDict,,from,,werkzeug.datastructures,,import,,CallbackDict,,from,,flask.sessions,,import,,SessionInterface,,,,SessionMixin,,def,,_generate_sid,():,,return,,str,(,uuid4,()),,def,,_calc_hmac,(,body,,,,secret,):,,return,,base64,.,b64encode,(,hmac,.,new,(,secret,,,,body,,,,hashlib,.,sha1,),.,digest,()),,class,,ManagedSession,(,CallbackDict,,,,SessionMixin,):,,def,,__init__,(,self,,,,initial,=,None,,,,sid,=,None,,,,new,=,False,,,,randval,=,None,,,,hmac_digest,=,None,):,,def,,on_update,(,self,):,,self,.,modified,,=,,True,,CallbackDict,.,__init__,(,self,,,,initial,,,,on_update,),,self,.,sid,,=,,sid,,self,.,new,,=,,new,,self,.,modified,,=,,False,,self,.,randval,,=,,randval,,self,.,hmac_digest,,=,,hmac_digest,,def,,sign,(,self,,,,secret,):,,if,,not,,self,.,hmac_digest,:,,self,.,randval,,=,,'',.,join,(,random,.,sample,(,string,.,lowercase,+,string,.,digits,,,,20,)),,self,.,hmac_digest,,=,,_calc_hmac,(,',%s,:,%s,',,%,,(,self,.,sid,,,,self,.,randval,),,,secret,),,class,,SessionManager,(,object,):,,def,,new_session,(,self,):,,'Create a new session',,raise,,NotImplementedError,,def,,exists,(,self,,,,sid,):,,'Does the given session-id exist?',,raise,,NotImplementedError,,def,,remove,(,self,,,,sid,):,,'Remove the session',,raise,,NotImplementedError,,def,,get,(,self,,,,sid,,,,digest,):,,'Retrieve a managed session by session-id, checking the HMAC digest',,raise,,NotImplementedError,,def,,put,(,self,,,,session,):,,'Store a managed session',,raise,,NotImplementedError,,class,,CachingSessionManager,(,SessionManager,):,,def,,__init__,(,self,,,,parent,,,,num_to_store,):,,self,.,parent,,=,,parent,,self,.,num_to_store,,=,,num_to_store,,self,.,_cache,,=,,OrderedDict,(),,def,,_normalize,(,self,):,,print,,\"Session cache size:,%s,\",,%,,len,(,self,.,_cache,),,if,,len,(,self,.,_cache,),,>,,self,.,num_to_store,:,,while,,len,(,self,.,_cache,),,>,,(,self,.,num_to_store,,*,,0.8,):,,# flush 20% of the cache,,self,.,_cache,.,popitem,(,False,),,def,,new_session,(,self,):,,session,,=,,self,.,parent,.,new_session,(),,self,.,_cache,[,session,.,sid,],,=,,session,,self,.,_normalize,(),,return,,session,,def,,remove,(,self,,,,sid,):,,self,.,parent,.,remove,(,sid,),,if,,sid,,in,,self,.,_cache,:,,del,,self,.,_cache,[,sid,],,def,,exists,(,self,,,,sid,):,,if,,sid,,in,,self,.,_cache,:,,return,,True,,return,,self,.,parent,.,exists,(,sid,),,def,,get,(,self,,,,sid,,,,digest,):,,session,,=,,None,,if,,sid,,in,,self,.,_cache,:,,session,,=,,self,.,_cache,[,sid,],,if,,session,.,hmac_digest,,!=,,digest,:,,session,,=,,None,,# reset order in OrderedDict,,del,,self,.,_cache,[,sid,],,if,,not,,session,:,,session,,=,,self,.,parent,.,get,(,sid,,,,digest,),,self,.,_cache,[,sid,],,=,,session,,self,.,_normalize,(),,return,,session,,def,,put,(,self,,,,session,):,,self,.,parent,.,put,(,session,),,if,,session,.,sid,,in,,self,.,_cache,:,,del,,self,.,_cache,[,session,.,sid,],,self,.,_cache,[,session,.,sid,],,=,,session,,self,.,_normalize,(),,class,,FileBackedSessionManager,(,SessionManager,):,,def,,__init__,(,self,,,,path,,,,secret,):,,self,.,path,,=,,path,,self,.,secret,,=,,secret,,if,,not,,os,.,path,.,exists,(,self,.,path,):,,os,.,makedirs,(,self,.,path,),,def,,exists,(,self,,,,sid,):,,fname,,=,,os,.,path,.,join,(,self,.,path,,,,sid,),,return,,os,.,path,.,exists,(,fname,),,def,,remove,(,self,,,,sid,):,,print,,'Removing session:,%s,',,%,,sid,,fname,,=,,os,.,path,.,join,(,self,.,path,,,,sid,),,if,,os,.,path,.,exists,(,fname,):,,os,.,unlink,(,fname,),,def,,new_session,(,self,):,,sid,,=,,_generate_sid,(),,fname,,=,,os,.,path,.,join,(,self,.,path,,,,sid,),,while,,os,.,path,.,exists,(,fname,):,,sid,,=,,_generate_sid,(),,fname,,=,,os,.,path,.,join,(,self,.,path,,,,sid,),,# touch the file,,with,,open,(,fname,,,,'w',):,,pass,,print,,\"Created new session:,%s,\",,%,,sid,,return,,ManagedSession,(,sid,=,sid,),,def,,get,(,self,,,,sid,,,,digest,):,,'Retrieve a managed session by session-id, checking the HMAC digest',,print,,\"Looking for session:,%s,,,%s,\",,%,,(,sid,,,,digest,),,fname,,=,,os,.,path,.,join,(,self,.,path,,,,sid,),,data,,=,,None,,hmac_digest,,=,,None,,randval,,=,,None,,if,,os,.,path,.,exists,(,fname,):,,try,:,,with,,open,(,fname,),,as,,f,:,,randval,,,,hmac_digest,,,,data,,=,,pickle,.,load,(,f,),,except,:,,print,,\"Error loading session file\",,if,,not,,data,:,,print,,\"Missing data?\",,return,,self,.,new_session,(),,# This assumes the file is correct, if you really want to,,# make sure the session is good from the server side, you,,# can re-calculate the hmac,,if,,hmac_digest,,!=,,digest,:,,print,,\"Invalid HMAC for session\",,return,,self,.,new_session,(),,return,,ManagedSession,(,data,,,,sid,=,sid,,,,randval,=,randval,,,,hmac_digest,=,hmac_digest,),,def,,put,(,self,,,,session,):,,'Store a managed session',,print,,\"Storing session:,%s,\",,%,,session,.,sid,,if,,not,,session,.,hmac_digest,:,,session,.,sign,(,self,.,secret,),,fname,,=,,os,.,path,.,join,(,self,.,path,,,,session,.,sid,),,with,,open,(,fname,,,,'w',),,as,,f,:,,pickle,.,dump,((,session,.,randval,,,,session,.,hmac_digest,,,,dict,(,session,)),,,f,),,class,,ManagedSessionInterface,(,SessionInterface,):,,def,,__init__,(,self,,,,manager,,,,skip_paths,,,,cookie_timedelta,):,,self,.,manager,,=,,manager,,self,.,skip_paths,,=,,skip_paths,,self,.,cookie_timedelta,,=,,cookie_timedelta,,def,,get_expiration_time,(,self,,,,app,,,,session,):,,if,,session,.,permanent,:,,return,,app,.,permanent_session_lifetime,,return,,datetime,.,datetime,.,now,(),,+,,self,.,cookie_timedelta,,def,,open_session,(,self,,,,app,,,,request,):,,cookie_val,,=,,request,.,cookies,.,get,(,app,.,session_cookie_name,),,if,,not,,cookie_val,,or,,not,,'!',,in,,cookie_val,:,,# Don't bother creating a cookie for static resources,,for,,sp,,in,,self,.,skip_paths,:,,if,,request,.,path,.,startswith,(,sp,):,,return,,None,,print,,'Missing cookie',,return,,self,.,manager,.,new_session,(),,sid,,,,digest,,=,,cookie_val,.,split,(,'!',,,,1,),,if,,self,.,manager,.,exists,(,sid,):,,return,,self,.,manager,.,get,(,sid,,,,digest,),,return,,self,.,manager,.,new_session,(),,def,,save_session,(,self,,,,app,,,,session,,,,response,):,,domain,,=,,self,.,get_cookie_domain,(,app,),,if,,not,,session,:,,self,.,manager,.,remove,(,session,.,sid,),,if,,session,.,modified,:,,response,.,delete_cookie,(,app,.,session_cookie_name,,,,domain,=,domain,),,return,,if,,not,,session,.,modified,:,,# no need to save an unaltered session,,# TODO: put logic here to test if the cookie is older than N days, if so, update the expiration date,,return,,self,.,manager,.,put,(,session,),,session,.,modified,,=,,False,,cookie_exp,,=,,self,.,get_expiration_time,(,app,,,,session,),,response,.,set_cookie,(,app,.,session_cookie_name,,,,',%s,!,%s,',,%,,(,session,.,sid,,,,session,.,hmac_digest,),,,expires,=,cookie_exp,,,,httponly,=,True,,,,domain,=,domain,),,,In order to use the managers, you need to set a session_interface someplace. Here is an example that setups a CachingSessionManager backed by a FileBackedSessionManager. The cache will store 1000 sessions in memory before it starts removing them.,,app,.,session_interface,,=,,ManagedSessionInterface,(,CachingSessionManager,(,FileBackedSessionManager,(,app,.,config,[,'SESSION_PATH',],,,app,.,config,[,'SECRET_KEY',]),,,1000,),,,skip_paths,,,,datetime,.,timedelta,(,days,=,1,)),,,This snippet by Marcus Breese can be used freely for\n    anything you like. Consider it public domain.,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/121/", "content": "Beaker session in Flask | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Beaker session in Flask,,Posted by Piotr Sensu\n    on 2014-01-22 @ 08:03\n    and filed in,Sessions,,This is an extension to snippet,Using Beaker session with Flask,that gives more seamless beaker session integration by using SessionInterface.,,from,,flask,,import,,Flask,,,,session,,from,,flask.sessions,,import,,SessionInterface,,from,,beaker.middleware,,import,,SessionMiddleware,,session_opts,,=,,{,,'session.type',:,,'ext:memcached',,,,'session.url',:,,'127.0.0.1:11211',,,,'session.data_dir',:,,'./cache',,,,},,class,,BeakerSessionInterface,(,SessionInterface,):,,def,,open_session,(,self,,,,app,,,,request,):,,session,,=,,request,.,environ,[,'beaker.session',],,return,,session,,def,,save_session,(,self,,,,app,,,,session,,,,response,):,,session,.,save,(),,app,,=,,Flask,(,__name__,),,@app.route,(,'/',),,def,,index,():,,if,,not,,session,.,has_key,(,'value',):,,session,[,'value',],,=,,'Save in session',,return,,\"Session value set.\",,else,:,,return,,session,[,'value',],,if,,__name__,,==,,'__main__',:,,app,.,wsgi_app,,=,,SessionMiddleware,(,app,.,wsgi_app,,,,session_opts,),,app,.,session_interface,,=,,BeakerSessionInterface,(),,app,.,run,(,debug,=,True,),,,This snippet by Piotr Sensu can be used freely for\n    anything you like. Consider it public domain.,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/14/", "content": "link_to and form_tag macros | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,link_to and form_tag macros,,Posted by LeafStorm\n    on 2010-05-07 @ 22:36\n    and filed in,Template Tricks,,The HTML/Jinja for a link to a page on your site looks quite awkward.,,<,a,,href,=,\",{{,,url_for,(,'some.view',,,,foo,=,'bar',),,}},\",>,Link text!,</,a,>,,,With this macro:,,{%,,macro,,link_to,(,endpoint,,,,text,),-,%},,<,a,,href,=,\",{{,,url_for,(,endpoint,,,,**,kwargs,),,}},\",>,{{,,text,|,safe,,}},</,a,>,,{%,-,endmacro,,%},,,The above link will become:,,{{,,link_to,(,'some.view',,,,\"Link text!\",,,,foo,=,bar,),,}},,,It's shorter and looks cleaner, especially if the content of the link is also a variable.,,A similar technique, using the,call,tag, can be used for forms:,,{%,,macro,,form_tag,(,endpoint,,,,method,=,'post',),-,%},,<,form,,action,=,\",{{,,url_for,(,endpoint,,,,**,kwargs,),,}},\",,method,=,\",{{,,method,,}},\",>,,{{,,caller,,(),,}},,</,form,>,,{%,-,endmacro,,%},,,Then, you can create a form with:,,{%,,call,,form_tag,(,'create_entry',),,%},,<,p,><,input,,type,=,text,,name,=,whatever,></,p,>,,<,p,><,input,,type,=,submit,,value,=,Submit,></,p,>,,{%,,endcall,,%},,,You can put these in a file called,_helpers.html,, or something similar.,,This snippet by LeafStorm can be used freely for\n    anything you like. Consider it public domain.,,,Comments,,,,Parameter ordering\n          by LeafStorm\n          on 2010-07-02 @ 16:57,In retrospect, it makes more sense to have the \"text\" parameter come before \"endpoint\" in the \"link_to\" macro.,,,,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/68/", "content": "Generating PDF from Flask template (using xhtml2pdf) | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Generating PDF from Flask template (using xhtml2pdf),,Posted by Marc de Verdelhan\n    on 2011-09-07 @ 06:41\n    and filed in,Template Tricks,,Please note:,,There are,many ways,for generating PDF in python. This snippet aims at presenting one of the simplest: with xhtml2pdf.,,xhtml2pdf,is a fork from an earlier project (called \"pisa\"). The project packaging is a bit confusing and it's not very well documented, but it allows you to generate nice PDFs, simply, without having to learn all the,ReportLab,doc. The small documentation (inherited from pisa) can be found,here,.,,How to generate a PDF file from a Flask template using xhtml2pdf,,First, create a simple Jinja template at,your/template.html,. For instance it may contain:,,<,html,>,,<,head,>,,</,head,>,,<,body,>,,{%,,block,,body,,%},,<,h2,>,Some page title.,</,h2,>,,<,table,,width,=,\"100%\",,cellpadding,=,\"4\",,cellspacing,=,\"0\",>,,<,tbody,>,,<,tr,>,,<,td,,width,=,\"100%\",>,Some text.,</,td,>,,</,tr,>,,</,tbody,>,,<,tbody,>,,<,tr,,style,=,\"border: 1px solid #000000;\",>,,<,td,,width,=,\"100%\",>,,<,h3,,style,=,\"text-align: center;\",>,Some subtitle,</,h3,>,,<,div,>,{{,,g.user.get,(,'user_attribute',),,}},</,div,>,,</,td,>,,</,tr,>,,</,tbody,>,,</,table,>,,<,hr,,style,=,\"margin: 3em 0;\",/>,,<,img,,src,=,\",{{,,url_for,(,'static',,,,filename,=,'img.png',,,,_external,=,True,),,}},\",,/>,,{%,,endblock,,%},,</,body,>,,</,html,>,,,xhtml2pdf also works with a separate CSS file. All the CSS and (X)HTML tags supported are listed in the,documentation,.,,Then create a,pdfs.py,file containing:,,from,,xhtml2pdf,,import,,pisa,,from,,cStringIO,,import,,StringIO,,def,,create_pdf,(,pdf_data,):,,pdf,,=,,StringIO,(),,pisa,.,CreatePDF,(,StringIO,(,pdf_data,.,encode,(,'utf-8',)),,,pdf,),,return,,pdf,,,Note that you should use Celery on the,create_pdf,function (adding the,@task,decorator), because the generation process may be a long operation.,,Now you can call,create_pdf,to create the PDF file from your Flask template (for instance, for an email attachement):,,from,,flask,,import,,Flask,,,,render_template,,,,redirect,,,,url_for,,from,,flaskext.mail,,import,,Mail,,,,Message,,from,,pdfs,,import,,create_pdf,,# ...,,app,,=,,Flask,(,__name__,),,mail_ext,,=,,Mail,(,app,),,# ...,,@app.route,(,'/your/url',),,def,,your_view,():,,subject,,=,,\"Mail with PDF\",,receiver,,=,,\"receiver@mail.com\",,mail_to_be_sent,,=,,Message,(,subject,=,subject,,,,recipients,=,[,receiver,]),,mail_to_be_sent,.,body,,=,,\"This email contains PDF.\",,pdf,,=,,create_pdf,(,render_template,(,'your/template.html',)),,mail_to_be_sent,.,attach,(,\"file.pdf\",,,,\"application/pdf\",,,,pdf,.,getvalue,()),,mail_ext,.,send,(,mail_to_be_sent,),,return,,redirect,(,url_for,(,'other_view',)),,,Note that email sending should also be \"celeryed\" (see,this thread,for more information). ;),,This snippet by Marc de Verdelhan can be used freely for\n    anything you like. Consider it public domain.,,,Comments,,,,Don't use cStringIO\n          by Sven-Hendrik Haase\n          on 2013-06-14 @ 00:07,What you are doing with cStringIO won't give you the desired results when working with UTF-8 since it doesn't support non-ANSI stuff. Instead of cStringIO, why not use StringIO? Then you also don't have to decode your input string. The resulting code looks cleaner:,,from,,xhtml2pdf,,import,,pisa,,from,,StringIO,,import,,StringIO,,def,,create_pdf,(,pdf_data,):,,pdf,,=,,StringIO,(),,pisa,.,CreatePDF,(,StringIO,(,pdf_data,),,,pdf,),,return,,pdf,,,,,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/50/", "content": "URLs with Payload | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,URLs with Payload,,Posted by Armin Ronacher\n    on 2011-06-24 @ 16:23\n    and filed in,URLs,,Sometimes it's useful if uses get generated links that trigger a specific behavior.  For instance you want to send users to a URL that activates their account.  Because that URL must only be used by the receiver and only once, how could you do that?,,A simple way is to use cryptographic signing with the help of the,It's Dangerous,module.  It allows you to put arbitrary JSON into a URL and signing it.,,Example:,,from,,flask,,import,,abort,,,,redirect,,,,flash,,from,,itsdangerous,,import,,URLSafeSerializer,,,,BadSignature,,def,,get_serializer,(,secret_key,=,None,):,,if,,secret_key,,is,,None,:,,secret_key,,=,,app,.,secret_key,,return,,URLSafeSerializer,(,secret_key,),,@app.route,(,'/users/activate/<payload>',),,def,,activate_user,(,payload,):,,s,,=,,get_serializer,(),,try,:,,user_id,,=,,s,.,loads,(,payload,),,except,,BadSignature,:,,abort,(,404,),,user,,=,,User,.,query,.,get_or_404,(,user_id,),,user,.,activate,(),,flash,(,'User activated',),,return,,redirect,(,url_for,(,'index',)),,,So how do you generate that URL?  Very similar:,,def,,get_activation_link,(,user,):,,s,,=,,get_serializer,(),,payload,,=,,s,.,dumps,(,user,.,id,),,return,,url_for,(,'activate_user',,,,payload,=,payload,,,,_external,=,True,),,,The URL generated will look something like this:,http://example.com/users/activate/NDI.qufkoGPGURs0UuFTludpcHLKa20,,The link above can be used multiple times however. So how do you limit it to being only useful once?  Well for most actions that is not necessary as it can only be triggered once anyways (for instance you can only unsubscribe once, activate once etc.).  However under certain circumstances that is not okay (for example to redeem a voucher).,,In that situation you cannot avoid having some information about redeemed values on the server.  With the signing however you can easily make sure a voucher is only valid for the user it was provided for without having to keep that information on the server:,,@app.route,(,'/voucher/redeem/<payload>',),,def,,redeem_voucher,(,payload,):,,s,,=,,get_serializer,(),,try,:,,user_id,,,,voucher_id,,=,,s,.,loads,(,payload,),,except,,BadSignature,:,,abort,(,404,),,user,,=,,User,.,query,.,get_or_404,(,user_id,),,voucher,,=,,Voucher,.,query,.,get_or_404,(,voucher_id,),,voucher,.,redeem_for,(,user,),,flash,(,'Voucher redeemed',),,return,,redirect,(,url_for,(,'index',)),,def,,get_redeem_link,(,user,,,,voucher,):,,s,,=,,get_serializer,(),,payload,,=,,s,.,dumps,([,user,.,id,,,,voucher,.,id,]),,return,,url_for,(,'redeem_voucher',,,,payload,=,payload,,,,_external,=,True,),,,This snippet by Armin Ronacher can be used freely for\n    anything you like. Consider it public domain.,,,Comments,,,,Comment\n          by Tom A\n          on 2011-06-25 @ 10:11,Many thanks for this snippet. Very useful.  Please keep them coming, they really add to the value of Flask for people learning like me.,,,,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/101/", "content": "Enable jinja2 line statements | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Enable jinja2 line statements,,Posted by Jason Orendorff\n    on 2012-09-29 @ 05:19\n    and filed in,Template Tricks,,Add this line of code right after creating your app:,,app,.,jinja_env,.,line_statement_prefix,,=,,'%',,,Then you can use a single,%,rather than,{% %},in templates:,,<,ul,>,% for item in items,<,li,>,{{,,item,,}},</,li,>,% endfor,</,ul,>,,,This snippet by Jason Orendorff can be used freely for\n    anything you like. Consider it public domain.,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/43/", "content": "Supporting \u201c;\u201d as Delimiter in Legacy Query Strings | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Supporting \u201c;\u201d as Delimiter in Legacy Query Strings,,Posted by Armin Ronacher\n    on 2011-02-17 @ 20:01\n    and filed in,URLs,,If you have an application that accepted \u201c;\u201d as alternative to \u201c&\u201d in query strings in the past and you want to continue to support these URLs you can hook in this little WSGI middleware to rewrite them on the fly before passing them over to Flask:,,class,,QueryStringRedirectMiddleware,(,object,):,,def,,__init__,(,self,,,,application,):,,self,.,application,,=,,application,,def,,__call__,(,self,,,,environ,,,,start_response,):,,qs,,=,,environ,.,get,(,'QUERY_STRING',,,,'',),,environ,[,'QUERY_STRING',],,=,,qs,.,replace,(,';',,,,'&',),,return,,self,.,application,(,environ,,,,start_response,),,,To activate it, just wrap the,wsgi_app,attribute:,,app,.,wsgi_app,,=,,QueryStringRedirectMiddleware,(,app,.,wsgi_app,),,,This snippet by Armin Ronacher can be used freely for\n    anything you like. Consider it public domain.,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/6/", "content": "Permalink function decorator | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Permalink function decorator,,Posted by justquick\n    on 2010-05-04 @ 05:03\n    and filed in,URLs,,This is a function decorator that wraps a function that returns arguments to flask.url_for. This is handy when modeling objects in an ORM and you need to reference their absolute URL. Here is an example of that in pseudocode:,,class,,User,(,Model,):,,username,,=,,StringField,(,...,),,email,,=,,StringField,(,...,),,@permalink,,def,,absolute_url,(,self,):,,return,,'profiles',,,,{,'username',:,self,.,username,},,,Assuming that you have a 'profiles' endpoint setup, when User.absolute_url is called it will return the URL to the 'profiles' endpoint with the username values (producing something like /profiles/username). If there is any error in building the URL, the function will return None instead.,,Here is the code:,,from,,flask,,import,,url_for,,from,,werkzeug.routing,,import,,BuildError,,def,,permalink,(,function,):,,def,,inner,(,*,args,,,,**,kwargs,):,,endpoint,,,,values,,=,,function,(,*,args,,,,**,kwargs,),,try,:,,return,,url_for,(,endpoint,,,,**,values,),,except,,BuildError,:,,return,,return,,inner,,,This snippet by justquick can be used freely for\n    anything you like. Consider it public domain.,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/40/", "content": "static url cache buster | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,static url cache buster,,Posted by ericbuckley\n    on 2010-09-24 @ 23:02\n    and filed in,URLs,,If you decide to add an expires header (and if you haven't already you really should) to your static resources, you now need to worry about cache busting these resources after your next deploy.  A simple way of dealing with this is to add a last modified query parameter to the end of your resource. For example:,,<,link,,rel,=,\"stylesheet\",,href,=,\"/static/css/reset.css?q=1280549780\",,type,=,\"text/css\",,media,=,\"screen\",,charset,=,\"utf-8\",,/>,,,By adding the following snippet you can override the default,url_for(endpoint, **values),variable in your template context. Now any time you use,url_for,in your templates to render a static resource it will be appended with a last modified time stamp parameter.,,@app.context_processor,,def,,override_url_for,():,,return,,dict,(,url_for,=,dated_url_for,),,def,,dated_url_for,(,endpoint,,,,**,values,):,,if,,endpoint,,==,,'static',:,,filename,,=,,values,.,get,(,'filename',,,,None,),,if,,filename,:,,file_path,,=,,os,.,path,.,join,(,app,.,root_path,,,,endpoint,,,,filename,),,values,[,'q',],,=,,int,(,os,.,stat,(,file_path,),.,st_mtime,),,return,,url_for,(,endpoint,,,,**,values,),,,This snippet by ericbuckley can be used freely for\n    anything you like. Consider it public domain.,,,Comments,,,,Comment\n          by Victor Ostrovski\n          on 2014-12-11 @ 13:44,Using @app.url_defaults() decorator looks like more elegant way.,,https://gist.github.com/Ostrovski/f16779933ceee3a9d181,,,,Minor fix\n          by Pavel Larkin\n          on 2011-05-08 @ 21:33,It is necessary to use app.static_path instead of endpoint inside os.path.join:\n...\nfile_path = os.path.join(app.root_path,                                    endpoint, filename)\n...\nshould be\n...\nfile_path = os.path.join(app.root_path, app.static_path, filename)\n...,,,,armin suggests...\n          by Joshua Bronson\n          on 2011-11-27 @ 03:54,http://paste.pocoo.org/show/513299/,instead,,,,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/92/", "content": "python tutor | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,python tutor,,Posted by M.R.K. REDDY\n    on 2012-05-09 @ 06:46\n    and filed in,URLs,,http://api.jed-i.in/pythontutor/run,,This snippet by M.R.K. REDDY can be used freely for\n    anything you like. Consider it public domain.,,,Comments,,,,Spam?\n          by Jess Austin\n          on 2012-07-07 @ 02:28,Is this spam? Why does it 404?,,,,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/117/", "content": "Helper to list routes (like Rail's rake routes) | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Helper to list routes (like Rail's rake routes),,Posted by Jonathan Tushman\n    on 2013-10-03 @ 01:00\n    and filed in,URLs,,I make a helper method on my `manage.py`:,,@manager.command,,def,,list_routes,():,,import,,urllib,,output,,=,,[],,for,,rule,,in,,app,.,url_map,.,iter_rules,():,,options,,=,,{},,for,,arg,,in,,rule,.,arguments,:,,options,[,arg,],,=,,\"[{0}]\",.,format,(,arg,),,methods,,=,,',',.,join,(,rule,.,methods,),,url,,=,,url_for,(,rule,.,endpoint,,,,**,options,),,line,,=,,urllib,.,unquote,(,\"{:50s} {:20s} {}\",.,format,(,rule,.,endpoint,,,,methods,,,,url,)),,output,.,append,(,line,),,for,,line,,in,,sorted,(,output,):,,print,,line,,,The output looks like:,,CampaignView:edit              HEAD,OPTIONS,GET     /account/[account_id]/campaigns/[campaign_id]/edit\nCampaignView:get               HEAD,OPTIONS,GET     /account/[account_id]/campaign/[campaign_id]\nCampaignView:new               HEAD,OPTIONS,GET     /account/[account_id]/new,,Then to run it:,,`python manage.py list_routes`,,For more on manage.py checkout:,http://flask-script.readthedocs.org/en/latest/,,This snippet by Jonathan Tushman can be used freely for\n    anything you like. Consider it public domain.,,,Comments,,,,Update for Python 3\n          by Roger Pence\n          on 2016-02-13 @ 17:35,I needed to add this line:\n  from flask import url_for,,and change\n    urllib.unquote\nto this for Python 3\n    urllib.parse.unquote,,A very nice snippet, Jonathan!,,,,Update for url conains arg in url\n          by kerry king\n          on 2017-02-06 @ 05:19,Delete row:\nurl = url_for(rule.endpoint,,options)\nchange row:\nline = urllib.unquote(\"{:50s} {:20s} {}\".format(rule.endpoint, methods, url))\nto row:\nline = urllib.unquote(\"{:50s} {:20s} {}\".format(rule.endpoint, methods, rule)),,,,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/76/", "content": "Handling URLs containing slash '/' character | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Handling URLs containing slash '/' character,,Posted by Priit Laes\n    on 2011-10-14 @ 15:46\n    and filed in,URLs,,Creating RESTful web services with Flask is a breeze, until you run into an issue where you want to put an identifier containing slash character ',/,' into the URI.,,Let's say that you have an app that generates a list of urls for a list of products:,,{%,,for,,p,,in,,products,,%},,<,a,,href,=,\",{{,url_for,(,'product',,,,code,=,p.code,),}},\",>,{{,,p.title,,}},</,a,><,br,>,,{%,,endfor,,%},,,View function then takes the code from the URL, looks up the product from database and renders template:,,@app.route,(,'/product/<code>',),,def,,product,(,code,):,,product,,=,,Product,.,query,.,filter_by,(,code,=,code,),.,first,(),,return,,render_template,(,'product',,,,product,=,product,),,,It all works fine until one of the product codes contains slash and the URL,/product/123/foo,ends up giving an error 404.,,But all is not just lost. If your first idea is to write a clever escape/unescape function that works automatically with both template and view code, then STOP!,,This can be fixed by just using a,path:,as converter keyword to the URL argument:,,@app.route,(,'/product/<path:code>',),,,Happy,Slashing,! :),,This snippet by Priit Laes can be used freely for\n    anything you like. Consider it public domain.,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/5/", "content": "Generating Slugs | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Generating Slugs,,Posted by Armin Ronacher\n    on 2010-05-03 @ 17:06\n    and filed in,URLs,,When you want to have nice readable URLs it's usually a good idea to use the title or name of an object in the URL.,,For example if you have a post entitled \"Hello World!\" the slug could be \"hello-world\".  The term slug probably originally came from publishing but ever since Django used it on the core documentation many web developers know what it means.,,Because ASCII is the common subset nearly everyone around the world can input with his keyboard it makes a lot of sense to limit the URL to that.  The following function tries its best to generate an ASCII only and lowercase slug from a word:,,import,,re,,_punct_re,,=,,re,.,compile,(,r,'[\\t !\"#$%&,\\',()*\\-/<=>?@\\[,\\\\,\\]^_`{|},.]+',),,def,,slugify,(,text,,,,delim,=,u,'-',):,,\"\"\"Generates an ASCII-only slug.\"\"\",,result,,=,,[],,for,,word,,in,,_punct_re,.,split,(,text,.,lower,()):,,word,,=,,word,.,encode,(,'translit/long',),,if,,word,:,,result,.,append,(,word,),,return,,unicode,(,delim,.,join,(,result,)),,,As you might have spotted, the code above is using Jason Kirkland's translit codec: get,translitcodec from PyPI,.,,Wha translitcodec does is converting umlauts like \"\u00fc\" to \"ue\" instead of their improper \"u\" equivalent.  If you don't need that you can also take advantage of the builtin unicodedata module:,,import,,re,,from,,unicodedata,,import,,normalize,,_punct_re,,=,,re,.,compile,(,r,'[\\t !\"#$%&,\\',()*\\-/<=>?@\\[,\\\\,\\]^_`{|},.]+',),,def,,slugify,(,text,,,,delim,=,u,'-',):,,\"\"\"Generates an slightly worse ASCII-only slug.\"\"\",,result,,=,,[],,for,,word,,in,,_punct_re,.,split,(,text,.,lower,()):,,word,,=,,normalize,(,'NFKD',,,,word,),.,encode,(,'ascii',,,,'ignore',),,if,,word,:,,result,.,append,(,word,),,return,,unicode,(,delim,.,join,(,result,)),,,Please be advised that neither of the above functions will work correctly on asian signs.  In both cases the return value of that function will most likely be an empty string.  Prepare to have a backup slug in that situation (like the post id or something).  You also might want to fall back to a non-ASCII slug because modern browsers will display non-ASCII chars in the URL as long as the URL is UTF-8 encoded.,,If you expect a lot of Asian characters or want to support them as well you can instead use the,Unidecode,package that handles them as well:,,import,,re,,from,,unidecode,,import,,unidecode,,_punct_re,,=,,re,.,compile,(,r,'[\\t !\"#$%&,\\',()*\\-/<=>?@\\[,\\\\,\\]^_`{|},.]+',),,def,,slugify,(,text,,,,delim,=,u,'-',):,,\"\"\"Generates an ASCII-only slug.\"\"\",,result,,=,,[],,for,,word,,in,,_punct_re,.,split,(,text,.,lower,()):,,result,.,extend,(,unidecode,(,word,),.,split,()),,return,,unicode,(,delim,.,join,(,result,)),,,This snippet by Armin Ronacher can be used freely for\n    anything you like. Consider it public domain.,,,Comments,,,,how to use slugify to store the slug in database\n          by A Ruzaqi\n          on 2010-11-04 @ 10:33,Nice Tut.,,could you pls show me some example of how to use it to slug a title and store the slugs in database.,,I am just a beginner in python .,,Thanks,,,,Simple slugfy in Python\n          by \u00c1lvaro Justen - Turicas\n          on 2011-12-03 @ 23:32,What do you think about it:,https://gist.github.com/1428479,?,,[]s,,,,Comment\n          by Christoph Schniedermeier\n          on 2013-01-16 @ 14:01,Would there be any problem with using:,,_punct_re = re.compile(r'[\\t !\"#$%&\\'()*\\-/<=>?@\\[,\\]^_`{|},.]+'),,,,Comment\n          by Christoph Schniedermeier\n          on 2013-01-16 @ 14:02,Would there be any problem with using:,,_punct_re = re.compile(r'\\W+'),,,,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "Lazily Loading Views", "url": "http://flask.pocoo.org/docs/0.12/patterns/lazyloading/", "content": ",,,,,Lazily Loading Views \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,Lazily Loading Views,\u00b6,,Flask is usually used with the decorators.  Decorators are simple and you\nhave the URL right next to the function that is called for that specific\nURL.  However there is a downside to this approach: it means all your code\nthat uses decorators has to be imported upfront or Flask will never\nactually find your function.,,This can be a problem if your application has to import quick.  It might\nhave to do that on systems like Google\u2019s App Engine or other systems.  So\nif you suddenly notice that your application outgrows this approach you\ncan fall back to a centralized URL mapping.,,The system that enables having a central URL map is the,add_url_rule(),function.  Instead of using decorators,\nyou have a file that sets up the application with all URLs.,,,Converting to Centralized URL Map,\u00b6,,Imagine the current application looks somewhat like this:,,from,,flask,,import,,Flask,,app,,=,,Flask,(,__name__,),,@app,.,route,(,'/',),,def,,index,():,,pass,,@app,.,route,(,'/user/<username>',),,def,,user,(,username,):,,pass,,,,Then, with the centralized approach you would have one file with the views\n(,views.py,) but without any decorator:,,def,,index,():,,pass,,def,,user,(,username,):,,pass,,,,And then a file that sets up an application which maps the functions to\nURLs:,,from,,flask,,import,,Flask,,from,,yourapplication,,import,,views,,app,,=,,Flask,(,__name__,),,app,.,add_url_rule,(,'/',,,,view_func,=,views,.,index,),,app,.,add_url_rule,(,'/user/<username>',,,,view_func,=,views,.,user,),,,,,,Loading Late,\u00b6,,So far we only split up the views and the routing, but the module is still\nloaded upfront.  The trick is to actually load the view function as needed.\nThis can be accomplished with a helper class that behaves just like a\nfunction but internally imports the real function on first use:,,from,,werkzeug,,import,,import_string,,,,cached_property,,class,,LazyView,(,object,):,,def,,__init__,(,self,,,,import_name,):,,self,.,__module__,,,,self,.,__name__,,=,,import_name,.,rsplit,(,'.',,,,1,),,self,.,import_name,,=,,import_name,,@cached_property,,def,,view,(,self,):,,return,,import_string,(,self,.,import_name,),,def,,__call__,(,self,,,,*,args,,,,**,kwargs,):,,return,,self,.,view,(,*,args,,,,**,kwargs,),,,,What\u2019s important here is is that,__module__,and,__name__,are properly\nset.  This is used by Flask internally to figure out how to name the\nURL rules in case you don\u2019t provide a name for the rule yourself.,,Then you can define your central place to combine the views like this:,,from,,flask,,import,,Flask,,from,,yourapplication.helpers,,import,,LazyView,,app,,=,,Flask,(,__name__,),,app,.,add_url_rule,(,'/',,,,view_func,=,LazyView,(,'yourapplication.views.index',)),,app,.,add_url_rule,(,'/user/<username>',,,,view_func,=,LazyView,(,'yourapplication.views.user',)),,,,You can further optimize this in terms of amount of keystrokes needed to\nwrite this by having a function that calls into,add_url_rule(),by prefixing a string with the project\nname and a dot, and by wrapping,view_func,in a,LazyView,as needed.,,def,,url,(,import_name,,,,url_rules,=,[],,,**,options,):,,view,,=,,LazyView,(,'yourapplication.',,+,,import_name,),,for,,url_rule,,in,,url_rules,:,,app,.,add_url_rule,(,url_rule,,,,view_func,=,view,,,,**,options,),,# add a single route to the index view,,url,(,'views.index',,,,[,'/',]),,# add two routes to a single function endpoint,,url_rules,,=,,[,'/user/',,,'/user/<username>',],,url,(,'views.user',,,,url_rules,),,,,One thing to keep in mind is that before and after request handlers have\nto be in a file that is imported upfront to work properly on the first\nrequest.  The same goes for any kind of remaining decorator.,,,,,,,,,,,,,Contents,,,Lazily Loading Views,,Converting to Centralized URL Map,,Loading Late,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,Custom Error Pages,,Next:,MongoKit in Flask,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/57/", "content": "Catch-All URL | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Catch-All URL,,Posted by Oli\n    on 2011-07-15 @ 23:56\n    and filed in,URLs,,A simple way to create a Catch-All function which serves every URL including / is to chain two route filters.\nOne for the root path '/' and one including a,path,placeholder for the rest.,,We can't just use one route filter including a,path,placeholder because each placeholder must at least catch one character.,,from,,flask,,import,,Flask,,app,,=,,Flask,(,__name__,),,@app.route,(,'/',,,,defaults,=,{,'path',:,,'',}),,@app.route,(,'/<path:path>',),,def,,catch_all,(,path,):,,return,,'You want path:,%s,',,%,,path,,if,,__name__,,==,,'__main__',:,,app,.,run,(),,,A little demonstration..,,% curl 127.0.0.1:5000          # Matches the first rule\nYou want path:  \n% curl 127.0.0.1:5000/foo/bar  # Matches the second rule\nYou want path: foo/bar,,Hope it helps!,,This snippet by Oli can be used freely for\n    anything you like. Consider it public domain.,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "None", "url": "http://flask.pocoo.org/snippets/108/", "content": "Generating a sitemap.xml | Flask (A Python Microframework),,,,,,h1 { background-image: url(/static/snippets.png); },,,Flask Snippets,,,overview,//,docs,//,community,//,extensions,//,donate,,,Snippets are unofficial and unmaintained.,,This is an archived view of user-submitted snippets. Despite being\n            hosted on the Flask site, they are not official. No Flask\n            maintainer has curated or checked the snippets for security,\n            correctness, or design.,,Generating a sitemap.xml,,Posted by BlazingQuasar \n    on 2013-02-21 @ 00:00\n    and filed in,URLs,,This uses flasks route map to generate a sitemap.xml of all static pages. There is probably a elegant way of dealing with routes with multiple variables but I just defined a set of urls for each model object.,,I closely followed,this guide,.,,# flask-sqlalchemy model for User,,class,,User,(,db,.,Model,,,,UserMixin,):,,__tablename__,,=,,'users',,id,,=,,Column,(,db,.,Integer,,,,primary_key,=,True,),,name,,=,,Column,(,db,.,String,(,32,),,,nullable,=,False,,,,unique,=,True,),,email,,=,,Column,(,db,.,String,,,,nullable,=,False,,,,unique,=,True,),,activation_key,,=,,Column,(,db,.,String,),,created_time,,=,,Column,(,db,.,DateTime,,,,default,=,get_current_time,),,modified_time,,=,,Column,(,db,.,TIMESTAMP,,,,onupdate,=,get_current_time,(),,,default,=,get_current_time,()),,# a route for generating sitemap.xml,,@frontend.route,(,'/sitemap.xml',,,,methods,=,[,'GET',]),,def,,sitemap,():,,\"\"\"Generate sitemap.xml. Makes a list of urls and date modified.\"\"\",,pages,=,[],,ten_days_ago,=,datetime,.,now,(),,-,,timedelta,(,days,=,10,),.,date,(),.,isoformat,(),,# static pages,,for,,rule,,in,,current_app,.,url_map,.,iter_rules,():,,if,,\"GET\",,in,,rule,.,methods,,and,,len,(,rule,.,arguments,),==,0,:,,pages,.,append,(,,[,rule,.,rule,,,ten_days_ago,],,),,# user model pages,,users,=,User,.,query,.,order_by,(,User,.,modified_time,),.,all,(),,for,,user,,in,,users,:,,url,=,url_for,(,'user.pub',,,name,=,user,.,name,),,modified_time,=,user,.,modified_time,.,date,(),.,isoformat,(),,pages,.,append,([,url,,,modified_time,]),,sitemap_xml,,=,,render_template,(,'frontend/sitemap_template.xml',,,,pages,=,pages,),,response,=,,make_response,(,sitemap_xml,),,response,.,headers,[,\"Content-Type\",],,=,,\"application/xml\",,return,,response,,,The jinja2 template for the sitemap.xml,,<?xml version=\"1.0\" encoding=\"UTF-8\"?>,,<,urlset,,xmlns,=,\"http://www.sitemaps.org/schemas/sitemap/0.9\",>,,{%,,for,,page,,in,,pages,,%},,<,url,>,,<,loc,>,{{,page,[,0,]|,safe,}},</,loc,>,,<,lastmod,>,{{,page,[,1,],}},</,lastmod,>,,</,url,>,,{%,,endfor,,%},,</,urlset,>,,,This snippet by BlazingQuasar  can be used freely for\n    anything you like. Consider it public domain.,,\u00a9 Copyright 2010 - 2019 by,Armin Ronacher,"},
{"name": "Custom Error Pages", "url": "http://flask.pocoo.org/docs/0.12/patterns/errorpages/", "content": ",,,,,Custom Error Pages \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,Custom Error Pages,\u00b6,,Flask comes with a handy,abort(),function that aborts a\nrequest with an HTTP error code early.  It will also provide a plain black\nand white error page for you with a basic description, but nothing fancy.,,Depending on the error code it is less or more likely for the user to\nactually see such an error.,,,Common Error Codes,\u00b6,,The following error codes are some that are often displayed to the user,\neven if the application behaves correctly:,,,404 Not Found,,The good old \u201cchap, you made a mistake typing that URL\u201d message.  So\ncommon that even novices to the internet know that 404 means: damn,\nthe thing I was looking for is not there.  It\u2019s a very good idea to\nmake sure there is actually something useful on a 404 page, at least a\nlink back to the index.,,403 Forbidden,,If you have some kind of access control on your website, you will have\nto send a 403 code for disallowed resources.  So make sure the user\nis not lost when they try to access a forbidden resource.,,410 Gone,,Did you know that there the \u201c404 Not Found\u201d has a brother named \u201c410\nGone\u201d?  Few people actually implement that, but the idea is that\nresources that previously existed and got deleted answer with 410\ninstead of 404.  If you are not deleting documents permanently from\nthe database but just mark them as deleted, do the user a favour and\nuse the 410 code instead and display a message that what they were\nlooking for was deleted for all eternity.,,500 Internal Server Error,,Usually happens on programming errors or if the server is overloaded.\nA terribly good idea is to have a nice page there, because your\napplication,will,fail sooner or later (see also:,Application Errors,).,,,,,Error Handlers,\u00b6,,An error handler is a function, just like a view function, but it is\ncalled when an error happens and is passed that error.  The error is most\nlikely a,HTTPException,, but in one case it\ncan be a different error: a handler for internal server errors will be\npassed other exception instances as well if they are uncaught.,,An error handler is registered with the,errorhandler(),decorator and the error code of the exception.  Keep in mind that Flask\nwill,not,set the error code for you, so make sure to also provide the\nHTTP status code when returning a response.,,Please note that if you add an error handler for \u201c500 Internal Server\nError\u201d, Flask will not trigger it if it\u2019s running in Debug mode.,,Here an example implementation for a \u201c404 Page Not Found\u201d exception:,,from,,flask,,import,,render_template,,@app,.,errorhandler,(,404,),,def,,page_not_found,(,e,):,,return,,render_template,(,'404.html',),,,404,,,,An example template might be this:,,{%,,extends,,\"layout.html\",,%},,{%,,block,,title,,%},Page Not Found,{%,,endblock,,%},,{%,,block,,body,,%},,<,h1,>,Page Not Found,</,h1,>,,<,p,>,What you were looking for is just not there.,<,p,><,a,,href,=,\",{{,,url_for,(,'index',),,}},\",>,go somewhere nice,</,a,>,,{%,,endblock,,%},,,,,,,,,,,,,,,Contents,,,Custom Error Pages,,Common Error Codes,,Error Handlers,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,AJAX with jQuery,,Next:,Lazily Loading Views,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "AJAX with jQuery", "url": "http://flask.pocoo.org/docs/0.12/patterns/jquery/", "content": ",,,,,AJAX with jQuery \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,AJAX with jQuery,\u00b6,,jQuery,is a small JavaScript library commonly used to simplify working\nwith the DOM and JavaScript in general.  It is the perfect tool to make\nweb applications more dynamic by exchanging JSON between server and\nclient.,,JSON itself is a very lightweight transport format, very similar to how\nPython primitives (numbers, strings, dicts and lists) look like which is\nwidely supported and very easy to parse.  It became popular a few years\nago and quickly replaced XML as transport format in web applications.,,,Loading jQuery,\u00b6,,In order to use jQuery, you have to download it first and place it in the\nstatic folder of your application and then ensure it\u2019s loaded.  Ideally\nyou have a layout template that is used for all pages where you just have\nto add a script statement to the bottom of your,<body>,to load jQuery:,,<,script,,type,=,text/javascript,,src,=,\"{{,,url_for('static', filename='jquery.js') }}\",></,script,>,,,,Another method is using Google\u2019s,AJAX Libraries API,to load jQuery:,,<,script,,src,=,\"//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js\",></,script,>,,<,script,>,window,.,jQuery,,||,,document,.,write,(,'<script src=\"{{,,url_for(',static,', filename=',jquery,.,js,') }}\">\\x3C/script>',)</,script,>,,,,In this case you have to put jQuery into your static folder as a fallback, but it will\nfirst try to load it directly from Google. This has the advantage that your\nwebsite will probably load faster for users if they went to at least one\nother website before using the same jQuery version from Google because it\nwill already be in the browser cache.,,,,Where is My Site?,\u00b6,,Do you know where your application is?  If you are developing the answer\nis quite simple: it\u2019s on localhost port something and directly on the root\nof that server.  But what if you later decide to move your application to\na different location?  For example to,http://example.com/myapp,?  On\nthe server side this never was a problem because we were using the handy,url_for(),function that could answer that question for\nus, but if we are using jQuery we should not hardcode the path to\nthe application but make that dynamic, so how can we do that?,,A simple method would be to add a script tag to our page that sets a\nglobal variable to the prefix to the root of the application.  Something\nlike this:,,<,script,,type,=,text/javascript,>,,$SCRIPT_ROOT,,=,,{{,,request.script_root,|,tojson,|,safe,,}},;,,</,script,>,,,,The,|safe,is necessary in Flask before 0.10 so that Jinja does not\nescape the JSON encoded string with HTML rules.  Usually this would be\nnecessary, but we are inside a,script,block here where different rules\napply.,,,Information for Pros,,In HTML the,script,tag is declared,CDATA,which means that entities\nwill not be parsed.  Everything until,</script>,is handled as script.\nThis also means that there must never be any,</,between the script\ntags.,|tojson,is kind enough to do the right thing here and\nescape slashes for you (,{{,,\"</script>\"|tojson|safe,,}},is rendered as,\"<\\/script>\",).,,In Flask 0.10 it goes a step further and escapes all HTML tags with\nunicode escapes.  This makes it possible for Flask to automatically\nmark the result as HTML safe.,,,,,JSON View Functions,\u00b6,,Now let\u2019s create a server side function that accepts two URL arguments of\nnumbers which should be added together and then sent back to the\napplication in a JSON object.  This is a really ridiculous example and is\nsomething you usually would do on the client side alone, but a simple\nexample that shows how you would use jQuery and Flask nonetheless:,,from,,flask,,import,,Flask,,,,jsonify,,,,render_template,,,,request,,app,,=,,Flask,(,__name__,),,@app,.,route,(,'/_add_numbers',),,def,,add_numbers,():,,a,,=,,request,.,args,.,get,(,'a',,,,0,,,,type,=,int,),,b,,=,,request,.,args,.,get,(,'b',,,,0,,,,type,=,int,),,return,,jsonify,(,result,=,a,,+,,b,),,@app,.,route,(,'/',),,def,,index,():,,return,,render_template,(,'index.html',),,,,As you can see I also added an,index,method here that renders a\ntemplate.  This template will load jQuery as above and have a little form\nwe can add two numbers and a link to trigger the function on the server\nside.,,Note that we are using the,get(),method here\nwhich will never fail.  If the key is missing a default value (here,0,)\nis returned.  Furthermore it can convert values to a specific type (like\nin our case,int,).  This is especially handy for code that is\ntriggered by a script (APIs, JavaScript etc.) because you don\u2019t need\nspecial error reporting in that case.,,,,The HTML,\u00b6,,Your index.html template either has to extend a,layout.html,template with\njQuery loaded and the,$SCRIPT_ROOT,variable set, or do that on the top.\nHere\u2019s the HTML code needed for our little application (,index.html,).\nNotice that we also drop the script directly into the HTML here.  It is\nusually a better idea to have that in a separate script file:,,<,script,,type,=,text/javascript,>,,$,(,function,(),,{,,$,(,'a#calculate',).,bind,(,'click',,,,function,(),,{,,$,.,getJSON,(,$SCRIPT_ROOT,,+,,'/_add_numbers',,,,{,,a,:,,$,(,'input[name=\"a\"]',).,val,(),,,b,:,,$,(,'input[name=\"b\"]',).,val,(),,},,,function,(,data,),,{,,$,(,\"#result\",).,text,(,data,.,result,);,,});,,return,,false,;,,});,,});,,</,script,>,,<,h1,>,jQuery Example,</,h1,>,,<,p,><,input,,type,=,text,,size,=,5,,name,=,a,>,+,<,input,,type,=,text,,size,=,5,,name,=,b,>,=,<,span,,id,=,result,>,?,</,span,>,,<,p,><,a,,href,=,#,,id,=,calculate,>,calculate server side,</,a,>,,,,I won\u2019t go into detail here about how jQuery works, just a very quick\nexplanation of the little bit of code above:,,,$(function(),,{,,...,,}),specifies code that should run once the\nbrowser is done loading the basic parts of the page.,,$('selector'),selects an element and lets you operate on it.,,element.bind('event',,,func),specifies a function that should run\nwhen the user clicked on the element.  If that function returns,false,, the default behavior will not kick in (in this case, navigate\nto the,#,URL).,,$.getJSON(url,,,data,,,func),sends a,GET,request to,url,and will\nsend the contents of the,data,object as query parameters.  Once the\ndata arrived, it will call the given function with the return value as\nargument.  Note that we can use the,$SCRIPT_ROOT,variable here that\nwe set earlier.,,,If you don\u2019t get the whole picture, download the,sourcecode for\nthis example,from GitHub.,,,,,,,,,,,,,Contents,,,AJAX with jQuery,,Loading jQuery,,Where is My Site?,,JSON View Functions,,The HTML,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,Message Flashing,,Next:,Custom Error Pages,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Caching", "url": "http://flask.pocoo.org/docs/0.12/patterns/caching/", "content": ",,,,,Caching \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,Caching,\u00b6,,When your application runs slow, throw some caches in.  Well, at least\nit\u2019s the easiest way to speed up things.  What does a cache do?  Say you\nhave a function that takes some time to complete but the results would\nstill be good enough if they were 5 minutes old.  So then the idea is that\nyou actually put the result of that calculation into a cache for some\ntime.,,Flask itself does not provide caching for you, but Werkzeug, one of the\nlibraries it is based on, has some very basic cache support.  It supports\nmultiple cache backends, normally you want to use a memcached server.,,,Setting up a Cache,\u00b6,,You create a cache object once and keep it around, similar to how,Flask,objects are created.  If you are using the\ndevelopment server you can create a,SimpleCache,object, that one is a simple\ncache that keeps the item stored in the memory of the Python interpreter:,,from,,werkzeug.contrib.cache,,import,,SimpleCache,,cache,,=,,SimpleCache,(),,,,If you want to use memcached, make sure to have one of the memcache modules\nsupported (you get them from,PyPI,) and a\nmemcached server running somewhere.  This is how you connect to such an\nmemcached server then:,,from,,werkzeug.contrib.cache,,import,,MemcachedCache,,cache,,=,,MemcachedCache,([,'127.0.0.1:11211',]),,,,If you are using App Engine, you can connect to the App Engine memcache\nserver easily:,,from,,werkzeug.contrib.cache,,import,,GAEMemcachedCache,,cache,,=,,GAEMemcachedCache,(),,,,,,Using a Cache,\u00b6,,Now how can one use such a cache?  There are two very important\noperations:,get(),and,set(),.  This is how to use them:,,To get an item from the cache call,get(),with a string as key name.\nIf something is in the cache, it is returned.  Otherwise that function\nwill return,None,:,,rv,,=,,cache,.,get,(,'my-item',),,,,To add items to the cache, use the,set(),method instead.  The first argument is the key and the second the value\nthat should be set.  Also a timeout can be provided after which the cache\nwill automatically remove item.,,Here a full example how this looks like normally:,,def,,get_my_item,():,,rv,,=,,cache,.,get,(,'my-item',),,if,,rv,,is,,None,:,,rv,,=,,calculate_value,(),,cache,.,set,(,'my-item',,,,rv,,,,timeout,=,5,,*,,60,),,return,,rv,,,,,,,,,,,,,,,Contents,,,Caching,,Setting up a Cache,,Using a Cache,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,Uploading Files,,Next:,View Decorators,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Message Flashing", "url": "http://flask.pocoo.org/docs/0.12/patterns/flashing/", "content": ",,,,,Message Flashing \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,Message Flashing,\u00b6,,Good applications and user interfaces are all about feedback.  If the user\ndoes not get enough feedback they will probably end up hating the\napplication.  Flask provides a really simple way to give feedback to a\nuser with the flashing system.  The flashing system basically makes it\npossible to record a message at the end of a request and access it next\nrequest and only next request.  This is usually combined with a layout\ntemplate that does this. Note that browsers and sometimes web servers enforce\na limit on cookie sizes. This means that flashing messages that are too\nlarge for session cookies causes message flashing to fail silently.,,,Simple Flashing,\u00b6,,So here is a full example:,,from,,flask,,import,,Flask,,,,flash,,,,redirect,,,,render_template,,,\\,request,,,,url_for,,app,,=,,Flask,(,__name__,),,app,.,secret_key,,=,,'some_secret',,@app,.,route,(,'/',),,def,,index,():,,return,,render_template,(,'index.html',),,@app,.,route,(,'/login',,,,methods,=,[,'GET',,,,'POST',]),,def,,login,():,,error,,=,,None,,if,,request,.,method,,==,,'POST',:,,if,,request,.,form,[,'username',],,!=,,'admin',,or,\\,request,.,form,[,'password',],,!=,,'secret',:,,error,,=,,'Invalid credentials',,else,:,,flash,(,'You were successfully logged in',),,return,,redirect,(,url_for,(,'index',)),,return,,render_template,(,'login.html',,,,error,=,error,),,,,And here is the,layout.html,template which does the magic:,,<!doctype html>,,<,title,>,My Application,</,title,>,,{%,,with,,messages,,=,,get_flashed_messages,(),,%},,{%,,if,,messages,,%},,<,ul,,class,=,flashes,>,,{%,,for,,message,,in,,messages,,%},,<,li,>,{{,,message,,}},</,li,>,,{%,,endfor,,%},,</,ul,>,,{%,,endif,,%},,{%,,endwith,,%},,{%,,block,,body,,%}{%,,endblock,,%},,,,Here is the,index.html,template which inherits from,layout.html,:,,{%,,extends,,\"layout.html\",,%},,{%,,block,,body,,%},,<,h1,>,Overview,</,h1,>,,<,p,>,Do you want to,<,a,,href,=,\",{{,,url_for,(,'login',),,}},\",>,log in?,</,a,>,,{%,,endblock,,%},,,,And here is the,login.html,template which also inherits from,layout.html,:,,{%,,extends,,\"layout.html\",,%},,{%,,block,,body,,%},,<,h1,>,Login,</,h1,>,,{%,,if,,error,,%},,<,p,,class,=,error,><,strong,>,Error:,</,strong,>,,{{,,error,,}},,{%,,endif,,%},,<,form,,method,=,post,>,,<,dl,>,,<,dt,>,Username:,<,dd,><,input,,type,=,text,,name,=,username,,value,=,\",{{,,request.form.username,,}},\",>,,<,dt,>,Password:,<,dd,><,input,,type,=,password,,name,=,password,>,,</,dl,>,,<,p,><,input,,type,=,submit,,value,=,Login,>,,</,form,>,,{%,,endblock,,%},,,,,,Flashing With Categories,\u00b6,,,Changelog,,New in version 0.3.,,,It is also possible to provide categories when flashing a message.  The\ndefault category if nothing is provided is,'message',.  Alternative\ncategories can be used to give the user better feedback.  For example\nerror messages could be displayed with a red background.,,To flash a message with a different category, just use the second argument\nto the,flash(),function:,,flash,(,u,'Invalid password provided',,,,'error',),,,,Inside the template you then have to tell the,get_flashed_messages(),function to also return the\ncategories.  The loop looks slightly different in that situation then:,,{%,,with,,messages,,=,,get_flashed_messages,(,with_categories,=,true,),,%},,{%,,if,,messages,,%},,<,ul,,class,=,flashes,>,,{%,,for,,category,,,,message,,in,,messages,,%},,<,li,,class,=,\",{{,,category,,}},\",>,{{,,message,,}},</,li,>,,{%,,endfor,,%},,</,ul,>,,{%,,endif,,%},,{%,,endwith,,%},,,,This is just one example of how to render these flashed messages.  One\nmight also use the category to add a prefix such as,<strong>Error:</strong>,to the message.,,,,Filtering Flash Messages,\u00b6,,,Changelog,,New in version 0.9.,,,Optionally you can pass a list of categories which filters the results of,get_flashed_messages(),.  This is useful if you wish to\nrender each category in a separate block.,,{%,,with,,errors,,=,,get_flashed_messages,(,category_filter,=[,\"error\",]),,%},,{%,,if,,errors,,%},,<,div,,class,=,\"alert-message block-message error\",>,,<,a,,class,=,\"close\",,href,=,\"#\",>,\u00d7,</,a,>,,<,ul,>,,{%,-,for,,msg,,in,,errors,,%},,<,li,>,{{,,msg,,}},</,li,>,,{%,,endfor,-,%},,</,ul,>,,</,div,>,,{%,,endif,,%},,{%,,endwith,,%},,,,,,,,,,,,,,,Contents,,,Message Flashing,,Simple Flashing,,Flashing With Categories,,Filtering Flash Messages,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,Template Inheritance,,Next:,AJAX with jQuery,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Form Validation with WTForms", "url": "http://flask.pocoo.org/docs/0.12/patterns/wtforms/", "content": ",,,,,Form Validation with WTForms \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,Form Validation with WTForms,\u00b6,,When you have to work with form data submitted by a browser view, code\nquickly becomes very hard to read.  There are libraries out there designed\nto make this process easier to manage.  One of them is,WTForms,which we\nwill handle here.  If you find yourself in the situation of having many\nforms, you might want to give it a try.,,When you are working with WTForms you have to define your forms as classes\nfirst.  I recommend breaking up the application into multiple modules\n(,Larger Applications,) for that and adding a separate module for the\nforms.,,,Getting the most out of WTForms with an Extension,,The,Flask-WTF,extension expands on this pattern and adds a\nfew little helpers that make working with forms and Flask more\nfun.  You can get it from,PyPI,.,,,,The Forms,\u00b6,,This is an example form for a typical registration page:,,from,,wtforms,,import,,Form,,,,BooleanField,,,,StringField,,,,PasswordField,,,,validators,,class,,RegistrationForm,(,Form,):,,username,,=,,StringField,(,'Username',,,,[,validators,.,Length,(,min,=,4,,,,max,=,25,)]),,email,,=,,StringField,(,'Email Address',,,,[,validators,.,Length,(,min,=,6,,,,max,=,35,)]),,password,,=,,PasswordField,(,'New Password',,,,[,,validators,.,DataRequired,(),,,validators,.,EqualTo,(,'confirm',,,,message,=,'Passwords must match',),,]),,confirm,,=,,PasswordField,(,'Repeat Password',),,accept_tos,,=,,BooleanField,(,'I accept the TOS',,,,[,validators,.,DataRequired,()]),,,,,,In the View,\u00b6,,In the view function, the usage of this form looks like this:,,@app,.,route,(,'/register',,,,methods,=,[,'GET',,,,'POST',]),,def,,register,():,,form,,=,,RegistrationForm,(,request,.,form,),,if,,request,.,method,,==,,'POST',,and,,form,.,validate,():,,user,,=,,User,(,form,.,username,.,data,,,,form,.,email,.,data,,,,form,.,password,.,data,),,db_session,.,add,(,user,),,flash,(,'Thanks for registering',),,return,,redirect,(,url_for,(,'login',)),,return,,render_template,(,'register.html',,,,form,=,form,),,,,Notice we\u2019re implying that the view is using SQLAlchemy here\n(,SQLAlchemy in Flask,), but that\u2019s not a requirement, of course.  Adapt\nthe code as necessary.,,Things to remember:,,,create the form from the request,form,value if\nthe data is submitted via the HTTP,POST,method and,args,if the data is submitted as,GET,.,,to validate the data, call the,validate(),method, which will return,True,if the data validates,,False,otherwise.,,to access individual values from the form, access,form.<NAME>.data,.,,,,,Forms in Templates,\u00b6,,Now to the template side.  When you pass the form to the templates, you can\neasily render them there.  Look at the following example template to see\nhow easy this is.  WTForms does half the form generation for us already.\nTo make it even nicer, we can write a macro that renders a field with\nlabel and a list of errors if there are any.,,Here\u2019s an example,_formhelpers.html,template with such a macro:,,{%,,macro,,render_field,(,field,),,%},,<,dt,>,{{,,field.label,,}},,<,dd,>,{{,,field,(**,kwargs,)|,safe,,}},,{%,,if,,field.errors,,%},,<,ul,,class,=,errors,>,,{%,,for,,error,,in,,field.errors,,%},,<,li,>,{{,,error,,}},</,li,>,,{%,,endfor,,%},,</,ul,>,,{%,,endif,,%},,</,dd,>,,{%,,endmacro,,%},,,,This macro accepts a couple of keyword arguments that are forwarded to\nWTForm\u2019s field function, which renders the field for us.  The keyword\narguments will be inserted as HTML attributes.  So, for example, you can\ncall,render_field(form.username,,,class='username'),to add a class to\nthe input element.  Note that WTForms returns standard Python unicode\nstrings, so we have to tell Jinja2 that this data is already HTML-escaped\nwith the,|safe,filter.,,Here is the,register.html,template for the function we used above, which\ntakes advantage of the,_formhelpers.html,template:,,{%,,from,,\"_formhelpers.html\",,import,,render_field,,%},,<,form,,method,=,post,>,,<,dl,>,,{{,,render_field,(,form.username,),,}},,{{,,render_field,(,form.email,),,}},,{{,,render_field,(,form.password,),,}},,{{,,render_field,(,form.confirm,),,}},,{{,,render_field,(,form.accept_tos,),,}},,</,dl,>,,<,p,><,input,,type,=,submit,,value,=,Register,>,,</,form,>,,,,For more information about WTForms, head over to the,WTForms\nwebsite,.,,,,,,,,,,,,,Contents,,,Form Validation with WTForms,,The Forms,,In the View,,Forms in Templates,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,View Decorators,,Next:,Template Inheritance,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Template Inheritance", "url": "http://flask.pocoo.org/docs/0.12/patterns/templateinheritance/", "content": ",,,,,Template Inheritance \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,Template Inheritance,\u00b6,,The most powerful part of Jinja is template inheritance. Template inheritance\nallows you to build a base \u201cskeleton\u201d template that contains all the common\nelements of your site and defines,blocks,that child templates can override.,,Sounds complicated but is very basic. It\u2019s easiest to understand it by starting\nwith an example.,,,Base Template,\u00b6,,This template, which we\u2019ll call,layout.html,, defines a simple HTML skeleton\ndocument that you might use for a simple two-column page. It\u2019s the job of\n\u201cchild\u201d templates to fill the empty blocks with content:,,<!doctype html>,,<,html,>,,<,head,>,,{%,,block,,head,,%},,<,link,,rel,=,\"stylesheet\",,href,=,\",{{,,url_for,(,'static',,,,filename,=,'style.css',),,}},\",>,,<,title,>,{%,,block,,title,,%}{%,,endblock,,%},- My Webpage,</,title,>,,{%,,endblock,,%},,</,head,>,,<,body,>,,<,div,,id,=,\"content\",>,{%,,block,,content,,%}{%,,endblock,,%},</,div,>,,<,div,,id,=,\"footer\",>,,{%,,block,,footer,,%},,&copy;,Copyright 2010 by,<,a,,href,=,\"http://domain.invalid/\",>,you,</,a,>,.,{%,,endblock,,%},,</,div,>,,</,body,>,,</,html,>,,,,In this example, the,{%,,block,,%},tags define four blocks that child templates\ncan fill in. All the,block,tag does is tell the template engine that a\nchild template may override those portions of the template.,,,,Child Template,\u00b6,,A child template might look like this:,,{%,,extends,,\"layout.html\",,%},,{%,,block,,title,,%},Index,{%,,endblock,,%},,{%,,block,,head,,%},,{{,,super,(),,}},,<,style,,type,=,\"text/css\",>,,.,important,,{,,color,:,,#336699,;,,},,</,style,>,,{%,,endblock,,%},,{%,,block,,content,,%},,<,h1,>,Index,</,h1,>,,<,p,,class,=,\"important\",>,Welcome on my awesome homepage.,{%,,endblock,,%},,,,The,{%,,extends,,%},tag is the key here. It tells the template engine that\nthis template \u201cextends\u201d another template.  When the template system evaluates\nthis template, first it locates the parent.  The extends tag must be the\nfirst tag in the template.  To render the contents of a block defined in\nthe parent template, use,{{,,super(),,}},.,,,,,,,,,,,,,Contents,,,Template Inheritance,,Base Template,,Child Template,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,Form Validation with WTForms,,Next:,Message Flashing,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "View Decorators", "url": "http://flask.pocoo.org/docs/0.12/patterns/viewdecorators/", "content": ",,,,,View Decorators \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,View Decorators,\u00b6,,Python has a really interesting feature called function decorators.  This\nallows some really neat things for web applications.  Because each view in\nFlask is a function, decorators can be used to inject additional\nfunctionality to one or more functions.  The,route(),decorator is the one you probably used already.  But there are use cases\nfor implementing your own decorator.  For instance, imagine you have a\nview that should only be used by people that are logged in.  If a user\ngoes to the site and is not logged in, they should be redirected to the\nlogin page.  This is a good example of a use case where a decorator is an\nexcellent solution.,,,Login Required Decorator,\u00b6,,So let\u2019s implement such a decorator.  A decorator is a function that\nwraps and replaces another function.  Since the original function is\nreplaced, you need to remember to copy the original function\u2019s information\nto the new function.  Use,functools.wraps(),to handle this for you.,,This example assumes that the login page is called,'login',and that\nthe current user is stored in,g.user,and is,None,if there is no-one\nlogged in.,,from,,functools,,import,,wraps,,from,,flask,,import,,g,,,,request,,,,redirect,,,,url_for,,def,,login_required,(,f,):,,@wraps,(,f,),,def,,decorated_function,(,*,args,,,,**,kwargs,):,,if,,g,.,user,,is,,None,:,,return,,redirect,(,url_for,(,'login',,,,next,=,request,.,url,)),,return,,f,(,*,args,,,,**,kwargs,),,return,,decorated_function,,,,To use the decorator, apply it as innermost decorator to a view function.\nWhen applying further decorators, always remember\nthat the,route(),decorator is the outermost.,,@app,.,route,(,'/secret_page',),,@login_required,,def,,secret_page,():,,pass,,,,,Note,,The,next,value will exist in,request.args,after a,GET,request for\nthe login page.  You\u2019ll have to pass it along when sending the,POST,request\nfrom the login form.  You can do this with a hidden input tag, then retrieve it\nfrom,request.form,when logging the user in.,,<,input,,type,=,\"hidden\",,value,=,\"{{ request.args.get('next', '') }}\",/>,,,,,,,Caching Decorator,\u00b6,,Imagine you have a view function that does an expensive calculation and\nbecause of that you would like to cache the generated results for a\ncertain amount of time.  A decorator would be nice for that.  We\u2019re\nassuming you have set up a cache like mentioned in,Caching,.,,Here is an example cache function.  It generates the cache key from a\nspecific prefix (actually a format string) and the current path of the\nrequest.  Notice that we are using a function that first creates the\ndecorator that then decorates the function.  Sounds awful? Unfortunately\nit is a little bit more complex, but the code should still be\nstraightforward to read.,,The decorated function will then work as follows,,,get the unique cache key for the current request base on the current\npath.,,get the value for that key from the cache. If the cache returned\nsomething we will return that value.,,otherwise the original function is called and the return value is\nstored in the cache for the timeout provided (by default 5 minutes).,,,Here the code:,,from,,functools,,import,,wraps,,from,,flask,,import,,request,,def,,cached,(,timeout,=,5,,*,,60,,,,key,=,'view/,%s,',):,,def,,decorator,(,f,):,,@wraps,(,f,),,def,,decorated_function,(,*,args,,,,**,kwargs,):,,cache_key,,=,,key,,%,,request,.,path,,rv,,=,,cache,.,get,(,cache_key,),,if,,rv,,is,,not,,None,:,,return,,rv,,rv,,=,,f,(,*,args,,,,**,kwargs,),,cache,.,set,(,cache_key,,,,rv,,,,timeout,=,timeout,),,return,,rv,,return,,decorated_function,,return,,decorator,,,,Notice that this assumes an instantiated,cache,object is available, see,Caching,for more information.,,,,Templating Decorator,\u00b6,,A common pattern invented by the TurboGears guys a while back is a\ntemplating decorator.  The idea of that decorator is that you return a\ndictionary with the values passed to the template from the view function\nand the template is automatically rendered.  With that, the following\nthree examples do exactly the same:,,@app,.,route,(,'/',),,def,,index,():,,return,,render_template,(,'index.html',,,,value,=,42,),,@app,.,route,(,'/',),,@templated,(,'index.html',),,def,,index,():,,return,,dict,(,value,=,42,),,@app,.,route,(,'/',),,@templated,(),,def,,index,():,,return,,dict,(,value,=,42,),,,,As you can see, if no template name is provided it will use the endpoint\nof the URL map with dots converted to slashes +,'.html',.  Otherwise\nthe provided template name is used.  When the decorated function returns,\nthe dictionary returned is passed to the template rendering function.  If,None,is returned, an empty dictionary is assumed, if something else than\na dictionary is returned we return it from the function unchanged.  That\nway you can still use the redirect function or return simple strings.,,Here is the code for that decorator:,,from,,functools,,import,,wraps,,from,,flask,,import,,request,,,,render_template,,def,,templated,(,template,=,None,):,,def,,decorator,(,f,):,,@wraps,(,f,),,def,,decorated_function,(,*,args,,,,**,kwargs,):,,template_name,,=,,template,,if,,template_name,,is,,None,:,,template_name,,=,,request,.,endpoint,\\,.,replace,(,'.',,,,'/',),,+,,'.html',,ctx,,=,,f,(,*,args,,,,**,kwargs,),,if,,ctx,,is,,None,:,,ctx,,=,,{},,elif,,not,,isinstance,(,ctx,,,,dict,):,,return,,ctx,,return,,render_template,(,template_name,,,,**,ctx,),,return,,decorated_function,,return,,decorator,,,,,,Endpoint Decorator,\u00b6,,When you want to use the werkzeug routing system for more flexibility you\nneed to map the endpoint as defined in the,Rule,to a view function. This is possible with this decorator. For example:,,from,,flask,,import,,Flask,,from,,werkzeug.routing,,import,,Rule,,app,,=,,Flask,(,__name__,),,app,.,url_map,.,add,(,Rule,(,'/',,,,endpoint,=,'index',)),,@app,.,endpoint,(,'index',),,def,,my_index,():,,return,,\"Hello world\",,,,,,,,,,,,,,,Contents,,,View Decorators,,Login Required Decorator,,Caching Decorator,,Templating Decorator,,Endpoint Decorator,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,Caching,,Next:,Form Validation with WTForms,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Uploading Files", "url": "http://flask.pocoo.org/docs/0.12/patterns/fileuploads/", "content": ",,,,,Uploading Files \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,Uploading Files,\u00b6,,Ah yes, the good old problem of file uploads.  The basic idea of file\nuploads is actually quite simple.  It basically works like this:,,,A,<form>,tag is marked with,enctype=multipart/form-data,and an,<input,,type=file>,is placed in that form.,,The application accesses the file from the,files,dictionary on the request object.,,use the,save(),method of the file to save\nthe file permanently somewhere on the filesystem.,,,,A Gentle Introduction,\u00b6,,Let\u2019s start with a very basic application that uploads a file to a\nspecific upload folder and displays a file to the user.  Let\u2019s look at the\nbootstrapping code for our application:,,import,,os,,from,,flask,,import,,Flask,,,,request,,,,redirect,,,,url_for,,from,,werkzeug.utils,,import,,secure_filename,,UPLOAD_FOLDER,,=,,'/path/to/the/uploads',,ALLOWED_EXTENSIONS,,=,,set,([,'txt',,,,'pdf',,,,'png',,,,'jpg',,,,'jpeg',,,,'gif',]),,app,,=,,Flask,(,__name__,),,app,.,config,[,'UPLOAD_FOLDER',],,=,,UPLOAD_FOLDER,,,,So first we need a couple of imports.  Most should be straightforward, the,werkzeug.secure_filename(),is explained a little bit later.  The,UPLOAD_FOLDER,is where we will store the uploaded files and the,ALLOWED_EXTENSIONS,is the set of allowed file extensions.,,Why do we limit the extensions that are allowed?  You probably don\u2019t want\nyour users to be able to upload everything there if the server is directly\nsending out the data to the client.  That way you can make sure that users\nare not able to upload HTML files that would cause XSS problems (see,Cross-Site Scripting (XSS),).  Also make sure to disallow,.php,files if the server\nexecutes them, but who has PHP installed on their server, right?  :),,Next the functions that check if an extension is valid and that uploads\nthe file and redirects the user to the URL for the uploaded file:,,def,,allowed_file,(,filename,):,,return,,'.',,in,,filename,,and,\\,filename,.,rsplit,(,'.',,,,1,)[,1,],.,lower,(),,in,,ALLOWED_EXTENSIONS,,@app,.,route,(,'/',,,,methods,=,[,'GET',,,,'POST',]),,def,,upload_file,():,,if,,request,.,method,,==,,'POST',:,,# check if the post request has the file part,,if,,'file',,not,,in,,request,.,files,:,,flash,(,'No file part',),,return,,redirect,(,request,.,url,),,file,,=,,request,.,files,[,'file',],,# if user does not select file, browser also,,# submit a empty part without filename,,if,,file,.,filename,,==,,'',:,,flash,(,'No selected file',),,return,,redirect,(,request,.,url,),,if,,file,,and,,allowed_file,(,file,.,filename,):,,filename,,=,,secure_filename,(,file,.,filename,),,file,.,save,(,os,.,path,.,join,(,app,.,config,[,'UPLOAD_FOLDER',],,,filename,)),,return,,redirect,(,url_for,(,'uploaded_file',,,,filename,=,filename,)),,return,,''',,<!doctype html>,,<title>Upload new File</title>,,<h1>Upload new File</h1>,,<form method=post enctype=multipart/form-data>,,<p><input type=file name=file>,,<input type=submit value=Upload>,,</form>,,''',,,,So what does that,secure_filename(),function actually do?\nNow the problem is that there is that principle called \u201cnever trust user\ninput\u201d.  This is also true for the filename of an uploaded file.  All\nsubmitted form data can be forged, and filenames can be dangerous.  For\nthe moment just remember: always use that function to secure a filename\nbefore storing it directly on the filesystem.,,,Information for the Pros,,So you\u2019re interested in what that,secure_filename(),function does and what the problem is if you\u2019re not using it?  So just\nimagine someone would send the following information as,filename,to\nyour application:,,filename,,=,,\"../../../../home/username/.bashrc\",,,,Assuming the number of,../,is correct and you would join this with\nthe,UPLOAD_FOLDER,the user might have the ability to modify a file on\nthe server\u2019s filesystem he or she should not modify.  This does require some\nknowledge about how the application looks like, but trust me, hackers\nare patient :),,Now let\u2019s look how that function works:,,>>>,secure_filename,(,'../../../../home/username/.bashrc',),,'home_username_.bashrc',,,,,Now one last thing is missing: the serving of the uploaded files. In the,upload_file(),we redirect the user to,url_for('uploaded_file',,,filename=filename),, that is,,/uploads/filename,.\nSo we write the,uploaded_file(),function to return the file of that name. As\nof Flask 0.5 we can use a function that does that for us:,,from,,flask,,import,,send_from_directory,,@app,.,route,(,'/uploads/<filename>',),,def,,uploaded_file,(,filename,):,,return,,send_from_directory,(,app,.,config,[,'UPLOAD_FOLDER',],,,filename,),,,,Alternatively you can register,uploaded_file,as,build_only,rule and\nuse the,SharedDataMiddleware,.  This also works with\nolder versions of Flask:,,from,,werkzeug,,import,,SharedDataMiddleware,,app,.,add_url_rule,(,'/uploads/<filename>',,,,'uploaded_file',,,,build_only,=,True,),,app,.,wsgi_app,,=,,SharedDataMiddleware,(,app,.,wsgi_app,,,,{,,'/uploads',:,,app,.,config,[,'UPLOAD_FOLDER',],,}),,,,If you now run the application everything should work as expected.,,,,Improving Uploads,\u00b6,,,Changelog,,New in version 0.6.,,,So how exactly does Flask handle uploads?  Well it will store them in the\nwebserver\u2019s memory if the files are reasonable small otherwise in a\ntemporary location (as returned by,tempfile.gettempdir(),).  But how\ndo you specify the maximum file size after which an upload is aborted?  By\ndefault Flask will happily accept file uploads to an unlimited amount of\nmemory, but you can limit that by setting the,MAX_CONTENT_LENGTH,config key:,,from,,flask,,import,,Flask,,,,Request,,app,,=,,Flask,(,__name__,),,app,.,config,[,'MAX_CONTENT_LENGTH',],,=,,16,,*,,1024,,*,,1024,,,,The code above will limited the maximum allowed payload to 16 megabytes.\nIf a larger file is transmitted, Flask will raise an,RequestEntityTooLarge,exception.,,This feature was added in Flask 0.6 but can be achieved in older versions\nas well by subclassing the request object.  For more information on that\nconsult the Werkzeug documentation on file handling.,,,,Upload Progress Bars,\u00b6,,A while ago many developers had the idea to read the incoming file in\nsmall chunks and store the upload progress in the database to be able to\npoll the progress with JavaScript from the client.  Long story short: the\nclient asks the server every 5 seconds how much it has transmitted\nalready.  Do you realize the irony?  The client is asking for something it\nshould already know.,,,,An Easier Solution,\u00b6,,Now there are better solutions that work faster and are more reliable. There\nare JavaScript libraries like,jQuery,that have form plugins to ease the\nconstruction of progress bar.,,Because the common pattern for file uploads exists almost unchanged in all\napplications dealing with uploads, there is also a Flask extension called,Flask-Uploads,that implements a full fledged upload mechanism with white and\nblacklisting of extensions and more.,,,,,,,,,,,,,Contents,,,Uploading Files,,A Gentle Introduction,,Improving Uploads,,Upload Progress Bars,,An Easier Solution,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,SQLAlchemy in Flask,,Next:,Caching,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "SQLAlchemy in Flask", "url": "http://flask.pocoo.org/docs/0.12/patterns/sqlalchemy/", "content": ",,,,,SQLAlchemy in Flask \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,SQLAlchemy in Flask,\u00b6,,Many people prefer,SQLAlchemy,for database access.  In this case it\u2019s\nencouraged to use a package instead of a module for your flask application\nand drop the models into a separate module (,Larger Applications,).\nWhile that is not necessary, it makes a lot of sense.,,There are four very common ways to use SQLAlchemy.  I will outline each\nof them here:,,,Flask-SQLAlchemy Extension,\u00b6,,Because SQLAlchemy is a common database abstraction layer and object\nrelational mapper that requires a little bit of configuration effort,\nthere is a Flask extension that handles that for you.  This is recommended\nif you want to get started quickly.,,You can download,Flask-SQLAlchemy,from,PyPI,.,,,,Declarative,\u00b6,,The declarative extension in SQLAlchemy is the most recent method of using\nSQLAlchemy.  It allows you to define tables and models in one go, similar\nto how Django works.  In addition to the following text I recommend the\nofficial documentation on the,declarative,extension.,,Here\u2019s the example,database.py,module for your application:,,from,,sqlalchemy,,import,,create_engine,,from,,sqlalchemy.orm,,import,,scoped_session,,,,sessionmaker,,from,,sqlalchemy.ext.declarative,,import,,declarative_base,,engine,,=,,create_engine,(,'sqlite:////tmp/test.db',,,,convert_unicode,=,True,),,db_session,,=,,scoped_session,(,sessionmaker,(,autocommit,=,False,,,,autoflush,=,False,,,,bind,=,engine,)),,Base,,=,,declarative_base,(),,Base,.,query,,=,,db_session,.,query_property,(),,def,,init_db,():,,# import all modules here that might define models so that,,# they will be registered properly on the metadata.  Otherwise,,# you will have to import them first before calling init_db(),,import,,yourapplication.models,,Base,.,metadata,.,create_all,(,bind,=,engine,),,,,To define your models, just subclass the,Base,class that was created by\nthe code above.  If you are wondering why we don\u2019t have to care about\nthreads here (like we did in the SQLite3 example above with the,g,object): that\u2019s because SQLAlchemy does that for us\nalready with the,scoped_session,.,,To use SQLAlchemy in a declarative way with your application, you just\nhave to put the following code into your application module.  Flask will\nautomatically remove database sessions at the end of the request or\nwhen the application shuts down:,,from,,yourapplication.database,,import,,db_session,,@app,.,teardown_appcontext,,def,,shutdown_session,(,exception,=,None,):,,db_session,.,remove,(),,,,Here is an example model (put this into,models.py,, e.g.):,,from,,sqlalchemy,,import,,Column,,,,Integer,,,,String,,from,,yourapplication.database,,import,,Base,,class,,User,(,Base,):,,__tablename__,,=,,'users',,id,,=,,Column,(,Integer,,,,primary_key,=,True,),,name,,=,,Column,(,String,(,50,),,,unique,=,True,),,email,,=,,Column,(,String,(,120,),,,unique,=,True,),,def,,__init__,(,self,,,,name,=,None,,,,email,=,None,):,,self,.,name,,=,,name,,self,.,email,,=,,email,,def,,__repr__,(,self,):,,return,,'<User,%r,>',,%,,(,self,.,name,),,,,To create the database you can use the,init_db,function:,,>>>,from,,yourapplication.database,,import,,init_db,,>>>,init_db,(),,,,You can insert entries into the database like this:,,>>>,from,,yourapplication.database,,import,,db_session,,>>>,from,,yourapplication.models,,import,,User,,>>>,u,,=,,User,(,'admin',,,,'admin@localhost',),,>>>,db_session,.,add,(,u,),,>>>,db_session,.,commit,(),,,,Querying is simple as well:,,>>>,User,.,query,.,all,(),,[<User u'admin'>],,>>>,User,.,query,.,filter,(,User,.,name,,==,,'admin',),.,first,(),,<User u'admin'>,,,,,,Manual Object Relational Mapping,\u00b6,,Manual object relational mapping has a few upsides and a few downsides\nversus the declarative approach from above.  The main difference is that\nyou define tables and classes separately and map them together.  It\u2019s more\nflexible but a little more to type.  In general it works like the\ndeclarative approach, so make sure to also split up your application into\nmultiple modules in a package.,,Here is an example,database.py,module for your application:,,from,,sqlalchemy,,import,,create_engine,,,,MetaData,,from,,sqlalchemy.orm,,import,,scoped_session,,,,sessionmaker,,engine,,=,,create_engine,(,'sqlite:////tmp/test.db',,,,convert_unicode,=,True,),,metadata,,=,,MetaData,(),,db_session,,=,,scoped_session,(,sessionmaker,(,autocommit,=,False,,,,autoflush,=,False,,,,bind,=,engine,)),,def,,init_db,():,,metadata,.,create_all,(,bind,=,engine,),,,,As in the declarative approach, you need to close the session after\neach request or application context shutdown.  Put this into your\napplication module:,,from,,yourapplication.database,,import,,db_session,,@app,.,teardown_appcontext,,def,,shutdown_session,(,exception,=,None,):,,db_session,.,remove,(),,,,Here is an example table and model (put this into,models.py,):,,from,,sqlalchemy,,import,,Table,,,,Column,,,,Integer,,,,String,,from,,sqlalchemy.orm,,import,,mapper,,from,,yourapplication.database,,import,,metadata,,,,db_session,,class,,User,(,object,):,,query,,=,,db_session,.,query_property,(),,def,,__init__,(,self,,,,name,=,None,,,,email,=,None,):,,self,.,name,,=,,name,,self,.,email,,=,,email,,def,,__repr__,(,self,):,,return,,'<User,%r,>',,%,,(,self,.,name,),,users,,=,,Table,(,'users',,,,metadata,,,,Column,(,'id',,,,Integer,,,,primary_key,=,True,),,,Column,(,'name',,,,String,(,50,),,,unique,=,True,),,,Column,(,'email',,,,String,(,120,),,,unique,=,True,),,),,mapper,(,User,,,,users,),,,,Querying and inserting works exactly the same as in the example above.,,,,SQL Abstraction Layer,\u00b6,,If you just want to use the database system (and SQL) abstraction layer\nyou basically only need the engine:,,from,,sqlalchemy,,import,,create_engine,,,,MetaData,,,,Table,,engine,,=,,create_engine,(,'sqlite:////tmp/test.db',,,,convert_unicode,=,True,),,metadata,,=,,MetaData,(,bind,=,engine,),,,,Then you can either declare the tables in your code like in the examples\nabove, or automatically load them:,,from,,sqlalchemy,,import,,Table,,users,,=,,Table,(,'users',,,,metadata,,,,autoload,=,True,),,,,To insert data you can use the,insert,method.  We have to get a\nconnection first so that we can use a transaction:,,>>>,con,,=,,engine,.,connect,(),,>>>,con,.,execute,(,users,.,insert,(),,,name,=,'admin',,,,email,=,'admin@localhost',),,,,SQLAlchemy will automatically commit for us.,,To query your database, you use the engine directly or use a connection:,,>>>,users,.,select,(,users,.,c,.,id,,==,,1,),.,execute,(),.,first,(),,(1, u'admin', u'admin@localhost'),,,,These results are also dict-like tuples:,,>>>,r,,=,,users,.,select,(,users,.,c,.,id,,==,,1,),.,execute,(),.,first,(),,>>>,r,[,'name',],,u'admin',,,,You can also pass strings of SQL statements to the,execute(),method:,,>>>,engine,.,execute,(,'select * from users where id = :1',,,,[,1,]),.,first,(),,(1, u'admin', u'admin@localhost'),,,,For more information about SQLAlchemy, head over to the,website,.,,,,,,,,,,,,,Contents,,,SQLAlchemy in Flask,,Flask-SQLAlchemy Extension,,Declarative,,Manual Object Relational Mapping,,SQL Abstraction Layer,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,Using SQLite 3 with Flask,,Next:,Uploading Files,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Using SQLite 3 with Flask", "url": "http://flask.pocoo.org/docs/0.12/patterns/sqlite3/", "content": ",,,,,Using SQLite 3 with Flask \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,Using SQLite 3 with Flask,\u00b6,,In Flask you can easily implement the opening of database connections on\ndemand and closing them when the context dies (usually at the end of the\nrequest).,,Here is a simple example of how you can use SQLite 3 with Flask:,,import,,sqlite3,,from,,flask,,import,,g,,DATABASE,,=,,'/path/to/database.db',,def,,get_db,():,,db,,=,,getattr,(,g,,,,'_database',,,,None,),,if,,db,,is,,None,:,,db,,=,,g,.,_database,,=,,sqlite3,.,connect,(,DATABASE,),,return,,db,,@app,.,teardown_appcontext,,def,,close_connection,(,exception,):,,db,,=,,getattr,(,g,,,,'_database',,,,None,),,if,,db,,is,,not,,None,:,,db,.,close,(),,,,Now, to use the database, the application must either have an active\napplication context (which is always true if there is a request in flight)\nor create an application context itself.  At that point the,get_db,function can be used to get the current database connection.  Whenever the\ncontext is destroyed the database connection will be terminated.,,Note: if you use Flask 0.9 or older you need to use,flask._app_ctx_stack.top,instead of,g,as the,flask.g,object was bound to the request and not application context.,,Example:,,@app,.,route,(,'/',),,def,,index,():,,cur,,=,,get_db,(),.,cursor,(),,...,,,,,Note,,Please keep in mind that the teardown request and appcontext functions\nare always executed, even if a before-request handler failed or was\nnever executed.  Because of this we have to make sure here that the\ndatabase is there before we close it.,,,,Connect on Demand,\u00b6,,The upside of this approach (connecting on first use) is that this will\nonly open the connection if truly necessary.  If you want to use this\ncode outside a request context you can use it in a Python shell by opening\nthe application context by hand:,,with,,app,.,app_context,():,,# now you can use get_db(),,,,,,Easy Querying,\u00b6,,Now in each request handling function you can access,g.db,to get the\ncurrent open database connection.  To simplify working with SQLite, a\nrow factory function is useful.  It is executed for every result returned\nfrom the database to convert the result.  For instance, in order to get\ndictionaries instead of tuples, this could be inserted into the,get_db,function we created above:,,def,,make_dicts,(,cursor,,,,row,):,,return,,dict,((,cursor,.,description,[,idx,][,0,],,,value,),,for,,idx,,,,value,,in,,enumerate,(,row,)),,db,.,row_factory,,=,,make_dicts,,,,This will make the sqlite3 module return dicts for this database connection, which are much nicer to deal with. Even more simply, we could place this in,get_db,instead:,,db,.,row_factory,,=,,sqlite3,.,Row,,,,This would use Row objects rather than dicts to return the results of queries. These are,namedtuple,s, so we can access them either by index or by key. For example, assuming we have a,sqlite3.Row,called,r,for the rows,id,,,FirstName,,,LastName,, and,MiddleInitial,:,,>>>,# You can get values based on the row's name,,>>>,r,[,'FirstName',],,John,,>>>,# Or, you can get them based on index,,>>>,r,[,1,],,John,,# Row objects are also iterable:,,>>>,for,,value,,in,,r,:,,...,,print,(,value,),,1,,John,,Doe,,M,,,,Additionally, it is a good idea to provide a query function that combines\ngetting the cursor, executing and fetching the results:,,def,,query_db,(,query,,,,args,=,(),,,one,=,False,):,,cur,,=,,get_db,(),.,execute,(,query,,,,args,),,rv,,=,,cur,.,fetchall,(),,cur,.,close,(),,return,,(,rv,[,0,],,if,,rv,,else,,None,),,if,,one,,else,,rv,,,,This handy little function, in combination with a row factory, makes\nworking with the database much more pleasant than it is by just using the\nraw cursor and connection objects.,,Here is how you can use it:,,for,,user,,in,,query_db,(,'select * from users',):,,print,,user,[,'username',],,,'has the id',,,,user,[,'user_id',],,,,Or if you just want a single result:,,user,,=,,query_db,(,'select * from users where username = ?',,,,[,the_username,],,,one,=,True,),,if,,user,,is,,None,:,,print,,'No such user',,else,:,,print,,the_username,,,,'has the id',,,,user,[,'user_id',],,,,To pass variable parts to the SQL statement, use a question mark in the\nstatement and pass in the arguments as a list.  Never directly add them to\nthe SQL statement with string formatting because this makes it possible\nto attack the application using,SQL Injections,.,,,,Initial Schemas,\u00b6,,Relational databases need schemas, so applications often ship a,schema.sql,file that creates the database.  It\u2019s a good idea to provide\na function that creates the database based on that schema.  This function\ncan do that for you:,,def,,init_db,():,,with,,app,.,app_context,():,,db,,=,,get_db,(),,with,,app,.,open_resource,(,'schema.sql',,,,mode,=,'r',),,as,,f,:,,db,.,cursor,(),.,executescript,(,f,.,read,()),,db,.,commit,(),,,,You can then create such a database from the Python shell:,,>>>,from,,yourapplication,,import,,init_db,,>>>,init_db,(),,,,,,,,,,,,,,,Contents,,,Using SQLite 3 with Flask,,Connect on Demand,,Easy Querying,,Initial Schemas,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,Deploying with Fabric,,Next:,SQLAlchemy in Flask,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Deploying with Fabric", "url": "http://flask.pocoo.org/docs/0.12/patterns/fabric/", "content": ",,,,,Deploying with Fabric \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,Deploying with Fabric,\u00b6,,Fabric,is a tool for Python similar to Makefiles but with the ability\nto execute commands on a remote server.  In combination with a properly\nset up Python package (,Larger Applications,) and a good concept for\nconfigurations (,Configuration Handling,) it is very easy to deploy Flask\napplications to external servers.,,Before we get started, here a quick checklist of things we have to ensure\nupfront:,,,Fabric 1.0 has to be installed locally.  This tutorial assumes the\nlatest version of Fabric.,,The application already has to be a package and requires a working,setup.py,file (,Deploying with Setuptools,).,,In the following example we are using,mod_wsgi,for the remote\nservers.  You can of course use your own favourite server there, but\nfor this example we chose Apache +,mod_wsgi,because it\u2019s very easy\nto setup and has a simple way to reload applications without root\naccess.,,,,Creating the first Fabfile,\u00b6,,A fabfile is what controls what Fabric executes.  It is named,fabfile.py,and executed by the,fab,command.  All the functions defined in that file\nwill show up as,fab,subcommands.  They are executed on one or more\nhosts.  These hosts can be defined either in the fabfile or on the command\nline.  In this case we will add them to the fabfile.,,This is a basic first example that has the ability to upload the current\nsource code to the server and install it into a pre-existing\nvirtual environment:,,from,,fabric.api,,import,,*,,# the user to use for the remote commands,,env,.,user,,=,,'appuser',,# the servers where the commands are executed,,env,.,hosts,,=,,[,'server1.example.com',,,,'server2.example.com',],,def,,pack,():,,# build the package,,local,(,'python setup.py sdist --formats=gztar',,,,capture,=,False,),,def,,deploy,():,,# figure out the package name and version,,dist,,=,,local,(,'python setup.py --fullname',,,,capture,=,True,),.,strip,(),,filename,,=,,',%s,.tar.gz',,%,,dist,,# upload the package to the temporary folder on the server,,put,(,'dist/,%s,',,%,,filename,,,,'/tmp/,%s,',,%,,filename,),,# install the package in the application's virtualenv with pip,,run,(,'/var/www/yourapplication/env/bin/pip install /tmp/,%s,',,%,,filename,),,# remove the uploaded package,,run,(,'rm -r /tmp/,%s,',,%,,filename,),,# touch the .wsgi file to trigger a reload in mod_wsgi,,run,(,'touch /var/www/yourapplication.wsgi',),,,,,,Running Fabfiles,\u00b6,,Now how do you execute that fabfile?  You use the,fab,command.  To\ndeploy the current version of the code on the remote server you would use\nthis command:,,$ fab pack deploy,,,However this requires that our server already has the,/var/www/yourapplication,folder created and,/var/www/yourapplication/env,to be a virtual environment.  Furthermore\nare we not creating the configuration or,.wsgi,file on the server.  So\nhow do we bootstrap a new server into our infrastructure?,,This now depends on the number of servers we want to set up.  If we just\nhave one application server (which the majority of applications will\nhave), creating a command in the fabfile for this is overkill.  But\nobviously you can do that.  In that case you would probably call it,setup,or,bootstrap,and then pass the servername explicitly on the\ncommand line:,,$ fab -H newserver.example.com bootstrap,,,To setup a new server you would roughly do these steps:,,,Create the directory structure in,/var/www,:,,$ mkdir /var/www/yourapplication\n$ cd /var/www/yourapplication\n$ virtualenv --distribute env,,,,Upload a new,application.wsgi,file to the server and the\nconfiguration file for the application (eg:,application.cfg,),,,Create a new Apache config for,yourapplication,and activate it.\nMake sure to activate watching for changes of the,.wsgi,file so\nthat we can automatically reload the application by touching it.\n(See,mod_wsgi (Apache),for more information),,,,So now the question is, where do the,application.wsgi,and,application.cfg,files come from?,,,,The WSGI File,\u00b6,,The WSGI file has to import the application and also to set an environment\nvariable so that the application knows where to look for the config.  This\nis a short example that does exactly that:,,import,,os,,os,.,environ,[,'YOURAPPLICATION_CONFIG',],,=,,'/var/www/yourapplication/application.cfg',,from,,yourapplication,,import,,app,,,,The application itself then has to initialize itself like this to look for\nthe config at that environment variable:,,app,,=,,Flask,(,__name__,),,app,.,config,.,from_object,(,'yourapplication.default_config',),,app,.,config,.,from_envvar,(,'YOURAPPLICATION_CONFIG',),,,,This approach is explained in detail in the,Configuration Handling,section of the\ndocumentation.,,,,The Configuration File,\u00b6,,Now as mentioned above, the application will find the correct\nconfiguration file by looking up the,YOURAPPLICATION_CONFIG,environment\nvariable.  So we have to put the configuration in a place where the\napplication will able to find it.  Configuration files have the unfriendly\nquality of being different on all computers, so you do not version them\nusually.,,A popular approach is to store configuration files for different servers\nin a separate version control repository and check them out on all\nservers.  Then symlink the file that is active for the server into the\nlocation where it\u2019s expected (eg:,/var/www/yourapplication,).,,Either way, in our case here we only expect one or two servers and we can\nupload them ahead of time by hand.,,,,First Deployment,\u00b6,,Now we can do our first deployment.  We have set up the servers so that\nthey have their virtual environments and activated apache configs.  Now we\ncan pack up the application and deploy it:,,$ fab pack deploy,,,Fabric will now connect to all servers and run the commands as written\ndown in the fabfile.  First it will execute pack so that we have our\ntarball ready and then it will execute deploy and upload the source code\nto all servers and install it there.  Thanks to the,setup.py,file we\nwill automatically pull in the required libraries into our virtual\nenvironment.,,,,Next Steps,\u00b6,,From that point onwards there is so much that can be done to make\ndeployment actually fun:,,,Create a,bootstrap,command that initializes new servers.  It could\ninitialize a new virtual environment, setup apache appropriately etc.,,Put configuration files into a separate version control repository\nand symlink the active configs into place.,,You could also put your application code into a repository and check\nout the latest version on the server and then install.  That way you\ncan also easily go back to older versions.,,hook in testing functionality so that you can deploy to an external\nserver and run the test suite.,,,Working with Fabric is fun and you will notice that it\u2019s quite magical to\ntype,fab,,deploy,and see your application being deployed automatically\nto one or more remote servers.,,,,,,,,,,,,,Contents,,,Deploying with Fabric,,Creating the first Fabfile,,Running Fabfiles,,The WSGI File,,The Configuration File,,First Deployment,,Next Steps,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,Deploying with Setuptools,,Next:,Using SQLite 3 with Flask,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Deploying with Setuptools", "url": "http://flask.pocoo.org/docs/0.12/patterns/distribute/", "content": ",,,,,Deploying with Setuptools \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,Deploying with Setuptools,\u00b6,,Setuptools,, is an extension library that is commonly used to\ndistribute Python libraries and extensions. It extends distutils, a basic\nmodule installation system shipped with Python to also support various more\ncomplex constructs that make larger applications easier to distribute:,,,support for dependencies,: a library or application can declare a\nlist of other libraries it depends on which will be installed\nautomatically for you.,,package registry,: setuptools registers your package with your\nPython installation.  This makes it possible to query information\nprovided by one package from another package.  The best known feature of\nthis system is the entry point support which allows one package to\ndeclare an \u201centry point\u201d that another package can hook into to extend the\nother package.,,installation manager,:,pip,can install other libraries for you.,,,If you have Python 2 (>=2.7.9) or Python 3 (>=3.4) installed from python.org,\nyou will already have pip and setuptools on your system.  Otherwise, you\nwill need to install them yourself.,,Flask itself, and all the libraries you can find on PyPI are distributed with\neither setuptools or distutils.,,In this case we assume your application is called,yourapplication.py,and you are not using a module, but a,package,. If you have not yet converted your application into\na package, head over to the,Larger Applications,pattern to see\nhow this can be done.,,A working deployment with setuptools is the first step into more complex\nand more automated deployment scenarios.  If you want to fully automate\nthe process, also read the,Deploying with Fabric,chapter.,,,Basic Setup Script,\u00b6,,Because you have Flask installed, you have setuptools available on your system.\nFlask already depends upon setuptools.,,Standard disclaimer applies:,you better use a virtualenv,.,,Your setup code always goes into a file named,setup.py,next to your\napplication.  The name of the file is only convention, but because\neverybody will look for a file with that name, you better not change it.,,A basic,setup.py,file for a Flask application looks like this:,,from,,setuptools,,import,,setup,,setup,(,,name,=,'Your Application',,,,version,=,'1.0',,,,long_description,=,__doc__,,,,packages,=,[,'yourapplication',],,,include_package_data,=,True,,,,zip_safe,=,False,,,,install_requires,=,[,'Flask',],,),,,,Please keep in mind that you have to list subpackages explicitly.  If you\nwant setuptools to lookup the packages for you automatically, you can use\nthe,find_packages,function:,,from,,setuptools,,import,,setup,,,,find_packages,,setup,(,,...,,packages,=,find_packages,(),,),,,,Most parameters to the,setup,function should be self explanatory,,include_package_data,and,zip_safe,might not be.,include_package_data,tells setuptools to look for a,MANIFEST.in,file\nand install all the entries that match as package data.  We will use this\nto distribute the static files and templates along with the Python module\n(see,Distributing Resources,).  The,zip_safe,flag can be used to\nforce or prevent zip Archive creation.  In general you probably don\u2019t want\nyour packages to be installed as zip files because some tools do not\nsupport them and they make debugging a lot harder.,,,,Tagging Builds,\u00b6,,It is useful to distinguish between release and development builds.  Add a,setup.cfg,file to configure these options.,,,[egg_info]\ntag_build = .dev\ntag_date = 1,,[aliases]\nrelease = egg_info -RDb \u2018\u2019,,,Running,python,,setup.py,,sdist,will create a development package\nwith \u201c.dev\u201d and the current date appended:,flaskr-1.0.dev20160314.tar.gz,.\nRunning,python,,setup.py,,release,,sdist,will create a release package\nwith only the version:,flaskr-1.0.tar.gz,.,,,,Distributing Resources,\u00b6,,If you try to install the package you just created, you will notice that\nfolders like,static,or,templates,are not installed for you.  The\nreason for this is that setuptools does not know which files to add for\nyou.  What you should do, is to create a,MANIFEST.in,file next to your,setup.py,file.  This file lists all the files that should be added to\nyour tarball:,,recursive,-,include,,yourapplication,/,templates,,*,,recursive,-,include,,yourapplication,/,static,,*,,,,Don\u2019t forget that even if you enlist them in your,MANIFEST.in,file, they\nwon\u2019t be installed for you unless you set the,include_package_data,parameter of the,setup,function to,True,!,,,,Declaring Dependencies,\u00b6,,Dependencies are declared in the,install_requires,parameter as a list.\nEach item in that list is the name of a package that should be pulled from\nPyPI on installation.  By default it will always use the most recent\nversion, but you can also provide minimum and maximum version\nrequirements.  Here some examples:,,install_requires,=,[,,'Flask>=0.2',,,,'SQLAlchemy>=0.6',,,,'BrokenPackage>=0.7,<=1.0',,],,,,As mentioned earlier, dependencies are pulled from PyPI.  What if you\nwant to depend on a package that cannot be found on PyPI and won\u2019t be\nbecause it is an internal package you don\u2019t want to share with anyone?\nJust do it as if there was a PyPI entry and provide a list of\nalternative locations where setuptools should look for tarballs:,,dependency_links,=,[,'http://example.com/yourfiles',],,,,Make sure that page has a directory listing and the links on the page are\npointing to the actual tarballs with their correct filenames as this is\nhow setuptools will find the files.  If you have an internal company\nserver that contains the packages, provide the URL to that server.,,,,Installing / Developing,\u00b6,,To install your application (ideally into a virtualenv) just run the,setup.py,script with the,install,parameter.  It will install your\napplication into the virtualenv\u2019s site-packages folder and also download\nand install all dependencies:,,$ python setup.py install,,,If you are developing on the package and also want the requirements to be\ninstalled, you can use the,develop,command instead:,,$ python setup.py develop,,,This has the advantage of just installing a link to the site-packages\nfolder instead of copying the data over.  You can then continue to work on\nthe code without having to run,install,again after each change.,,,,,,,,,,,,,Contents,,,Deploying with Setuptools,,Basic Setup Script,,Tagging Builds,,Distributing Resources,,Declaring Dependencies,,Installing / Developing,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,Using URL Processors,,Next:,Deploying with Fabric,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Using URL Processors", "url": "http://flask.pocoo.org/docs/0.12/patterns/urlprocessors/", "content": ",,,,,Using URL Processors \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,Using URL Processors,\u00b6,,,Changelog,,New in version 0.7.,,,Flask 0.7 introduces the concept of URL processors.  The idea is that you\nmight have a bunch of resources with common parts in the URL that you\ndon\u2019t always explicitly want to provide.  For instance you might have a\nbunch of URLs that have the language code in it but you don\u2019t want to have\nto handle it in every single function yourself.,,URL processors are especially helpful when combined with blueprints.  We\nwill handle both application specific URL processors here as well as\nblueprint specifics.,,,Internationalized Application URLs,\u00b6,,Consider an application like this:,,from,,flask,,import,,Flask,,,,g,,app,,=,,Flask,(,__name__,),,@app,.,route,(,'/<lang_code>/',),,def,,index,(,lang_code,):,,g,.,lang_code,,=,,lang_code,,...,,@app,.,route,(,'/<lang_code>/about',),,def,,about,(,lang_code,):,,g,.,lang_code,,=,,lang_code,,...,,,,This is an awful lot of repetition as you have to handle the language code\nsetting on the,g,object yourself in every single function.\nSure, a decorator could be used to simplify this, but if you want to\ngenerate URLs from one function to another you would have to still provide\nthe language code explicitly which can be annoying.,,For the latter, this is where,url_defaults(),functions\ncome in.  They can automatically inject values into a call for,url_for(),automatically.  The code below checks if the\nlanguage code is not yet in the dictionary of URL values and if the\nendpoint wants a value named,'lang_code',:,,@app,.,url_defaults,,def,,add_language_code,(,endpoint,,,,values,):,,if,,'lang_code',,in,,values,,or,,not,,g,.,lang_code,:,,return,,if,,app,.,url_map,.,is_endpoint_expecting,(,endpoint,,,,'lang_code',):,,values,[,'lang_code',],,=,,g,.,lang_code,,,,The method,is_endpoint_expecting(),of the URL\nmap can be used to figure out if it would make sense to provide a language\ncode for the given endpoint.,,The reverse of that function are,url_value_preprocessor(),s.  They are executed right\nafter the request was matched and can execute code based on the URL\nvalues.  The idea is that they pull information out of the values\ndictionary and put it somewhere else:,,@app,.,url_value_preprocessor,,def,,pull_lang_code,(,endpoint,,,,values,):,,g,.,lang_code,,=,,values,.,pop,(,'lang_code',,,,None,),,,,That way you no longer have to do the,lang_code,assignment to,g,in every function.  You can further improve that by\nwriting your own decorator that prefixes URLs with the language code, but\nthe more beautiful solution is using a blueprint.  Once the,'lang_code',is popped from the values dictionary and it will no longer\nbe forwarded to the view function reducing the code to this:,,from,,flask,,import,,Flask,,,,g,,app,,=,,Flask,(,__name__,),,@app,.,url_defaults,,def,,add_language_code,(,endpoint,,,,values,):,,if,,'lang_code',,in,,values,,or,,not,,g,.,lang_code,:,,return,,if,,app,.,url_map,.,is_endpoint_expecting,(,endpoint,,,,'lang_code',):,,values,[,'lang_code',],,=,,g,.,lang_code,,@app,.,url_value_preprocessor,,def,,pull_lang_code,(,endpoint,,,,values,):,,g,.,lang_code,,=,,values,.,pop,(,'lang_code',,,,None,),,@app,.,route,(,'/<lang_code>/',),,def,,index,():,,...,,@app,.,route,(,'/<lang_code>/about',),,def,,about,():,,...,,,,,,Internationalized Blueprint URLs,\u00b6,,Because blueprints can automatically prefix all URLs with a common string\nit\u2019s easy to automatically do that for every function.  Furthermore\nblueprints can have per-blueprint URL processors which removes a whole lot\nof logic from the,url_defaults(),function because it no\nlonger has to check if the URL is really interested in a,'lang_code',parameter:,,from,,flask,,import,,Blueprint,,,,g,,bp,,=,,Blueprint,(,'frontend',,,,__name__,,,,url_prefix,=,'/<lang_code>',),,@bp,.,url_defaults,,def,,add_language_code,(,endpoint,,,,values,):,,values,.,setdefault,(,'lang_code',,,,g,.,lang_code,),,@bp,.,url_value_preprocessor,,def,,pull_lang_code,(,endpoint,,,,values,):,,g,.,lang_code,,=,,values,.,pop,(,'lang_code',),,@bp,.,route,(,'/',),,def,,index,():,,...,,@bp,.,route,(,'/about',),,def,,about,():,,...,,,,,,,,,,,,,,,Contents,,,Using URL Processors,,Internationalized Application URLs,,Internationalized Blueprint URLs,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,Implementing API Exceptions,,Next:,Deploying with Setuptools,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Implementing API Exceptions", "url": "http://flask.pocoo.org/docs/0.12/patterns/apierrors/", "content": ",,,,,Implementing API Exceptions \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,Implementing API Exceptions,\u00b6,,It\u2019s very common to implement RESTful APIs on top of Flask.  One of the\nfirst things that developers run into is the realization that the builtin\nexceptions are not expressive enough for APIs and that the content type of,text/html,they are emitting is not very useful for API consumers.,,The better solution than using,abort,to signal errors for invalid API\nusage is to implement your own exception type and install an error handler\nfor it that produces the errors in the format the user is expecting.,,,Simple Exception Class,\u00b6,,The basic idea is to introduce a new exception that can take a proper\nhuman readable message, a status code for the error and some optional\npayload to give more context for the error.,,This is a simple example:,,from,,flask,,import,,jsonify,,class,,InvalidUsage,(,Exception,):,,status_code,,=,,400,,def,,__init__,(,self,,,,message,,,,status_code,=,None,,,,payload,=,None,):,,Exception,.,__init__,(,self,),,self,.,message,,=,,message,,if,,status_code,,is,,not,,None,:,,self,.,status_code,,=,,status_code,,self,.,payload,,=,,payload,,def,,to_dict,(,self,):,,rv,,=,,dict,(,self,.,payload,,or,,()),,rv,[,'message',],,=,,self,.,message,,return,,rv,,,,A view can now raise that exception with an error message.  Additionally\nsome extra payload can be provided as a dictionary through the,payload,parameter.,,,,Registering an Error Handler,\u00b6,,At that point views can raise that error, but it would immediately result\nin an internal server error.  The reason for this is that there is no\nhandler registered for this error class.  That however is easy to add:,,@app,.,errorhandler,(,InvalidUsage,),,def,,handle_invalid_usage,(,error,):,,response,,=,,jsonify,(,error,.,to_dict,()),,response,.,status_code,,=,,error,.,status_code,,return,,response,,,,,,Usage in Views,\u00b6,,Here is how a view can use that functionality:,,@app,.,route,(,'/foo',),,def,,get_foo,():,,raise,,InvalidUsage,(,'This view is gone',,,,status_code,=,410,),,,,,,,,,,,,,,,Contents,,,Implementing API Exceptions,,Simple Exception Class,,Registering an Error Handler,,Usage in Views,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,Application Dispatching,,Next:,Using URL Processors,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Application Factories", "url": "http://flask.pocoo.org/docs/0.12/patterns/appfactories/", "content": ",,,,,Application Factories \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,Application Factories,\u00b6,,If you are already using packages and blueprints for your application\n(,Modular Applications with Blueprints,) there are a couple of really nice ways to further improve\nthe experience.  A common pattern is creating the application object when\nthe blueprint is imported.  But if you move the creation of this object\ninto a function, you can then create multiple instances of this app later.,,So why would you want to do this?,,,Testing.  You can have instances of the application with different\nsettings to test every case.,,Multiple instances.  Imagine you want to run different versions of the\nsame application.  Of course you could have multiple instances with\ndifferent configs set up in your webserver, but if you use factories,\nyou can have multiple instances of the same application running in the\nsame application process which can be handy.,,,So how would you then actually implement that?,,,Basic Factories,\u00b6,,The idea is to set up the application in a function.  Like this:,,def,,create_app,(,config_filename,):,,app,,=,,Flask,(,__name__,),,app,.,config,.,from_pyfile,(,config_filename,),,from,,yourapplication.model,,import,,db,,db,.,init_app,(,app,),,from,,yourapplication.views.admin,,import,,admin,,from,,yourapplication.views.frontend,,import,,frontend,,app,.,register_blueprint,(,admin,),,app,.,register_blueprint,(,frontend,),,return,,app,,,,The downside is that you cannot use the application object in the blueprints\nat import time.  You can however use it from within a request.  How do you\nget access to the application with the config?  Use,current_app,:,,from,,flask,,import,,current_app,,,,Blueprint,,,,render_template,,admin,,=,,Blueprint,(,'admin',,,,__name__,,,,url_prefix,=,'/admin',),,@admin,.,route,(,'/',),,def,,index,():,,return,,render_template,(,current_app,.,config,[,'INDEX_TEMPLATE',]),,,,Here we look up the name of a template in the config.,,,,Factories & Extensions,\u00b6,,It\u2019s preferable to create your extensions and app factories so that the\nextension object does not initially get bound to the application.,,Using,Flask-SQLAlchemy,,\nas an example, you should not do something along those lines:,,def,,create_app,(,config_filename,):,,app,,=,,Flask,(,__name__,),,app,.,config,.,from_pyfile,(,config_filename,),,db,,=,,SQLAlchemy,(,app,),,,,But, rather, in model.py (or equivalent):,,db,,=,,SQLAlchemy,(),,,,and in your application.py (or equivalent):,,def,,create_app,(,config_filename,):,,app,,=,,Flask,(,__name__,),,app,.,config,.,from_pyfile,(,config_filename,),,from,,yourapplication.model,,import,,db,,db,.,init_app,(,app,),,,,Using this design pattern, no application-specific state is stored on the\nextension object, so one extension object can be used for multiple apps.\nFor more information about the design of extensions refer to,Flask Extension Development,.,,,,Using Applications,\u00b6,,So to use such an application you then have to create the application\nfirst in a separate file otherwise the,flask,command won\u2019t be able\nto find it.  Here an example,exampleapp.py,file that creates such\nan application:,,from,,yourapplication,,import,,create_app,,app,,=,,create_app,(,'/path/to/config.cfg',),,,,It can then be used with the,flask,command:,,export,,FLASK_APP,=,exampleapp,,flask,,run,,,,,,Factory Improvements,\u00b6,,The factory function from above is not very clever so far, you can improve\nit.  The following changes are straightforward and possible:,,,make it possible to pass in configuration values for unittests so that\nyou don\u2019t have to create config files on the filesystem,,call a function from a blueprint when the application is setting up so\nthat you have a place to modify attributes of the application (like\nhooking in before / after request handlers etc.),,Add in WSGI middlewares when the application is creating if necessary.,,,,,,,,,,,,,,Contents,,,Application Factories,,Basic Factories,,Factories & Extensions,,Using Applications,,Factory Improvements,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,Larger Applications,,Next:,Application Dispatching,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Larger Applications", "url": "http://flask.pocoo.org/docs/0.12/patterns/packages/", "content": ",,,,,Larger Applications \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,Larger Applications,\u00b6,,For larger applications it\u2019s a good idea to use a package instead of a\nmodule.  That is quite simple.  Imagine a small application looks like\nthis:,,/,yourapplication,,yourapplication,.,py,,/,static,,style,.,css,,/,templates,,layout,.,html,,index,.,html,,login,.,html,,...,,,,,Simple Packages,\u00b6,,To convert that into a larger one, just create a new folder,yourapplication,inside the existing one and move everything below it.\nThen rename,yourapplication.py,to,__init__.py,.  (Make sure to delete\nall,.pyc,files first, otherwise things would most likely break),,You should then end up with something like that:,,/,yourapplication,,/,yourapplication,,__init__,.,py,,/,static,,style,.,css,,/,templates,,layout,.,html,,index,.,html,,login,.,html,,...,,,,But how do you run your application now?  The naive,python,,yourapplication/__init__.py,will not work.  Let\u2019s just say that Python\ndoes not want modules in packages to be the startup file.  But that is not\na big problem, just add a new file called,setup.py,next to the inner,yourapplication,folder with the following contents:,,from,,setuptools,,import,,setup,,setup,(,,name,=,'yourapplication',,,,packages,=,[,'yourapplication',],,,include_package_data,=,True,,,,install_requires,=,[,,'flask',,,,],,,),,,,In order to run the application you need to export an environment variable\nthat tells Flask where to find the application instance:,,export,,FLASK_APP,=,yourapplication,,,,If you are outside of the project directory make sure to provide the exact\npath to your application directory. Similiarly you can turn on \u201cdebug\nmode\u201d with this environment variable:,,export,,FLASK_DEBUG,=,true,,,,In order to install and run the application you need to issue the following\ncommands:,,pip,,install,,-,e,,.,,flask,,run,,,,What did we gain from this?  Now we can restructure the application a bit\ninto multiple modules.  The only thing you have to remember is the\nfollowing quick checklist:,,,the,Flask,application object creation has to be in the,__init__.py,file.  That way each module can import it safely and the,__name__,variable will resolve to the correct package.,,all the view functions (the ones with a,route(),decorator on top) have to be imported in the,__init__.py,file.\nNot the object itself, but the module it is in. Import the view module,after the application object is created,.,,,Here\u2019s an example,__init__.py,:,,from,,flask,,import,,Flask,,app,,=,,Flask,(,__name__,),,import,,yourapplication.views,,,,And this is what,views.py,would look like:,,from,,yourapplication,,import,,app,,@app,.,route,(,'/',),,def,,index,():,,return,,'Hello World!',,,,You should then end up with something like that:,,/,yourapplication,,setup,.,py,,/,yourapplication,,__init__,.,py,,views,.,py,,/,static,,style,.,css,,/,templates,,layout,.,html,,index,.,html,,login,.,html,,...,,,,,Circular Imports,,Every Python programmer hates them, and yet we just added some:\ncircular imports (That\u2019s when two modules depend on each other.  In this\ncase,views.py,depends on,__init__.py,).  Be advised that this is a\nbad idea in general but here it is actually fine.  The reason for this is\nthat we are not actually using the views in,__init__.py,and just\nensuring the module is imported and we are doing that at the bottom of\nthe file.,,There are still some problems with that approach but if you want to use\ndecorators there is no way around that.  Check out the,Becoming Big,section for some inspiration how to deal with that.,,,,,Working with Blueprints,\u00b6,,If you have larger applications it\u2019s recommended to divide them into\nsmaller groups where each group is implemented with the help of a\nblueprint.  For a gentle introduction into this topic refer to the,Modular Applications with Blueprints,chapter of the documentation.,,,,,,,,,,,,,Contents,,,Larger Applications,,Simple Packages,,Working with Blueprints,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,Patterns for Flask,,Next:,Application Factories,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Working with the Shell", "url": "http://flask.pocoo.org/docs/0.12/shell/", "content": ",,,,,Working with the Shell \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,Working with the Shell,\u00b6,,,Changelog,,New in version 0.3.,,,One of the reasons everybody loves Python is the interactive shell.  It\nbasically allows you to execute Python commands in real time and\nimmediately get results back.  Flask itself does not come with an\ninteractive shell, because it does not require any specific setup upfront,\njust import your application and start playing around.,,There are however some handy helpers to make playing around in the shell a\nmore pleasant experience.  The main issue with interactive console\nsessions is that you\u2019re not triggering a request like a browser does which\nmeans that,g,,,request,and others are not\navailable.  But the code you want to test might depend on them, so what\ncan you do?,,This is where some helper functions come in handy.  Keep in mind however\nthat these functions are not only there for interactive shell usage, but\nalso for unittesting and other situations that require a faked request\ncontext.,,Generally it\u2019s recommended that you read the,The Request Context,chapter of the documentation first.,,,Command Line Interface,\u00b6,,Starting with Flask 0.11 the recommended way to work with the shell is the,flask,,shell,command which does a lot of this automatically for you.\nFor instance the shell is automatically initialized with a loaded\napplication context.,,For more information see,Command Line Interface,.,,,,Creating a Request Context,\u00b6,,The easiest way to create a proper request context from the shell is by\nusing the,test_request_context,method which creates\nus a,RequestContext,:,,>>>,ctx,,=,,app,.,test_request_context,(),,,,Normally you would use the,with,statement to make this request object\nactive, but in the shell it\u2019s easier to use the,push(),and,pop(),methods by hand:,,>>>,ctx,.,push,(),,,,From that point onwards you can work with the request object until you\ncall,pop,:,,>>>,ctx,.,pop,(),,,,,,Firing Before/After Request,\u00b6,,By just creating a request context, you still don\u2019t have run the code that\nis normally run before a request.  This might result in your database\nbeing unavailable if you are connecting to the database in a\nbefore-request callback or the current user not being stored on the,g,object etc.,,This however can easily be done yourself.  Just call,preprocess_request(),:,,>>>,ctx,,=,,app,.,test_request_context,(),,>>>,ctx,.,push,(),,>>>,app,.,preprocess_request,(),,,,Keep in mind that the,preprocess_request(),function\nmight return a response object, in that case just ignore it.,,To shutdown a request, you need to trick a bit before the after request\nfunctions (triggered by,process_response(),) operate on\na response object:,,>>>,app,.,process_response,(,app,.,response_class,()),,<Response 0 bytes [200 OK]>,,>>>,ctx,.,pop,(),,,,The functions registered as,teardown_request(),are\nautomatically called when the context is popped.  So this is the perfect\nplace to automatically tear down resources that were needed by the request\ncontext (such as database connections).,,,,Further Improving the Shell Experience,\u00b6,,If you like the idea of experimenting in a shell, create yourself a module\nwith stuff you want to star import into your interactive session.  There\nyou could also define some more helper methods for common things such as\ninitializing the database, dropping tables etc.,,Just put them into a module (like,shelltools,) and import from there:,,>>>,from,,shelltools,,import,,*,,,,,,,,,,,,,,,Contents,,,Working with the Shell,,Command Line Interface,,Creating a Request Context,,Firing Before/After Request,,Further Improving the Shell Experience,,,,,Navigation,,,Overview,,,Previous:,Development Server,,Next:,Patterns for Flask,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Development Server", "url": "http://flask.pocoo.org/docs/0.12/server/", "content": ",,,,,Development Server \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,Development Server,\u00b6,,Starting with Flask 0.11 there are multiple built-in ways to run a\ndevelopment server.  The best one is the,flask,command line utility\nbut you can also continue using the,Flask.run(),method.,,,Command Line,\u00b6,,The,flask,command line script (,Command Line Interface,) is strongly recommended for\ndevelopment because it provides a superior reload experience due to how it\nloads the application.  The basic usage is like this:,,$ export FLASK_APP=my_application\n$ export FLASK_DEBUG=1\n$ flask run,,,This will enable the debugger, the reloader and then start the server on,http://localhost:5000/,.,,The individual features of the server can be controlled by passing more\narguments to the,run,option.  For instance the reloader can be\ndisabled:,,$ flask run --no-reload,,,,,In Code,\u00b6,,The alternative way to start the application is through the,Flask.run(),method.  This will immediately launch a local server\nexactly the same way the,flask,script does.,,Example:,,if,,__name__,,==,,'__main__',:,,app,.,run,(),,,,This works well for the common case but it does not work well for\ndevelopment which is why from Flask 0.11 onwards the,flask,method is recommended.  The reason for this is that due to how the reload\nmechanism works there are some bizarre side-effects (like executing\ncertain code twice, sometimes crashing without message or dying when a\nsyntax or import error happens).,,It is however still a perfectly valid method for invoking a non automatic\nreloading application.,,,,,,,,,,,,,Contents,,,Development Server,,Command Line,,In Code,,,,,Navigation,,,Overview,,,Previous:,Command Line Interface,,Next:,Working with the Shell,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Command Line Interface", "url": "http://flask.pocoo.org/docs/0.12/cli/", "content": ",,,,,Command Line Interface \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,Command Line Interface,\u00b6,,,Changelog,,New in version 0.11.,,,One of the nice new features in Flask 0.11 is the built-in integration of\nthe,click,command line interface.  This\nenables a wide range of new features for the Flask ecosystem and your own\napplications.,,,Basic Usage,\u00b6,,After installation of Flask you will now find a,flask,script\ninstalled into your virtualenv.  If you don\u2019t want to install Flask or you\nhave a special use-case you can also use,python,,-m,,flask,to accomplish\nexactly the same.,,The way this script works is by providing access to all the commands on\nyour Flask application\u2019s,Flask.cli,instance as well as some\nbuilt-in commands that are always there.  Flask extensions can also\nregister more commands there if they desire so.,,For the,flask,script to work, an application needs to be\ndiscovered.  This is achieved by exporting the,FLASK_APP,environment\nvariable.  It can be either set to an import path or to a filename of a\nPython module that contains a Flask application.,,In that imported file the name of the app needs to be called,app,or\noptionally be specified after a colon.  For instance,mymodule:application,would tell it to use the,application,object in\nthe,mymodule.py,file.,,Given a,hello.py,file with the application in it named,app,this is how it can be run.,,Environment variables (On Windows use,set,instead of,export,):,,export,,FLASK_APP,=,hello,,flask,,run,,,,Or with a filename:,,export,,FLASK_APP,=/,path,/,to,/,hello,.,py,,flask,,run,,,,,,Virtualenv Integration,\u00b6,,If you are constantly working with a virtualenv you can also put the,export,,FLASK_APP,into your,activate,script by adding it to the\nbottom of the file.  That way every time you activate your virtualenv you\nautomatically also activate the correct application name.,,,,Debug Flag,\u00b6,,The,flask,script can also be instructed to enable the debug\nmode of the application automatically by exporting,FLASK_DEBUG,.  If\nset to,1,debug is enabled or,0,disables it:,,export,,FLASK_DEBUG,=,1,,,,,,Running a Shell,\u00b6,,To run an interactive Python shell you can use the,shell,command:,,flask,,shell,,,,This will start up an interactive Python shell, setup the correct\napplication context and setup the local variables in the shell.  This is\ndone by invoking the,Flask.make_shell_context(),method of the\napplication.  By default you have access to your,app,and,g,.,,,,Custom Commands,\u00b6,,If you want to add more commands to the shell script you can do this\neasily.  Flask uses,click,for the command interface which makes\ncreating custom commands very easy.  For instance if you want a shell\ncommand to initialize the database you can do this:,,import,,click,,from,,flask,,import,,Flask,,app,,=,,Flask,(,__name__,),,@app,.,cli,.,command,(),,def,,initdb,():,,\"\"\"Initialize the database.\"\"\",,click,.,echo,(,'Init the db',),,,,The command will then show up on the command line:,,$ flask initdb\nInit the db,,,,,Application Context,\u00b6,,Most commands operate on the application so it makes a lot of sense if\nthey have the application context setup.  Because of this, if you register\na callback on,app.cli,with the,command(),the\ncallback will automatically be wrapped through,cli.with_appcontext(),which informs the cli system to ensure that an application context is set\nup.  This behavior is not available if a command is added later with,add_command(),or through other means.,,It can also be disabled by passing,with_appcontext=False,to the\ndecorator:,,@app,.,cli,.,command,(,with_appcontext,=,False,),,def,,example,():,,pass,,,,,,Factory Functions,\u00b6,,In case you are using factory functions to create your application (see,Application Factories,) you will discover that the,flask,command\ncannot work with them directly.  Flask won\u2019t be able to figure out how to\ninstantiate your application properly by itself.  Because of this reason\nthe recommendation is to create a separate file that instantiates\napplications.  This is not the only way to make this work.  Another is the,Custom Scripts,support.,,For instance if you have a factory function that creates an application\nfrom a filename you could make a separate file that creates such an\napplication from an environment variable.,,This could be a file named,autoapp.py,with these contents:,,import,,os,,from,,yourapplication,,import,,create_app,,app,,=,,create_app,(,os,.,environ,[,'YOURAPPLICATION_CONFIG',]),,,,Once this has happened you can make the,flask,command automatically\npick it up:,,export,,YOURAPPLICATION_CONFIG,=/,path,/,to,/,config,.,cfg,,export,,FLASK_APP,=/,path,/,to,/,autoapp,.,py,,,,From this point onwards,flask,will find your application.,,,,Custom Scripts,\u00b6,,While the most common way is to use the,flask,command, you can\nalso make your own \u201cdriver scripts\u201d.  Since Flask uses click for the\nscripts there is no reason you cannot hook these scripts into any click\napplication.  There is one big caveat and that is, that commands\nregistered to,Flask.cli,will expect to be (indirectly at least)\nlaunched from a,flask.cli.FlaskGroup,click group.  This is\nnecessary so that the commands know which Flask application they have to\nwork with.,,To understand why you might want custom scripts you need to understand how\nclick finds and executes the Flask application.  If you use the,flask,script you specify the application to work with on the\ncommand line or environment variable as an import name.  This is simple\nbut it has some limitations.  Primarily it does not work with application\nfactory functions (see,Application Factories,).,,With a custom script you don\u2019t have this problem as you can fully\ncustomize how the application will be created.  This is very useful if you\nwrite reusable applications that you want to ship to users and they should\nbe presented with a custom management script.,,To explain all of this, here is an example,manage.py,script that\nmanages a hypothetical wiki application.  We will go through the details\nafterwards:,,import,,os,,import,,click,,from,,flask.cli,,import,,FlaskGroup,,def,,create_wiki_app,(,info,):,,from,,yourwiki,,import,,create_app,,return,,create_app,(,,config,=,os,.,environ,.,get,(,'WIKI_CONFIG',,,,'wikiconfig.py',)),,@click,.,group,(,cls,=,FlaskGroup,,,,create_app,=,create_wiki_app,),,def,,cli,():,,\"\"\"This is a management script for the wiki application.\"\"\",,if,,__name__,,==,,'__main__',:,,cli,(),,,,That\u2019s a lot of code for not much, so let\u2019s go through all parts step by\nstep.,,,First we import the,click,library as well as the click extensions\nfrom the,flask.cli,package.  Primarily we are here interested\nin the,FlaskGroup,click group.,,,The next thing we do is defining a function that is invoked with the\nscript info object (,ScriptInfo,) from Flask and its\npurpose is to fully import and create the application.  This can\neither directly import an application object or create it (see,Application Factories,).  In this case we load the config from an\nenvironment variable.,,,Next step is to create a,FlaskGroup,.  In this case we just\nmake an empty function with a help doc string that just does nothing\nand then pass the,create_wiki_app,function as a factory function.,,Whenever click now needs to operate on a Flask application it will\ncall that function with the script info and ask for it to be created.,,,All is rounded up by invoking the script.,,,,,,CLI Plugins,\u00b6,,Flask extensions can always patch the,Flask.cli,instance with more\ncommands if they want.  However there is a second way to add CLI plugins\nto Flask which is through,setuptools,.  If you make a Python package that\nshould export a Flask command line plugin you can ship a,setup.py,file\nthat declares an entrypoint that points to a click command:,,Example,setup.py,:,,from,,setuptools,,import,,setup,,setup,(,,name,=,'flask-my-extension',,,,...,,entry_points,=,''',,[flask.commands],,my-command=mypackage.commands:cli,,''',,,,),,,,Inside,mypackage/commands.py,you can then export a Click object:,,import,,click,,@click,.,command,(),,def,,cli,():,,\"\"\"This is an example command.\"\"\",,,,Once that package is installed in the same virtualenv as Flask itself you\ncan run,flask,,my-command,to invoke your command.  This is useful to\nprovide extra functionality that Flask itself cannot ship.,,,,,,,,,,,,,Contents,,,Command Line Interface,,Basic Usage,,Virtualenv Integration,,Debug Flag,,Running a Shell,,Custom Commands,,Application Context,,Factory Functions,,Custom Scripts,,CLI Plugins,,,,,Navigation,,,Overview,,,Previous:,Flask Extensions,,Next:,Development Server,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Flask Extensions", "url": "http://flask.pocoo.org/docs/0.12/extensions/", "content": ",,,,,Flask Extensions \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,Flask Extensions,\u00b6,,Flask extensions extend the functionality of Flask in various different\nways.  For instance they add support for databases and other common tasks.,,,Finding Extensions,\u00b6,,Flask extensions are listed on the,Flask Extension Registry,and can be\ndownloaded with,easy_install,or,pip,.  If you add a Flask extension\nas dependency to your,requirements.txt,or,setup.py,file they are\nusually installed with a simple command or when your application installs.,,,,Using Extensions,\u00b6,,Extensions typically have documentation that goes along that shows how to\nuse it.  There are no general rules in how extensions are supposed to\nbehave but they are imported from common locations.  If you have an\nextension called,Flask-Foo,or,Foo-Flask,it should be always\nimportable from,flask_foo,:,,import,,flask_foo,,,,,,Building Extensions,\u00b6,,While,Flask Extension Registry,contains many Flask extensions, you may not find\nan extension that fits your need. If this is the case, you can always create your own.\nConsider reading,Flask Extension Development,to develop your own Flask extension.,,,,,,,,,,,,,Contents,,,Flask Extensions,,Finding Extensions,,Using Extensions,,Building Extensions,,,,,Navigation,,,Overview,,,Previous:,Modular Applications with Blueprints,,Next:,Command Line Interface,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Application Dispatching", "url": "http://flask.pocoo.org/docs/0.12/patterns/appdispatch/", "content": ",,,,,Application Dispatching \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,Patterns for Flask,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,Application Dispatching,\u00b6,,Application dispatching is the process of combining multiple Flask\napplications on the WSGI level.  You can combine not only Flask\napplications but any WSGI application.  This would allow you to run a\nDjango and a Flask application in the same interpreter side by side if\nyou want.  The usefulness of this depends on how the applications work\ninternally.,,The fundamental difference from the,module approach,is that in this case you are running the same or\ndifferent Flask applications that are entirely isolated from each other.\nThey run different configurations and are dispatched on the WSGI level.,,,Working with this Document,\u00b6,,Each of the techniques and examples below results in an,application,object\nthat can be run with any WSGI server.  For production, see,Deployment Options,.\nFor development, Werkzeug provides a builtin server for development available\nat,werkzeug.serving.run_simple(),:,,from,,werkzeug.serving,,import,,run_simple,,run_simple,(,'localhost',,,,5000,,,,application,,,,use_reloader,=,True,),,,,Note that,run_simple,is not intended for\nuse in production.  Use a,full-blown WSGI server,.,,In order to use the interactive debugger, debugging must be enabled both on\nthe application and the simple server. Here is the \u201chello world\u201d example with\ndebugging and,run_simple,:,,from,,flask,,import,,Flask,,from,,werkzeug.serving,,import,,run_simple,,app,,=,,Flask,(,__name__,),,app,.,debug,,=,,True,,@app,.,route,(,'/',),,def,,hello_world,():,,return,,'Hello World!',,if,,__name__,,==,,'__main__',:,,run_simple,(,'localhost',,,,5000,,,,app,,,,use_reloader,=,True,,,,use_debugger,=,True,,,,use_evalex,=,True,),,,,,,Combining Applications,\u00b6,,If you have entirely separated applications and you want them to work next\nto each other in the same Python interpreter process you can take\nadvantage of the,werkzeug.wsgi.DispatcherMiddleware,.  The idea\nhere is that each Flask application is a valid WSGI application and they\nare combined by the dispatcher middleware into a larger one that is\ndispatched based on prefix.,,For example you could have your main application run on,/,and your\nbackend interface on,/backend,:,,from,,werkzeug.wsgi,,import,,DispatcherMiddleware,,from,,frontend_app,,import,,application,,as,,frontend,,from,,backend_app,,import,,application,,as,,backend,,application,,=,,DispatcherMiddleware,(,frontend,,,,{,,'/backend',:,,backend,,}),,,,,,Dispatch by Subdomain,\u00b6,,Sometimes you might want to use multiple instances of the same application\nwith different configurations.  Assuming the application is created inside\na function and you can call that function to instantiate it, that is\nreally easy to implement.  In order to develop your application to support\ncreating new instances in functions have a look at the,Application Factories,pattern.,,A very common example would be creating applications per subdomain.  For\ninstance you configure your webserver to dispatch all requests for all\nsubdomains to your application and you then use the subdomain information\nto create user-specific instances.  Once you have your server set up to\nlisten on all subdomains you can use a very simple WSGI application to do\nthe dynamic application creation.,,The perfect level for abstraction in that regard is the WSGI layer.  You\nwrite your own WSGI application that looks at the request that comes and\ndelegates it to your Flask application.  If that application does not\nexist yet, it is dynamically created and remembered:,,from,,threading,,import,,Lock,,class,,SubdomainDispatcher,(,object,):,,def,,__init__,(,self,,,,domain,,,,create_app,):,,self,.,domain,,=,,domain,,self,.,create_app,,=,,create_app,,self,.,lock,,=,,Lock,(),,self,.,instances,,=,,{},,def,,get_application,(,self,,,,host,):,,host,,=,,host,.,split,(,':',)[,0,],,assert,,host,.,endswith,(,self,.,domain,),,,'Configuration error',,subdomain,,=,,host,[:,-,len,(,self,.,domain,)],.,rstrip,(,'.',),,with,,self,.,lock,:,,app,,=,,self,.,instances,.,get,(,subdomain,),,if,,app,,is,,None,:,,app,,=,,self,.,create_app,(,subdomain,),,self,.,instances,[,subdomain,],,=,,app,,return,,app,,def,,__call__,(,self,,,,environ,,,,start_response,):,,app,,=,,self,.,get_application,(,environ,[,'HTTP_HOST',]),,return,,app,(,environ,,,,start_response,),,,,This dispatcher can then be used like this:,,from,,myapplication,,import,,create_app,,,,get_user_for_subdomain,,from,,werkzeug.exceptions,,import,,NotFound,,def,,make_app,(,subdomain,):,,user,,=,,get_user_for_subdomain,(,subdomain,),,if,,user,,is,,None,:,,# if there is no user for that subdomain we still have,,# to return a WSGI application that handles that request.,,# We can then just return the NotFound() exception as,,# application which will render a default 404 page.,,# You might also redirect the user to the main page then,,return,,NotFound,(),,# otherwise create the application for the specific user,,return,,create_app,(,user,),,application,,=,,SubdomainDispatcher,(,'example.com',,,,make_app,),,,,,,Dispatch by Path,\u00b6,,Dispatching by a path on the URL is very similar.  Instead of looking at\nthe,Host,header to figure out the subdomain one simply looks at the\nrequest path up to the first slash:,,from,,threading,,import,,Lock,,from,,werkzeug.wsgi,,import,,pop_path_info,,,,peek_path_info,,class,,PathDispatcher,(,object,):,,def,,__init__,(,self,,,,default_app,,,,create_app,):,,self,.,default_app,,=,,default_app,,self,.,create_app,,=,,create_app,,self,.,lock,,=,,Lock,(),,self,.,instances,,=,,{},,def,,get_application,(,self,,,,prefix,):,,with,,self,.,lock,:,,app,,=,,self,.,instances,.,get,(,prefix,),,if,,app,,is,,None,:,,app,,=,,self,.,create_app,(,prefix,),,if,,app,,is,,not,,None,:,,self,.,instances,[,prefix,],,=,,app,,return,,app,,def,,__call__,(,self,,,,environ,,,,start_response,):,,app,,=,,self,.,get_application,(,peek_path_info,(,environ,)),,if,,app,,is,,not,,None,:,,pop_path_info,(,environ,),,else,:,,app,,=,,self,.,default_app,,return,,app,(,environ,,,,start_response,),,,,The big difference between this and the subdomain one is that this one\nfalls back to another application if the creator function returns,None,:,,from,,myapplication,,import,,create_app,,,,default_app,,,,get_user_for_prefix,,def,,make_app,(,prefix,):,,user,,=,,get_user_for_prefix,(,prefix,),,if,,user,,is,,not,,None,:,,return,,create_app,(,user,),,application,,=,,PathDispatcher,(,default_app,,,,make_app,),,,,,,,,,,,,,,,Contents,,,Application Dispatching,,Working with this Document,,Combining Applications,,Dispatch by Subdomain,,Dispatch by Path,,,,,Navigation,,,Overview,,,Patterns for Flask,,,Previous:,Application Factories,,Next:,Implementing API Exceptions,,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "librelist archives", "url": "http://librelist.com/browser/flask/2012/10/5/change-static-folder-from-configuration-file/", "content": "Change static_folder From Configuration File,,,,,,,librelist archives,,,home,//,archives,//,,\u00ab back to archive,,Change static_folder From Configuration File,,,Change static_folder From Configuration File,by Ji Zhang,,,Re: [flask] Change static_folder From Configuration File,by Simon Sapin,,,,,Change static_folder From Configuration File,,,From:,Ji Zhang,Date:,2012-10-05 @ 10:25,,Hi,\n\nI can change the static_folder when I create the app, like:\n\napp = Flask(__name__, static_folder='static-built')\n\nBut what if I wanna get it done in a configuration file?\n\n# config.py\nSTATIC_FOLDER = 'static-built'\n\n# __init__.py\napp = Flask(__name__)\napp.config.from_object('foo.config')\n\nThanks.,,,,Re: [flask] Change static_folder From Configuration File,,,From:,Simon Sapin,Date:,2012-10-05 @ 12:04,,Le 05/10/2012 12:25, Ji Zhang a \u00e9crit :,> Hi,,,>,,> I can change the static_folder when I create the app, like:,,>,,> app = Flask(__name__, static_folder='static-built'),,>,,> But what if I wanna get it done in a configuration file?,,>,,> # config.py,,> STATIC_FOLDER = 'static-built',,>,,> # __init__.py,,> app = Flask(__name__),,> app.config.from_object('foo.config'),Hi,\n\nThis could be done by overriding the static_folder property in a \nsubclass. I wrote a code example in a snippet:\n\nhttp://flask.pocoo.org/snippets/102/\n\nCheers,,--,,Simon Sapin,,,,,Archives based on code by,Armin Ronacher,//"},
{"name": "Modular Applications with Blueprints", "url": "http://flask.pocoo.org/docs/0.12/blueprints/", "content": ",,,,,Modular Applications with Blueprints \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,Modular Applications with Blueprints,\u00b6,,,Changelog,,New in version 0.7.,,,Flask uses a concept of,blueprints,for making application components and\nsupporting common patterns within an application or across applications.\nBlueprints can greatly simplify how large applications work and provide a\ncentral means for Flask extensions to register operations on applications.\nA,Blueprint,object works similarly to a,Flask,application object, but it is not actually an application.  Rather it is a,blueprint,of how to construct or extend an application.,,,Why Blueprints?,\u00b6,,Blueprints in Flask are intended for these cases:,,,Factor an application into a set of blueprints.  This is ideal for\nlarger applications; a project could instantiate an application object,\ninitialize several extensions, and register a collection of blueprints.,,Register a blueprint on an application at a URL prefix and/or subdomain.\nParameters in the URL prefix/subdomain become common view arguments\n(with defaults) across all view functions in the blueprint.,,Register a blueprint multiple times on an application with different URL\nrules.,,Provide template filters, static files, templates, and other utilities\nthrough blueprints.  A blueprint does not have to implement applications\nor view functions.,,Register a blueprint on an application for any of these cases when\ninitializing a Flask extension.,,,A blueprint in Flask is not a pluggable app because it is not actually an\napplication \u2013 it\u2019s a set of operations which can be registered on an\napplication, even multiple times.  Why not have multiple application\nobjects?  You can do that (see,Application Dispatching,), but your applications\nwill have separate configs and will be managed at the WSGI layer.,,Blueprints instead provide separation at the Flask level, share\napplication config, and can change an application object as necessary with\nbeing registered. The downside is that you cannot unregister a blueprint\nonce an application was created without having to destroy the whole\napplication object.,,,,The Concept of Blueprints,\u00b6,,The basic concept of blueprints is that they record operations to execute\nwhen registered on an application.  Flask associates view functions with\nblueprints when dispatching requests and generating URLs from one endpoint\nto another.,,,,My First Blueprint,\u00b6,,This is what a very basic blueprint looks like.  In this case we want to\nimplement a blueprint that does simple rendering of static templates:,,from,,flask,,import,,Blueprint,,,,render_template,,,,abort,,from,,jinja2,,import,,TemplateNotFound,,simple_page,,=,,Blueprint,(,'simple_page',,,,__name__,,,,template_folder,=,'templates',),,@simple_page,.,route,(,'/',,,,defaults,=,{,'page',:,,'index',}),,@simple_page,.,route,(,'/<page>',),,def,,show,(,page,):,,try,:,,return,,render_template,(,'pages/,%s,.html',,%,,page,),,except,,TemplateNotFound,:,,abort,(,404,),,,,When you bind a function with the help of the,@simple_page.route,decorator the blueprint will record the intention of registering the\nfunction,show,on the application when it\u2019s later registered.\nAdditionally it will prefix the endpoint of the function with the\nname of the blueprint which was given to the,Blueprint,constructor (in this case also,simple_page,).,,,,Registering Blueprints,\u00b6,,So how do you register that blueprint?  Like this:,,from,,flask,,import,,Flask,,from,,yourapplication.simple_page,,import,,simple_page,,app,,=,,Flask,(,__name__,),,app,.,register_blueprint,(,simple_page,),,,,If you check the rules registered on the application, you will find\nthese:,,[,<,Rule,,'/static/<filename>',,(,HEAD,,,,OPTIONS,,,,GET,),,->,,static,>,,,,<,Rule,,'/<page>',,(,HEAD,,,,OPTIONS,,,,GET,),,->,,simple_page,.,show,>,,,,<,Rule,,'/',,(,HEAD,,,,OPTIONS,,,,GET,),,->,,simple_page,.,show,>,],,,,The first one is obviously from the application itself for the static\nfiles.  The other two are for the,show,function of the,simple_page,blueprint.  As you can see, they are also prefixed with the name of the\nblueprint and separated by a dot (,.,).,,Blueprints however can also be mounted at different locations:,,app,.,register_blueprint,(,simple_page,,,,url_prefix,=,'/pages',),,,,And sure enough, these are the generated rules:,,[,<,Rule,,'/static/<filename>',,(,HEAD,,,,OPTIONS,,,,GET,),,->,,static,>,,,,<,Rule,,'/pages/<page>',,(,HEAD,,,,OPTIONS,,,,GET,),,->,,simple_page,.,show,>,,,,<,Rule,,'/pages/',,(,HEAD,,,,OPTIONS,,,,GET,),,->,,simple_page,.,show,>,],,,,On top of that you can register blueprints multiple times though not every\nblueprint might respond properly to that.  In fact it depends on how the\nblueprint is implemented if it can be mounted more than once.,,,,Blueprint Resources,\u00b6,,Blueprints can provide resources as well.  Sometimes you might want to\nintroduce a blueprint only for the resources it provides.,,,Blueprint Resource Folder,\u00b6,,Like for regular applications, blueprints are considered to be contained\nin a folder.  While multiple blueprints can originate from the same folder,\nit does not have to be the case and it\u2019s usually not recommended.,,The folder is inferred from the second argument to,Blueprint,which\nis usually,__name__,.  This argument specifies what logical Python\nmodule or package corresponds to the blueprint.  If it points to an actual\nPython package that package (which is a folder on the filesystem) is the\nresource folder.  If it\u2019s a module, the package the module is contained in\nwill be the resource folder.  You can access the,Blueprint.root_path,property to see what the resource folder is:,,>>>,simple_page,.,root_path,,'/Users/username/TestProject/yourapplication',,,,To quickly open sources from this folder you can use the,open_resource(),function:,,with,,simple_page,.,open_resource,(,'static/style.css',),,as,,f,:,,code,,=,,f,.,read,(),,,,,,Static Files,\u00b6,,A blueprint can expose a folder with static files by providing a path to a\nfolder on the filesystem via the,static_folder,keyword argument.  It can\neither be an absolute path or one relative to the folder of the\nblueprint:,,admin,,=,,Blueprint,(,'admin',,,,__name__,,,,static_folder,=,'static',),,,,By default the rightmost part of the path is where it is exposed on the\nweb.  Because the folder is called,static,here it will be available at\nthe location of the blueprint +,/static,.  Say the blueprint is\nregistered for,/admin,the static folder will be at,/admin/static,.,,The endpoint is named,blueprint_name.static,so you can generate URLs to\nit like you would do to the static folder of the application:,,url_for,(,'admin.static',,,,filename,=,'style.css',),,,,,,Templates,\u00b6,,If you want the blueprint to expose templates you can do that by providing\nthe,template_folder,parameter to the,Blueprint,constructor:,,admin,,=,,Blueprint,(,'admin',,,,__name__,,,,template_folder,=,'templates',),,,,For static files, the path can be absolute or relative to the blueprint\nresource folder.,,The template folder is added to the search path of templates but with a lower\npriority than the actual application\u2019s template folder. That way you can\neasily override templates that a blueprint provides in the actual application.\nThis also means that if you don\u2019t want a blueprint template to be accidentally\noverridden, make sure that no other blueprint or actual application template\nhas the same relative path. When multiple blueprints provide the same relative\ntemplate path the first blueprint registered takes precedence over the others.,,So if you have a blueprint in the folder,yourapplication/admin,and you\nwant to render the template,'admin/index.html',and you have provided,templates,as a,template_folder,you will have to create a file like\nthis:,yourapplication/admin/templates/admin/index.html,. The reason\nfor the extra,admin,folder is to avoid getting our template overridden\nby a template named,index.html,in the actual application template\nfolder.,,To further reiterate this: if you have a blueprint named,admin,and you\nwant to render a template called,index.html,which is specific to this\nblueprint, the best idea is to lay out your templates like this:,,yourpackage,/,,blueprints,/,,admin,/,,templates,/,,admin,/,,index,.,html,,__init__,.,py,,,,And then when you want to render the template, use,admin/index.html,as\nthe name to look up the template by.  If you encounter problems loading\nthe correct templates enable the,EXPLAIN_TEMPLATE_LOADING,config\nvariable which will instruct Flask to print out the steps it goes through\nto locate templates on every,render_template,call.,,,,,Building URLs,\u00b6,,If you want to link from one page to another you can use the,url_for(),function just like you normally would do just that you\nprefix the URL endpoint with the name of the blueprint and a dot (,.,):,,url_for,(,'admin.index',),,,,Additionally if you are in a view function of a blueprint or a rendered\ntemplate and you want to link to another endpoint of the same blueprint,\nyou can use relative redirects by prefixing the endpoint with a dot only:,,url_for,(,'.index',),,,,This will link to,admin.index,for instance in case the current request\nwas dispatched to any other admin blueprint endpoint.,,,,Error Handlers,\u00b6,,Blueprints support the errorhandler decorator just like the,Flask,application object, so it is easy to make Blueprint-specific custom error\npages.,,Here is an example for a \u201c404 Page Not Found\u201d exception:,,@simple_page,.,errorhandler,(,404,),,def,,page_not_found,(,e,):,,return,,render_template,(,'pages/404.html',),,,,More information on error handling see,Custom Error Pages,.,,,,,,,,,,,,,Contents,,,Modular Applications with Blueprints,,Why Blueprints?,,The Concept of Blueprints,,My First Blueprint,,Registering Blueprints,,Blueprint Resources,,Blueprint Resource Folder,,Static Files,,Templates,,,,Building URLs,,Error Handlers,,,,,Navigation,,,Overview,,,Previous:,The Request Context,,Next:,Flask Extensions,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "The Request Context", "url": "http://flask.pocoo.org/docs/0.12/reqcontext/", "content": ",,,,,The Request Context \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,The Request Context,\u00b6,,This document describes the behavior in Flask 0.7 which is mostly in line\nwith the old behavior but has some small, subtle differences.,,It is recommended that you read the,The Application Context,chapter first.,,,Diving into Context Locals,\u00b6,,Say you have a utility function that returns the URL the user should be\nredirected to.  Imagine it would always redirect to the URL\u2019s,next,parameter or the HTTP referrer or the index page:,,from,,flask,,import,,request,,,,url_for,,def,,redirect_url,():,,return,,request,.,args,.,get,(,'next',),,or,\\,request,.,referrer,,or,\\,url_for,(,'index',),,,,As you can see, it accesses the request object.  If you try to run this\nfrom a plain Python shell, this is the exception you will see:,,>>>,redirect_url,(),,Traceback (most recent call last):,File,\"<stdin>\",, line,1,, in,<module>,,AttributeError,:,'NoneType' object has no attribute 'request',,,,That makes a lot of sense because we currently do not have a request we\ncould access.  So we have to make a request and bind it to the current\ncontext.  The,test_request_context,method can create\nus a,RequestContext,:,,>>>,ctx,,=,,app,.,test_request_context,(,'/?next=http://example.com/',),,,,This context can be used in two ways.  Either with the,with,statement\nor by calling the,push(),and,pop(),methods:,,>>>,ctx,.,push,(),,,,From that point onwards you can work with the request object:,,>>>,redirect_url,(),,u'http://example.com/',,,,Until you call,pop,:,,>>>,ctx,.,pop,(),,,,Because the request context is internally maintained as a stack you can\npush and pop multiple times.  This is very handy to implement things like\ninternal redirects.,,For more information of how to utilize the request context from the\ninteractive Python shell, head over to the,Working with the Shell,chapter.,,,,How the Context Works,\u00b6,,If you look into how the Flask WSGI application internally works, you will\nfind a piece of code that looks very much like this:,,def,,wsgi_app,(,self,,,,environ,):,,with,,self,.,request_context,(,environ,):,,try,:,,response,,=,,self,.,full_dispatch_request,(),,except,,Exception,,as,,e,:,,response,,=,,self,.,make_response,(,self,.,handle_exception,(,e,)),,return,,response,(,environ,,,,start_response,),,,,The method,request_context(),returns a new,RequestContext,object and uses it in combination with\nthe,with,statement to bind the context.  Everything that is called from\nthe same thread from this point onwards until the end of the,with,statement will have access to the request globals (,flask.request,and others).,,The request context internally works like a stack: The topmost level on\nthe stack is the current active request.,push(),adds the context to the stack on\nthe very top,,pop(),removes it from the\nstack again.  On popping the application\u2019s,teardown_request(),functions are also executed.,,Another thing of note is that the request context will automatically also\ncreate an,application context,when it\u2019s pushed and\nthere is no application context for that application so far.,,,,Callbacks and Errors,\u00b6,,What happens if an error occurs in Flask during request processing?  This\nparticular behavior changed in 0.7 because we wanted to make it easier to\nunderstand what is actually happening.  The new behavior is quite simple:,,,Before each request,,before_request(),functions are\nexecuted.  If one of these functions return a response, the other\nfunctions are no longer called.  In any case however the return value\nis treated as a replacement for the view\u2019s return value.,,If the,before_request(),functions did not return a\nresponse, the regular request handling kicks in and the view function\nthat was matched has the chance to return a response.,,The return value of the view is then converted into an actual response\nobject and handed over to the,after_request(),functions which have the chance to replace it or modify it in place.,,At the end of the request the,teardown_request(),functions are executed.  This always happens, even in case of an\nunhandled exception down the road or if a before-request handler was\nnot executed yet or at all (for example in test environments sometimes\nyou might want to not execute before-request callbacks).,,,Now what happens on errors?  In production mode if an exception is not\ncaught, the 500 internal server handler is called.  In development mode\nhowever the exception is not further processed and bubbles up to the WSGI\nserver.  That way things like the interactive debugger can provide helpful\ndebug information.,,An important change in 0.7 is that the internal server error is now no\nlonger post processed by the after request callbacks and after request\ncallbacks are no longer guaranteed to be executed.  This way the internal\ndispatching code looks cleaner and is easier to customize and understand.,,The new teardown functions are supposed to be used as a replacement for\nthings that absolutely need to happen at the end of request.,,,,Teardown Callbacks,\u00b6,,The teardown callbacks are special callbacks in that they are executed at\na different point.  Strictly speaking they are independent of the actual\nrequest handling as they are bound to the lifecycle of the,RequestContext,object.  When the request context is\npopped, the,teardown_request(),functions are called.,,This is important to know if the life of the request context is prolonged\nby using the test client in a with statement or when using the request\ncontext from the command line:,,with,,app,.,test_client,(),,as,,client,:,,resp,,=,,client,.,get,(,'/foo',),,# the teardown functions are still not called at that point,,# even though the response ended and you have the response,,# object in your hand,,# only when the code reaches this point the teardown functions,,# are called.  Alternatively the same thing happens if another,,# request was triggered from the test client,,,,It\u2019s easy to see the behavior from the command line:,,>>>,app,,=,,Flask,(,__name__,),,>>>,@app,.,teardown_request,,...,def,,teardown_request,(,exception,=,None,):,,...,,print,,'this runs after request',,...,,>>>,ctx,,=,,app,.,test_request_context,(),,>>>,ctx,.,push,(),,>>>,ctx,.,pop,(),,this runs after request,,>>>,,,,Keep in mind that teardown callbacks are always executed, even if\nbefore-request callbacks were not executed yet but an exception happened.\nCertain parts of the test system might also temporarily create a request\ncontext without calling the before-request handlers.  Make sure to write\nyour teardown-request handlers in a way that they will never fail.,,,,Notes On Proxies,\u00b6,,Some of the objects provided by Flask are proxies to other objects.  The\nreason behind this is that these proxies are shared between threads and\nthey have to dispatch to the actual object bound to a thread behind the\nscenes as necessary.,,Most of the time you don\u2019t have to care about that, but there are some\nexceptions where it is good to know that this object is an actual proxy:,,,The proxy objects do not fake their inherited types, so if you want to\nperform actual instance checks, you have to do that on the instance\nthat is being proxied (see,_get_current_object,below).,,if the object reference is important (so for example for sending,Signals,),,,If you need to get access to the underlying object that is proxied, you\ncan use the,_get_current_object(),method:,,app,,=,,current_app,.,_get_current_object,(),,my_signal,.,send,(,app,),,,,,,Context Preservation on Error,\u00b6,,If an error occurs or not, at the end of the request the request context\nis popped and all data associated with it is destroyed.  During\ndevelopment however that can be problematic as you might want to have the\ninformation around for a longer time in case an exception occurred.  In\nFlask 0.6 and earlier in debug mode, if an exception occurred, the\nrequest context was not popped so that the interactive debugger can still\nprovide you with important information.,,Starting with Flask 0.7 you have finer control over that behavior by\nsetting the,PRESERVE_CONTEXT_ON_EXCEPTION,configuration variable.  By\ndefault it\u2019s linked to the setting of,DEBUG,.  If the application is in\ndebug mode the context is preserved, in production mode it\u2019s not.,,Do not force activate,PRESERVE_CONTEXT_ON_EXCEPTION,in production mode\nas it will cause your application to leak memory on exceptions.  However\nit can be useful during development to get the same error preserving\nbehavior as in development mode when attempting to debug an error that\nonly occurs under production settings.,,,,,,,,,,,,,Contents,,,The Request Context,,Diving into Context Locals,,How the Context Works,,Callbacks and Errors,,Teardown Callbacks,,Notes On Proxies,,Context Preservation on Error,,,,,Navigation,,,Overview,,,Previous:,The Application Context,,Next:,Modular Applications with Blueprints,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "The Application Context", "url": "http://flask.pocoo.org/docs/0.12/appcontext/", "content": ",,,,,The Application Context \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,The Application Context,\u00b6,,,Changelog,,New in version 0.9.,,,One of the design ideas behind Flask is that there are two different\n\u201cstates\u201d in which code is executed.  The application setup state in which\nthe application implicitly is on the module level.  It starts when the,Flask,object is instantiated, and it implicitly ends when the\nfirst request comes in.  While the application is in this state a few\nassumptions are true:,,,the programmer can modify the application object safely.,,no request handling happened so far,,you have to have a reference to the application object in order to\nmodify it, there is no magic proxy that can give you a reference to\nthe application object you\u2019re currently creating or modifying.,,,In contrast, during request handling, a couple of other rules exist:,,,while a request is active, the context local objects\n(,flask.request,and others) point to the current request.,,any code can get hold of these objects at any time.,,,There is a third state which is sitting in between a little bit.\nSometimes you are dealing with an application in a way that is similar to\nhow you interact with applications during request handling; just that there\nis no request active.  Consider, for instance, that you\u2019re sitting in an\ninteractive Python shell and interacting with the application, or a\ncommand line application.,,The application context is what powers the,current_app,context local.,,,Purpose of the Application Context,\u00b6,,The main reason for the application\u2019s context existence is that in the\npast a bunch of functionality was attached to the request context for lack\nof a better solution.  Since one of the pillars of Flask\u2019s design is that\nyou can have more than one application in the same Python process.,,So how does the code find the \u201cright\u201d application?  In the past we\nrecommended passing applications around explicitly, but that caused issues\nwith libraries that were not designed with that in mind.,,A common workaround for that problem was to use the,current_app,proxy later on, which was bound to the current\nrequest\u2019s application reference.  Since creating such a request context is\nan unnecessarily expensive operation in case there is no request around,\nthe application context was introduced.,,,,Creating an Application Context,\u00b6,,There are two ways to make an application context.  The first one is\nimplicit: whenever a request context is pushed, an application context\nwill be created alongside if this is necessary.  As a result, you can\nignore the existence of the application context unless you need it.,,The second way is the explicit way using the,app_context(),method:,,from,,flask,,import,,Flask,,,,current_app,,app,,=,,Flask,(,__name__,),,with,,app,.,app_context,():,,# within this block, current_app points to app.,,print,,current_app,.,name,,,,The application context is also used by the,url_for(),function in case a,SERVER_NAME,was configured.  This allows you to\ngenerate URLs even in the absence of a request.,,If no request context has been pushed and an application context has\nnot been explicitly set, a,RuntimeError,will be raised.,,RuntimeError,:,,Working,,outside,,of,,application,,context,.,,,,,,Locality of the Context,\u00b6,,The application context is created and destroyed as necessary.  It never\nmoves between threads and it will not be shared between requests.  As such\nit is the perfect place to store database connection information and other\nthings.  The internal stack object is called,flask._app_ctx_stack,.\nExtensions are free to store additional information on the topmost level,\nassuming they pick a sufficiently unique name and should put their\ninformation there, instead of on the,flask.g,object which is reserved\nfor user code.,,For more information about that, see,Flask Extension Development,.,,,,Context Usage,\u00b6,,The context is typically used to cache resources that need to be created\non a per-request or usage case.  For instance, database connections are\ndestined to go there.  When storing things on the application context\nunique names should be chosen as this is a place that is shared between\nFlask applications and extensions.,,The most common usage is to split resource management into two parts:,,,an implicit resource caching on the context.,,a context teardown based resource deallocation.,,,Generally there would be a,get_X(),function that creates resource,X,if it does not exist yet and otherwise returns the same resource,\nand a,teardown_X(),function that is registered as teardown handler.,,This is an example that connects to a database:,,import,,sqlite3,,from,,flask,,import,,g,,def,,get_db,():,,db,,=,,getattr,(,g,,,,'_database',,,,None,),,if,,db,,is,,None,:,,db,,=,,g,.,_database,,=,,connect_to_database,(),,return,,db,,@app,.,teardown_appcontext,,def,,teardown_db,(,exception,):,,db,,=,,getattr,(,g,,,,'_database',,,,None,),,if,,db,,is,,not,,None,:,,db,.,close,(),,,,The first time,get_db(),is called the connection will be established.\nTo make this implicit a,LocalProxy,can be used:,,from,,werkzeug.local,,import,,LocalProxy,,db,,=,,LocalProxy,(,get_db,),,,,That way a user can directly access,db,which internally calls,get_db(),.,,,,,,,,,,,,,Contents,,,The Application Context,,Purpose of the Application Context,,Creating an Application Context,,Locality of the Context,,Context Usage,,,,,Navigation,,,Overview,,,Previous:,Pluggable Views,,Next:,The Request Context,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Pluggable Views", "url": "http://flask.pocoo.org/docs/0.12/views/", "content": ",,,,,Pluggable Views \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,Pluggable Views,\u00b6,,,Changelog,,New in version 0.7.,,,Flask 0.7 introduces pluggable views inspired by the generic views from\nDjango which are based on classes instead of functions.  The main\nintention is that you can replace parts of the implementations and this\nway have customizable pluggable views.,,,Basic Principle,\u00b6,,Consider you have a function that loads a list of objects from the\ndatabase and renders into a template:,,@app,.,route,(,'/users/',),,def,,show_users,(,page,):,,users,,=,,User,.,query,.,all,(),,return,,render_template,(,'users.html',,,,users,=,users,),,,,This is simple and flexible, but if you want to provide this view in a\ngeneric fashion that can be adapted to other models and templates as well\nyou might want more flexibility.  This is where pluggable class-based\nviews come into place.  As the first step to convert this into a class\nbased view you would do this:,,from,,flask.views,,import,,View,,class,,ShowUsers,(,View,):,,def,,dispatch_request,(,self,):,,users,,=,,User,.,query,.,all,(),,return,,render_template,(,'users.html',,,,objects,=,users,),,app,.,add_url_rule,(,'/users/',,,,view_func,=,ShowUsers,.,as_view,(,'show_users',)),,,,As you can see what you have to do is to create a subclass of,flask.views.View,and implement,dispatch_request(),.  Then we have to convert that\nclass into an actual view function by using the,as_view(),class method.  The string you pass to\nthat function is the name of the endpoint that view will then have.  But\nthis by itself is not helpful, so let\u2019s refactor the code a bit:,,from,,flask.views,,import,,View,,class,,ListView,(,View,):,,def,,get_template_name,(,self,):,,raise,,NotImplementedError,(),,def,,render_template,(,self,,,,context,):,,return,,render_template,(,self,.,get_template_name,(),,,**,context,),,def,,dispatch_request,(,self,):,,context,,=,,{,'objects',:,,self,.,get_objects,()},,return,,self,.,render_template,(,context,),,class,,UserView,(,ListView,):,,def,,get_template_name,(,self,):,,return,,'users.html',,def,,get_objects,(,self,):,,return,,User,.,query,.,all,(),,,,This of course is not that helpful for such a small example, but it\u2019s good\nenough to explain the basic principle.  When you have a class-based view\nthe question comes up what,self,points to.  The way this works is that\nwhenever the request is dispatched a new instance of the class is created\nand the,dispatch_request(),method is called with\nthe parameters from the URL rule.  The class itself is instantiated with\nthe parameters passed to the,as_view(),function.\nFor instance you can write a class like this:,,class,,RenderTemplateView,(,View,):,,def,,__init__,(,self,,,,template_name,):,,self,.,template_name,,=,,template_name,,def,,dispatch_request,(,self,):,,return,,render_template,(,self,.,template_name,),,,,And then you can register it like this:,,app,.,add_url_rule,(,'/about',,,,view_func,=,RenderTemplateView,.,as_view,(,,'about_page',,,,template_name,=,'about.html',)),,,,,,Method Hints,\u00b6,,Pluggable views are attached to the application like a regular function by\neither using,route(),or better,add_url_rule(),.  That however also means that you would\nhave to provide the names of the HTTP methods the view supports when you\nattach this.  In order to move that information to the class you can\nprovide a,methods,attribute that has this\ninformation:,,class,,MyView,(,View,):,,methods,,=,,[,'GET',,,,'POST',],,def,,dispatch_request,(,self,):,,if,,request,.,method,,==,,'POST',:,,...,,...,,app,.,add_url_rule,(,'/myview',,,,view_func,=,MyView,.,as_view,(,'myview',)),,,,,,Method Based Dispatching,\u00b6,,For RESTful APIs it\u2019s especially helpful to execute a different function\nfor each HTTP method.  With the,flask.views.MethodView,you can\neasily do that.  Each HTTP method maps to a function with the same name\n(just in lowercase):,,from,,flask.views,,import,,MethodView,,class,,UserAPI,(,MethodView,):,,def,,get,(,self,):,,users,,=,,User,.,query,.,all,(),,...,,def,,post,(,self,):,,user,,=,,User,.,from_form_data,(,request,.,form,),,...,,app,.,add_url_rule,(,'/users/',,,,view_func,=,UserAPI,.,as_view,(,'users',)),,,,That way you also don\u2019t have to provide the,methods,attribute.  It\u2019s automatically set based\non the methods defined in the class.,,,,Decorating Views,\u00b6,,Since the view class itself is not the view function that is added to the\nrouting system it does not make much sense to decorate the class itself.\nInstead you either have to decorate the return value of,as_view(),by hand:,,def,,user_required,(,f,):,,\"\"\"Checks whether user is logged in or raises error 401.\"\"\",,def,,decorator,(,*,args,,,,**,kwargs,):,,if,,not,,g,.,user,:,,abort,(,401,),,return,,f,(,*,args,,,,**,kwargs,),,return,,decorator,,view,,=,,user_required,(,UserAPI,.,as_view,(,'users',)),,app,.,add_url_rule,(,'/users/',,,,view_func,=,view,),,,,Starting with Flask 0.8 there is also an alternative way where you can\nspecify a list of decorators to apply in the class declaration:,,class,,UserAPI,(,MethodView,):,,decorators,,=,,[,user_required,],,,,Due to the implicit self from the caller\u2019s perspective you cannot use\nregular view decorators on the individual methods of the view however,\nkeep this in mind.,,,,Method Views for APIs,\u00b6,,Web APIs are often working very closely with HTTP verbs so it makes a lot\nof sense to implement such an API based on the,MethodView,.  That said, you will notice that the API\nwill require different URL rules that go to the same method view most of\nthe time.  For instance consider that you are exposing a user object on\nthe web:,,,,,,,,,URL,,Method,,Description,,,/users/,,GET,,Gives a list of all users,,,/users/,,POST,,Creates a new user,,,/users/<id>,,GET,,Shows a single user,,,/users/<id>,,PUT,,Updates a single user,,,/users/<id>,,DELETE,,Deletes a single user,,,,,So how would you go about doing that with the,MethodView,?  The trick is to take advantage of the\nfact that you can provide multiple rules to the same view.,,Let\u2019s assume for the moment the view would look like this:,,class,,UserAPI,(,MethodView,):,,def,,get,(,self,,,,user_id,):,,if,,user_id,,is,,None,:,,# return a list of users,,pass,,else,:,,# expose a single user,,pass,,def,,post,(,self,):,,# create a new user,,pass,,def,,delete,(,self,,,,user_id,):,,# delete a single user,,pass,,def,,put,(,self,,,,user_id,):,,# update a single user,,pass,,,,So how do we hook this up with the routing system?  By adding two rules\nand explicitly mentioning the methods for each:,,user_view,,=,,UserAPI,.,as_view,(,'user_api',),,app,.,add_url_rule,(,'/users/',,,,defaults,=,{,'user_id',:,,None,},,,view_func,=,user_view,,,,methods,=,[,'GET',,]),,app,.,add_url_rule,(,'/users/',,,,view_func,=,user_view,,,,methods,=,[,'POST',,]),,app,.,add_url_rule,(,'/users/<int:user_id>',,,,view_func,=,user_view,,,,methods,=,[,'GET',,,,'PUT',,,,'DELETE',]),,,,If you have a lot of APIs that look similar you can refactor that\nregistration code:,,def,,register_api,(,view,,,,endpoint,,,,url,,,,pk,=,'id',,,,pk_type,=,'int',):,,view_func,,=,,view,.,as_view,(,endpoint,),,app,.,add_url_rule,(,url,,,,defaults,=,{,pk,:,,None,},,,view_func,=,view_func,,,,methods,=,[,'GET',,]),,app,.,add_url_rule,(,url,,,,view_func,=,view_func,,,,methods,=,[,'POST',,]),,app,.,add_url_rule,(,',%s,<,%s,:,%s,>',,%,,(,url,,,,pk_type,,,,pk,),,,view_func,=,view_func,,,,methods,=,[,'GET',,,,'PUT',,,,'DELETE',]),,register_api,(,UserAPI,,,,'user_api',,,,'/users/',,,,pk,=,'user_id',),,,,,,,,,,,,,,,Contents,,,Pluggable Views,,Basic Principle,,Method Hints,,Method Based Dispatching,,Decorating Views,,Method Views for APIs,,,,,Navigation,,,Overview,,,Previous:,Signals,,Next:,The Application Context,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Signals", "url": "http://flask.pocoo.org/docs/0.12/signals/", "content": ",,,,,Signals \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,Signals,\u00b6,,,Changelog,,New in version 0.6.,,,Starting with Flask 0.6, there is integrated support for signalling in\nFlask.  This support is provided by the excellent,blinker,library and\nwill gracefully fall back if it is not available.,,What are signals?  Signals help you decouple applications by sending\nnotifications when actions occur elsewhere in the core framework or\nanother Flask extensions.  In short, signals allow certain senders to\nnotify subscribers that something happened.,,Flask comes with a couple of signals and other extensions might provide\nmore.  Also keep in mind that signals are intended to notify subscribers\nand should not encourage subscribers to modify data.  You will notice that\nthere are signals that appear to do the same thing like some of the\nbuiltin decorators do (eg:,request_started,is very similar\nto,before_request(),).  However, there are differences in\nhow they work.  The core,before_request(),handler, for\nexample, is executed in a specific order and is able to abort the request\nearly by returning a response.  In contrast all signal handlers are\nexecuted in undefined order and do not modify any data.,,The big advantage of signals over handlers is that you can safely\nsubscribe to them for just a split second.  These temporary\nsubscriptions are helpful for unittesting for example.  Say you want to\nknow what templates were rendered as part of a request: signals allow you\nto do exactly that.,,,Subscribing to Signals,\u00b6,,To subscribe to a signal, you can use the,connect(),method of a signal.  The first\nargument is the function that should be called when the signal is emitted,\nthe optional second argument specifies a sender.  To unsubscribe from a\nsignal, you can use the,disconnect(),method.,,For all core Flask signals, the sender is the application that issued the\nsignal.  When you subscribe to a signal, be sure to also provide a sender\nunless you really want to listen for signals from all applications.  This is\nespecially true if you are developing an extension.,,For example, here is a helper context manager that can be used in a unittest\nto determine which templates were rendered and what variables were passed\nto the template:,,from,,flask,,import,,template_rendered,,from,,contextlib,,import,,contextmanager,,@contextmanager,,def,,captured_templates,(,app,):,,recorded,,=,,[],,def,,record,(,sender,,,,template,,,,context,,,,**,extra,):,,recorded,.,append,((,template,,,,context,)),,template_rendered,.,connect,(,record,,,,app,),,try,:,,yield,,recorded,,finally,:,,template_rendered,.,disconnect,(,record,,,,app,),,,,This can now easily be paired with a test client:,,with,,captured_templates,(,app,),,as,,templates,:,,rv,,=,,app,.,test_client,(),.,get,(,'/',),,assert,,rv,.,status_code,,==,,200,,assert,,len,(,templates,),,==,,1,,template,,,,context,,=,,templates,[,0,],,assert,,template,.,name,,==,,'index.html',,assert,,len,(,context,[,'items',]),,==,,10,,,,Make sure to subscribe with an extra,**extra,argument so that your\ncalls don\u2019t fail if Flask introduces new arguments to the signals.,,All the template rendering in the code issued by the application,app,in the body of the,with,block will now be recorded in the,templates,variable.  Whenever a template is rendered, the template object as well as\ncontext are appended to it.,,Additionally there is a convenient helper method\n(,connected_to(),)  that allows you to\ntemporarily subscribe a function to a signal with a context manager on\nits own.  Because the return value of the context manager cannot be\nspecified that way, you have to pass the list in as an argument:,,from,,flask,,import,,template_rendered,,def,,captured_templates,(,app,,,,recorded,,,,**,extra,):,,def,,record,(,sender,,,,template,,,,context,):,,recorded,.,append,((,template,,,,context,)),,return,,template_rendered,.,connected_to,(,record,,,,app,),,,,The example above would then look like this:,,templates,,=,,[],,with,,captured_templates,(,app,,,,templates,,,,**,extra,):,,...,,template,,,,context,,=,,templates,[,0,],,,,,Blinker API Changes,,The,connected_to(),method arrived in Blinker\nwith version 1.1.,,,,,Creating Signals,\u00b6,,If you want to use signals in your own application, you can use the\nblinker library directly.  The most common use case are named signals in a\ncustom,Namespace,..  This is what is recommended\nmost of the time:,,from,,blinker,,import,,Namespace,,my_signals,,=,,Namespace,(),,,,Now you can create new signals like this:,,model_saved,,=,,my_signals,.,signal,(,'model-saved',),,,,The name for the signal here makes it unique and also simplifies\ndebugging.  You can access the name of the signal with the,name,attribute.,,,For Extension Developers,,If you are writing a Flask extension and you want to gracefully degrade for\nmissing blinker installations, you can do so by using the,flask.signals.Namespace,class.,,,,,Sending Signals,\u00b6,,If you want to emit a signal, you can do so by calling the,send(),method.  It accepts a sender as first\nargument and optionally some keyword arguments that are forwarded to the\nsignal subscribers:,,class,,Model,(,object,):,,...,,def,,save,(,self,):,,model_saved,.,send,(,self,),,,,Try to always pick a good sender.  If you have a class that is emitting a\nsignal, pass,self,as sender.  If you are emitting a signal from a random\nfunction, you can pass,current_app._get_current_object(),as sender.,,,Passing Proxies as Senders,,Never pass,current_app,as sender to a signal.  Use,current_app._get_current_object(),instead.  The reason for this is\nthat,current_app,is a proxy and not the real application\nobject.,,,,,Signals and Flask\u2019s Request Context,\u00b6,,Signals fully support,The Request Context,when receiving signals.\nContext-local variables are consistently available between,request_started,and,request_finished,, so you can\nrely on,flask.g,and others as needed.  Note the limitations described\nin,Sending Signals,and the,request_tearing_down,signal.,,,,Decorator Based Signal Subscriptions,\u00b6,,With Blinker 1.1 you can also easily subscribe to signals by using the new,connect_via(),decorator:,,from,,flask,,import,,template_rendered,,@template_rendered,.,connect_via,(,app,),,def,,when_template_rendered,(,sender,,,,template,,,,context,,,,**,extra,):,,print,,'Template,%s,is rendered with,%s,',,%,,(,template,.,name,,,,context,),,,,,,Core Signals,\u00b6,,Take a look at,Signals,for a list of all builtin signals.,,,,,,,,,,,,,Contents,,,Signals,,Subscribing to Signals,,Creating Signals,,Sending Signals,,Signals and Flask\u2019s Request Context,,Decorator Based Signal Subscriptions,,Core Signals,,,,,Navigation,,,Overview,,,Previous:,Configuration Handling,,Next:,Pluggable Views,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Configuration Handling", "url": "http://flask.pocoo.org/docs/0.12/config/", "content": ",,,,,Configuration Handling \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,Configuration Handling,\u00b6,,,Changelog,,New in version 0.3.,,,Applications need some kind of configuration.  There are different settings\nyou might want to change depending on the application environment like\ntoggling the debug mode, setting the secret key, and other such\nenvironment-specific things.,,The way Flask is designed usually requires the configuration to be\navailable when the application starts up.  You can hardcode the\nconfiguration in the code, which for many small applications is not\nactually that bad, but there are better ways.,,Independent of how you load your config, there is a config object\navailable which holds the loaded configuration values:\nThe,config,attribute of the,Flask,object.  This is the place where Flask itself puts certain configuration\nvalues and also where extensions can put their configuration values.  But\nthis is also where you can have your own configuration.,,,Configuration Basics,\u00b6,,The,config,is actually a subclass of a dictionary and\ncan be modified just like any dictionary:,,app,,=,,Flask,(,__name__,),,app,.,config,[,'DEBUG',],,=,,True,,,,Certain configuration values are also forwarded to the,Flask,object so you can read and write them from there:,,app,.,debug,,=,,True,,,,To update multiple keys at once you can use the,dict.update(),method:,,app,.,config,.,update,(,,DEBUG,=,True,,,,SECRET_KEY,=,'...',,),,,,,,Builtin Configuration Values,\u00b6,,The following configuration values are used internally by Flask:,,,,,,,,DEBUG,,enable/disable debug mode,,,TESTING,,enable/disable testing mode,,,PROPAGATE_EXCEPTIONS,,explicitly enable or disable the\npropagation of exceptions.  If not set or\nexplicitly set to,None,this is\nimplicitly true if either,TESTING,or,DEBUG,is true.,,,PRESERVE_CONTEXT_ON_EXCEPTION,,By default if the application is in\ndebug mode the request context is not\npopped on exceptions to enable debuggers\nto introspect the data.  This can be\ndisabled by this key.  You can also use\nthis setting to force-enable it for non\ndebug execution which might be useful to\ndebug production applications (but also\nvery risky).,,,SECRET_KEY,,the secret key,,,SESSION_COOKIE_NAME,,the name of the session cookie,,,SESSION_COOKIE_DOMAIN,,the domain for the session cookie.  If\nthis is not set, the cookie will be\nvalid for all subdomains of,SERVER_NAME,.,,,SESSION_COOKIE_PATH,,the path for the session cookie.  If\nthis is not set the cookie will be valid\nfor all of,APPLICATION_ROOT,or if\nthat is not set for,'/',.,,,SESSION_COOKIE_HTTPONLY,,controls if the cookie should be set\nwith the httponly flag.  Defaults to,True,.,,,SESSION_COOKIE_SECURE,,controls if the cookie should be set\nwith the secure flag.  Defaults to,False,.,,,PERMANENT_SESSION_LIFETIME,,the lifetime of a permanent session as,datetime.timedelta,object.\nStarting with Flask 0.8 this can also be\nan integer representing seconds.,,,SESSION_REFRESH_EACH_REQUEST,,this flag controls how permanent\nsessions are refreshed.  If set to,True,(which is the default) then the cookie\nis refreshed each request which\nautomatically bumps the lifetime.  If\nset to,False,a,set-cookie,header is\nonly sent if the session is modified.\nNon permanent sessions are not affected\nby this.,,,USE_X_SENDFILE,,enable/disable x-sendfile,,,LOGGER_NAME,,the name of the logger,,,LOGGER_HANDLER_POLICY,,the policy of the default logging\nhandler.  The default is,'always',which means that the default logging\nhandler is always active.,'debug',will only activate logging in debug\nmode,,'production',will only log in\nproduction and,'never',disables it\nentirely.,,,SERVER_NAME,,the name and port number of the server.\nRequired for subdomain support (e.g.:,'myapp.dev:5000',)  Note that\nlocalhost does not support subdomains so\nsetting this to \u201clocalhost\u201d does not\nhelp.  Setting a,SERVER_NAME,also\nby default enables URL generation\nwithout a request context but with an\napplication context.,,,APPLICATION_ROOT,,If the application does not occupy\na whole domain or subdomain this can\nbe set to the path where the application\nis configured to live.  This is for\nsession cookie as path value.  If\ndomains are used, this should be,None,.,,,MAX_CONTENT_LENGTH,,If set to a value in bytes, Flask will\nreject incoming requests with a\ncontent length greater than this by\nreturning a 413 status code.,,,SEND_FILE_MAX_AGE_DEFAULT,,Default cache control max age to use with,send_static_file(),(the\ndefault static file handler) and,send_file(),, as,datetime.timedelta,or as seconds.\nOverride this value on a per-file\nbasis using the,get_send_file_max_age(),hook on,Flask,or,Blueprint,,\nrespectively. Defaults to 43200 (12 hours).,,,TRAP_HTTP_EXCEPTIONS,,If this is set to,True,Flask will\nnot execute the error handlers of HTTP\nexceptions but instead treat the\nexception like any other and bubble it\nthrough the exception stack.  This is\nhelpful for hairy debugging situations\nwhere you have to find out where an HTTP\nexception is coming from.,,,TRAP_BAD_REQUEST_ERRORS,,Werkzeug\u2019s internal data structures that\ndeal with request specific data will\nraise special key errors that are also\nbad request exceptions.  Likewise many\noperations can implicitly fail with a\nBadRequest exception for consistency.\nSince it\u2019s nice for debugging to know\nwhy exactly it failed this flag can be\nused to debug those situations.  If this\nconfig is set to,True,you will get\na regular traceback instead.,,,PREFERRED_URL_SCHEME,,The URL scheme that should be used for\nURL generation if no URL scheme is\navailable.  This defaults to,http,.,,,JSON_AS_ASCII,,By default Flask serialize object to\nascii-encoded JSON.  If this is set to,False,Flask will not encode to ASCII\nand output strings as-is and return\nunicode strings.,jsonify,will\nautomatically encode it in,utf-8,then for transport for instance.,,,JSON_SORT_KEYS,,By default Flask will serialize JSON\nobjects in a way that the keys are\nordered.  This is done in order to\nensure that independent of the hash seed\nof the dictionary the return value will\nbe consistent to not trash external HTTP\ncaches.  You can override the default\nbehavior by changing this variable.\nThis is not recommended but might give\nyou a performance improvement on the\ncost of cacheability.,,,JSONIFY_PRETTYPRINT_REGULAR,,If this is set to,True,(the default)\njsonify responses will be pretty printed\nif they are not requested by an\nXMLHttpRequest object (controlled by\nthe,X-Requested-With,header),,,JSONIFY_MIMETYPE,,MIME type used for jsonify responses.,,,TEMPLATES_AUTO_RELOAD,,Whether to check for modifications of\nthe template source and reload it\nautomatically. By default the value is,None,which means that Flask checks\noriginal file only in debug mode.,,,EXPLAIN_TEMPLATE_LOADING,,If this is enabled then every attempt to\nload a template will write an info\nmessage to the logger explaining the\nattempts to locate the template.  This\ncan be useful to figure out why\ntemplates cannot be found or wrong\ntemplates appear to be loaded.,,,,,,More on,SERVER_NAME,,The,SERVER_NAME,key is used for the subdomain support.  Because\nFlask cannot guess the subdomain part without the knowledge of the\nactual server name, this is required if you want to work with\nsubdomains.  This is also used for the session cookie.,,Please keep in mind that not only Flask has the problem of not knowing\nwhat subdomains are, your web browser does as well.  Most modern web\nbrowsers will not allow cross-subdomain cookies to be set on a\nserver name without dots in it.  So if your server name is,'localhost',you will not be able to set a cookie for,'localhost',and every subdomain of it.  Please choose a different\nserver name in that case, like,'myapplication.local',and add\nthis name + the subdomains you want to use into your host config\nor setup a local,bind,.,,,,Changelog,,New in version 0.11:,SESSION_REFRESH_EACH_REQUEST,,,TEMPLATES_AUTO_RELOAD,,,LOGGER_HANDLER_POLICY,,,EXPLAIN_TEMPLATE_LOADING,,,,New in version 0.10:,JSON_AS_ASCII,,,JSON_SORT_KEYS,,,JSONIFY_PRETTYPRINT_REGULAR,,,,New in version 0.9:,PREFERRED_URL_SCHEME,,,,New in version 0.8:,TRAP_BAD_REQUEST_ERRORS,,,TRAP_HTTP_EXCEPTIONS,,,APPLICATION_ROOT,,,SESSION_COOKIE_DOMAIN,,,SESSION_COOKIE_PATH,,,SESSION_COOKIE_HTTPONLY,,,SESSION_COOKIE_SECURE,,,,New in version 0.7:,PROPAGATE_EXCEPTIONS,,,PRESERVE_CONTEXT_ON_EXCEPTION,,,,New in version 0.6:,MAX_CONTENT_LENGTH,,,,New in version 0.5:,SERVER_NAME,,,,New in version 0.4:,LOGGER_NAME,,,,,Configuring from Files,\u00b6,,Configuration becomes more useful if you can store it in a separate file,\nideally located outside the actual application package. This makes\npackaging and distributing your application possible via various package\nhandling tools (,Deploying with Setuptools,) and finally modifying the\nconfiguration file afterwards.,,So a common pattern is this:,,app,,=,,Flask,(,__name__,),,app,.,config,.,from_object,(,'yourapplication.default_settings',),,app,.,config,.,from_envvar,(,'YOURAPPLICATION_SETTINGS',),,,,This first loads the configuration from the,yourapplication.default_settings,module and then overrides the values\nwith the contents of the file the,YOURAPPLICATION_SETTINGS,environment variable points to.  This environment variable can be set on\nLinux or OS X with the export command in the shell before starting the\nserver:,,$ export YOURAPPLICATION_SETTINGS=/path/to/settings.cfg\n$ python run-app.py\n * Running on http://127.0.0.1:5000/\n * Restarting with reloader...,,,On Windows systems use the,set,builtin instead:,,>,set,,YOURAPPLICATION_SETTINGS,=,\\,path,\\,to,\\,settings,.,cfg,,,,The configuration files themselves are actual Python files.  Only values\nin uppercase are actually stored in the config object later on.  So make\nsure to use uppercase letters for your config keys.,,Here is an example of a configuration file:,,# Example configuration,,DEBUG,,=,,False,,SECRET_KEY,,=,,'?,\\xbf,,,\\xb4\\x8d\\xa3,\"<,\\x9c\\xb0,@,\\x0f,5,\\xab,,w,\\xee\\x8d,$0,\\x13\\x8b,83',,,,Make sure to load the configuration very early on, so that extensions have\nthe ability to access the configuration when starting up.  There are other\nmethods on the config object as well to load from individual files.  For a\ncomplete reference, read the,Config,object\u2019s\ndocumentation.,,,,Configuration Best Practices,\u00b6,,The downside with the approach mentioned earlier is that it makes testing\na little harder.  There is no single 100% solution for this problem in\ngeneral, but there are a couple of things you can keep in mind to improve\nthat experience:,,,Create your application in a function and register blueprints on it.\nThat way you can create multiple instances of your application with\ndifferent configurations attached which makes unittesting a lot\neasier.  You can use this to pass in configuration as needed.,,Do not write code that needs the configuration at import time.  If you\nlimit yourself to request-only accesses to the configuration you can\nreconfigure the object later on as needed.,,,,,Development / Production,\u00b6,,Most applications need more than one configuration.  There should be at\nleast separate configurations for the production server and the one used\nduring development.  The easiest way to handle this is to use a default\nconfiguration that is always loaded and part of the version control, and a\nseparate configuration that overrides the values as necessary as mentioned\nin the example above:,,app,,=,,Flask,(,__name__,),,app,.,config,.,from_object,(,'yourapplication.default_settings',),,app,.,config,.,from_envvar,(,'YOURAPPLICATION_SETTINGS',),,,,Then you just have to add a separate,config.py,file and export,YOURAPPLICATION_SETTINGS=/path/to/config.py,and you are done.  However\nthere are alternative ways as well.  For example you could use imports or\nsubclassing.,,What is very popular in the Django world is to make the import explicit in\nthe config file by adding,from,,yourapplication.default_settings,,import,,*,to the top of the file and then overriding the changes by hand.\nYou could also inspect an environment variable like,YOURAPPLICATION_MODE,and set that to,production,,,development,etc\nand import different hardcoded files based on that.,,An interesting pattern is also to use classes and inheritance for\nconfiguration:,,class,,Config,(,object,):,,DEBUG,,=,,False,,TESTING,,=,,False,,DATABASE_URI,,=,,'sqlite://:memory:',,class,,ProductionConfig,(,Config,):,,DATABASE_URI,,=,,'mysql://user@localhost/foo',,class,,DevelopmentConfig,(,Config,):,,DEBUG,,=,,True,,class,,TestingConfig,(,Config,):,,TESTING,,=,,True,,,,To enable such a config you just have to call into,from_object(),:,,app,.,config,.,from_object,(,'configmodule.ProductionConfig',),,,,There are many different ways and it\u2019s up to you how you want to manage\nyour configuration files.  However here a list of good recommendations:,,,Keep a default configuration in version control.  Either populate the\nconfig with this default configuration or import it in your own\nconfiguration files before overriding values.,,Use an environment variable to switch between the configurations.\nThis can be done from outside the Python interpreter and makes\ndevelopment and deployment much easier because you can quickly and\neasily switch between different configs without having to touch the\ncode at all.  If you are working often on different projects you can\neven create your own script for sourcing that activates a virtualenv\nand exports the development configuration for you.,,Use a tool like,fabric,in production to push code and\nconfigurations separately to the production server(s).  For some\ndetails about how to do that, head over to the,Deploying with Fabric,pattern.,,,,,Instance Folders,\u00b6,,,Changelog,,New in version 0.8.,,,Flask 0.8 introduces instance folders.  Flask for a long time made it\npossible to refer to paths relative to the application\u2019s folder directly\n(via,Flask.root_path,).  This was also how many developers loaded\nconfigurations stored next to the application.  Unfortunately however this\nonly works well if applications are not packages in which case the root\npath refers to the contents of the package.,,With Flask 0.8 a new attribute was introduced:,Flask.instance_path,.  It refers to a new concept called the\n\u201cinstance folder\u201d.  The instance folder is designed to not be under\nversion control and be deployment specific.  It\u2019s the perfect place to\ndrop things that either change at runtime or configuration files.,,You can either explicitly provide the path of the instance folder when\ncreating the Flask application or you can let Flask autodetect the\ninstance folder.  For explicit configuration use the,instance_path,parameter:,,app,,=,,Flask,(,__name__,,,,instance_path,=,'/path/to/instance/folder',),,,,Please keep in mind that this path,must,be absolute when provided.,,If the,instance_path,parameter is not provided the following default\nlocations are used:,,,Uninstalled module:,,/,myapp,.,py,,/,instance,,,,,Uninstalled package:,,/,myapp,,/,__init__,.,py,,/,instance,,,,,Installed module or package:,,$PREFIX/lib/python2.X/site-packages/myapp\n$PREFIX/var/myapp-instance,,,$PREFIX,is the prefix of your Python installation.  This can be,/usr,or the path to your virtualenv.  You can print the value of,sys.prefix,to see what the prefix is set to.,,,,Since the config object provided loading of configuration files from\nrelative filenames we made it possible to change the loading via filenames\nto be relative to the instance path if wanted.  The behavior of relative\npaths in config files can be flipped between \u201crelative to the application\nroot\u201d (the default) to \u201crelative to instance folder\u201d via the,instance_relative_config,switch to the application constructor:,,app,,=,,Flask,(,__name__,,,,instance_relative_config,=,True,),,,,Here is a full example of how to configure Flask to preload the config\nfrom a module and then override the config from a file in the config\nfolder if it exists:,,app,,=,,Flask,(,__name__,,,,instance_relative_config,=,True,),,app,.,config,.,from_object,(,'yourapplication.default_settings',),,app,.,config,.,from_pyfile,(,'application.cfg',,,,silent,=,True,),,,,The path to the instance folder can be found via the,Flask.instance_path,.  Flask also provides a shortcut to open a\nfile from the instance folder with,Flask.open_instance_resource(),.,,Example usage for both:,,filename,,=,,os,.,path,.,join,(,app,.,instance_path,,,,'application.cfg',),,with,,open,(,filename,),,as,,f,:,,config,,=,,f,.,read,(),,# or via open_instance_resource:,,with,,app,.,open_instance_resource,(,'application.cfg',),,as,,f,:,,config,,=,,f,.,read,(),,,,,,,,,,,,,,,Contents,,,Configuration Handling,,Configuration Basics,,Builtin Configuration Values,,Configuring from Files,,Configuration Best Practices,,Development / Production,,Instance Folders,,,,,Navigation,,,Overview,,,Previous:,Application Errors,,Next:,Signals,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Tutorial", "url": "http://flask.pocoo.org/docs/0.12/tutorial/", "content": ",,,,,Tutorial \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,Tutorial,\u00b6,,You want to develop an application with Python and Flask?  Here you have\nthe chance to learn by example.  In this tutorial, we will create a simple\nmicroblogging application.  It only supports one user that can create\ntext-only entries and there are no feeds or comments, but it still\nfeatures everything you need to get started.  We will use Flask and SQLite\nas a database (which comes out of the box with Python) so there is nothing\nelse you need.,,If you want the full source code in advance or for comparison, check out\nthe,example source,.,,,,Introducing Flaskr,,Step 0: Creating The Folders,,Step 1: Database Schema,,Step 2: Application Setup Code,,Step 3: Installing flaskr as a Package,,Step 4: Database Connections,,Step 5: Creating The Database,,Step 6: The View Functions,,Show Entries,,Add New Entry,,Login and Logout,,,,Step 7: The Templates,,layout.html,,show_entries.html,,login.html,,,,Step 8: Adding Style,,Bonus: Testing the Application,,Adding tests to flaskr,,Running the tests,,Testing + setuptools,,,,,,,,,,,,,,,Navigation,,,Overview,,,Previous:,Quickstart,,Next:,Introducing Flaskr,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Application Errors", "url": "http://flask.pocoo.org/docs/0.12/errorhandling/", "content": ",,,,,Application Errors \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,Application Errors,\u00b6,,,Changelog,,New in version 0.3.,,,Applications fail, servers fail.  Sooner or later you will see an exception\nin production.  Even if your code is 100% correct, you will still see\nexceptions from time to time.  Why?  Because everything else involved will\nfail.  Here are some situations where perfectly fine code can lead to server\nerrors:,,,the client terminated the request early and the application was still\nreading from the incoming data,,the database server was overloaded and could not handle the query,,a filesystem is full,,a harddrive crashed,,a backend server overloaded,,a programming error in a library you are using,,network connection of the server to another system failed,,,And that\u2019s just a small sample of issues you could be facing.  So how do we\ndeal with that sort of problem?  By default if your application runs in\nproduction mode, Flask will display a very simple page for you and log the\nexception to the,logger,.,,But there is more you can do, and we will cover some better setups to deal\nwith errors.,,,Error Logging Tools,\u00b6,,Sending error mails, even if just for critical ones, can become\noverwhelming if enough users are hitting the error and log files are\ntypically never looked at. This is why we recommend using,Sentry,for dealing with application errors.  It\u2019s\navailable as an Open Source project,on GitHub,and is also available as a,hosted version,which you can try for free. Sentry\naggregates duplicate errors, captures the full stack trace and local\nvariables for debugging, and sends you mails based on new errors or\nfrequency thresholds.,,To use Sentry you need to install the,raven,client:,,$ pip install raven,,,And then add this to your Flask app:,,from,,raven.contrib.flask,,import,,Sentry,,sentry,,=,,Sentry,(,app,,,,dsn,=,'YOUR_DSN_HERE',),,,,Or if you are using factories you can also init it later:,,from,,raven.contrib.flask,,import,,Sentry,,sentry,,=,,Sentry,(,dsn,=,'YOUR_DSN_HERE',),,def,,create_app,():,,app,,=,,Flask,(,__name__,),,sentry,.,init_app,(,app,),,...,,return,,app,,,,The,YOUR_DSN_HERE,value needs to be replaced with the DSN value you get\nfrom your Sentry installation.,,Afterwards failures are automatically reported to Sentry and from there\nyou can receive error notifications.,,,,Error handlers,\u00b6,,You might want to show custom error pages to the user when an error occurs.\nThis can be done by registering error handlers.,,Error handlers are normal,Pluggable Views,but instead of being registered for\nroutes, they are registered for exceptions that are raised while trying to\ndo something else.,,,Registering,\u00b6,,Register error handlers using,errorhandler(),or,register_error_handler(),:,,@app,.,errorhandler,(,werkzeug,.,exceptions,.,BadRequest,),,def,,handle_bad_request,(,e,):,,return,,'bad request!',,app,.,register_error_handler,(,400,,,,lambda,,e,:,,'bad request!',),,,,Those two ways are equivalent, but the first one is more clear and leaves\nyou with a function to call on your whim (and in tests).  Note that,werkzeug.exceptions.HTTPException,subclasses like,BadRequest,from the example and their HTTP codes\nare interchangeable when handed to the registration methods or decorator\n(,BadRequest.code,,==,,400,).,,You are however not limited to,HTTPException,or HTTP status codes but can register a handler for every exception class you\nlike.,,,Changelog,,Changed in version 0.11:,Errorhandlers are now prioritized by specificity of the exception classes\nthey are registered for instead of the order they are registered in.,,,,,Handling,\u00b6,,Once an exception instance is raised, its class hierarchy is traversed,\nand searched for in the exception classes for which handlers are registered.\nThe most specific handler is selected.,,E.g. if an instance of,ConnectionRefusedError,is raised, and a handler\nis registered for,ConnectionError,and,ConnectionRefusedError,,\nthe more specific,ConnectionRefusedError,handler is called on the\nexception instance, and its response is shown to the user.,,,,,Error Mails,\u00b6,,If the application runs in production mode (which it will do on your\nserver) you might not see any log messages.  The reason for that is that\nFlask by default will just report to the WSGI error stream or stderr\n(depending on what\u2019s available).  Where this ends up is sometimes hard to\nfind.  Often it\u2019s in your webserver\u2019s log files.,,I can pretty much promise you however that if you only use a logfile for\nthe application errors you will never look at it except for debugging an\nissue when a user reported it for you.  What you probably want instead is\na mail the second the exception happened.  Then you get an alert and you\ncan do something about it.,,Flask uses the Python builtin logging system, and it can actually send\nyou mails for errors which is probably what you want.  Here is how you can\nconfigure the Flask logger to send you mails for exceptions:,,ADMINS,,=,,[,'yourname@example.com',],,if,,not,,app,.,debug,:,,import,,logging,,from,,logging.handlers,,import,,SMTPHandler,,mail_handler,,=,,SMTPHandler,(,'127.0.0.1',,,,'server-error@example.com',,,,ADMINS,,,,'YourApplication Failed',),,mail_handler,.,setLevel,(,logging,.,ERROR,),,app,.,logger,.,addHandler,(,mail_handler,),,,,So what just happened?  We created a new,SMTPHandler,that will send mails with the mail\nserver listening on,127.0.0.1,to all the,ADMINS,from the address,server-error@example.com,with the subject \u201cYourApplication Failed\u201d.  If\nyour mail server requires credentials, these can also be provided.  For\nthat check out the documentation for the,SMTPHandler,.,,We also tell the handler to only send errors and more critical messages.\nBecause we certainly don\u2019t want to get a mail for warnings or other\nuseless logs that might happen during request handling.,,Before you run that in production, please also look at,Controlling the Log Format,to\nput more information into that error mail.  That will save you from a lot\nof frustration.,,,,Logging to a File,\u00b6,,Even if you get mails, you probably also want to log warnings.  It\u2019s a\ngood idea to keep as much information around that might be required to\ndebug a problem.  By default as of Flask 0.11, errors are logged to your\nwebserver\u2019s log automatically.  Warnings however are not.  Please note\nthat Flask itself will not issue any warnings in the core system, so it\u2019s\nyour responsibility to warn in the code if something seems odd.,,There are a couple of handlers provided by the logging system out of the\nbox but not all of them are useful for basic error logging.  The most\ninteresting are probably the following:,,,FileHandler,- logs messages to a file on the\nfilesystem.,,RotatingFileHandler,- logs messages to a file\non the filesystem and will rotate after a certain number of messages.,,NTEventLogHandler,- will log to the system\nevent log of a Windows system.  If you are deploying on a Windows box,\nthis is what you want to use.,,SysLogHandler,- sends logs to a UNIX\nsyslog.,,,Once you picked your log handler, do like you did with the SMTP handler\nabove, just make sure to use a lower setting (I would recommend,WARNING,):,,if,,not,,app,.,debug,:,,import,,logging,,from,,themodule,,import,,TheHandlerYouWant,,file_handler,,=,,TheHandlerYouWant,(,...,),,file_handler,.,setLevel,(,logging,.,WARNING,),,app,.,logger,.,addHandler,(,file_handler,),,,,,,Controlling the Log Format,\u00b6,,By default a handler will only write the message string into a file or\nsend you that message as mail.  A log record stores more information,\nand it makes a lot of sense to configure your logger to also contain that\ninformation so that you have a better idea of why that error happened, and\nmore importantly, where it did.,,A formatter can be instantiated with a format string.  Note that\ntracebacks are appended to the log entry automatically.  You don\u2019t have to\ndo that in the log formatter format string.,,Here are some example setups:,,,Email,\u00b6,,from,,logging,,import,,Formatter,,mail_handler,.,setFormatter,(,Formatter,(,''',,Message type:,%(levelname)s,,Location:,%(pathname)s,:,%(lineno)d,,Module:,%(module)s,,Function:,%(funcName)s,,Time:,%(asctime)s,,Message:,,%(message)s,,''',)),,,,,,File logging,\u00b6,,from,,logging,,import,,Formatter,,file_handler,.,setFormatter,(,Formatter,(,,',%(asctime)s,,%(levelname)s,:,%(message)s,',,'[in,%(pathname)s,:,%(lineno)d,]',,)),,,,,,Complex Log Formatting,\u00b6,,Here is a list of useful formatting variables for the format string.  Note\nthat this list is not complete, consult the official documentation of the,logging,package for a full list.,,,,,,,,Format,,Description,,,,,%(levelname)s,,Text logging level for the message\n(,'DEBUG',,,'INFO',,,'WARNING',,,'ERROR',,,'CRITICAL',).,,,%(pathname)s,,Full pathname of the source file where the\nlogging call was issued (if available).,,,%(filename)s,,Filename portion of pathname.,,,%(module)s,,Module (name portion of filename).,,,%(funcName)s,,Name of function containing the logging call.,,,%(lineno)d,,Source line number where the logging call was\nissued (if available).,,,%(asctime)s,,Human-readable time when the,LogRecord,was created.\nBy default this is of the form,\"2003-07-08,,16:49:45,896\",(the numbers after\nthe comma are millisecond portion of the time).\nThis can be changed by subclassing the formatter\nand overriding the,formatTime(),method.,,,%(message)s,,The logged message, computed as,msg,,%,,args,,,,,If you want to further customize the formatting, you can subclass the\nformatter.  The formatter has three interesting methods:,,,format(),:,,handles the actual formatting.  It is passed a,LogRecord,object and has to return the formatted\nstring.,,formatTime(),:,,called for,asctime,formatting.  If you want a different time format\nyou can override this method.,,formatException(),,called for exception formatting.  It is passed an,exc_info,tuple and has to return a string.  The default is usually fine, you\ndon\u2019t have to override it.,,,For more information, head over to the official documentation.,,,,,Other Libraries,\u00b6,,So far we only configured the logger your application created itself.\nOther libraries might log themselves as well.  For example, SQLAlchemy uses\nlogging heavily in its core.  While there is a method to configure all\nloggers at once in the,logging,package, I would not recommend using\nit.  There might be a situation in which you want to have multiple\nseparate applications running side by side in the same Python interpreter\nand then it becomes impossible to have different logging setups for those.,,Instead, I would recommend figuring out which loggers you are interested\nin, getting the loggers with the,getLogger(),function and\niterating over them to attach handlers:,,from,,logging,,import,,getLogger,,loggers,,=,,[,app,.,logger,,,,getLogger,(,'sqlalchemy',),,,getLogger,(,'otherlibrary',)],,for,,logger,,in,,loggers,:,,logger,.,addHandler,(,mail_handler,),,logger,.,addHandler,(,file_handler,),,,,,,,Debugging Application Errors,\u00b6,,For production applications, configure your application with logging and\nnotifications as described in,Application Errors,.  This section provides\npointers when debugging deployment configuration and digging deeper with a\nfull-featured Python debugger.,,,When in Doubt, Run Manually,\u00b6,,Having problems getting your application configured for production?  If you\nhave shell access to your host, verify that you can run your application\nmanually from the shell in the deployment environment.  Be sure to run under\nthe same user account as the configured deployment to troubleshoot permission\nissues.  You can use Flask\u2019s builtin development server with,debug=True,on\nyour production host, which is helpful in catching configuration issues, but,be sure to do this temporarily in a controlled environment.,Do not run in\nproduction with,debug=True,.,,,,Working with Debuggers,\u00b6,,To dig deeper, possibly to trace code execution, Flask provides a debugger out\nof the box (see,Debug Mode,).  If you would like to use another Python\ndebugger, note that debuggers interfere with each other.  You have to set some\noptions in order to use your favorite debugger:,,,debug,- whether to enable debug mode and catch exceptions,,use_debugger,- whether to use the internal Flask debugger,,use_reloader,- whether to reload and fork the process on exception,,,debug,must be True (i.e., exceptions must be caught) in order for the other\ntwo options to have any value.,,If you\u2019re using Aptana/Eclipse for debugging you\u2019ll need to set both,use_debugger,and,use_reloader,to False.,,A possible useful pattern for configuration is to set the following in your\nconfig.yaml (change the block as appropriate for your application, of course):,,FLASK,:,,DEBUG,:,,True,,DEBUG_WITH_APTANA,:,,True,,,,Then in your application\u2019s entry-point (main.py), you could have something like:,,if,,__name__,,==,,\"__main__\",:,,# To allow aptana to receive errors, set use_debugger=False,,app,,=,,create_app,(,config,=,\"config.yaml\",),,if,,app,.,debug,:,,use_debugger,,=,,True,,try,:,,# Disable Flask's debugger if external debugger is requested,,use_debugger,,=,,not,(,app,.,config,.,get,(,'DEBUG_WITH_APTANA',)),,except,:,,pass,,app,.,run,(,use_debugger,=,use_debugger,,,,debug,=,app,.,debug,,,,use_reloader,=,use_debugger,,,,host,=,'0.0.0.0',),,,,,,,,,,,,,,,Contents,,,Application Errors,,Error Logging Tools,,Error handlers,,Registering,,Handling,,,,Error Mails,,Logging to a File,,Controlling the Log Format,,Email,,File logging,,Complex Log Formatting,,,,Other Libraries,,,,Debugging Application Errors,,When in Doubt, Run Manually,,Working with Debuggers,,,,,Navigation,,,Overview,,,Previous:,Testing Flask Applications,,Next:,Configuration Handling,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Quickstart", "url": "http://flask.pocoo.org/docs/0.12/quickstart/", "content": ",,,,,Quickstart \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,Quickstart,\u00b6,,Eager to get started?  This page gives a good introduction to Flask.  It\nassumes you already have Flask installed.  If you do not, head over to the,Installation,section.,,,A Minimal Application,\u00b6,,A minimal Flask application looks something like this:,,from,,flask,,import,,Flask,,app,,=,,Flask,(,__name__,),,@app,.,route,(,'/',),,def,,hello_world,():,,return,,'Hello, World!',,,,So what did that code do?,,,First we imported the,Flask,class.  An instance of this\nclass will be our WSGI application.,,Next we create an instance of this class. The first argument is the name of\nthe application\u2019s module or package.  If you are using a single module (as\nin this example), you should use,__name__,because depending on if it\u2019s\nstarted as application or imported as module the name will be different\n(,'__main__',versus the actual import name). This is needed so that\nFlask knows where to look for templates, static files, and so on. For more\ninformation have a look at the,Flask,documentation.,,We then use the,route(),decorator to tell Flask what URL\nshould trigger our function.,,The function is given a name which is also used to generate URLs for that\nparticular function, and returns the message we want to display in the\nuser\u2019s browser.,,,Just save it as,hello.py,or something similar. Make sure to not call\nyour application,flask.py,because this would conflict with Flask\nitself.,,To run the application you can either use the,flask,command or\npython\u2019s,-m,switch with Flask.  Before you can do that you need\nto tell your terminal the application to work with by exporting the,FLASK_APP,environment variable:,,$ export FLASK_APP=hello.py\n$ flask run\n * Running on http://127.0.0.1:5000/,,,If you are on Windows you need to use,set,instead of,export,.,,Alternatively you can use,python -m flask,:,,$ export FLASK_APP=hello.py\n$ python -m flask run\n * Running on http://127.0.0.1:5000/,,,This launches a very simple builtin server, which is good enough for testing\nbut probably not what you want to use in production. For deployment options see,Deployment Options,.,,Now head over to,http://127.0.0.1:5000/,, and you\nshould see your hello world greeting.,,,Externally Visible Server,,If you run the server you will notice that the server is only accessible\nfrom your own computer, not from any other in the network.  This is the\ndefault because in debugging mode a user of the application can execute\narbitrary Python code on your computer.,,If you have the debugger disabled or trust the users on your network,\nyou can make the server publicly available simply by adding,--host=0.0.0.0,to the command line:,,flask,,run,,--,host,=,0.0,.,0.0,,,,This tells your operating system to listen on all public IPs.,,,,,What to do if the Server does not Start,\u00b6,,In case the,python -m flask,fails or,flask,does not exist,\nthere are multiple reasons this might be the case.  First of all you need\nto look at the error message.,,,Old Version of Flask,\u00b6,,Versions of Flask older than 0.11 use to have different ways to start the\napplication.  In short, the,flask,command did not exist, and\nneither did,python -m flask,.  In that case you have two options:\neither upgrade to newer Flask versions or have a look at the,Development Server,docs to see the alternative method for running a server.,,,,Invalid Import Name,\u00b6,,The,FLASK_APP,environment variable is the name of the module to import at,flask run,. In case that module is incorrectly named you will get an\nimport error upon start (or if debug is enabled when you navigate to the\napplication). It will tell you what it tried to import and why it failed.,,The most common reason is a typo or because you did not actually create an,app,object.,,,,,Debug Mode,\u00b6,,(Want to just log errors and stack traces? See,Application Errors,),,The,flask,script is nice to start a local development server, but\nyou would have to restart it manually after each change to your code.\nThat is not very nice and Flask can do better.  If you enable debug\nsupport the server will reload itself on code changes, and it will also\nprovide you with a helpful debugger if things go wrong.,,To enable debug mode you can export the,FLASK_DEBUG,environment variable\nbefore running the server:,,$ export FLASK_DEBUG=1\n$ flask run,,,(On Windows you need to use,set,instead of,export,).,,This does the following things:,,,it activates the debugger,,it activates the automatic reloader,,it enables the debug mode on the Flask application.,,,There are more parameters that are explained in the,Development Server,docs.,,,Attention,,Even though the interactive debugger does not work in forking environments\n(which makes it nearly impossible to use on production servers), it still\nallows the execution of arbitrary code. This makes it a major security risk\nand therefore it,must never be used on production machines,.,,,Screenshot of the debugger in action:,,,Have another debugger in mind? See,Working with Debuggers,.,,,,Routing,\u00b6,,Modern web applications have beautiful URLs.  This helps people remember\nthe URLs, which is especially handy for applications that are used from\nmobile devices with slower network connections.  If the user can directly\ngo to the desired page without having to hit the index page it is more\nlikely they will like the page and come back next time.,,As you have seen above, the,route(),decorator is used to\nbind a function to a URL.  Here are some basic examples:,,@app,.,route,(,'/',),,def,,index,():,,return,,'Index Page',,@app,.,route,(,'/hello',),,def,,hello,():,,return,,'Hello, World',,,,But there is more to it!  You can make certain parts of the URL dynamic and\nattach multiple rules to a function.,,,Variable Rules,\u00b6,,To add variable parts to a URL you can mark these special sections as,<variable_name>,.  Such a part is then passed as a keyword argument to your\nfunction.  Optionally a converter can be used by specifying a rule with,<converter:variable_name>,.  Here are some nice examples:,,@app,.,route,(,'/user/<username>',),,def,,show_user_profile,(,username,):,,# show the user profile for that user,,return,,'User,%s,',,%,,username,,@app,.,route,(,'/post/<int:post_id>',),,def,,show_post,(,post_id,):,,# show the post with the given id, the id is an integer,,return,,'Post,%d,',,%,,post_id,,,,The following converters exist:,,,,,,,,string,,accepts any text without a slash (the default),,,int,,accepts integers,,,float,,like,int,but for floating point values,,,path,,like the default but also accepts slashes,,,any,,matches one of the items provided,,,uuid,,accepts UUID strings,,,,,,Unique URLs / Redirection Behavior,,Flask\u2019s URL rules are based on Werkzeug\u2019s routing module.  The idea\nbehind that module is to ensure beautiful and unique URLs based on\nprecedents laid down by Apache and earlier HTTP servers.,,Take these two rules:,,@app,.,route,(,'/projects/',),,def,,projects,():,,return,,'The project page',,@app,.,route,(,'/about',),,def,,about,():,,return,,'The about page',,,,Though they look rather similar, they differ in their use of the trailing\nslash in the URL,definition,.  In the first case, the canonical URL for the,projects,endpoint has a trailing slash.  In that sense, it is similar to\na folder on a filesystem.  Accessing it without a trailing slash will cause\nFlask to redirect to the canonical URL with the trailing slash.,,In the second case, however, the URL is defined without a trailing slash,\nrather like the pathname of a file on UNIX-like systems. Accessing the URL\nwith a trailing slash will produce a 404 \u201cNot Found\u201d error.,,This behavior allows relative URLs to continue working even if the trailing\nslash is omitted, consistent with how Apache and other servers work.  Also,\nthe URLs will stay unique, which helps search engines avoid indexing the\nsame page twice.,,,,,URL Building,\u00b6,,If it can match URLs, can Flask also generate them?  Of course it can.  To\nbuild a URL to a specific function you can use the,url_for(),function.  It accepts the name of the function as first argument and a number\nof keyword arguments, each corresponding to the variable part of the URL rule.\nUnknown variable parts are appended to the URL as query parameters.  Here are\nsome examples:,,>>>,from,,flask,,import,,Flask,,,,url_for,,>>>,app,,=,,Flask,(,__name__,),,>>>,@app,.,route,(,'/',),,...,def,,index,():,,pass,,...,,>>>,@app,.,route,(,'/login',),,...,def,,login,():,,pass,,...,,>>>,@app,.,route,(,'/user/<username>',),,...,def,,profile,(,username,):,,pass,,...,,>>>,with,,app,.,test_request_context,():,,...,,print,,url_for,(,'index',),,...,,print,,url_for,(,'login',),,...,,print,,url_for,(,'login',,,,next,=,'/',),,...,,print,,url_for,(,'profile',,,,username,=,'John Doe',),,...,,/,,/login,,/login?next=/,,/user/John%20Doe,,,,(This also uses the,test_request_context(),method, explained\nbelow.  It tells Flask to behave as though it is handling a request, even\nthough we are interacting with it through a Python shell.  Have a look at the\nexplanation below.,Context Locals,).,,Why would you want to build URLs using the URL reversing function,url_for(),instead of hard-coding them into your templates?\nThere are three good reasons for this:,,,Reversing is often more descriptive than hard-coding the URLs.  More\nimportantly, it allows you to change URLs in one go, without having to\nremember to change URLs all over the place.,,URL building will handle escaping of special characters and Unicode\ndata transparently for you, so you don\u2019t have to deal with them.,,If your application is placed outside the URL root - say, in,/myapplication,instead of,/,-,url_for(),will handle\nthat properly for you.,,,,,HTTP Methods,\u00b6,,HTTP (the protocol web applications are speaking) knows different methods for\naccessing URLs.  By default, a route only answers to,GET,requests, but that\ncan be changed by providing the,methods,argument to the,route(),decorator.  Here are some examples:,,from,,flask,,import,,request,,@app,.,route,(,'/login',,,,methods,=,[,'GET',,,,'POST',]),,def,,login,():,,if,,request,.,method,,==,,'POST',:,,do_the_login,(),,else,:,,show_the_login_form,(),,,,If,GET,is present,,HEAD,will be added automatically for you.  You\ndon\u2019t have to deal with that.  It will also make sure that,HEAD,requests\nare handled as the,HTTP RFC,(the document describing the HTTP\nprotocol) demands, so you can completely ignore that part of the HTTP\nspecification.  Likewise, as of Flask 0.6,,OPTIONS,is implemented for you\nautomatically as well.,,You have no idea what an HTTP method is?  Worry not, here is a quick\nintroduction to HTTP methods and why they matter:,,The HTTP method (also often called \u201cthe verb\u201d) tells the server what the\nclient wants to,do,with the requested page.  The following methods are\nvery common:,,,GET,,The browser tells the server to just,get,the information stored on\nthat page and send it.  This is probably the most common method.,,HEAD,,The browser tells the server to get the information, but it is only\ninterested in the,headers,, not the content of the page.  An\napplication is supposed to handle that as if a,GET,request was\nreceived but to not deliver the actual content.  In Flask you don\u2019t\nhave to deal with that at all, the underlying Werkzeug library handles\nthat for you.,,POST,,The browser tells the server that it wants to,post,some new\ninformation to that URL and that the server must ensure the data is\nstored and only stored once.  This is how HTML forms usually\ntransmit data to the server.,,PUT,,Similar to,POST,but the server might trigger the store procedure\nmultiple times by overwriting the old values more than once.  Now you\nmight be asking why this is useful, but there are some good reasons\nto do it this way.  Consider that the connection is lost during\ntransmission: in this situation a system between the browser and the\nserver might receive the request safely a second time without breaking\nthings.  With,POST,that would not be possible because it must only\nbe triggered once.,,DELETE,,Remove the information at the given location.,,OPTIONS,,Provides a quick way for a client to figure out which methods are\nsupported by this URL.  Starting with Flask 0.6, this is implemented\nfor you automatically.,,,Now the interesting part is that in HTML4 and XHTML1, the only methods a\nform can submit to the server are,GET,and,POST,.  But with JavaScript\nand future HTML standards you can use the other methods as well.  Furthermore\nHTTP has become quite popular lately and browsers are no longer the only\nclients that are using HTTP. For instance, many revision control systems\nuse it.,,,,,Static Files,\u00b6,,Dynamic web applications also need static files.  That\u2019s usually where\nthe CSS and JavaScript files are coming from.  Ideally your web server is\nconfigured to serve them for you, but during development Flask can do that\nas well.  Just create a folder called,static,in your package or next to\nyour module and it will be available at,/static,on the application.,,To generate URLs for static files, use the special,'static',endpoint name:,,url_for,(,'static',,,,filename,=,'style.css',),,,,The file has to be stored on the filesystem as,static/style.css,.,,,,Rendering Templates,\u00b6,,Generating HTML from within Python is not fun, and actually pretty\ncumbersome because you have to do the HTML escaping on your own to keep\nthe application secure.  Because of that Flask configures the,Jinja2,template engine for you automatically.,,To render a template you can use the,render_template(),method.  All you have to do is provide the name of the template and the\nvariables you want to pass to the template engine as keyword arguments.\nHere\u2019s a simple example of how to render a template:,,from,,flask,,import,,render_template,,@app,.,route,(,'/hello/',),,@app,.,route,(,'/hello/<name>',),,def,,hello,(,name,=,None,):,,return,,render_template,(,'hello.html',,,,name,=,name,),,,,Flask will look for templates in the,templates,folder.  So if your\napplication is a module, this folder is next to that module, if it\u2019s a\npackage it\u2019s actually inside your package:,,Case 1,: a module:,,/,application,.,py,,/,templates,,/,hello,.,html,,,,Case 2,: a package:,,/,application,,/,__init__,.,py,,/,templates,,/,hello,.,html,,,,For templates you can use the full power of Jinja2 templates.  Head over\nto the official,Jinja2 Template Documentation,for more information.,,Here is an example template:,,<!doctype html>,,<,title,>,Hello from Flask,</,title,>,,{%,,if,,name,,%},,<,h1,>,Hello,{{,,name,,}},!,</,h1,>,,{%,,else,,%},,<,h1,>,Hello, World!,</,h1,>,,{%,,endif,,%},,,,Inside templates you also have access to the,request,,,session,and,g,,[1],objects\nas well as the,get_flashed_messages(),function.,,Templates are especially useful if inheritance is used.  If you want to\nknow how that works, head over to the,Template Inheritance,pattern\ndocumentation.  Basically template inheritance makes it possible to keep\ncertain elements on each page (like header, navigation and footer).,,Automatic escaping is enabled, so if,name,contains HTML it will be escaped\nautomatically.  If you can trust a variable and you know that it will be\nsafe HTML (for example because it came from a module that converts wiki\nmarkup to HTML) you can mark it as safe by using the,Markup,class or by using the,|safe,filter in the\ntemplate.  Head over to the Jinja 2 documentation for more examples.,,Here is a basic introduction to how the,Markup,class works:,,>>>,from,,flask,,import,,Markup,,>>>,Markup,(,'<strong>Hello,%s,!</strong>',),,%,,'<blink>hacker</blink>',,Markup(u'<strong>Hello &lt;blink&gt;hacker&lt;/blink&gt;!</strong>'),,>>>,Markup,.,escape,(,'<blink>hacker</blink>',),,Markup(u'&lt;blink&gt;hacker&lt;/blink&gt;'),,>>>,Markup,(,'<em>Marked up</em> &raquo; HTML',),.,striptags,(),,u'Marked up \\xbb HTML',,,,,Changelog,,Changed in version 0.5:,Autoescaping is no longer enabled for all templates.  The following\nextensions for templates trigger autoescaping:,.html,,,.htm,,,.xml,,,.xhtml,.  Templates loaded from a string will have\nautoescaping disabled.,,,,,,[1],Unsure what that,g,object is? It\u2019s something in which\nyou can store information for your own needs, check the documentation of\nthat object (,g,) and the,Using SQLite 3 with Flask,for more\ninformation.,,,,,,Accessing Request Data,\u00b6,,For web applications it\u2019s crucial to react to the data a client sends to\nthe server.  In Flask this information is provided by the global,request,object.  If you have some experience with Python\nyou might be wondering how that object can be global and how Flask\nmanages to still be threadsafe.  The answer is context locals:,,,Context Locals,\u00b6,,,Insider Information,,If you want to understand how that works and how you can implement\ntests with context locals, read this section, otherwise just skip it.,,,Certain objects in Flask are global objects, but not of the usual kind.\nThese objects are actually proxies to objects that are local to a specific\ncontext.  What a mouthful.  But that is actually quite easy to understand.,,Imagine the context being the handling thread.  A request comes in and the\nweb server decides to spawn a new thread (or something else, the\nunderlying object is capable of dealing with concurrency systems other\nthan threads).  When Flask starts its internal request handling it\nfigures out that the current thread is the active context and binds the\ncurrent application and the WSGI environments to that context (thread).\nIt does that in an intelligent way so that one application can invoke another\napplication without breaking.,,So what does this mean to you?  Basically you can completely ignore that\nthis is the case unless you are doing something like unit testing.  You\nwill notice that code which depends on a request object will suddenly break\nbecause there is no request object.  The solution is creating a request\nobject yourself and binding it to the context.  The easiest solution for\nunit testing is to use the,test_request_context(),context manager.  In combination with the,with,statement it will bind a\ntest request so that you can interact with it.  Here is an example:,,from,,flask,,import,,request,,with,,app,.,test_request_context,(,'/hello',,,,method,=,'POST',):,,# now you can do something with the request until the,,# end of the with block, such as basic assertions:,,assert,,request,.,path,,==,,'/hello',,assert,,request,.,method,,==,,'POST',,,,The other possibility is passing a whole WSGI environment to the,request_context(),method:,,from,,flask,,import,,request,,with,,app,.,request_context,(,environ,):,,assert,,request,.,method,,==,,'POST',,,,,,The Request Object,\u00b6,,The request object is documented in the API section and we will not cover\nit here in detail (see,request,). Here is a broad overview of\nsome of the most common operations.  First of all you have to import it from\nthe,flask,module:,,from,,flask,,import,,request,,,,The current request method is available by using the,method,attribute.  To access form data (data\ntransmitted in a,POST,or,PUT,request) you can use the,form,attribute.  Here is a full example of the two\nattributes mentioned above:,,@app,.,route,(,'/login',,,,methods,=,[,'POST',,,,'GET',]),,def,,login,():,,error,,=,,None,,if,,request,.,method,,==,,'POST',:,,if,,valid_login,(,request,.,form,[,'username',],,,request,.,form,[,'password',]):,,return,,log_the_user_in,(,request,.,form,[,'username',]),,else,:,,error,,=,,'Invalid username/password',,# the code below is executed if the request method,,# was GET or the credentials were invalid,,return,,render_template,(,'login.html',,,,error,=,error,),,,,What happens if the key does not exist in the,form,attribute?  In that\ncase a special,KeyError,is raised.  You can catch it like a\nstandard,KeyError,but if you don\u2019t do that, a HTTP 400 Bad Request\nerror page is shown instead.  So for many situations you don\u2019t have to\ndeal with that problem.,,To access parameters submitted in the URL (,?key=value,) you can use the,args,attribute:,,searchword,,=,,request,.,args,.,get,(,'key',,,,'',),,,,We recommend accessing URL parameters with,get,or by catching the,KeyError,because users might change the URL and presenting them a 400\nbad request page in that case is not user friendly.,,For a full list of methods and attributes of the request object, head over\nto the,request,documentation.,,,,File Uploads,\u00b6,,You can handle uploaded files with Flask easily.  Just make sure not to\nforget to set the,enctype=\"multipart/form-data\",attribute on your HTML\nform, otherwise the browser will not transmit your files at all.,,Uploaded files are stored in memory or at a temporary location on the\nfilesystem.  You can access those files by looking at the,files,attribute on the request object.  Each\nuploaded file is stored in that dictionary.  It behaves just like a\nstandard Python,file,object, but it also has a,save(),method that allows you to store that\nfile on the filesystem of the server.  Here is a simple example showing how\nthat works:,,from,,flask,,import,,request,,@app,.,route,(,'/upload',,,,methods,=,[,'GET',,,,'POST',]),,def,,upload_file,():,,if,,request,.,method,,==,,'POST',:,,f,,=,,request,.,files,[,'the_file',],,f,.,save,(,'/var/www/uploads/uploaded_file.txt',),,...,,,,If you want to know how the file was named on the client before it was\nuploaded to your application, you can access the,filename,attribute.  However please keep in\nmind that this value can be forged so never ever trust that value.  If you\nwant to use the filename of the client to store the file on the server,\npass it through the,secure_filename(),function that\nWerkzeug provides for you:,,from,,flask,,import,,request,,from,,werkzeug.utils,,import,,secure_filename,,@app,.,route,(,'/upload',,,,methods,=,[,'GET',,,,'POST',]),,def,,upload_file,():,,if,,request,.,method,,==,,'POST',:,,f,,=,,request,.,files,[,'the_file',],,f,.,save,(,'/var/www/uploads/',,+,,secure_filename,(,f,.,filename,)),,...,,,,For some better examples, checkout the,Uploading Files,pattern.,,,,Cookies,\u00b6,,To access cookies you can use the,cookies,attribute.  To set cookies you can use the,set_cookie,method of response objects.  The,cookies,attribute of request objects is a\ndictionary with all the cookies the client transmits.  If you want to use\nsessions, do not use the cookies directly but instead use the,Sessions,in Flask that add some security on top of cookies for you.,,Reading cookies:,,from,,flask,,import,,request,,@app,.,route,(,'/',),,def,,index,():,,username,,=,,request,.,cookies,.,get,(,'username',),,# use cookies.get(key) instead of cookies[key] to not get a,,# KeyError if the cookie is missing.,,,,Storing cookies:,,from,,flask,,import,,make_response,,@app,.,route,(,'/',),,def,,index,():,,resp,,=,,make_response,(,render_template,(,...,)),,resp,.,set_cookie,(,'username',,,,'the username',),,return,,resp,,,,Note that cookies are set on response objects.  Since you normally\njust return strings from the view functions Flask will convert them into\nresponse objects for you.  If you explicitly want to do that you can use\nthe,make_response(),function and then modify it.,,Sometimes you might want to set a cookie at a point where the response\nobject does not exist yet.  This is possible by utilizing the,Deferred Request Callbacks,pattern.,,For this also see,About Responses,.,,,,,Redirects and Errors,\u00b6,,To redirect a user to another endpoint, use the,redirect(),function; to abort a request early with an error code, use the,abort(),function:,,from,,flask,,import,,abort,,,,redirect,,,,url_for,,@app,.,route,(,'/',),,def,,index,():,,return,,redirect,(,url_for,(,'login',)),,@app,.,route,(,'/login',),,def,,login,():,,abort,(,401,),,this_is_never_executed,(),,,,This is a rather pointless example because a user will be redirected from\nthe index to a page they cannot access (401 means access denied) but it\nshows how that works.,,By default a black and white error page is shown for each error code.  If\nyou want to customize the error page, you can use the,errorhandler(),decorator:,,from,,flask,,import,,render_template,,@app,.,errorhandler,(,404,),,def,,page_not_found,(,error,):,,return,,render_template,(,'page_not_found.html',),,,404,,,,Note the,404,after the,render_template(),call.  This\ntells Flask that the status code of that page should be 404 which means\nnot found.  By default 200 is assumed which translates to: all went well.,,See,Error handlers,for more details.,,,,About Responses,\u00b6,,The return value from a view function is automatically converted into a\nresponse object for you.  If the return value is a string it\u2019s converted\ninto a response object with the string as response body, a,200,,OK,status code and a,text/html,mimetype.  The logic that Flask applies to\nconverting return values into response objects is as follows:,,,If a response object of the correct type is returned it\u2019s directly\nreturned from the view.,,If it\u2019s a string, a response object is created with that data and the\ndefault parameters.,,If a tuple is returned the items in the tuple can provide extra\ninformation.  Such tuples have to be in the form,(response,,,status,,,headers),or,(response,,,headers),where at least one item has\nto be in the tuple.  The,status,value will override the status code\nand,headers,can be a list or dictionary of additional header values.,,If none of that works, Flask will assume the return value is a\nvalid WSGI application and convert that into a response object.,,,If you want to get hold of the resulting response object inside the view\nyou can use the,make_response(),function.,,Imagine you have a view like this:,,@app,.,errorhandler,(,404,),,def,,not_found,(,error,):,,return,,render_template,(,'error.html',),,,404,,,,You just need to wrap the return expression with,make_response(),and get the response object to modify it, then\nreturn it:,,@app,.,errorhandler,(,404,),,def,,not_found,(,error,):,,resp,,=,,make_response,(,render_template,(,'error.html',),,,404,),,resp,.,headers,[,'X-Something',],,=,,'A value',,return,,resp,,,,,,Sessions,\u00b6,,In addition to the request object there is also a second object called,session,which allows you to store information specific to a\nuser from one request to the next.  This is implemented on top of cookies\nfor you and signs the cookies cryptographically.  What this means is that\nthe user could look at the contents of your cookie but not modify it,\nunless they know the secret key used for signing.,,In order to use sessions you have to set a secret key.  Here is how\nsessions work:,,from,,flask,,import,,Flask,,,,session,,,,redirect,,,,url_for,,,,escape,,,,request,,app,,=,,Flask,(,__name__,),,@app,.,route,(,'/',),,def,,index,():,,if,,'username',,in,,session,:,,return,,'Logged in as,%s,',,%,,escape,(,session,[,'username',]),,return,,'You are not logged in',,@app,.,route,(,'/login',,,,methods,=,[,'GET',,,,'POST',]),,def,,login,():,,if,,request,.,method,,==,,'POST',:,,session,[,'username',],,=,,request,.,form,[,'username',],,return,,redirect,(,url_for,(,'index',)),,return,,''',,<form method=\"post\">,,<p><input type=text name=username>,,<p><input type=submit value=Login>,,</form>,,''',,@app,.,route,(,'/logout',),,def,,logout,():,,# remove the username from the session if it's there,,session,.,pop,(,'username',,,,None,),,return,,redirect,(,url_for,(,'index',)),,# set the secret key.  keep this really secret:,,app,.,secret_key,,=,,'A0Zr98j/3yX R~XHH!jmN]LWX/,?RT',,,,The,escape(),mentioned here does escaping for you if you are\nnot using the template engine (as in this example).,,,How to generate good secret keys,,The problem with random is that it\u2019s hard to judge what is truly random.  And\na secret key should be as random as possible.  Your operating system\nhas ways to generate pretty random stuff based on a cryptographic\nrandom generator which can be used to get such a key:,,>>>,import,,os,,>>>,os,.,urandom,(,24,),,'\\xfd{H\\xe5<\\x95\\xf9\\xe3\\x96.5\\xd1\\x01O<!\\xd5\\xa2\\xa0\\x9fR\"\\xa1\\xa8',,Just take that thing and copy/paste it into your code and you're done.,,,,,A note on cookie-based sessions: Flask will take the values you put into the\nsession object and serialize them into a cookie.  If you are finding some\nvalues do not persist across requests, cookies are indeed enabled, and you are\nnot getting a clear error message, check the size of the cookie in your page\nresponses compared to the size supported by web browsers.,,Besides the default client-side based sessions, if you want to handle\nsessions on the server-side instead, there are several\nFlask extensions that support this.,,,,Message Flashing,\u00b6,,Good applications and user interfaces are all about feedback.  If the user\ndoes not get enough feedback they will probably end up hating the\napplication.  Flask provides a really simple way to give feedback to a\nuser with the flashing system.  The flashing system basically makes it\npossible to record a message at the end of a request and access it on the next\n(and only the next) request.  This is usually combined with a layout\ntemplate to expose the message.,,To flash a message use the,flash(),method, to get hold of the\nmessages you can use,get_flashed_messages(),which is also\navailable in the templates.  Check out the,Message Flashing,for a full example.,,,,Logging,\u00b6,,,Changelog,,New in version 0.3.,,,Sometimes you might be in a situation where you deal with data that\nshould be correct, but actually is not.  For example you may have some client-side\ncode that sends an HTTP request to the server but it\u2019s obviously\nmalformed.  This might be caused by a user tampering with the data, or the\nclient code failing.  Most of the time it\u2019s okay to reply with,400,,Bad,,Request,in that situation, but sometimes that won\u2019t do and the code has\nto continue working.,,You may still want to log that something fishy happened.  This is where\nloggers come in handy.  As of Flask 0.3 a logger is preconfigured for you\nto use.,,Here are some example log calls:,,app,.,logger,.,debug,(,'A value for debugging',),,app,.,logger,.,warning,(,'A warning occurred (,%d,apples)',,,,42,),,app,.,logger,.,error,(,'An error occurred',),,,,The attached,logger,is a standard logging,Logger,, so head over to the official,logging\ndocumentation,for more\ninformation.,,Read more on,Application Errors,.,,,,Hooking in WSGI Middlewares,\u00b6,,If you want to add a WSGI middleware to your application you can wrap the\ninternal WSGI application.  For example if you want to use one of the\nmiddlewares from the Werkzeug package to work around bugs in lighttpd, you\ncan do it like this:,,from,,werkzeug.contrib.fixers,,import,,LighttpdCGIRootFix,,app,.,wsgi_app,,=,,LighttpdCGIRootFix,(,app,.,wsgi_app,),,,,,,Using Flask Extensions,\u00b6,,Extensions are packages that help you accomplish common tasks. For\nexample, Flask-SQLAlchemy provides SQLAlchemy support that makes it simple\nand easy to use with Flask.,,For more on Flask extensions, have a look at,Flask Extensions,.,,,,Deploying to a Web Server,\u00b6,,Ready to deploy your new Flask app? Go to,Deployment Options,.,,,,,,,,,,,,,Contents,,,Quickstart,,A Minimal Application,,What to do if the Server does not Start,,Old Version of Flask,,Invalid Import Name,,,,Debug Mode,,Routing,,Variable Rules,,URL Building,,HTTP Methods,,,,Static Files,,Rendering Templates,,Accessing Request Data,,Context Locals,,The Request Object,,File Uploads,,Cookies,,,,Redirects and Errors,,About Responses,,Sessions,,Message Flashing,,Logging,,Hooking in WSGI Middlewares,,Using Flask Extensions,,Deploying to a Web Server,,,,,Navigation,,,Overview,,,Previous:,Installation,,Next:,Tutorial,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Welcome to Flask", "url": "http://flask.pocoo.org/docs/1.0/", "content": ",,,,,Welcome to Flask \u2014 Flask 1.0.2 documentation,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '';,,,,Navigation,,,,index,,,modules,|,,,next,|,,Flask 1.0.2 documentation,\u00bb,,,,,,,,,Welcome to Flask,\u00b6,,,Welcome to Flask\u2019s documentation. Get started with,Installation,and then get an overview with the,Quickstart,. There is also a\nmore detailed,Tutorial,that shows how to create a small but\ncomplete application with Flask. Common patterns are described in the,Patterns for Flask,section. The rest of the docs describe each component of\nFlask in detail, with a full reference in the,API,section.,,Flask depends on the,Jinja,template engine and the,Werkzeug,WSGI\ntoolkit. The documentation for these libraries can be found at:,,,Jinja documentation,,Werkzeug documentation,,,,User\u2019s Guide,\u00b6,,This part of the documentation, which is mostly prose, begins with some\nbackground information about Flask, then focuses on step-by-step\ninstructions for web development with Flask.,,,,Foreword,,What does \u201cmicro\u201d mean?,,Configuration and Conventions,,Growing with Flask,,,,Foreword for Experienced Programmers,,Thread-Locals in Flask,,Develop for the Web with Caution,,,,Installation,,Python Version,,Dependencies,,Virtual environments,,Install Flask,,Install virtualenv,,,,Quickstart,,A Minimal Application,,What to do if the Server does not Start,,Debug Mode,,Routing,,Static Files,,Rendering Templates,,Accessing Request Data,,Redirects and Errors,,About Responses,,Sessions,,Message Flashing,,Logging,,Hooking in WSGI Middlewares,,Using Flask Extensions,,Deploying to a Web Server,,,,Tutorial,,Project Layout,,Application Setup,,Define and Access the Database,,Blueprints and Views,,Templates,,Static Files,,Blog Blueprint,,Make the Project Installable,,Test Coverage,,Deploy to Production,,Keep Developing!,,,,Templates,,Jinja Setup,,Standard Context,,Standard Filters,,Controlling Autoescaping,,Registering Filters,,Context Processors,,,,Testing Flask Applications,,The Application,,The Testing Skeleton,,The First Test,,Logging In and Out,,Test Adding Messages,,Other Testing Tricks,,Faking Resources and Context,,Keeping the Context Around,,Accessing and Modifying Sessions,,Testing JSON APIs,,Testing CLI Commands,,,,Application Errors,,Error Logging Tools,,Error handlers,,Logging,,,,Debugging Application Errors,,When in Doubt, Run Manually,,Working with Debuggers,,,,Logging,,Basic Configuration,,Email Errors to Admins,,Injecting Request Information,,Other Libraries,,,,Configuration Handling,,Configuration Basics,,Environment and Debug Features,,Builtin Configuration Values,,Configuring from Files,,Configuring from Environment Variables,,Configuration Best Practices,,Development / Production,,Instance Folders,,,,Signals,,Subscribing to Signals,,Creating Signals,,Sending Signals,,Signals and Flask\u2019s Request Context,,Decorator Based Signal Subscriptions,,Core Signals,,,,Pluggable Views,,Basic Principle,,Method Hints,,Method Based Dispatching,,Decorating Views,,Method Views for APIs,,,,The Application Context,,Purpose of the Context,,Lifetime of the Context,,Manually Push a Context,,Storing Data,,Events and Signals,,,,The Request Context,,Purpose of the Context,,Lifetime of the Context,,Manually Push a Context,,How the Context Works,,Callbacks and Errors,,Context Preservation on Error,,Notes On Proxies,,,,Modular Applications with Blueprints,,Why Blueprints?,,The Concept of Blueprints,,My First Blueprint,,Registering Blueprints,,Blueprint Resources,,Building URLs,,Error Handlers,,,,Extensions,,Finding Extensions,,Using Extensions,,Building Extensions,,,,Command Line Interface,,Application Discovery,,Run the Development Server,,Open a Shell,,Environments,,Debug Mode,,Environment Variables From dotenv,,Environment Variables From virtualenv,,Custom Commands,,Plugins,,Custom Scripts,,PyCharm Integration,,,,Development Server,,Command Line,,In Code,,,,Working with the Shell,,Command Line Interface,,Creating a Request Context,,Firing Before/After Request,,Further Improving the Shell Experience,,,,Patterns for Flask,,Larger Applications,,Application Factories,,Application Dispatching,,Implementing API Exceptions,,Using URL Processors,,Deploying with Setuptools,,Deploying with Fabric,,Using SQLite 3 with Flask,,SQLAlchemy in Flask,,Uploading Files,,Caching,,View Decorators,,Form Validation with WTForms,,Template Inheritance,,Message Flashing,,AJAX with jQuery,,Custom Error Pages,,Lazily Loading Views,,MongoKit in Flask,,Adding a favicon,,Streaming Contents,,Deferred Request Callbacks,,Adding HTTP Method Overrides,,Request Content Checksums,,Celery Background Tasks,,Subclassing Flask,,,,Deployment Options,,Hosted options,,Self-hosted options,,,,Becoming Big,,Read the Source.,,Hook. Extend.,,Subclass.,,Wrap with middleware.,,Fork.,,Scale like a pro.,,Discuss with the community.,,,,,,,,API Reference,\u00b6,,If you are looking for information on a specific function, class or\nmethod, this part of the documentation is for you.,,,,API,,Application Object,,Blueprint Objects,,Incoming Request Data,,Response Objects,,Sessions,,Session Interface,,Test Client,,Test CLI Runner,,Application Globals,,Useful Functions and Classes,,Message Flashing,,JSON Support,,Template Rendering,,Configuration,,Stream Helpers,,Useful Internals,,Signals,,Class-Based Views,,URL Route Registrations,,View Function Options,,Command Line Interface,,,,,,,,Additional Notes,\u00b6,,Design notes, legal information and changelog are here for the interested.,,,,Design Decisions in Flask,,The Explicit Application Object,,The Routing System,,One Template Engine,,Micro with Dependencies,,Thread Locals,,What Flask is, What Flask is Not,,,,HTML/XHTML FAQ,,History of XHTML,,History of HTML5,,HTML versus XHTML,,What does \u201cstrict\u201d mean?,,New technologies in HTML5,,What should be used?,,,,Security Considerations,,Cross-Site Scripting (XSS),,Cross-Site Request Forgery (CSRF),,JSON Security,,Security Headers,,,,Unicode in Flask,,Automatic Conversion,,The Golden Rule,,Encoding and Decoding Yourself,,Configuring Editors,,,,Flask Extension Development,,Anatomy of an Extension,,\u201cHello Flaskext!\u201d,,Initializing Extensions,,The Extension Code,,Using _app_ctx_stack,,Learn from Others,,Approved Extensions,,,,Pocoo Styleguide,,General Layout,,Expressions and Statements,,Naming Conventions,,Docstrings,,Comments,,,,Upgrading to Newer Releases,,Version 0.12,,Version 0.11,,Version 0.10,,Version 0.9,,Version 0.8,,Version 0.7,,Version 0.6,,Version 0.5,,Version 0.4,,Version 0.3,,,,Flask Changelog,,Version 1.0.3,,Version 1.0.2,,Version 1.0.1,,Version 1.0,,Version 0.12.4,,Version 0.12.3,,Version 0.12.2,,Version 0.12.1,,Version 0.12,,Version 0.11.2,,Version 0.11.1,,Version 0.11,,Version 0.10.2,,Version 0.10.1,,Version 0.10,,Version 0.9,,Version 0.8.1,,Version 0.8,,Version 0.7.3,,Version 0.7.2,,Version 0.7.1,,Version 0.7,,Version 0.6.1,,Version 0.6,,Version 0.5.2,,Version 0.5.1,,Version 0.5,,Version 0.4,,Version 0.3.1,,Version 0.3,,Version 0.2,,Version 0.1,,,,License,,Authors,,General License Definitions,,Flask License,,Flask Artwork License,,,,How to contribute to Flask,,Support questions,,Reporting issues,,Submitting patches,,Caution: zero-padded file modes,,,,,,,,,,,,,,,,,Project Links,,,Donate to Pallets,,Flask Website,,PyPI releases,,Source Code,,Issue Tracker,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Installation", "url": "http://flask.pocoo.org/docs/0.12/installation/", "content": ",,,,,Installation \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,Installation,\u00b6,,Flask depends on some external libraries, like,Werkzeug,and,Jinja2,.\nWerkzeug is a toolkit for WSGI, the standard Python interface between web\napplications and a variety of servers for both development and deployment.\nJinja2 renders templates.,,So how do you get all that on your computer quickly?  There are many ways you\ncould do that, but the most kick-ass method is virtualenv, so let\u2019s have a look\nat that first.,,You will need Python 2.6 or newer to get started, so be sure to have an\nup-to-date Python 2.x installation.  For using Flask with Python 3 have a\nlook at,Python 3 Support,.,,,virtualenv,\u00b6,,Virtualenv is probably what you want to use during development, and if you have\nshell access to your production machines, you\u2019ll probably want to use it there,\ntoo.,,What problem does virtualenv solve?  If you like Python as much as I do,\nchances are you want to use it for other projects besides Flask-based web\napplications.  But the more projects you have, the more likely it is that you\nwill be working with different versions of Python itself, or at least different\nversions of Python libraries.  Let\u2019s face it: quite often libraries break\nbackwards compatibility, and it\u2019s unlikely that any serious application will\nhave zero dependencies.  So what do you do if two or more of your projects have\nconflicting dependencies?,,Virtualenv to the rescue!  Virtualenv enables multiple side-by-side\ninstallations of Python, one for each project.  It doesn\u2019t actually install\nseparate copies of Python, but it does provide a clever way to keep different\nproject environments isolated.  Let\u2019s see how virtualenv works.,,If you are on Mac OS X or Linux, chances are that the following\ncommand will work for you:,,$ sudo pip install virtualenv,,,It will probably install virtualenv on your system.  Maybe it\u2019s even\nin your package manager.  If you use Ubuntu, try:,,$ sudo apt-get install python-virtualenv,,,If you are on Windows and don\u2019t have the,easy_install,command, you must\ninstall it first.  Check the,pip and setuptools on Windows,section for more\ninformation about how to do that.  Once you have it installed, run the same\ncommands as above, but without the,sudo,prefix.,,Once you have virtualenv installed, just fire up a shell and create\nyour own environment.  I usually create a project folder and a,venv,folder within:,,$ mkdir myproject\n$ cd myproject\n$ virtualenv venv\nNew python executable in venv/bin/python\nInstalling setuptools, pip............done.,,,Now, whenever you want to work on a project, you only have to activate the\ncorresponding environment.  On OS X and Linux, do the following:,,$ . venv/bin/activate,,,If you are a Windows user, the following command is for you:,,$ venv\\Scripts\\activate,,,Either way, you should now be using your virtualenv (notice how the prompt of\nyour shell has changed to show the active environment).,,And if you want to go back to the real world, use the following command:,,$ deactivate,,,After doing this, the prompt of your shell should be as familiar as before.,,Now, let\u2019s move on. Enter the following command to get Flask activated in your\nvirtualenv:,,$ pip install Flask,,,A few seconds later and you are good to go.,,,,System-Wide Installation,\u00b6,,This is possible as well, though I do not recommend it.  Just run,pip,with root privileges:,,$ sudo pip install Flask,,,(On Windows systems, run it in a command-prompt window with administrator\nprivileges, and leave out,sudo,.),,,,Living on the Edge,\u00b6,,If you want to work with the latest version of Flask, there are two ways: you\ncan either let,pip,pull in the development version, or you can tell\nit to operate on a git checkout.  Either way, virtualenv is recommended.,,Get the git checkout in a new virtualenv and run in development mode:,,$ git clone http://github.com/pallets/flask.git\nInitialized empty Git repository in ~/dev/flask/.git/\n$ cd flask\n$ virtualenv venv\nNew python executable in venv/bin/python\nInstalling setuptools, pip............done.\n$ . venv/bin/activate\n$ python setup.py develop\n...\nFinished processing dependencies for Flask,,,This will pull in the dependencies and activate the git head as the current\nversion inside the virtualenv.  Then all you have to do is run,git,,pull,,origin,to update to the latest version.,,,,pip,and,setuptools,on Windows,\u00b6,,Sometimes getting the standard \u201cPython packaging tools\u201d like,pip,,,setuptools,and,virtualenv,can be a little trickier, but nothing very hard. The crucial\npackage you will need is pip - this will let you install\nanything else (like virtualenv). Fortunately there is a \u201cbootstrap script\u201d\nyou can run to install.,,If you don\u2019t currently have,pip,, then,get-pip.py,will install it for you.,,get-pip.py,,It should be double-clickable once you download it. If you already have,pip,,\nyou can upgrade them by running:,,>,,pip,,install,,--,upgrade,,pip,,setuptools,,,,Most often, once you pull up a command prompt you want to be able to type,pip,and,python,which will run those things, but this might not automatically happen\non Windows, because it doesn\u2019t know where those executables are (give either a try!).,,To fix this, you should be able to navigate to your Python install directory\n(e.g,C:Python27,), then go to,Tools,, then,Scripts,, then find the,win_add2path.py,file and run that. Open a,new,Command Prompt and\ncheck that you can now just type,python,to bring up the interpreter.,,Finally, to install,virtualenv,, you can simply run:,,>,,pip,,install,,virtualenv,,,,Then you can be off on your way following the installation instructions above.,,,,,,,,,,,,,Contents,,,Installation,,virtualenv,,System-Wide Installation,,Living on the Edge,,pip,and,setuptools,on Windows,,,,,Navigation,,,Overview,,,Previous:,Foreword for Experienced Programmers,,Next:,Quickstart,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Welcome to Flask", "url": "http://flask.pocoo.org/docs/0.12/", "content": ",,,,,Welcome to Flask \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '';,,,,Navigation,,,,index,,,modules,|,,,next,|,,Flask 0.12.4 documentation,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,Welcome to Flask,\u00b6,,,Welcome to Flask\u2019s documentation.  This documentation is divided into\ndifferent parts.  I recommend that you get started with,Installation,and then head over to the,Quickstart,.\nBesides the quickstart, there is also a more detailed,Tutorial,that\nshows how to create a complete (albeit small) application with Flask.  If\nyou\u2019d rather dive into the internals of Flask, check out\nthe,API,documentation.  Common patterns are described in the,Patterns for Flask,section.,,Flask depends on two external libraries: the,Jinja2,template\nengine and the,Werkzeug,WSGI toolkit.  These libraries are not documented\nhere.  If you want to dive into their documentation, check out the\nfollowing links:,,,Jinja2 Documentation,,Werkzeug Documentation,,,,User\u2019s Guide,\u00b6,,This part of the documentation, which is mostly prose, begins with some\nbackground information about Flask, then focuses on step-by-step\ninstructions for web development with Flask.,,,,Foreword,,What does \u201cmicro\u201d mean?,,Configuration and Conventions,,Growing with Flask,,,,Foreword for Experienced Programmers,,Thread-Locals in Flask,,Develop for the Web with Caution,,Python 3 Support in Flask,,,,Installation,,virtualenv,,System-Wide Installation,,Living on the Edge,,pip,and,setuptools,on Windows,,,,Quickstart,,A Minimal Application,,What to do if the Server does not Start,,Debug Mode,,Routing,,Static Files,,Rendering Templates,,Accessing Request Data,,Redirects and Errors,,About Responses,,Sessions,,Message Flashing,,Logging,,Hooking in WSGI Middlewares,,Using Flask Extensions,,Deploying to a Web Server,,,,Tutorial,,Introducing Flaskr,,Step 0: Creating The Folders,,Step 1: Database Schema,,Step 2: Application Setup Code,,Step 3: Installing flaskr as a Package,,Step 4: Database Connections,,Step 5: Creating The Database,,Step 6: The View Functions,,Step 7: The Templates,,Step 8: Adding Style,,Bonus: Testing the Application,,,,Templates,,Jinja Setup,,Standard Context,,Standard Filters,,Controlling Autoescaping,,Registering Filters,,Context Processors,,,,Testing Flask Applications,,The Application,,The Testing Skeleton,,The First Test,,Logging In and Out,,Test Adding Messages,,Other Testing Tricks,,Faking Resources and Context,,Keeping the Context Around,,Accessing and Modifying Sessions,,,,Application Errors,,Error Logging Tools,,Error handlers,,Error Mails,,Logging to a File,,Controlling the Log Format,,Other Libraries,,,,Debugging Application Errors,,When in Doubt, Run Manually,,Working with Debuggers,,,,Configuration Handling,,Configuration Basics,,Builtin Configuration Values,,Configuring from Files,,Configuration Best Practices,,Development / Production,,Instance Folders,,,,Signals,,Subscribing to Signals,,Creating Signals,,Sending Signals,,Signals and Flask\u2019s Request Context,,Decorator Based Signal Subscriptions,,Core Signals,,,,Pluggable Views,,Basic Principle,,Method Hints,,Method Based Dispatching,,Decorating Views,,Method Views for APIs,,,,The Application Context,,Purpose of the Application Context,,Creating an Application Context,,Locality of the Context,,Context Usage,,,,The Request Context,,Diving into Context Locals,,How the Context Works,,Callbacks and Errors,,Teardown Callbacks,,Notes On Proxies,,Context Preservation on Error,,,,Modular Applications with Blueprints,,Why Blueprints?,,The Concept of Blueprints,,My First Blueprint,,Registering Blueprints,,Blueprint Resources,,Building URLs,,Error Handlers,,,,Flask Extensions,,Finding Extensions,,Using Extensions,,Building Extensions,,,,Command Line Interface,,Basic Usage,,Virtualenv Integration,,Debug Flag,,Running a Shell,,Custom Commands,,Application Context,,Factory Functions,,Custom Scripts,,CLI Plugins,,,,Development Server,,Command Line,,In Code,,,,Working with the Shell,,Command Line Interface,,Creating a Request Context,,Firing Before/After Request,,Further Improving the Shell Experience,,,,Patterns for Flask,,Larger Applications,,Application Factories,,Application Dispatching,,Implementing API Exceptions,,Using URL Processors,,Deploying with Setuptools,,Deploying with Fabric,,Using SQLite 3 with Flask,,SQLAlchemy in Flask,,Uploading Files,,Caching,,View Decorators,,Form Validation with WTForms,,Template Inheritance,,Message Flashing,,AJAX with jQuery,,Custom Error Pages,,Lazily Loading Views,,MongoKit in Flask,,Adding a favicon,,Streaming Contents,,Deferred Request Callbacks,,Adding HTTP Method Overrides,,Request Content Checksums,,Celery Based Background Tasks,,Subclassing Flask,,,,Deployment Options,,Hosted options,,Self-hosted options,,,,Becoming Big,,Read the Source.,,Hook. Extend.,,Subclass.,,Wrap with middleware.,,Fork.,,Scale like a pro.,,Discuss with the community.,,,,,,,,API Reference,\u00b6,,If you are looking for information on a specific function, class or\nmethod, this part of the documentation is for you.,,,,API,,Application Object,,Blueprint Objects,,Incoming Request Data,,Response Objects,,Sessions,,Session Interface,,Test Client,,Application Globals,,Useful Functions and Classes,,Message Flashing,,JSON Support,,Template Rendering,,Configuration,,Extensions,,Stream Helpers,,Useful Internals,,Signals,,Class-Based Views,,URL Route Registrations,,View Function Options,,Command Line Interface,,,,,,,,Additional Notes,\u00b6,,Design notes, legal information and changelog are here for the interested.,,,,Design Decisions in Flask,,The Explicit Application Object,,The Routing System,,One Template Engine,,Micro with Dependencies,,Thread Locals,,What Flask is, What Flask is Not,,,,HTML/XHTML FAQ,,History of XHTML,,History of HTML5,,HTML versus XHTML,,What does \u201cstrict\u201d mean?,,New technologies in HTML5,,What should be used?,,,,Security Considerations,,Cross-Site Scripting (XSS),,Cross-Site Request Forgery (CSRF),,JSON Security,,,,Unicode in Flask,,Automatic Conversion,,The Golden Rule,,Encoding and Decoding Yourself,,Configuring Editors,,,,Flask Extension Development,,Anatomy of an Extension,,\u201cHello Flaskext!\u201d,,Initializing Extensions,,The Extension Code,,Using _app_ctx_stack,,Teardown Behavior,,Learn from Others,,Approved Extensions,,Extension Import Transition,,,,Pocoo Styleguide,,General Layout,,Expressions and Statements,,Naming Conventions,,Docstrings,,Comments,,,,Python 3 Support,,Upgrading to Newer Releases,,Version 0.12,,Version 0.11,,Version 0.10,,Version 0.9,,Version 0.8,,Version 0.7,,Version 0.6,,Version 0.5,,Version 0.4,,Version 0.3,,,,Flask Changelog,,Version 0.12.4,,Version 0.12.3,,Version 0.12.2,,Version 0.12.1,,Version 0.12,,Version 0.11.2,,Version 0.11.1,,Version 0.11,,Version 0.10.2,,Version 0.10.1,,Version 0.10,,Version 0.9,,Version 0.8.1,,Version 0.8,,Version 0.7.3,,Version 0.7.2,,Version 0.7.1,,Version 0.7,,Version 0.6.1,,Version 0.6,,Version 0.5.2,,Version 0.5.1,,Version 0.5,,Version 0.4,,Version 0.3.1,,Version 0.3,,Version 0.2,,Version 0.1,,,,License,,Authors,,General License Definitions,,Flask License,,Flask Artwork License,,,,,,,,,,,,,,,,,Project Links,,,Donate to Pallets,,Flask Website,,PyPI releases,,Source Code,,Issue Tracker,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Foreword", "url": "http://flask.pocoo.org/docs/0.12/foreword/", "content": ",,,,,Foreword \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,Foreword,\u00b6,,Read this before you get started with Flask.  This hopefully answers some\nquestions about the purpose and goals of the project, and when you\nshould or should not be using it.,,,What does \u201cmicro\u201d mean?,\u00b6,,\u201cMicro\u201d does not mean that your whole web application has to fit into a single\nPython file (although it certainly can), nor does it mean that Flask is lacking\nin functionality. The \u201cmicro\u201d in microframework means Flask aims to keep the\ncore simple but extensible. Flask won\u2019t make many decisions for you, such as\nwhat database to use. Those decisions that it does make, such as what\ntemplating engine to use, are easy to change.  Everything else is up to you, so\nthat Flask can be everything you need and nothing you don\u2019t.,,By default, Flask does not include a database abstraction layer, form\nvalidation or anything else where different libraries already exist that can\nhandle that. Instead, Flask supports extensions to add such functionality to\nyour application as if it was implemented in Flask itself. Numerous extensions\nprovide database integration, form validation, upload handling, various open\nauthentication technologies, and more. Flask may be \u201cmicro\u201d, but it\u2019s ready for\nproduction use on a variety of needs.,,,,Configuration and Conventions,\u00b6,,Flask has many configuration values, with sensible defaults, and a few\nconventions when getting started.  By convention, templates and static files are\nstored in subdirectories within the application\u2019s Python source tree, with the\nnames,templates,and,static,respectively. While this can be changed, you\nusually don\u2019t have to, especially when getting started.,,,,Growing with Flask,\u00b6,,Once you have Flask up and running, you\u2019ll find a variety of extensions\navailable in the community to integrate your project for production. The Flask\ncore team reviews extensions and ensures approved extensions do not break with\nfuture releases.,,As your codebase grows, you are free to make the design decisions appropriate\nfor your project.  Flask will continue to provide a very simple glue layer to\nthe best that Python has to offer.  You can implement advanced patterns in\nSQLAlchemy or another database tool, introduce non-relational data persistence\nas appropriate, and take advantage of framework-agnostic tools built for WSGI,\nthe Python web interface.,,Flask includes many hooks to customize its behavior. Should you need more\ncustomization, the Flask class is built for subclassing. If you are interested\nin that, check out the,Becoming Big,chapter.  If you are curious about\nthe Flask design principles, head over to the section about,Design Decisions in Flask,.,,Continue to,Installation,, the,Quickstart,, or the,Foreword for Experienced Programmers,.,,,,,,,,,,,,,Contents,,,Foreword,,What does \u201cmicro\u201d mean?,,Configuration and Conventions,,Growing with Flask,,,,,Navigation,,,Overview,,,Previous:,Welcome to Flask,,Next:,Foreword for Experienced Programmers,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "Python Module Index", "url": "http://flask.pocoo.org/docs/0.12/py-modindex/", "content": ",,,,,Python Module Index \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,Flask 0.12.4 documentation,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,Python Module Index,,,f,,,,,,,f,,,,,flask,,,,,,flask.json,,,,,,,,,,,,Navigation,,,Overview,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "API", "url": "http://flask.pocoo.org/docs/0.12/api/", "content": ",,,,,API \u2014 Flask 0.12.4 documentation,,,,,,,,,,,,,,DOCUMENTATION_OPTIONS.URL_ROOT = '../';,,,,Navigation,,,,index,,,modules,|,,,next,|,,,previous,|,,Flask 0.12.4 documentation,\u00bb,,,,,Warning:,This is an old version. The latest stable version is,Flask 1.0,.,,,,,,API,\u00b6,,This part of the documentation covers all the interfaces of Flask.  For\nparts where Flask depends on external libraries, we document the most\nimportant right here and provide links to the canonical documentation.,,,Application Object,\u00b6,,,,class,flask.,Flask,(,import_name,,,static_path=None,,,static_url_path=None,,,static_folder='static',,,template_folder='templates',,,instance_path=None,,,instance_relative_config=False,,,root_path=None,),\u00b6,,The flask object implements a WSGI application and acts as the central\nobject.  It is passed the name of the module or package of the\napplication.  Once it is created it will act as a central registry for\nthe view functions, the URL rules, template configuration and much more.,,The name of the package is used to resolve resources from inside the\npackage or the folder the module is contained in depending on if the\npackage parameter resolves to an actual python package (a folder with\nan,__init__.py,file inside) or a standard module (just a,.py,file).,,For more information about resource loading, see,open_resource(),.,,Usually you create a,Flask,instance in your main module or\nin the,__init__.py,file of your package like this:,,from,,flask,,import,,Flask,,app,,=,,Flask,(,__name__,),,,,,About the First Parameter,,The idea of the first parameter is to give Flask an idea of what\nbelongs to your application.  This name is used to find resources\non the filesystem, can be used by extensions to improve debugging\ninformation and a lot more.,,So it\u2019s important what you provide there.  If you are using a single\nmodule,,__name__,is always the correct value.  If you however are\nusing a package, it\u2019s usually recommended to hardcode the name of\nyour package there.,,For example if your application is defined in,yourapplication/app.py,you should create it with one of the two versions below:,,app,,=,,Flask,(,'yourapplication',),,app,,=,,Flask,(,__name__,.,split,(,'.',)[,0,]),,,,Why is that?  The application will work even with,__name__,, thanks\nto how resources are looked up.  However it will make debugging more\npainful.  Certain extensions can make assumptions based on the\nimport name of your application.  For example the Flask-SQLAlchemy\nextension will look for the code in your application that triggered\nan SQL query in debug mode.  If the import name is not properly set\nup, that debugging information is lost.  (For example it would only\npick up SQL queries in,yourapplication.app,and not,yourapplication.views.frontend,),,,,Changelog,,New in version 0.11:,The,root_path,parameter was added.,,,,New in version 0.8:,The,instance_path,and,instance_relative_config,parameters were\nadded.,,,,New in version 0.7:,The,static_url_path,,,static_folder,, and,template_folder,parameters were added.,,,,,,,Parameters:,,import_name,\u2013 the name of the application package,,static_url_path,\u2013 can be used to specify a different path for the\nstatic files on the web.  Defaults to the name\nof the,static_folder,folder.,,static_folder,\u2013 the folder with static files that should be served\nat,static_url_path,.  Defaults to the,'static',folder in the root path of the application.,,template_folder,\u2013 the folder that contains the templates that should\nbe used by the application.  Defaults to,'templates',folder in the root path of the\napplication.,,instance_path,\u2013 An alternative instance path for the application.\nBy default the folder,'instance',next to the\npackage or module is assumed to be the instance\npath.,,instance_relative_config,\u2013 if set to,True,relative filenames\nfor loading the config are assumed to\nbe relative to the instance path instead\nof the application root.,,root_path,\u2013 Flask by default will automatically calculate the path\nto the root of the application.  In certain situations\nthis cannot be achieved (for instance if the package\nis a Python 3 namespace package) and needs to be\nmanually defined.,,,,,,,,,add_template_filter,(,f,,,name=None,),\u00b6,,Register a custom template filter.  Works exactly like the,template_filter(),decorator.,,,,,,Parameters:,name,\u2013 the optional name of the filter, otherwise the\nfunction name will be used.,,,,,,,,add_template_global,(,f,,,name=None,),\u00b6,,Register a custom template global function. Works exactly like the,template_global(),decorator.,,,Changelog,,New in version 0.10.,,,,,,,Parameters:,name,\u2013 the optional name of the global function, otherwise the\nfunction name will be used.,,,,,,,,add_template_test,(,f,,,name=None,),\u00b6,,Register a custom template test.  Works exactly like the,template_test(),decorator.,,,Changelog,,New in version 0.10.,,,,,,,Parameters:,name,\u2013 the optional name of the test, otherwise the\nfunction name will be used.,,,,,,,,add_url_rule,(,rule,,,endpoint=None,,,view_func=None,,,**options,),\u00b6,,Connects a URL rule.  Works exactly like the,route(),decorator.  If a view_func is provided it will be registered with the\nendpoint.,,Basically this example:,,@app,.,route,(,'/',),,def,,index,():,,pass,,,,Is equivalent to the following:,,def,,index,():,,pass,,app,.,add_url_rule,(,'/',,,,'index',,,,index,),,,,If the view_func is not provided you will need to connect the endpoint\nto a view function like so:,,app,.,view_functions,[,'index',],,=,,index,,,,Internally,route(),invokes,add_url_rule(),so if you want\nto customize the behavior via subclassing you only need to change\nthis method.,,For more information refer to,URL Route Registrations,.,,,Changelog,,Changed in version 0.6:,OPTIONS,is added automatically as method.,,,,Changed in version 0.2:,view_func,parameter added.,,,,,,,Parameters:,,rule,\u2013 the URL rule as string,,endpoint,\u2013 the endpoint for the registered URL rule.  Flask\nitself assumes the name of the view function as\nendpoint,,view_func,\u2013 the function to call when serving a request to the\nprovided endpoint,,options,\u2013 the options to be forwarded to the underlying,Rule,object.  A change\nto Werkzeug is handling of method options.  methods\nis a list of methods this rule should be limited\nto (,GET,,,POST,etc.).  By default a rule\njust listens for,GET,(and implicitly,HEAD,).\nStarting with Flask 0.6,,OPTIONS,is implicitly\nadded and handled by the standard request handling.,,,,,,,,,,after_request,(,f,),\u00b6,,Register a function to be run after each request.,,Your function must take one parameter, an instance of,response_class,and return a new response object or the\nsame (see,process_response(),).,,As of Flask 0.7 this function might not be executed at the end of the\nrequest in case an unhandled exception occurred.,,,,,after_request_funcs,= None,\u00b6,,A dictionary with lists of functions that should be called after\neach request.  The key of the dictionary is the name of the blueprint\nthis function is active for,,None,for all requests.  This can for\nexample be used to close database connections. To register a function\nhere, use the,after_request(),decorator.,,,,,app_context,(,),\u00b6,,Binds the application only.  For as long as the application is bound\nto the current context the,flask.current_app,points to that\napplication.  An application context is automatically created when a\nrequest context is pushed if necessary.,,Example usage:,,with,,app,.,app_context,():,,...,,,,,Changelog,,New in version 0.9.,,,,,,app_ctx_globals_class,\u00b6,,alias of,flask.ctx._AppCtxGlobals,,,,,auto_find_instance_path,(,),\u00b6,,Tries to locate the instance path if it was not provided to the\nconstructor of the application class.  It will basically calculate\nthe path to a folder named,instance,next to your main file or\nthe package.,,,Changelog,,New in version 0.8.,,,,,,before_first_request,(,f,),\u00b6,,Registers a function to be run before the first request to this\ninstance of the application.,,The function will be called without any arguments and its return\nvalue is ignored.,,,Changelog,,New in version 0.8.,,,,,,before_first_request_funcs,= None,\u00b6,,A lists of functions that should be called at the beginning of the\nfirst request to this instance.  To register a function here, use\nthe,before_first_request(),decorator.,,,Changelog,,New in version 0.8.,,,,,,before_request,(,f,),\u00b6,,Registers a function to run before each request.,,The function will be called without any arguments.\nIf the function returns a non-None value, it\u2019s handled as\nif it was the return value from the view and further\nrequest handling is stopped.,,,,,before_request_funcs,= None,\u00b6,,A dictionary with lists of functions that should be called at the\nbeginning of the request.  The key of the dictionary is the name of\nthe blueprint this function is active for,,None,for all requests.\nThis can for example be used to open database connections or\ngetting hold of the currently logged in user.  To register a\nfunction here, use the,before_request(),decorator.,,,,,blueprints,= None,\u00b6,,all the attached blueprints in a dictionary by name.  Blueprints\ncan be attached multiple times so this dictionary does not tell\nyou how often they got attached.,,,Changelog,,New in version 0.7.,,,,,,cli,= None,\u00b6,,The click command line context for this application.  Commands\nregistered here show up in the,flask,command once the\napplication has been discovered.  The default commands are\nprovided by Flask itself and can be overridden.,,This is an instance of a,click.Group,object.,,,,,config,= None,\u00b6,,The configuration dictionary as,Config,.  This behaves\nexactly like a regular dictionary but supports additional methods\nto load a config from files.,,,,,config_class,\u00b6,,alias of,flask.config.Config,,,,,context_processor,(,f,),\u00b6,,Registers a template context processor function.,,,,,create_global_jinja_loader,(,),\u00b6,,Creates the loader for the Jinja2 environment.  Can be used to\noverride just the loader and keeping the rest unchanged.  It\u2019s\ndiscouraged to override this function.  Instead one should override\nthe,jinja_loader(),function instead.,,The global loader dispatches between the loaders of the application\nand the individual blueprints.,,,Changelog,,New in version 0.7.,,,,,,create_jinja_environment,(,),\u00b6,,Creates the Jinja2 environment based on,jinja_options,and,select_jinja_autoescape(),.  Since 0.7 this also adds\nthe Jinja2 globals and filters after initialization.  Override\nthis function to customize the behavior.,,,Changelog,,Changed in version 0.11:,Environment.auto_reload,set in accordance with,TEMPLATES_AUTO_RELOAD,configuration option.,,,,New in version 0.5.,,,,,,create_url_adapter,(,request,),\u00b6,,Creates a URL adapter for the given request.  The URL adapter\nis created at a point where the request context is not yet set up\nso the request is passed explicitly.,,,Changelog,,Changed in version 0.9:,This can now also be called without a request object when the\nURL adapter is created for the application context.,,,,New in version 0.6.,,,,,,debug,\u00b6,,The debug flag.  Set this to,True,to enable debugging of the\napplication.  In debug mode the debugger will kick in when an unhandled\nexception occurs and the integrated server will automatically reload\nthe application if changes in the code are detected.,,This attribute can also be configured from the config with the,DEBUG,configuration key.  Defaults to,False,.,,,,,default_config,= {'APPLICATION_ROOT': None, 'DEBUG': False, 'EXPLAIN_TEMPLATE_LOADING': False, 'JSONIFY_MIMETYPE': 'application/json', 'JSONIFY_PRETTYPRINT_REGULAR': True, 'JSON_AS_ASCII': True, 'JSON_SORT_KEYS': True, 'LOGGER_HANDLER_POLICY': 'always', 'LOGGER_NAME': None, 'MAX_CONTENT_LENGTH': None, 'PERMANENT_SESSION_LIFETIME': datetime.timedelta(31), 'PREFERRED_URL_SCHEME': 'http', 'PRESERVE_CONTEXT_ON_EXCEPTION': None, 'PROPAGATE_EXCEPTIONS': None, 'SECRET_KEY': None, 'SEND_FILE_MAX_AGE_DEFAULT': datetime.timedelta(0, 43200), 'SERVER_NAME': None, 'SESSION_COOKIE_DOMAIN': None, 'SESSION_COOKIE_HTTPONLY': True, 'SESSION_COOKIE_NAME': 'session', 'SESSION_COOKIE_PATH': None, 'SESSION_COOKIE_SECURE': False, 'SESSION_REFRESH_EACH_REQUEST': True, 'TEMPLATES_AUTO_RELOAD': None, 'TESTING': False, 'TRAP_BAD_REQUEST_ERRORS': False, 'TRAP_HTTP_EXCEPTIONS': False, 'USE_X_SENDFILE': False},\u00b6,,Default configuration parameters.,,,,,dispatch_request,(,),\u00b6,,Does the request dispatching.  Matches the URL and returns the\nreturn value of the view or error handler.  This does not have to\nbe a response object.  In order to convert the return value to a\nproper response object, call,make_response(),.,,,Changelog,,Changed in version 0.7:,This no longer does the exception handling, this code was\nmoved to the new,full_dispatch_request(),.,,,,,,do_teardown_appcontext,(,exc=<object object>,),\u00b6,,Called when an application context is popped.  This works pretty\nmuch the same as,do_teardown_request(),but for the application\ncontext.,,,Changelog,,New in version 0.9.,,,,,,do_teardown_request,(,exc=<object object>,),\u00b6,,Called after the actual request dispatching and will\ncall every as,teardown_request(),decorated function.  This is\nnot actually called by the,Flask,object itself but is always\ntriggered when the request context is popped.  That way we have a\ntighter control over certain resources under testing environments.,,,Changelog,,Changed in version 0.9:,Added the,exc,argument.  Previously this was always using the\ncurrent exception information.,,,,,,endpoint,(,endpoint,),\u00b6,,A decorator to register a function as an endpoint.\nExample:,,@app,.,endpoint,(,'example.endpoint',),,def,,example,():,,return,,\"example\",,,,,,,,Parameters:,endpoint,\u2013 the name of the endpoint,,,,,,,,error_handler_spec,= None,\u00b6,,A dictionary of all registered error handlers.  The key is,None,for error handlers active on the application, otherwise the key is\nthe name of the blueprint.  Each key points to another dictionary\nwhere the key is the status code of the http exception.  The\nspecial key,None,points to a list of tuples where the first item\nis the class for the instance check and the second the error handler\nfunction.,,To register a error handler, use the,errorhandler(),decorator.,,,,,errorhandler,(,code_or_exception,),\u00b6,,A decorator that is used to register a function given an\nerror code.  Example:,,@app,.,errorhandler,(,404,),,def,,page_not_found,(,error,):,,return,,'This page does not exist',,,,404,,,,You can also register handlers for arbitrary exceptions:,,@app,.,errorhandler,(,DatabaseError,),,def,,special_exception_handler,(,error,):,,return,,'Database connection failed',,,,500,,,,You can also register a function as error handler without using\nthe,errorhandler(),decorator.  The following example is\nequivalent to the one above:,,def,,page_not_found,(,error,):,,return,,'This page does not exist',,,,404,,app,.,error_handler_spec,[,None,][,404,],,=,,page_not_found,,,,Setting error handlers via assignments to,error_handler_spec,however is discouraged as it requires fiddling with nested dictionaries\nand the special case for arbitrary exception types.,,The first,None,refers to the active blueprint.  If the error\nhandler should be application wide,None,shall be used.,,,Changelog,,New in version 0.7:,Use,register_error_handler(),instead of modifying,error_handler_spec,directly, for application wide error\nhandlers.,,,,New in version 0.7:,One can now additionally also register custom exception types\nthat do not necessarily have to be a subclass of the,HTTPException,class.,,,,,,,Parameters:,code_or_exception,\u2013 the code as integer for the handler, or\nan arbitrary exception,,,,,,,,extensions,= None,\u00b6,,a place where extensions can store application specific state.  For\nexample this is where an extension could store database engines and\nsimilar things.  For backwards compatibility extensions should register\nthemselves like this:,,if,,not,,hasattr,(,app,,,,'extensions',):,,app,.,extensions,,=,,{},,app,.,extensions,[,'extensionname',],,=,,SomeObject,(),,,,The key must match the name of the extension module. For example in\ncase of a \u201cFlask-Foo\u201d extension in,flask_foo,, the key would be,'foo',.,,,Changelog,,New in version 0.7.,,,,,,full_dispatch_request,(,),\u00b6,,Dispatches the request and on top of that performs request\npre and postprocessing as well as HTTP exception catching and\nerror handling.,,,Changelog,,New in version 0.7.,,,,,,get_send_file_max_age,(,filename,),\u00b6,,Provides default cache_timeout for the,send_file(),functions.,,By default, this function returns,SEND_FILE_MAX_AGE_DEFAULT,from\nthe configuration of,current_app,.,,Static file functions such as,send_from_directory(),use this\nfunction, and,send_file(),calls this function on,current_app,when the given cache_timeout is,None,. If a\ncache_timeout is given in,send_file(),, that timeout is used;\notherwise, this method is called.,,This allows subclasses to change the behavior when sending files based\non the filename.  For example, to set the cache timeout for .js files\nto 60 seconds:,,class,,MyFlask,(,flask,.,Flask,):,,def,,get_send_file_max_age,(,self,,,,name,):,,if,,name,.,lower,(),.,endswith,(,'.js',):,,return,,60,,return,,flask,.,Flask,.,get_send_file_max_age,(,self,,,,name,),,,,,Changelog,,New in version 0.9.,,,,,,got_first_request,\u00b6,,This attribute is set to,True,if the application started\nhandling the first request.,,,Changelog,,New in version 0.8.,,,,,,handle_exception,(,e,),\u00b6,,Default exception handling that kicks in when an exception\noccurs that is not caught.  In debug mode the exception will\nbe re-raised immediately, otherwise it is logged and the handler\nfor a 500 internal server error is used.  If no such handler\nexists, a default 500 internal server error message is displayed.,,,Changelog,,New in version 0.3.,,,,,,handle_http_exception,(,e,),\u00b6,,Handles an HTTP exception.  By default this will invoke the\nregistered error handlers and fall back to returning the\nexception as response.,,,Changelog,,New in version 0.3.,,,,,,handle_url_build_error,(,error,,,endpoint,,,values,),\u00b6,,Handle,BuildError,on,url_for(),.,,,,,handle_user_exception,(,e,),\u00b6,,This method is called whenever an exception occurs that should be\nhandled.  A special case are,HTTPException,s which are forwarded by\nthis function to the,handle_http_exception(),method.  This\nfunction will either return a response value or reraise the\nexception with the same traceback.,,,Changelog,,New in version 0.7.,,,,,,has_static_folder,\u00b6,,This is,True,if the package bound object\u2019s container has a\nfolder for static files.,,,Changelog,,New in version 0.5.,,,,,,init_jinja_globals,(,),\u00b6,,Deprecated.  Used to initialize the Jinja2 globals.,,,Changelog,,Changed in version 0.7:,This method is deprecated with 0.7.  Override,create_jinja_environment(),instead.,,,,New in version 0.5.,,,,,,inject_url_defaults,(,endpoint,,,values,),\u00b6,,Injects the URL defaults for the given endpoint directly into\nthe values dictionary passed.  This is used internally and\nautomatically called on URL building.,,,Changelog,,New in version 0.7.,,,,,,instance_path,= None,\u00b6,,Holds the path to the instance folder.,,,Changelog,,New in version 0.8.,,,,,,iter_blueprints,(,),\u00b6,,Iterates over all blueprints by the order they were registered.,,,Changelog,,New in version 0.11.,,,,,,jinja_env,\u00b6,,The Jinja2 environment used to load templates.,,,,,jinja_environment,\u00b6,,alias of,flask.templating.Environment,,,,,jinja_loader,\u00b6,,The Jinja loader for this package bound object.,,,Changelog,,New in version 0.5.,,,,,,jinja_options,= {'extensions': ['jinja2.ext.autoescape', 'jinja2.ext.with_']},\u00b6,,Options that are passed directly to the Jinja2 environment.,,,,,json_decoder,\u00b6,,alias of,flask.json.JSONDecoder,,,,,json_encoder,\u00b6,,alias of,flask.json.JSONEncoder,,,,,log_exception,(,exc_info,),\u00b6,,Logs an exception.  This is called by,handle_exception(),if debugging is disabled and right before the handler is called.\nThe default implementation logs the exception as error on the,logger,.,,,Changelog,,New in version 0.8.,,,,,,logger,\u00b6,,A,logging.Logger,object for this application.  The\ndefault configuration is to log to stderr if the application is\nin debug mode.  This logger can be used to (surprise) log messages.\nHere some examples:,,app,.,logger,.,debug,(,'A value for debugging',),,app,.,logger,.,warning,(,'A warning occurred (,%d,apples)',,,,42,),,app,.,logger,.,error,(,'An error occurred',),,,,,Changelog,,New in version 0.3.,,,,,,logger_name,\u00b6,,The name of the logger to use.  By default the logger name is the\npackage name passed to the constructor.,,,Changelog,,New in version 0.4.,,,,,,make_config,(,instance_relative=False,),\u00b6,,Used to create the config attribute by the Flask constructor.\nThe,instance_relative,parameter is passed in from the constructor\nof Flask (there named,instance_relative_config,) and indicates if\nthe config should be relative to the instance path or the root path\nof the application.,,,Changelog,,New in version 0.8.,,,,,,make_default_options_response,(,),\u00b6,,This method is called to create the default,OPTIONS,response.\nThis can be changed through subclassing to change the default\nbehavior of,OPTIONS,responses.,,,Changelog,,New in version 0.7.,,,,,,make_null_session,(,),\u00b6,,Creates a new instance of a missing session.  Instead of overriding\nthis method we recommend replacing the,session_interface,.,,,Changelog,,New in version 0.7.,,,,,,make_response,(,rv,),\u00b6,,Converts the return value from a view function to a real\nresponse object that is an instance of,response_class,.,,The following types are allowed for,rv,:,,,,,,,,response_class,,the object is returned unchanged,,,str,,a response object is created with the\nstring as body,,,unicode,,a response object is created with the\nstring encoded to utf-8 as body,,,a WSGI function,,the function is called as WSGI application\nand buffered as response object,,,tuple,,A tuple in the form,(response,,,status,,,headers),or,(response,,,headers),where,response,is any of the\ntypes defined here,,status,is a string\nor an integer and,headers,is a list or\na dictionary with header values.,,,,,,,,,Parameters:,rv,\u2013 the return value from the view function,,,,,,Changelog,,Changed in version 0.9:,Previously a tuple was interpreted as the arguments for the\nresponse object.,,,,,,make_shell_context,(,),\u00b6,,Returns the shell context for an interactive shell for this\napplication.  This runs all the registered shell context\nprocessors.,,,Changelog,,New in version 0.11.,,,,,,name,\u00b6,,The name of the application.  This is usually the import name\nwith the difference that it\u2019s guessed from the run file if the\nimport name is main.  This name is used as a display name when\nFlask needs the name of the application.  It can be set and overridden\nto change the value.,,,Changelog,,New in version 0.8.,,,,,,open_instance_resource,(,resource,,,mode='rb',),\u00b6,,Opens a resource from the application\u2019s instance folder\n(,instance_path,).  Otherwise works like,open_resource(),.  Instance resources can also be opened for\nwriting.,,,,,,Parameters:,,resource,\u2013 the name of the resource.  To access resources within\nsubfolders use forward slashes as separator.,,mode,\u2013 resource file opening mode, default is \u2018rb\u2019.,,,,,,,,,,open_resource,(,resource,,,mode='rb',),\u00b6,,Opens a resource from the application\u2019s resource folder.  To see\nhow this works, consider the following folder structure:,,/,myapplication,.,py,,/,schema,.,sql,,/,static,,/,style,.,css,,/,templates,,/,layout,.,html,,/,index,.,html,,,,If you want to open the,schema.sql,file you would do the\nfollowing:,,with,,app,.,open_resource,(,'schema.sql',),,as,,f,:,,contents,,=,,f,.,read,(),,do_something_with,(,contents,),,,,,,,,Parameters:,,resource,\u2013 the name of the resource.  To access resources within\nsubfolders use forward slashes as separator.,,mode,\u2013 resource file opening mode, default is \u2018rb\u2019.,,,,,,,,,,open_session,(,request,),\u00b6,,Creates or opens a new session.  Default implementation stores all\nsession data in a signed cookie.  This requires that the,secret_key,is set.  Instead of overriding this method\nwe recommend replacing the,session_interface,.,,,,,,Parameters:,request,\u2013 an instance of,request_class,.,,,,,,,,permanent_session_lifetime,\u00b6,,A,timedelta,which is used to set the expiration\ndate of a permanent session.  The default is 31 days which makes a\npermanent session survive for roughly one month.,,This attribute can also be configured from the config with the,PERMANENT_SESSION_LIFETIME,configuration key.  Defaults to,timedelta(days=31),,,,,preprocess_request,(,),\u00b6,,Called before the actual request dispatching and will\ncall each,before_request(),decorated function, passing no\narguments.\nIf any of these functions returns a value, it\u2019s handled as\nif it was the return value from the view and further\nrequest handling is stopped.,,This also triggers the,url_value_preprocessor(),functions before\nthe actual,before_request(),functions are called.,,,,,preserve_context_on_exception,\u00b6,,Returns the value of the,PRESERVE_CONTEXT_ON_EXCEPTION,configuration value in case it\u2019s set, otherwise a sensible default\nis returned.,,,Changelog,,New in version 0.7.,,,,,,process_response,(,response,),\u00b6,,Can be overridden in order to modify the response object\nbefore it\u2019s sent to the WSGI server.  By default this will\ncall all the,after_request(),decorated functions.,,,Changelog,,Changed in version 0.5:,As of Flask 0.5 the functions registered for after request\nexecution are called in reverse order of registration.,,,,,,,Parameters:,response,\u2013 a,response_class,object.,,,Returns:,a new response object or the same, has to be an\ninstance of,response_class,.,,,,,,,,propagate_exceptions,\u00b6,,Returns the value of the,PROPAGATE_EXCEPTIONS,configuration\nvalue in case it\u2019s set, otherwise a sensible default is returned.,,,Changelog,,New in version 0.7.,,,,,,register_blueprint,(,blueprint,,,**options,),\u00b6,,Registers a blueprint on the application.,,,Changelog,,New in version 0.7.,,,,,,register_error_handler,(,code_or_exception,,,f,),\u00b6,,Alternative error attach function to the,errorhandler(),decorator that is more straightforward to use for non decorator\nusage.,,,Changelog,,New in version 0.7.,,,,,,request_class,\u00b6,,alias of,flask.wrappers.Request,,,,,request_context,(,environ,),\u00b6,,Creates a,RequestContext,from the given\nenvironment and binds it to the current context.  This must be used in\ncombination with the,with,statement because the request is only bound\nto the current context for the duration of the,with,block.,,Example usage:,,with,,app,.,request_context,(,environ,):,,do_something_with,(,request,),,,,The object returned can also be used without the,with,statement\nwhich is useful for working in the shell.  The example above is\ndoing exactly the same as this code:,,ctx,,=,,app,.,request_context,(,environ,),,ctx,.,push,(),,try,:,,do_something_with,(,request,),,finally,:,,ctx,.,pop,(),,,,,Changelog,,Changed in version 0.3:,Added support for non-with statement usage and,with,statement\nis now passed the ctx object.,,,,,,,Parameters:,environ,\u2013 a WSGI environment,,,,,,,,response_class,\u00b6,,alias of,flask.wrappers.Response,,,,,route,(,rule,,,**options,),\u00b6,,A decorator that is used to register a view function for a\ngiven URL rule.  This does the same thing as,add_url_rule(),but is intended for decorator usage:,,@app,.,route,(,'/',),,def,,index,():,,return,,'Hello World',,,,For more information refer to,URL Route Registrations,.,,,,,,Parameters:,,rule,\u2013 the URL rule as string,,endpoint,\u2013 the endpoint for the registered URL rule.  Flask\nitself assumes the name of the view function as\nendpoint,,options,\u2013 the options to be forwarded to the underlying,Rule,object.  A change\nto Werkzeug is handling of method options.  methods\nis a list of methods this rule should be limited\nto (,GET,,,POST,etc.).  By default a rule\njust listens for,GET,(and implicitly,HEAD,).\nStarting with Flask 0.6,,OPTIONS,is implicitly\nadded and handled by the standard request handling.,,,,,,,,,,run,(,host=None,,,port=None,,,debug=None,,,**options,),\u00b6,,Runs the application on a local development server.,,Do not use,run(),in a production setting. It is not intended to\nmeet security and performance requirements for a production server.\nInstead, see,Deployment Options,for WSGI server recommendations.,,If the,debug,flag is set the server will automatically reload\nfor code changes and show a debugger in case an exception happened.,,If you want to run the application in debug mode, but disable the\ncode execution on the interactive debugger, you can pass,use_evalex=False,as parameter.  This will keep the debugger\u2019s\ntraceback screen active, but disable code execution.,,It is not recommended to use this function for development with\nautomatic reloading as this is badly supported.  Instead you should\nbe using the,flask,command line script\u2019s,run,support.,,,Keep in Mind,,Flask will suppress any server error with a generic error page\nunless it is in debug mode.  As such to enable just the\ninteractive debugger without the code reloading, you have to\ninvoke,run(),with,debug=True,and,use_reloader=False,.\nSetting,use_debugger,to,True,without being in debug mode\nwon\u2019t catch any exceptions because there won\u2019t be any to\ncatch.,,,,Changelog,,Changed in version 0.10:,The default port is now picked from the,SERVER_NAME,variable.,,,,,,,Parameters:,,host,\u2013 the hostname to listen on. Set this to,'0.0.0.0',to\nhave the server available externally as well. Defaults to,'127.0.0.1',.,,port,\u2013 the port of the webserver. Defaults to,5000,or the\nport defined in the,SERVER_NAME,config variable if\npresent.,,debug,\u2013 if given, enable or disable debug mode.\nSee,debug,.,,options,\u2013 the options to be forwarded to the underlying\nWerkzeug server.  See,werkzeug.serving.run_simple(),for more\ninformation.,,,,,,,,,,save_session,(,session,,,response,),\u00b6,,Saves the session if it needs updates.  For the default\nimplementation, check,open_session(),.  Instead of overriding this\nmethod we recommend replacing the,session_interface,.,,,,,,Parameters:,,session,\u2013 the session to be saved (a,SecureCookie,object),,response,\u2013 an instance of,response_class,,,,,,,,,,secret_key,\u00b6,,If a secret key is set, cryptographic components can use this to\nsign cookies and other things.  Set this to a complex random value\nwhen you want to use the secure cookie for instance.,,This attribute can also be configured from the config with the,SECRET_KEY,configuration key.  Defaults to,None,.,,,,,select_jinja_autoescape,(,filename,),\u00b6,,Returns,True,if autoescaping should be active for the given\ntemplate name. If no template name is given, returns,True,.,,,Changelog,,New in version 0.5.,,,,,,send_file_max_age_default,\u00b6,,A,timedelta,which is used as default cache_timeout\nfor the,send_file(),functions. The default is 12 hours.,,This attribute can also be configured from the config with the,SEND_FILE_MAX_AGE_DEFAULT,configuration key. This configuration\nvariable can also be set with an integer value used as seconds.\nDefaults to,timedelta(hours=12),,,,,send_static_file,(,filename,),\u00b6,,Function used internally to send static files from the static\nfolder to the browser.,,,Changelog,,New in version 0.5.,,,,,,session_cookie_name,\u00b6,,The secure cookie uses this for the name of the session cookie.,,This attribute can also be configured from the config with the,SESSION_COOKIE_NAME,configuration key.  Defaults to,'session',,,,,session_interface,= <flask.sessions.SecureCookieSessionInterface object>,\u00b6,,the session interface to use.  By default an instance of,SecureCookieSessionInterface,is used here.,,,Changelog,,New in version 0.8.,,,,,,shell_context_processor,(,f,),\u00b6,,Registers a shell context processor function.,,,Changelog,,New in version 0.11.,,,,,,shell_context_processors,= None,\u00b6,,A list of shell context processor functions that should be run\nwhen a shell context is created.,,,Changelog,,New in version 0.11.,,,,,,should_ignore_error,(,error,),\u00b6,,This is called to figure out if an error should be ignored\nor not as far as the teardown system is concerned.  If this\nfunction returns,True,then the teardown handlers will not be\npassed the error.,,,Changelog,,New in version 0.10.,,,,,,static_folder,\u00b6,,The absolute path to the configured static folder.,,,,,teardown_appcontext,(,f,),\u00b6,,Registers a function to be called when the application context\nends.  These functions are typically also called when the request\ncontext is popped.,,Example:,,ctx,,=,,app,.,app_context,(),,ctx,.,push,(),,...,,ctx,.,pop,(),,,,When,ctx.pop(),is executed in the above example, the teardown\nfunctions are called just before the app context moves from the\nstack of active contexts.  This becomes relevant if you are using\nsuch constructs in tests.,,Since a request context typically also manages an application\ncontext it would also be called when you pop a request context.,,When a teardown function was called because of an exception it will\nbe passed an error object.,,The return values of teardown functions are ignored.,,,Changelog,,New in version 0.9.,,,,,,teardown_appcontext_funcs,= None,\u00b6,,A list of functions that are called when the application context\nis destroyed.  Since the application context is also torn down\nif the request ends this is the place to store code that disconnects\nfrom databases.,,,Changelog,,New in version 0.9.,,,,,,teardown_request,(,f,),\u00b6,,Register a function to be run at the end of each request,\nregardless of whether there was an exception or not.  These functions\nare executed when the request context is popped, even if not an\nactual request was performed.,,Example:,,ctx,,=,,app,.,test_request_context,(),,ctx,.,push,(),,...,,ctx,.,pop,(),,,,When,ctx.pop(),is executed in the above example, the teardown\nfunctions are called just before the request context moves from the\nstack of active contexts.  This becomes relevant if you are using\nsuch constructs in tests.,,Generally teardown functions must take every necessary step to avoid\nthat they will fail.  If they do execute code that might fail they\nwill have to surround the execution of these code by try/except\nstatements and log occurring errors.,,When a teardown function was called because of a exception it will\nbe passed an error object.,,The return values of teardown functions are ignored.,,,Debug Note,,In debug mode Flask will not tear down a request on an exception\nimmediately.  Instead it will keep it alive so that the interactive\ndebugger can still access it.  This behavior can be controlled\nby the,PRESERVE_CONTEXT_ON_EXCEPTION,configuration variable.,,,,,,teardown_request_funcs,= None,\u00b6,,A dictionary with lists of functions that are called after\neach request, even if an exception has occurred. The key of the\ndictionary is the name of the blueprint this function is active for,,None,for all requests. These functions are not allowed to modify\nthe request, and their return values are ignored. If an exception\noccurred while processing the request, it gets passed to each\nteardown_request function. To register a function here, use the,teardown_request(),decorator.,,,Changelog,,New in version 0.7.,,,,,,template_context_processors,= None,\u00b6,,A dictionary with list of functions that are called without argument\nto populate the template context.  The key of the dictionary is the\nname of the blueprint this function is active for,,None,for all\nrequests.  Each returns a dictionary that the template context is\nupdated with.  To register a function here, use the,context_processor(),decorator.,,,,,template_filter,(,name=None,),\u00b6,,A decorator that is used to register custom template filter.\nYou can specify a name for the filter, otherwise the function\nname will be used. Example:,,@app,.,template_filter,(),,def,,reverse,(,s,):,,return,,s,[::,-,1,],,,,,,,,Parameters:,name,\u2013 the optional name of the filter, otherwise the\nfunction name will be used.,,,,,,,,template_global,(,name=None,),\u00b6,,A decorator that is used to register a custom template global function.\nYou can specify a name for the global function, otherwise the function\nname will be used. Example:,,@app,.,template_global,(),,def,,double,(,n,):,,return,,2,,*,,n,,,,,Changelog,,New in version 0.10.,,,,,,,Parameters:,name,\u2013 the optional name of the global function, otherwise the\nfunction name will be used.,,,,,,,,template_test,(,name=None,),\u00b6,,A decorator that is used to register custom template test.\nYou can specify a name for the test, otherwise the function\nname will be used. Example:,,@app,.,template_test,(),,def,,is_prime,(,n,):,,if,,n,,==,,2,:,,return,,True,,for,,i,,in,,range,(,2,,,,int,(,math,.,ceil,(,math,.,sqrt,(,n,))),,+,,1,):,,if,,n,,%,,i,,==,,0,:,,return,,False,,return,,True,,,,,Changelog,,New in version 0.10.,,,,,,,Parameters:,name,\u2013 the optional name of the test, otherwise the\nfunction name will be used.,,,,,,,,test_client,(,use_cookies=True,,,**kwargs,),\u00b6,,Creates a test client for this application.  For information\nabout unit testing head over to,Testing Flask Applications,.,,Note that if you are testing for assertions or exceptions in your\napplication code, you must set,app.testing,,=,,True,in order for the\nexceptions to propagate to the test client.  Otherwise, the exception\nwill be handled by the application (not visible to the test client) and\nthe only indication of an AssertionError or other exception will be a\n500 status code response to the test client.  See the,testing,attribute.  For example:,,app,.,testing,,=,,True,,client,,=,,app,.,test_client,(),,,,The test client can be used in a,with,block to defer the closing down\nof the context until the end of the,with,block.  This is useful if\nyou want to access the context locals for testing:,,with,,app,.,test_client,(),,as,,c,:,,rv,,=,,c,.,get,(,'/?vodka=42',),,assert,,request,.,args,[,'vodka',],,==,,'42',,,,Additionally, you may pass optional keyword arguments that will then\nbe passed to the application\u2019s,test_client_class,constructor.\nFor example:,,from,,flask.testing,,import,,FlaskClient,,class,,CustomClient,(,FlaskClient,):,,def,,__init__,(,self,,,,*,args,,,,**,kwargs,):,,self,.,_authentication,,=,,kwargs,.,pop,(,\"authentication\",),,super,(,CustomClient,,,self,),.,__init__,(,,*,args,,,,**,kwargs,),,app,.,test_client_class,,=,,CustomClient,,client,,=,,app,.,test_client,(,authentication,=,'Basic ....',),,,,See,FlaskClient,for more information.,,,Changelog,,Changed in version 0.11:,Added,**kwargs,to support passing additional keyword arguments to\nthe constructor of,test_client_class,.,,,,New in version 0.7:,The,use_cookies,parameter was added as well as the ability\nto override the client to be used by setting the,test_client_class,attribute.,,,,Changed in version 0.4:,added support for,with,block usage for the client.,,,,,,test_client_class,= None,\u00b6,,the test client that is used with when,test_client,is used.,,,Changelog,,New in version 0.7.,,,,,,test_request_context,(,*args,,,**kwargs,),\u00b6,,Creates a WSGI environment from the given values (see,werkzeug.test.EnvironBuilder,for more information, this\nfunction accepts the same arguments).,,,,,testing,\u00b6,,The testing flag.  Set this to,True,to enable the test mode of\nFlask extensions (and in the future probably also Flask itself).\nFor example this might activate unittest helpers that have an\nadditional runtime cost which should not be enabled by default.,,If this is enabled and PROPAGATE_EXCEPTIONS is not changed from the\ndefault it\u2019s implicitly enabled.,,This attribute can also be configured from the config with the,TESTING,configuration key.  Defaults to,False,.,,,,,trap_http_exception,(,e,),\u00b6,,Checks if an HTTP exception should be trapped or not.  By default\nthis will return,False,for all exceptions except for a bad request\nkey error if,TRAP_BAD_REQUEST_ERRORS,is set to,True,.  It\nalso returns,True,if,TRAP_HTTP_EXCEPTIONS,is set to,True,.,,This is called for all HTTP exceptions raised by a view function.\nIf it returns,True,for any exception the error handler for this\nexception is not called and it shows up as regular exception in the\ntraceback.  This is helpful for debugging implicitly raised HTTP\nexceptions.,,,Changelog,,New in version 0.8.,,,,,,update_template_context,(,context,),\u00b6,,Update the template context with some commonly used variables.\nThis injects request, session, config and g into the template\ncontext as well as everything template context processors want\nto inject.  Note that the as of Flask 0.6, the original values\nin the context will not be overridden if a context processor\ndecides to return a value with the same key.,,,,,,Parameters:,context,\u2013 the context as a dictionary that is updated in place\nto add extra variables.,,,,,,,,url_build_error_handlers,= None,\u00b6,,A list of functions that are called when,url_for(),raises a,BuildError,.  Each function registered here\nis called with,error,,,endpoint,and,values,.  If a function\nreturns,None,or raises a,BuildError,the next function is\ntried.,,,Changelog,,New in version 0.9.,,,,,,url_default_functions,= None,\u00b6,,A dictionary with lists of functions that can be used as URL value\npreprocessors.  The key,None,here is used for application wide\ncallbacks, otherwise the key is the name of the blueprint.\nEach of these functions has the chance to modify the dictionary\nof URL values before they are used as the keyword arguments of the\nview function.  For each function registered this one should also\nprovide a,url_defaults(),function that adds the parameters\nautomatically again that were removed that way.,,,Changelog,,New in version 0.7.,,,,,,url_defaults,(,f,),\u00b6,,Callback function for URL defaults for all view functions of the\napplication.  It\u2019s called with the endpoint and values and should\nupdate the values passed in place.,,,,,url_map,= None,\u00b6,,The,Map,for this instance.  You can use\nthis to change the routing converters after the class was created\nbut before any routes are connected.  Example:,,from,,werkzeug.routing,,import,,BaseConverter,,class,,ListConverter,(,BaseConverter,):,,def,,to_python,(,self,,,,value,):,,return,,value,.,split,(,',',),,def,,to_url,(,self,,,,values,):,,return,,',',.,join,(,super,(,ListConverter,,,,self,),.,to_url,(,value,),,for,,value,,in,,values,),,app,,=,,Flask,(,__name__,),,app,.,url_map,.,converters,[,'list',],,=,,ListConverter,,,,,,,url_rule_class,\u00b6,,alias of,werkzeug.routing.Rule,,,,,url_value_preprocessor,(,f,),\u00b6,,Registers a function as URL value preprocessor for all view\nfunctions of the application.  It\u2019s called before the view functions\nare called and can modify the url values provided.,,,,,url_value_preprocessors,= None,\u00b6,,A dictionary with lists of functions that can be used as URL\nvalue processor functions.  Whenever a URL is built these functions\nare called to modify the dictionary of values in place.  The key,None,here is used for application wide\ncallbacks, otherwise the key is the name of the blueprint.\nEach of these functions has the chance to modify the dictionary,,,Changelog,,New in version 0.7.,,,,,,use_x_sendfile,\u00b6,,Enable this if you want to use the X-Sendfile feature.  Keep in\nmind that the server has to support this.  This only affects files\nsent with the,send_file(),method.,,,Changelog,,New in version 0.2.,,,This attribute can also be configured from the config with the,USE_X_SENDFILE,configuration key.  Defaults to,False,.,,,,,view_functions,= None,\u00b6,,A dictionary of all view functions registered.  The keys will\nbe function names which are also used to generate URLs and\nthe values are the function objects themselves.\nTo register a view function, use the,route(),decorator.,,,,,wsgi_app,(,environ,,,start_response,),\u00b6,,The actual WSGI application.  This is not implemented in,__call__,so that middlewares can be applied without losing a\nreference to the class.  So instead of doing this:,,app,,=,,MyMiddleware,(,app,),,,,It\u2019s a better idea to do this instead:,,app,.,wsgi_app,,=,,MyMiddleware,(,app,.,wsgi_app,),,,,Then you still have the original application object around and\ncan continue to call methods on it.,,,Changelog,,Changed in version 0.7:,The behavior of the before and after request callbacks was changed\nunder error conditions and a new callback was added that will\nalways execute at the end of the request, independent on if an\nerror occurred or not.  See,Callbacks and Errors,.,,,,,,,Parameters:,,environ,\u2013 a WSGI environment,,start_response,\u2013 a callable accepting a status code,\na list of headers and an optional\nexception context to start the response,,,,,,,,,,,Blueprint Objects,\u00b6,,,,class,flask.,Blueprint,(,name,,,import_name,,,static_folder=None,,,static_url_path=None,,,template_folder=None,,,url_prefix=None,,,subdomain=None,,,url_defaults=None,,,root_path=None,),\u00b6,,Represents a blueprint.  A blueprint is an object that records\nfunctions that will be called with the,BlueprintSetupState,later to register functions\nor other things on the main application.  See,Modular Applications with Blueprints,for more\ninformation.,,,Changelog,,New in version 0.7.,,,,,add_app_template_filter,(,f,,,name=None,),\u00b6,,Register a custom template filter, available application wide.  Like,Flask.add_template_filter(),but for a blueprint.  Works exactly\nlike the,app_template_filter(),decorator.,,,,,,Parameters:,name,\u2013 the optional name of the filter, otherwise the\nfunction name will be used.,,,,,,,,add_app_template_global,(,f,,,name=None,),\u00b6,,Register a custom template global, available application wide.  Like,Flask.add_template_global(),but for a blueprint.  Works exactly\nlike the,app_template_global(),decorator.,,,Changelog,,New in version 0.10.,,,,,,,Parameters:,name,\u2013 the optional name of the global, otherwise the\nfunction name will be used.,,,,,,,,add_app_template_test,(,f,,,name=None,),\u00b6,,Register a custom template test, available application wide.  Like,Flask.add_template_test(),but for a blueprint.  Works exactly\nlike the,app_template_test(),decorator.,,,Changelog,,New in version 0.10.,,,,,,,Parameters:,name,\u2013 the optional name of the test, otherwise the\nfunction name will be used.,,,,,,,,add_url_rule,(,rule,,,endpoint=None,,,view_func=None,,,**options,),\u00b6,,Like,Flask.add_url_rule(),but for a blueprint.  The endpoint for\nthe,url_for(),function is prefixed with the name of the blueprint.,,,,,after_app_request,(,f,),\u00b6,,Like,Flask.after_request(),but for a blueprint.  Such a function\nis executed after each request, even if outside of the blueprint.,,,,,after_request,(,f,),\u00b6,,Like,Flask.after_request(),but for a blueprint.  This function\nis only executed after each request that is handled by a function of\nthat blueprint.,,,,,app_context_processor,(,f,),\u00b6,,Like,Flask.context_processor(),but for a blueprint.  Such a\nfunction is executed each request, even if outside of the blueprint.,,,,,app_errorhandler,(,code,),\u00b6,,Like,Flask.errorhandler(),but for a blueprint.  This\nhandler is used for all requests, even if outside of the blueprint.,,,,,app_template_filter,(,name=None,),\u00b6,,Register a custom template filter, available application wide.  Like,Flask.template_filter(),but for a blueprint.,,,,,,Parameters:,name,\u2013 the optional name of the filter, otherwise the\nfunction name will be used.,,,,,,,,app_template_global,(,name=None,),\u00b6,,Register a custom template global, available application wide.  Like,Flask.template_global(),but for a blueprint.,,,Changelog,,New in version 0.10.,,,,,,,Parameters:,name,\u2013 the optional name of the global, otherwise the\nfunction name will be used.,,,,,,,,app_template_test,(,name=None,),\u00b6,,Register a custom template test, available application wide.  Like,Flask.template_test(),but for a blueprint.,,,Changelog,,New in version 0.10.,,,,,,,Parameters:,name,\u2013 the optional name of the test, otherwise the\nfunction name will be used.,,,,,,,,app_url_defaults,(,f,),\u00b6,,Same as,url_defaults(),but application wide.,,,,,app_url_value_preprocessor,(,f,),\u00b6,,Same as,url_value_preprocessor(),but application wide.,,,,,before_app_first_request,(,f,),\u00b6,,Like,Flask.before_first_request(),.  Such a function is\nexecuted before the first request to the application.,,,,,before_app_request,(,f,),\u00b6,,Like,Flask.before_request(),.  Such a function is executed\nbefore each request, even if outside of a blueprint.,,,,,before_request,(,f,),\u00b6,,Like,Flask.before_request(),but for a blueprint.  This function\nis only executed before each request that is handled by a function of\nthat blueprint.,,,,,context_processor,(,f,),\u00b6,,Like,Flask.context_processor(),but for a blueprint.  This\nfunction is only executed for requests handled by a blueprint.,,,,,endpoint,(,endpoint,),\u00b6,,Like,Flask.endpoint(),but for a blueprint.  This does not\nprefix the endpoint with the blueprint name, this has to be done\nexplicitly by the user of this method.  If the endpoint is prefixed\nwith a,.,it will be registered to the current blueprint, otherwise\nit\u2019s an application independent endpoint.,,,,,errorhandler,(,code_or_exception,),\u00b6,,Registers an error handler that becomes active for this blueprint\nonly.  Please be aware that routing does not happen local to a\nblueprint so an error handler for 404 usually is not handled by\na blueprint unless it is caused inside a view function.  Another\nspecial case is the 500 internal server error which is always looked\nup from the application.,,Otherwise works as the,errorhandler(),decorator\nof the,Flask,object.,,,,,get_send_file_max_age,(,filename,),\u00b6,,Provides default cache_timeout for the,send_file(),functions.,,By default, this function returns,SEND_FILE_MAX_AGE_DEFAULT,from\nthe configuration of,current_app,.,,Static file functions such as,send_from_directory(),use this\nfunction, and,send_file(),calls this function on,current_app,when the given cache_timeout is,None,. If a\ncache_timeout is given in,send_file(),, that timeout is used;\notherwise, this method is called.,,This allows subclasses to change the behavior when sending files based\non the filename.  For example, to set the cache timeout for .js files\nto 60 seconds:,,class,,MyFlask,(,flask,.,Flask,):,,def,,get_send_file_max_age,(,self,,,,name,):,,if,,name,.,lower,(),.,endswith,(,'.js',):,,return,,60,,return,,flask,.,Flask,.,get_send_file_max_age,(,self,,,,name,),,,,,Changelog,,New in version 0.9.,,,,,,has_static_folder,\u00b6,,This is,True,if the package bound object\u2019s container has a\nfolder for static files.,,,Changelog,,New in version 0.5.,,,,,,jinja_loader,\u00b6,,The Jinja loader for this package bound object.,,,Changelog,,New in version 0.5.,,,,,,make_setup_state,(,app,,,options,,,first_registration=False,),\u00b6,,Creates an instance of,BlueprintSetupState(),object that is later passed to the register callback functions.\nSubclasses can override this to return a subclass of the setup state.,,,,,open_resource,(,resource,,,mode='rb',),\u00b6,,Opens a resource from the application\u2019s resource folder.  To see\nhow this works, consider the following folder structure:,,/,myapplication,.,py,,/,schema,.,sql,,/,static,,/,style,.,css,,/,templates,,/,layout,.,html,,/,index,.,html,,,,If you want to open the,schema.sql,file you would do the\nfollowing:,,with,,app,.,open_resource,(,'schema.sql',),,as,,f,:,,contents,,=,,f,.,read,(),,do_something_with,(,contents,),,,,,,,,Parameters:,,resource,\u2013 the name of the resource.  To access resources within\nsubfolders use forward slashes as separator.,,mode,\u2013 resource file opening mode, default is \u2018rb\u2019.,,,,,,,,,,record,(,func,),\u00b6,,Registers a function that is called when the blueprint is\nregistered on the application.  This function is called with the\nstate as argument as returned by the,make_setup_state(),method.,,,,,record_once,(,func,),\u00b6,,Works like,record(),but wraps the function in another\nfunction that will ensure the function is only called once.  If the\nblueprint is registered a second time on the application, the\nfunction passed is not called.,,,,,register,(,app,,,options,,,first_registration=False,),\u00b6,,Called by,Flask.register_blueprint(),to register a blueprint\non the application.  This can be overridden to customize the register\nbehavior.  Keyword arguments from,register_blueprint(),are directly forwarded to this\nmethod in the,options,dictionary.,,,,,register_error_handler,(,code_or_exception,,,f,),\u00b6,,Non-decorator version of the,errorhandler(),error attach\nfunction, akin to the,register_error_handler(),application-wide function of the,Flask,object but\nfor error handlers limited to this blueprint.,,,Changelog,,New in version 0.11.,,,,,,route,(,rule,,,**options,),\u00b6,,Like,Flask.route(),but for a blueprint.  The endpoint for the,url_for(),function is prefixed with the name of the blueprint.,,,,,send_static_file,(,filename,),\u00b6,,Function used internally to send static files from the static\nfolder to the browser.,,,Changelog,,New in version 0.5.,,,,,,static_folder,\u00b6,,The absolute path to the configured static folder.,,,,,teardown_app_request,(,f,),\u00b6,,Like,Flask.teardown_request(),but for a blueprint.  Such a\nfunction is executed when tearing down each request, even if outside of\nthe blueprint.,,,,,teardown_request,(,f,),\u00b6,,Like,Flask.teardown_request(),but for a blueprint.  This\nfunction is only executed when tearing down requests handled by a\nfunction of that blueprint.  Teardown request functions are executed\nwhen the request context is popped, even when no actual request was\nperformed.,,,,,url_defaults,(,f,),\u00b6,,Callback function for URL defaults for this blueprint.  It\u2019s called\nwith the endpoint and values and should update the values passed\nin place.,,,,,url_value_preprocessor,(,f,),\u00b6,,Registers a function as URL value preprocessor for this\nblueprint.  It\u2019s called before the view functions are called and\ncan modify the url values provided.,,,,,,Incoming Request Data,\u00b6,,,,class,flask.,Request,(,environ,,,populate_request=True,,,shallow=False,),\u00b6,,The request object used by default in Flask.  Remembers the\nmatched endpoint and view arguments.,,It is what ends up as,request,.  If you want to replace\nthe request object used you can subclass this and set,request_class,to your subclass.,,The request object is a,Request,subclass and\nprovides all of the attributes Werkzeug defines plus a few Flask\nspecific ones.,,,,form,\u00b6,,A,MultiDict,with the parsed form data from,POST,or,PUT,requests.  Please keep in mind that file uploads will not\nend up here,  but instead in the,files,attribute.,,,,,args,\u00b6,,A,MultiDict,with the parsed contents of the query\nstring.  (The part in the URL after the question mark).,,,,,values,\u00b6,,A,CombinedMultiDict,with the contents of both,form,and,args,.,,,,,cookies,\u00b6,,A,dict,with the contents of all cookies transmitted with\nthe request.,,,,,stream,\u00b6,,If the incoming form data was not encoded with a known mimetype\nthe data is stored unmodified in this stream for consumption.  Most\nof the time it is a better idea to use,data,which will give\nyou that data as a string.  The stream only returns the data once.,,,,,headers,\u00b6,,The incoming request headers as a dictionary like object.,,,,,data,\u00b6,,Contains the incoming request data as string in case it came with\na mimetype Flask does not handle.,,,,,files,\u00b6,,A,MultiDict,with files uploaded as part of a,POST,or,PUT,request.  Each file is stored as,FileStorage,object.  It basically behaves like a\nstandard file object you know from Python, with the difference that\nit also has a,save(),function that can\nstore the file on the filesystem.,,,,,environ,\u00b6,,The underlying WSGI environment.,,,,,method,\u00b6,,The current request method (,POST,,,GET,etc.),,,,,path,\u00b6,,,,,full_path,\u00b6,,,,,script_root,\u00b6,,,,,url,\u00b6,,,,,base_url,\u00b6,,,,,url_root,\u00b6,,Provides different ways to look at the current,IRI,.  Imagine your application is\nlistening on the following application root:,,http,:,//,www,.,example,.,com,/,myapplication,,,,And a user requests the following URI:,,http://www.example.com/myapplication/%CF%80/page.html?x=y,,,In this case the values of the above mentioned attributes would be\nthe following:,,,,,,,,path,,u'/\u03c0/page.html',,,full_path,,u'/\u03c0/page.html?x=y',,,script_root,,u'/myapplication',,,base_url,,u'http://www.example.com/myapplication/\u03c0/page.html',,,url,,u'http://www.example.com/myapplication/\u03c0/page.html?x=y',,,url_root,,u'http://www.example.com/myapplication/',,,,,,,,is_xhr,\u00b6,,True,if the request was triggered via a JavaScript,XMLHttpRequest,. This only works with libraries that support the,X-Requested-With,header and set it to,XMLHttpRequest,.\nLibraries that do that are prototype, jQuery and Mochikit and\nprobably some more.,,,,,blueprint,\u00b6,,The name of the current blueprint,,,,,endpoint,\u00b6,,The endpoint that matched the request.  This in combination with,view_args,can be used to reconstruct the same or a\nmodified URL.  If an exception happened when matching, this will\nbe,None,.,,,,,get_json,(,force=False,,,silent=False,,,cache=True,),\u00b6,,Parses the incoming JSON request data and returns it.  By default\nthis function will return,None,if the mimetype is not,application/json,but this can be overridden by the,force,parameter. If parsing fails the,on_json_loading_failed(),method on the request object will be\ninvoked.,,,,,,Parameters:,,force,\u2013 if set to,True,the mimetype is ignored.,,silent,\u2013 if set to,True,this method will fail silently\nand return,None,.,,cache,\u2013 if set to,True,the parsed JSON data is remembered\non the request.,,,,,,,,,,is_json,\u00b6,,Indicates if this request is JSON or not.  By default a request\nis considered to include JSON data if the mimetype is,application/json,or,application/*+json,.,,,Changelog,,New in version 0.11.,,,,,,json,\u00b6,,If the mimetype is,application/json,this will contain the\nparsed JSON data.  Otherwise this will be,None,.,,The,get_json(),method should be used instead.,,,,,max_content_length,\u00b6,,Read-only view of the,MAX_CONTENT_LENGTH,config key.,,,,,module,\u00b6,,The name of the current module if the request was dispatched\nto an actual module.  This is deprecated functionality, use blueprints\ninstead.,,,,,on_json_loading_failed,(,e,),\u00b6,,Called if decoding of the JSON data failed.  The return value of\nthis method is used by,get_json(),when an error occurred.  The\ndefault implementation just raises a,BadRequest,exception.,,,Changelog,,Changed in version 0.10:,Removed buggy previous behavior of generating a random JSON\nresponse.  If you want that behavior back you can trivially\nadd it by subclassing.,,,,New in version 0.8.,,,,,,routing_exception,= None,\u00b6,,If matching the URL failed, this is the exception that will be\nraised / was raised as part of the request handling.  This is\nusually a,NotFound,exception or\nsomething similar.,,,,,url_rule,= None,\u00b6,,The internal URL rule that matched the request.  This can be\nuseful to inspect which methods are allowed for the URL from\na before/after handler (,request.url_rule.methods,) etc.,,,Changelog,,New in version 0.6.,,,,,,view_args,= None,\u00b6,,A dict of view arguments that matched the request.  If an exception\nhappened when matching, this will be,None,.,,,,,,class,flask.,request,\u00b6,,To access incoming request data, you can use the global,request,object.  Flask parses incoming request data for you and gives you\naccess to it through that global object.  Internally Flask makes\nsure that you always get the correct data for the active thread if you\nare in a multithreaded environment.,,This is a proxy.  See,Notes On Proxies,for more information.,,The request object is an instance of a,Request,subclass and provides all of the attributes Werkzeug defines.  This\njust shows a quick overview of the most important ones.,,,,,Response Objects,\u00b6,,,,class,flask.,Response,(,response=None,,,status=None,,,headers=None,,,mimetype=None,,,content_type=None,,,direct_passthrough=False,),\u00b6,,The response object that is used by default in Flask.  Works like the\nresponse object from Werkzeug but is set to have an HTML mimetype by\ndefault.  Quite often you don\u2019t have to create this object yourself because,make_response(),will take care of that for you.,,If you want to replace the response object used you can subclass this and\nset,response_class,to your subclass.,,,,headers,\u00b6,,A,Headers,object representing the response headers.,,,,,status,\u00b6,,A string with a response status.,,,,,status_code,\u00b6,,The response status as integer.,,,,,data,\u00b6,,A descriptor that calls,get_data(),and,set_data(),.  This\nshould not be used and will eventually get deprecated.,,,,,mimetype,\u00b6,,The mimetype (content type without charset etc.),,,,,set_cookie,(,key,,,value='',,,max_age=None,,,expires=None,,,path='/',,,domain=None,,,secure=False,,,httponly=False,,,samesite=None,),\u00b6,,Sets a cookie. The parameters are the same as in the cookie,Morsel,object in the Python standard library but it accepts unicode data, too.,,A warning is raised if the size of the cookie header exceeds,max_cookie_size,, but the header will still be set.,,,,,,Parameters:,,key,\u2013 the key (name) of the cookie to be set.,,value,\u2013 the value of the cookie.,,max_age,\u2013 should be a number of seconds, or,None,(default) if\nthe cookie should last only as long as the client\u2019s\nbrowser session.,,expires,\u2013 should be a,datetime,object or UNIX timestamp.,,path,\u2013 limits the cookie to a given path, per default it will\nspan the whole domain.,,domain,\u2013 if you want to set a cross-domain cookie.  For example,,domain=\".example.com\",will set a cookie that is\nreadable by the domain,www.example.com,,,foo.example.com,etc.  Otherwise, a cookie will only\nbe readable by the domain that set it.,,secure,\u2013 If,True,, the cookie will only be available via HTTPS,,httponly,\u2013 disallow JavaScript to access the cookie.  This is an\nextension to the cookie standard and probably not\nsupported by all browsers.,,samesite,\u2013 Limits the scope of the cookie such that it will only\nbe attached to requests if those requests are\n\u201csame-site\u201d.,,,,,,,,,,,Sessions,\u00b6,,If you have the,Flask.secret_key,set you can use sessions in Flask\napplications.  A session basically makes it possible to remember\ninformation from one request to another.  The way Flask does this is by\nusing a signed cookie.  So the user can look at the session contents, but\nnot modify it unless they know the secret key, so make sure to set that\nto something complex and unguessable.,,To access the current session you can use the,session,object:,,,,class,flask.,session,\u00b6,,The session object works pretty much like an ordinary dict, with the\ndifference that it keeps track on modifications.,,This is a proxy.  See,Notes On Proxies,for more information.,,The following attributes are interesting:,,,,new,\u00b6,,True,if the session is new,,False,otherwise.,,,,,modified,\u00b6,,True,if the session object detected a modification.  Be advised\nthat modifications on mutable structures are not picked up\nautomatically, in that situation you have to explicitly set the\nattribute to,True,yourself.  Here an example:,,# this change is not picked up because a mutable object (here,,# a list) is changed.,,session,[,'objects',],.,append,(,42,),,# so mark it as modified yourself,,session,.,modified,,=,,True,,,,,,,permanent,\u00b6,,If set to,True,the session lives for,permanent_session_lifetime,seconds.  The\ndefault is 31 days.  If set to,False,(which is the default) the\nsession will be deleted when the user closes the browser.,,,,,,Session Interface,\u00b6,,,Changelog,,New in version 0.8.,,,The session interface provides a simple way to replace the session\nimplementation that Flask is using.,,,,class,flask.sessions.,SessionInterface,\u00b6,,The basic interface you have to implement in order to replace the\ndefault session interface which uses werkzeug\u2019s securecookie\nimplementation.  The only methods you have to implement are,open_session(),and,save_session(),, the others have\nuseful defaults which you don\u2019t need to change.,,The session object returned by the,open_session(),method has to\nprovide a dictionary like interface plus the properties and methods\nfrom the,SessionMixin,.  We recommend just subclassing a dict\nand adding that mixin:,,class,,Session,(,dict,,,,SessionMixin,):,,pass,,,,If,open_session(),returns,None,Flask will call into,make_null_session(),to create a session that acts as replacement\nif the session support cannot work because some requirement is not\nfulfilled.  The default,NullSession,class that is created\nwill complain that the secret key was not set.,,To replace the session interface on an application all you have to do\nis to assign,flask.Flask.session_interface,:,,app,,=,,Flask,(,__name__,),,app,.,session_interface,,=,,MySessionInterface,(),,,,,Changelog,,New in version 0.8.,,,,,get_cookie_domain,(,app,),\u00b6,,Helpful helper method that returns the cookie domain that should\nbe used for the session cookie if session cookies are used.,,,,,get_cookie_httponly,(,app,),\u00b6,,Returns True if the session cookie should be httponly.  This\ncurrently just returns the value of the,SESSION_COOKIE_HTTPONLY,config var.,,,,,get_cookie_path,(,app,),\u00b6,,Returns the path for which the cookie should be valid.  The\ndefault implementation uses the value from the,SESSION_COOKIE_PATH,config var if it\u2019s set, and falls back to,APPLICATION_ROOT,or\nuses,/,if it\u2019s,None,.,,,,,get_cookie_secure,(,app,),\u00b6,,Returns True if the cookie should be secure.  This currently\njust returns the value of the,SESSION_COOKIE_SECURE,setting.,,,,,get_expiration_time,(,app,,,session,),\u00b6,,A helper method that returns an expiration date for the session\nor,None,if the session is linked to the browser session.  The\ndefault implementation returns now + the permanent session\nlifetime configured on the application.,,,,,is_null_session,(,obj,),\u00b6,,Checks if a given object is a null session.  Null sessions are\nnot asked to be saved.,,This checks if the object is an instance of,null_session_class,by default.,,,,,make_null_session,(,app,),\u00b6,,Creates a null session which acts as a replacement object if the\nreal session support could not be loaded due to a configuration\nerror.  This mainly aids the user experience because the job of the\nnull session is to still support lookup without complaining but\nmodifications are answered with a helpful error message of what\nfailed.,,This creates an instance of,null_session_class,by default.,,,,,null_session_class,\u00b6,,make_null_session(),will look here for the class that should\nbe created when a null session is requested.  Likewise the,is_null_session(),method will perform a typecheck against\nthis type.,,alias of,NullSession,,,,,open_session,(,app,,,request,),\u00b6,,This method has to be implemented and must either return,None,in case the loading failed because of a configuration error or an\ninstance of a session object which implements a dictionary like\ninterface + the methods and attributes on,SessionMixin,.,,,,,pickle_based,= False,\u00b6,,A flag that indicates if the session interface is pickle based.\nThis can be used by Flask extensions to make a decision in regards\nto how to deal with the session object.,,,Changelog,,New in version 0.10.,,,,,,save_session,(,app,,,session,,,response,),\u00b6,,This is called for actual sessions returned by,open_session(),at the end of the request.  This is still called during a request\ncontext so if you absolutely need access to the request you can do\nthat.,,,,,should_set_cookie,(,app,,,session,),\u00b6,,Indicates whether a cookie should be set now or not.  This is\nused by session backends to figure out if they should emit a\nset-cookie header or not.  The default behavior is controlled by\nthe,SESSION_REFRESH_EACH_REQUEST,config variable.  If\nit\u2019s set to,False,then a cookie is only set if the session is\nmodified, if set to,True,it\u2019s always set if the session is\npermanent.,,This check is usually skipped if sessions get deleted.,,,Changelog,,New in version 0.11.,,,,,,,class,flask.sessions.,SecureCookieSessionInterface,\u00b6,,The default session interface that stores sessions in signed cookies\nthrough the,itsdangerous,module.,,,,static,digest_method,(,),\u00b6,,the hash function to use for the signature.  The default is sha1,,,,,key_derivation,= 'hmac',\u00b6,,the name of the itsdangerous supported key derivation.  The default\nis hmac.,,,,,open_session,(,app,,,request,),\u00b6,,This method has to be implemented and must either return,None,in case the loading failed because of a configuration error or an\ninstance of a session object which implements a dictionary like\ninterface + the methods and attributes on,SessionMixin,.,,,,,salt,= 'cookie-session',\u00b6,,the salt that should be applied on top of the secret key for the\nsigning of cookie based sessions.,,,,,save_session,(,app,,,session,,,response,),\u00b6,,This is called for actual sessions returned by,open_session(),at the end of the request.  This is still called during a request\ncontext so if you absolutely need access to the request you can do\nthat.,,,,,serializer,= <flask.sessions.TaggedJSONSerializer object>,\u00b6,,A python serializer for the payload.  The default is a compact\nJSON derived serializer with support for some extra Python types\nsuch as datetime objects or tuples.,,,,,session_class,\u00b6,,alias of,SecureCookieSession,,,,,,class,flask.sessions.,SecureCookieSession,(,initial=None,),\u00b6,,Base class for sessions based on signed cookies.,,,,,class,flask.sessions.,NullSession,(,initial=None,),\u00b6,,Class used to generate nicer error messages if sessions are not\navailable.  Will still allow read-only access to the empty session\nbut fail on setting.,,,,,class,flask.sessions.,SessionMixin,\u00b6,,Expands a basic dictionary with an accessors that are expected\nby Flask extensions and users for the session.,,,,modified,= True,\u00b6,,for some backends this will always be,True,, but some backends will\ndefault this to false and detect changes in the dictionary for as\nlong as changes do not happen on mutable structures in the session.\nThe default mixin implementation just hardcodes,True,in.,,,,,new,= False,\u00b6,,some session backends can tell you if a session is new, but that is\nnot necessarily guaranteed.  Use with caution.  The default mixin\nimplementation just hardcodes,False,in.,,,,,permanent,\u00b6,,this reflects the,'_permanent',key in the dict.,,,,,,flask.sessions.,session_json_serializer,= <flask.sessions.TaggedJSONSerializer object>,\u00b6,,A customized JSON serializer that supports a few extra types that\nwe take for granted when serializing (tuples, markup objects, datetime).,,This object provides dumping and loading methods similar to simplejson\nbut it also tags certain builtin Python objects that commonly appear in\nsessions.  Currently the following extended values are supported in\nthe JSON it dumps:,,,Markup,objects,,UUID,objects,,datetime,objects,,tuple,s,,,,,Notice,,The,PERMANENT_SESSION_LIFETIME,config key can also be an integer\nstarting with Flask 0.8.  Either catch this down yourself or use\nthe,permanent_session_lifetime,attribute on the\napp which converts the result to an integer automatically.,,,,,Test Client,\u00b6,,,,class,flask.testing.,FlaskClient,(,*args,,,**kwargs,),\u00b6,,Works like a regular Werkzeug test client but has some knowledge about\nhow Flask works to defer the cleanup of the request context stack to the\nend of a,with,body when used in a,with,statement.  For general\ninformation about how to use this class refer to,werkzeug.test.Client,.,,,Changed in version 0.12:,app.test_client(),includes preset default environment, which can be\nset after instantiation of the,app.test_client(),object in,client.environ_base,.,,,,Changelog,Basic usage is outlined in the,Testing Flask Applications,chapter.,,,,open,(,*args,,,**kwargs,),\u00b6,,Takes the same arguments as the,EnvironBuilder,class with\nsome additions:  You can provide a,EnvironBuilder,or a WSGI\nenvironment as only argument instead of the,EnvironBuilder,arguments and two optional keyword arguments (,as_tuple,,,buffered,)\nthat change the type of the return value or the way the application is\nexecuted.,,,Changelog,,Changed in version 0.5:,If a dict is provided as file in the dict for the,data,parameter\nthe content type has to be called,content_type,now instead of,mimetype,.  This change was made for consistency with,werkzeug.FileWrapper,.,,,The,follow_redirects,parameter was added to,open(),.,,,Additional parameters:,,,,,,Parameters:,,as_tuple,\u2013 Returns a tuple in the form,(environ,,,result),,buffered,\u2013 Set this to True to buffer the application run.\nThis will automatically close the application for\nyou as well.,,follow_redirects,\u2013 Set this to True if the,Client,should\nfollow HTTP redirects.,,,,,,,,,,session_transaction,(,*args,,,**kwargs,),\u00b6,,When used in combination with a,with,statement this opens a\nsession transaction.  This can be used to modify the session that\nthe test client uses.  Once the,with,block is left the session is\nstored back.,,with,,client,.,session_transaction,(),,as,,session,:,,session,[,'value',],,=,,42,,,,Internally this is implemented by going through a temporary test\nrequest context and since session handling could depend on\nrequest variables this function accepts the same arguments as,test_request_context(),which are directly\npassed through.,,,,,,Application Globals,\u00b6,,To share data that is valid for one request only from one function to\nanother, a global variable is not good enough because it would break in\nthreaded environments.  Flask provides you with a special object that\nensures it is only valid for the active request and that will return\ndifferent values for each request.  In a nutshell: it does the right\nthing, like it does for,request,and,session,.,,,,flask.,g,\u00b6,,Just store on this whatever you want.  For example a database\nconnection or the user that is currently logged in.,,Starting with Flask 0.10 this is stored on the application context and\nno longer on the request context which means it becomes available if\nonly the application context is bound and not yet a request.  This\nis especially useful when combined with the,Faking Resources and Context,pattern for testing.,,Additionally as of 0.10 you can use the,get(),method to\nget an attribute or,None,(or the second argument) if it\u2019s not set.\nThese two usages are now equivalent:,,user,,=,,getattr,(,flask,.,g,,,,'user',,,,None,),,user,,=,,flask,.,g,.,get,(,'user',,,,None,),,,,It\u2019s now also possible to use the,in,operator on it to see if an\nattribute is defined and it yields all keys on iteration.,,As of 0.11 you can use,pop(),and,setdefault(),in the same\nway you would use them on a dictionary.,,This is a proxy.  See,Notes On Proxies,for more information.,,,,,Useful Functions and Classes,\u00b6,,,,flask.,current_app,\u00b6,,Points to the application handling the request.  This is useful for\nextensions that want to support multiple applications running side\nby side.  This is powered by the application context and not by the\nrequest context, so you can change the value of this proxy by\nusing the,app_context(),method.,,This is a proxy.  See,Notes On Proxies,for more information.,,,,,flask.,has_request_context,(,),\u00b6,,If you have code that wants to test if a request context is there or\nnot this function can be used.  For instance, you may want to take advantage\nof request information if the request object is available, but fail\nsilently if it is unavailable.,,class,,User,(,db,.,Model,):,,def,,__init__,(,self,,,,username,,,,remote_addr,=,None,):,,self,.,username,,=,,username,,if,,remote_addr,,is,,None,,and,,has_request_context,():,,remote_addr,,=,,request,.,remote_addr,,self,.,remote_addr,,=,,remote_addr,,,,Alternatively you can also just test any of the context bound objects\n(such as,request,or,g,for truthness):,,class,,User,(,db,.,Model,):,,def,,__init__,(,self,,,,username,,,,remote_addr,=,None,):,,self,.,username,,=,,username,,if,,remote_addr,,is,,None,,and,,request,:,,remote_addr,,=,,request,.,remote_addr,,self,.,remote_addr,,=,,remote_addr,,,,,Changelog,,New in version 0.7.,,,,,,flask.,copy_current_request_context,(,f,),\u00b6,,A helper function that decorates a function to retain the current\nrequest context.  This is useful when working with greenlets.  The moment\nthe function is decorated a copy of the request context is created and\nthen pushed when the function is called.,,Example:,,import,,gevent,,from,,flask,,import,,copy_current_request_context,,@app,.,route,(,'/',),,def,,index,():,,@copy_current_request_context,,def,,do_some_work,():,,# do some work here, it can access flask.request like you,,# would otherwise in the view function.,,...,,gevent,.,spawn,(,do_some_work,),,return,,'Regular response',,,,,Changelog,,New in version 0.10.,,,,,,flask.,has_app_context,(,),\u00b6,,Works like,has_request_context(),but for the application\ncontext.  You can also just do a boolean check on the,current_app,object instead.,,,Changelog,,New in version 0.9.,,,,,,flask.,url_for,(,endpoint,,,**values,),\u00b6,,Generates a URL to the given endpoint with the method provided.,,Variable arguments that are unknown to the target endpoint are appended\nto the generated URL as query arguments.  If the value of a query argument\nis,None,, the whole pair is skipped.  In case blueprints are active\nyou can shortcut references to the same blueprint by prefixing the\nlocal endpoint with a dot (,.,).,,This will reference the index function local to the current blueprint:,,url_for,(,'.index',),,,,For more information, head over to the,Quickstart,.,,To integrate applications,,Flask,has a hook to intercept URL build\nerrors through,Flask.url_build_error_handlers,.  The,url_for,function results in a,BuildError,when the current\napp does not have a URL for the given endpoint and values.  When it does, the,current_app,calls its,url_build_error_handlers,if\nit is not,None,, which can return a string to use as the result of,url_for,(instead of,url_for,\u2019s default to raise the,BuildError,exception) or re-raise the exception.\nAn example:,,def,,external_url_handler,(,error,,,,endpoint,,,,values,):,,\"Looks up an external URL when `url_for` cannot build a URL.\",,# This is an example of hooking the build_error_handler.,,# Here, lookup_url is some utility function you've built,,# which looks up the endpoint in some external URL registry.,,url,,=,,lookup_url,(,endpoint,,,,**,values,),,if,,url,,is,,None,:,,# External lookup did not have a URL.,,# Re-raise the BuildError, in context of original traceback.,,exc_type,,,,exc_value,,,,tb,,=,,sys,.,exc_info,(),,if,,exc_value,,is,,error,:,,raise,,exc_type,,,,exc_value,,,,tb,,else,:,,raise,,error,,# url_for will use this result, instead of raising BuildError.,,return,,url,,app,.,url_build_error_handlers,.,append,(,external_url_handler,),,,,Here,,error,is the instance of,BuildError,, and,endpoint,and,values,are the arguments passed into,url_for,.  Note\nthat this is for building URLs outside the current application, and not for\nhandling 404 NotFound errors.,,,Changelog,,New in version 0.10:,The,_scheme,parameter was added.,,,,New in version 0.9:,The,_anchor,and,_method,parameters were added.,,,,New in version 0.9:,Calls,Flask.handle_build_error(),on,BuildError,.,,,,,,,Parameters:,,endpoint,\u2013 the endpoint of the URL (name of the function),,values,\u2013 the variable arguments of the URL rule,,_external,\u2013 if set to,True,, an absolute URL is generated. Server\naddress can be changed via,SERVER_NAME,configuration variable which\ndefaults to,localhost,.,,_scheme,\u2013 a string specifying the desired URL scheme. The,_external,parameter must be set to,True,or a,ValueError,is raised. The default\nbehavior uses the same scheme as the current request, or,PREFERRED_URL_SCHEME,from the,app configuration,if no\nrequest context is available. As of Werkzeug 0.10, this also can be set\nto an empty string to build protocol-relative URLs.,,_anchor,\u2013 if provided this is added as anchor to the URL.,,_method,\u2013 if provided this explicitly specifies an HTTP method.,,,,,,,,,,flask.,abort,(,status,,,*args,,,**kwargs,),\u00b6,,Raises an,HTTPException,for the given status code or WSGI\napplication:,,abort,(,404,),,# 404 Not Found,,abort,(,Response,(,'Hello World',)),,,,Can be passed a WSGI application or a status code.  If a status code is\ngiven it\u2019s looked up in the list of exceptions and will raise that\nexception, if passed a WSGI application it will wrap it in a proxy WSGI\nexception and raise that:,,abort,(,404,),,abort,(,Response,(,'Hello World',)),,,,,,,flask.,redirect,(,location,,,code=302,,,Response=None,),\u00b6,,Returns a response object (a WSGI application) that, if called,\nredirects the client to the target location.  Supported codes are 301,\n302, 303, 305, and 307.  300 is not supported because it\u2019s not a real\nredirect and 304 because it\u2019s the answer for a request with a request\nwith defined If-Modified-Since headers.,,,Changelog,,New in version 0.10:,The class used for the Response object can now be passed in.,,,,New in version 0.6:,The location can now be a unicode string that is encoded using\nthe,iri_to_uri(),function.,,,,,,,Parameters:,,location,\u2013 the location the response should redirect to.,,code,\u2013 the redirect status code. defaults to 302.,,Response,(,class,) \u2013 a Response class to use when instantiating a\nresponse. The default is,werkzeug.wrappers.Response,if\nunspecified.,,,,,,,,,,flask.,make_response,(,*args,),\u00b6,,Sometimes it is necessary to set additional headers in a view.  Because\nviews do not have to return response objects but can return a value that\nis converted into a response object by Flask itself, it becomes tricky to\nadd headers to it.  This function can be called instead of using a return\nand you will get a response object which you can use to attach headers.,,If view looked like this and you want to add a new header:,,def,,index,():,,return,,render_template,(,'index.html',,,,foo,=,42,),,,,You can now do something like this:,,def,,index,():,,response,,=,,make_response,(,render_template,(,'index.html',,,,foo,=,42,)),,response,.,headers,[,'X-Parachutes',],,=,,'parachutes are cool',,return,,response,,,,This function accepts the very same arguments you can return from a\nview function.  This for example creates a response with a 404 error\ncode:,,response,,=,,make_response,(,render_template,(,'not_found.html',),,,404,),,,,The other use case of this function is to force the return value of a\nview function into a response which is helpful with view\ndecorators:,,response,,=,,make_response,(,view_function,()),,response,.,headers,[,'X-Parachutes',],,=,,'parachutes are cool',,,,Internally this function does the following things:,,,if no arguments are passed, it creates a new response argument,,if one argument is passed,,flask.Flask.make_response(),is invoked with it.,,if more than one argument is passed, the arguments are passed\nto the,flask.Flask.make_response(),function as tuple.,,,,Changelog,,New in version 0.6.,,,,,,flask.,after_this_request,(,f,),\u00b6,,Executes a function after this request.  This is useful to modify\nresponse objects.  The function is passed the response object and has\nto return the same or a new one.,,Example:,,@app,.,route,(,'/',),,def,,index,():,,@after_this_request,,def,,add_header,(,response,):,,response,.,headers,[,'X-Foo',],,=,,'Parachute',,return,,response,,return,,'Hello World!',,,,This is more useful if a function other than the view function wants to\nmodify a response.  For instance think of a decorator that wants to add\nsome headers without converting the return value into a response object.,,,Changelog,,New in version 0.9.,,,,,,flask.,send_file,(,filename_or_fp,,,mimetype=None,,,as_attachment=False,,,attachment_filename=None,,,add_etags=True,,,cache_timeout=None,,,conditional=False,,,last_modified=None,),\u00b6,,Sends the contents of a file to the client.  This will use the\nmost efficient method available and configured.  By default it will\ntry to use the WSGI server\u2019s file_wrapper support.  Alternatively\nyou can set the application\u2019s,use_x_sendfile,attribute\nto,True,to directly emit an,X-Sendfile,header.  This however\nrequires support of the underlying webserver for,X-Sendfile,.,,By default it will try to guess the mimetype for you, but you can\nalso explicitly provide one.  For extra security you probably want\nto send certain files as attachment (HTML for instance).  The mimetype\nguessing requires a,filename,or an,attachment_filename,to be\nprovided.,,ETags will also be attached automatically if a,filename,is provided. You\ncan turn this off by setting,add_etags=False,.,,If,conditional=True,and,filename,is provided, this method will try to\nupgrade the response stream to support range requests.  This will allow\nthe request to be answered with partial content response.,,Please never pass filenames to this function from user sources;\nyou should use,send_from_directory(),instead.,,,Changed in version 0.12:,The filename is no longer automatically inferred from file objects. If\nyou want to use automatic mimetype and etag support, pass a filepath via,filename_or_fp,or,attachment_filename,.,,,,Changed in version 0.12:,The,attachment_filename,is preferred over,filename,for MIME-type\ndetection.,,,,Changelog,,Changed in version 0.9:,cache_timeout pulls its default from application config, when None.,,,,Changed in version 0.7:,mimetype guessing and etag support for file objects was\ndeprecated because it was unreliable.  Pass a filename if you are\nable to, otherwise attach an etag yourself.  This functionality\nwill be removed in Flask 1.0,,,,New in version 0.5:,The,add_etags,,,cache_timeout,and,conditional,parameters were\nadded.  The default behavior is now to attach etags.,,,,New in version 0.2.,,,,,,,Parameters:,,filename_or_fp,\u2013 the filename of the file to send in,latin-1,.\nThis is relative to the,root_path,if a relative path is specified.\nAlternatively a file object might be provided in\nwhich case,X-Sendfile,might not work and fall\nback to the traditional method.  Make sure that the\nfile pointer is positioned at the start of data to\nsend before calling,send_file(),.,,mimetype,\u2013 the mimetype of the file if provided. If a file path is\ngiven, auto detection happens as fallback, otherwise an\nerror will be raised.,,as_attachment,\u2013 set to,True,if you want to send this file with\na,Content-Disposition:,,attachment,header.,,attachment_filename,\u2013 the filename for the attachment if it\ndiffers from the file\u2019s filename.,,add_etags,\u2013 set to,False,to disable attaching of etags.,,conditional,\u2013 set to,True,to enable conditional responses.,,cache_timeout,\u2013 the timeout in seconds for the headers. When,None,(default), this value is set by,get_send_file_max_age(),of,current_app,.,,last_modified,\u2013 set the,Last-Modified,header to this value,\na,datetime,or timestamp.\nIf a file was passed, this overrides its mtime.,,,,,,,,,,flask.,send_from_directory,(,directory,,,filename,,,**options,),\u00b6,,Send a file from a given directory with,send_file(),.  This\nis a secure way to quickly expose static files from an upload folder\nor something similar.,,Example usage:,,@app,.,route,(,'/uploads/<path:filename>',),,def,,download_file,(,filename,):,,return,,send_from_directory,(,app,.,config,[,'UPLOAD_FOLDER',],,,filename,,,,as_attachment,=,True,),,,,,Sending files and Performance,,It is strongly recommended to activate either,X-Sendfile,support in\nyour webserver or (if no authentication happens) to tell the webserver\nto serve files for the given path on its own without calling into the\nweb application for improved performance.,,,,Changelog,,New in version 0.5.,,,,,,,Parameters:,,directory,\u2013 the directory where all the files are stored.,,filename,\u2013 the filename relative to that directory to\ndownload.,,options,\u2013 optional keyword arguments that are directly\nforwarded to,send_file(),.,,,,,,,,,,flask.,safe_join,(,directory,,,*pathnames,),\u00b6,,Safely join,directory,and zero or more untrusted,pathnames,components.,,Example usage:,,@app,.,route,(,'/wiki/<path:filename>',),,def,,wiki_page,(,filename,):,,filename,,=,,safe_join,(,app,.,config,[,'WIKI_FOLDER',],,,filename,),,with,,open,(,filename,,,,'rb',),,as,,fd,:,,content,,=,,fd,.,read,(),,# Read and process the file content...,,,,,,,,Parameters:,,directory,\u2013 the trusted base directory.,,pathnames,\u2013 the untrusted pathnames relative to that directory.,,,,,Raises:,NotFound,if one or more passed\npaths fall out of its boundaries.,,,,,,,,,flask.,escape,(,s,),\u2192 markup,\u00b6,,Convert the characters &, <, >, \u2018, and \u201d in string s to HTML-safe\nsequences.  Use this if you need to display text that might contain\nsuch characters in HTML.  Marks return value as markup string.,,,,,class,flask.,Markup,\u00b6,,Marks a string as being safe for inclusion in HTML/XML output without\nneeding to be escaped.  This implements the,__html__,interface a couple\nof frameworks and web applications use.,Markup,is a direct\nsubclass of,unicode,and provides all the methods of,unicode,just that\nit escapes arguments passed and always returns,Markup,.,,The,escape,function returns markup objects so that double escaping can\u2019t\nhappen.,,The constructor of the,Markup,class can be used for three\ndifferent things:  When passed an unicode object it\u2019s assumed to be safe,\nwhen passed an object with an HTML representation (has an,__html__,method) that representation is used, otherwise the object passed is\nconverted into a unicode string and then assumed to be safe:,,>>>,Markup,(,\"Hello <em>World</em>!\",),,Markup(u'Hello <em>World</em>!'),,>>>,class,,Foo,(,object,):,,...,,def,,__html__,(,self,):,,...,,return,,'<a href=\"#\">foo</a>',,...,,>>>,Markup,(,Foo,()),,Markup(u'<a href=\"#\">foo</a>'),,,,If you want object passed being always treated as unsafe you can use the,escape(),classmethod to create a,Markup,object:,,>>>,Markup,.,escape,(,\"Hello <em>World</em>!\",),,Markup(u'Hello &lt;em&gt;World&lt;/em&gt;!'),,,,Operations on a markup string are markup aware which means that all\narguments are passed through the,escape(),function:,,>>>,em,,=,,Markup,(,\"<em>,%s,</em>\",),,>>>,em,,%,,\"foo & bar\",,Markup(u'<em>foo &amp; bar</em>'),,>>>,strong,,=,,Markup,(,\"<strong>,%(text)s,</strong>\",),,>>>,strong,,%,,{,'text',:,,'<blink>hacker here</blink>',},,Markup(u'<strong>&lt;blink&gt;hacker here&lt;/blink&gt;</strong>'),,>>>,Markup,(,\"<em>Hello</em> \",),,+,,\"<foo>\",,Markup(u'<em>Hello</em> &lt;foo&gt;'),,,,,,classmethod,escape,(,s,),\u00b6,,Escape the string.  Works like,escape(),with the difference\nthat for subclasses of,Markup,this function would return the\ncorrect subclass.,,,,,striptags,(,),\u00b6,,Unescape markup into an text_type string and strip all tags.  This\nalso resolves known HTML4 and XHTML entities.  Whitespace is\nnormalized to one:,,>>>,Markup,(,\"Main &raquo;  <em>About</em>\",),.,striptags,(),,u'Main \\xbb About',,,,,,,unescape,(,),\u00b6,,Unescape markup again into an text_type string.  This also resolves\nknown HTML4 and XHTML entities:,,>>>,Markup,(,\"Main &raquo; <em>About</em>\",),.,unescape,(),,u'Main \\xbb <em>About</em>',,,,,,,,Message Flashing,\u00b6,,,,flask.,flash,(,message,,,category='message',),\u00b6,,Flashes a message to the next request.  In order to remove the\nflashed message from the session and to display it to the user,\nthe template has to call,get_flashed_messages(),.,,,Changelog,,Changed in version 0.3:,category,parameter added.,,,,,,,Parameters:,,message,\u2013 the message to be flashed.,,category,\u2013 the category for the message.  The following values\nare recommended:,'message',for any kind of message,,'error',for errors,,'info',for information\nmessages and,'warning',for warnings.  However any\nkind of string can be used as category.,,,,,,,,,,flask.,get_flashed_messages,(,with_categories=False,,,category_filter=[],),\u00b6,,Pulls all flashed messages from the session and returns them.\nFurther calls in the same request to the function will return\nthe same messages.  By default just the messages are returned,\nbut when,with_categories,is set to,True,, the return value will\nbe a list of tuples in the form,(category,,,message),instead.,,Filter the flashed messages to one or more categories by providing those\ncategories in,category_filter,.  This allows rendering categories in\nseparate html blocks.  The,with_categories,and,category_filter,arguments are distinct:,,,with_categories,controls whether categories are returned with message\ntext (,True,gives a tuple, where,False,gives just the message text).,,category_filter,filters the messages down to only those matching the\nprovided categories.,,,See,Message Flashing,for examples.,,,Changelog,,Changed in version 0.9:,category_filter,parameter added.,,,,Changed in version 0.3:,with_categories,parameter added.,,,,,,,Parameters:,,with_categories,\u2013 set to,True,to also receive categories.,,category_filter,\u2013 whitelist of categories to limit return values,,,,,,,,,,JSON Support,\u00b6,,Flask uses,simplejson,for the JSON implementation.  Since simplejson\nis provided by both the standard library as well as extension, Flask will\ntry simplejson first and then fall back to the stdlib json module.  On top\nof that it will delegate access to the current application\u2019s JSON encoders\nand decoders for easier customization.,,So for starters instead of doing:,,try,:,,import,,simplejson,,as,,json,,except,,ImportError,:,,import,,json,,,,You can instead just do this:,,from,,flask,,import,,json,,,,For usage examples, read the,json,documentation in the standard\nlibrary.  The following extensions are by default applied to the stdlib\u2019s\nJSON module:,,,datetime,objects are serialized as,RFC 822,strings.,,Any object with an,__html__,method (like,Markup,)\nwill have that method called and then the return value is serialized\nas string.,,,The,htmlsafe_dumps(),function of this json module is also available\nas filter called,|tojson,in Jinja2.  Note that inside,script,tags no escaping must take place, so make sure to disable escaping\nwith,|safe,if you intend to use it inside,script,tags unless\nyou are using Flask 0.10 which implies that:,,<,script,,type,=,text/javascript,>,,doSomethingWith,(,{{,,user.username,|,tojson,|,safe,,}},);,,</,script,>,,,,,Auto-Sort JSON Keys,,The configuration variable,JSON_SORT_KEYS,(,Configuration Handling,) can be\nset to false to stop Flask from auto-sorting keys.  By default sorting\nis enabled and outside of the app context sorting is turned on.,,Notice that disabling key sorting can cause issues when using content\nbased HTTP caches and Python\u2019s hash randomization feature.,,,,,flask.json.,jsonify,(,*args,,,**kwargs,),\u00b6,,This function wraps,dumps(),to add a few enhancements that make\nlife easier.  It turns the JSON output into a,Response,object with the,application/json,mimetype.  For convenience, it\nalso converts multiple arguments into an array or multiple keyword arguments\ninto a dict.  This means that both,jsonify(1,2,3),and,jsonify([1,2,3]),serialize to,[1,2,3],.,,For clarity, the JSON serialization behavior has the following differences\nfrom,dumps(),:,,,Single argument: Passed straight through to,dumps(),.,,Multiple arguments: Converted to an array before being passed to,dumps(),.,,Multiple keyword arguments: Converted to a dict before being passed to,dumps(),.,,Both args and kwargs: Behavior undefined and will throw an exception.,,,Example usage:,,from,,flask,,import,,jsonify,,@app,.,route,(,'/_get_current_user',),,def,,get_current_user,():,,return,,jsonify,(,username,=,g,.,user,.,username,,,,email,=,g,.,user,.,email,,,,id,=,g,.,user,.,id,),,,,This will send a JSON response like this to the browser:,,{,,\"username\",:,,\"admin\",,,,\"email\",:,,\"admin@localhost\",,,,\"id\",:,,42,,},,,,,Changelog,,Changed in version 0.11:,Added support for serializing top-level arrays. This introduces a\nsecurity risk in ancient browsers. See,JSON Security,for details.,,,This function\u2019s response will be pretty printed if it was not requested\nwith,X-Requested-With:,,XMLHttpRequest,to simplify debugging unless\nthe,JSONIFY_PRETTYPRINT_REGULAR,config parameter is set to false.\nCompressed (not pretty) formatting currently means no indents and no\nspaces after separators.,,,Changelog,,New in version 0.2.,,,,,,flask.json.,dumps,(,obj,,,**kwargs,),\u00b6,,Serialize,obj,to a JSON formatted,str,by using the application\u2019s\nconfigured encoder (,json_encoder,) if there is an\napplication on the stack.,,This function can return,unicode,strings or ascii-only bytestrings by\ndefault which coerce into unicode strings automatically.  That behavior by\ndefault is controlled by the,JSON_AS_ASCII,configuration variable\nand can be overridden by the simplejson,ensure_ascii,parameter.,,,,,flask.json.,dump,(,obj,,,fp,,,**kwargs,),\u00b6,,Like,dumps(),but writes into a file object.,,,,,flask.json.,loads,(,s,,,**kwargs,),\u00b6,,Unserialize a JSON object from a string,s,by using the application\u2019s\nconfigured decoder (,json_decoder,) if there is an\napplication on the stack.,,,,,flask.json.,load,(,fp,,,**kwargs,),\u00b6,,Like,loads(),but reads from a file object.,,,,,class,flask.json.,JSONEncoder,(,*,,,skipkeys=False,,,ensure_ascii=True,,,check_circular=True,,,allow_nan=True,,,sort_keys=False,,,indent=None,,,separators=None,,,default=None,),\u00b6,,The default Flask JSON encoder.  This one extends the default simplejson\nencoder by also supporting,datetime,objects,,UUID,as well as,Markup,objects which are serialized as RFC 822 datetime strings (same\nas the HTTP date format).  In order to support more data types override the,default(),method.,,,,default,(,o,),\u00b6,,Implement this method in a subclass such that it returns a\nserializable object for,o,, or calls the base implementation (to\nraise a,TypeError,).,,For example, to support arbitrary iterators, you could implement\ndefault like this:,,def,,default,(,self,,,,o,):,,try,:,,iterable,,=,,iter,(,o,),,except,,TypeError,:,,pass,,else,:,,return,,list,(,iterable,),,return,,JSONEncoder,.,default,(,self,,,,o,),,,,,,,,class,flask.json.,JSONDecoder,(,*,,,object_hook=None,,,parse_float=None,,,parse_int=None,,,parse_constant=None,,,strict=True,,,object_pairs_hook=None,),\u00b6,,The default JSON decoder.  This one does not change the behavior from\nthe default simplejson decoder.  Consult the,json,documentation\nfor more information.  This decoder is not only used for the load\nfunctions of this module but also,Request,.,,,,,Template Rendering,\u00b6,,,,flask.,render_template,(,template_name_or_list,,,**context,),\u00b6,,Renders a template from the template folder with the given\ncontext.,,,,,,Parameters:,,template_name_or_list,\u2013 the name of the template to be\nrendered, or an iterable with template names\nthe first one existing will be rendered,,context,\u2013 the variables that should be available in the\ncontext of the template.,,,,,,,,,,flask.,render_template_string,(,source,,,**context,),\u00b6,,Renders a template from the given template source string\nwith the given context. Template variables will be autoescaped.,,,,,,Parameters:,,source,\u2013 the source code of the template to be\nrendered,,context,\u2013 the variables that should be available in the\ncontext of the template.,,,,,,,,,,flask.,get_template_attribute,(,template_name,,,attribute,),\u00b6,,Loads a macro (or variable) a template exports.  This can be used to\ninvoke a macro from within Python code.  If you for example have a\ntemplate named,_cider.html,with the following contents:,,{%,,macro,,hello,(,name,),,%},Hello,{{,,name,,}},!,{%,,endmacro,,%},,,,You can access this from Python code like this:,,hello,,=,,get_template_attribute,(,'_cider.html',,,,'hello',),,return,,hello,(,'World',),,,,,Changelog,,New in version 0.2.,,,,,,,Parameters:,,template_name,\u2013 the name of the template,,attribute,\u2013 the name of the variable of macro to access,,,,,,,,,,Configuration,\u00b6,,,,class,flask.,Config,(,root_path,,,defaults=None,),\u00b6,,Works exactly like a dict but provides ways to fill it from files\nor special dictionaries.  There are two common patterns to populate the\nconfig.,,Either you can fill the config from a config file:,,app,.,config,.,from_pyfile,(,'yourconfig.cfg',),,,,Or alternatively you can define the configuration options in the\nmodule that calls,from_object(),or provide an import path to\na module that should be loaded.  It is also possible to tell it to\nuse the same module and with that provide the configuration values\njust before the call:,,DEBUG,,=,,True,,SECRET_KEY,,=,,'development key',,app,.,config,.,from_object,(,__name__,),,,,In both cases (loading from any Python file or loading from modules),\nonly uppercase keys are added to the config.  This makes it possible to use\nlowercase values in the config file for temporary values that are not added\nto the config or to define the config keys in the same file that implements\nthe application.,,Probably the most interesting way to load configurations is from an\nenvironment variable pointing to a file:,,app,.,config,.,from_envvar,(,'YOURAPPLICATION_SETTINGS',),,,,In this case before launching the application you have to set this\nenvironment variable to the file you want to use.  On Linux and OS X\nuse the export statement:,,export,,YOURAPPLICATION_SETTINGS,=,'/path/to/config/file',,,,On windows use,set,instead.,,,,,,Parameters:,,root_path,\u2013 path to which files are read relative from.  When the\nconfig object is created by the application, this is\nthe application\u2019s,root_path,.,,defaults,\u2013 an optional dictionary of default values,,,,,,,,,from_envvar,(,variable_name,,,silent=False,),\u00b6,,Loads a configuration from an environment variable pointing to\na configuration file.  This is basically just a shortcut with nicer\nerror messages for this line of code:,,app,.,config,.,from_pyfile,(,os,.,environ,[,'YOURAPPLICATION_SETTINGS',]),,,,,,,,Parameters:,,variable_name,\u2013 name of the environment variable,,silent,\u2013 set to,True,if you want silent failure for missing\nfiles.,,,,,Returns:,bool.,True,if able to load config,,False,otherwise.,,,,,,,,,from_json,(,filename,,,silent=False,),\u00b6,,Updates the values in the config from a JSON file. This function\nbehaves as if the JSON object was a dictionary and passed to the,from_mapping(),function.,,,,,,Parameters:,,filename,\u2013 the filename of the JSON file.  This can either be an\nabsolute filename or a filename relative to the\nroot path.,,silent,\u2013 set to,True,if you want silent failure for missing\nfiles.,,,,,,,,Changelog,,New in version 0.11.,,,,,,from_mapping,(,*mapping,,,**kwargs,),\u00b6,,Updates the config like,update(),ignoring items with non-upper\nkeys.,,,Changelog,,New in version 0.11.,,,,,,from_object,(,obj,),\u00b6,,Updates the values from the given object.  An object can be of one\nof the following two types:,,,a string: in this case the object with that name will be imported,,an actual object reference: that object is used directly,,,Objects are usually either modules or classes.,from_object(),loads only the uppercase attributes of the module/class. A,dict,object will not work with,from_object(),because the keys of a,dict,are not attributes of the,dict,class.,,Example of module-based configuration:,,app,.,config,.,from_object,(,'yourapplication.default_config',),,from,,yourapplication,,import,,default_config,,app,.,config,.,from_object,(,default_config,),,,,You should not use this function to load the actual configuration but\nrather configuration defaults.  The actual config should be loaded\nwith,from_pyfile(),and ideally from a location not within the\npackage because the package might be installed system wide.,,See,Development / Production,for an example of class-based configuration\nusing,from_object(),.,,,,,,Parameters:,obj,\u2013 an import name or object,,,,,,,,from_pyfile,(,filename,,,silent=False,),\u00b6,,Updates the values in the config from a Python file.  This function\nbehaves as if the file was imported as module with the,from_object(),function.,,,,,,Parameters:,,filename,\u2013 the filename of the config.  This can either be an\nabsolute filename or a filename relative to the\nroot path.,,silent,\u2013 set to,True,if you want silent failure for missing\nfiles.,,,,,,,,Changelog,,New in version 0.7:,silent,parameter.,,,,,,get_namespace,(,namespace,,,lowercase=True,,,trim_namespace=True,),\u00b6,,Returns a dictionary containing a subset of configuration options\nthat match the specified namespace/prefix. Example usage:,,app,.,config,[,'IMAGE_STORE_TYPE',],,=,,'fs',,app,.,config,[,'IMAGE_STORE_PATH',],,=,,'/var/app/images',,app,.,config,[,'IMAGE_STORE_BASE_URL',],,=,,'http://img.website.com',,image_store_config,,=,,app,.,config,.,get_namespace,(,'IMAGE_STORE_',),,,,The resulting dictionary,image_store_config,would look like:,,{,,'type',:,,'fs',,,,'path',:,,'/var/app/images',,,,'base_url',:,,'http://img.website.com',,},,,,This is often useful when configuration options map directly to\nkeyword arguments in functions or class constructors.,,,,,,Parameters:,,namespace,\u2013 a configuration namespace,,lowercase,\u2013 a flag indicating if the keys of the resulting\ndictionary should be lowercase,,trim_namespace,\u2013 a flag indicating if the keys of the resulting\ndictionary should not include the namespace,,,,,,,,Changelog,,New in version 0.11.,,,,,,,Extensions,\u00b6,,,,flask.,ext,\u00b6,,This module acts as redirect import module to Flask extensions.  It was\nadded in 0.8 as the canonical way to import Flask extensions and makes\nit possible for us to have more flexibility in how we distribute\nextensions.,,If you want to use an extension named \u201cFlask-Foo\u201d you would import it\nfrom,ext,as follows:,,from,,flask.ext,,import,,foo,,,,,Changelog,,New in version 0.8.,,,,,,Stream Helpers,\u00b6,,,,flask.,stream_with_context,(,generator_or_function,),\u00b6,,Request contexts disappear when the response is started on the server.\nThis is done for efficiency reasons and to make it less likely to encounter\nmemory leaks with badly written WSGI middlewares.  The downside is that if\nyou are using streamed responses, the generator cannot access request bound\ninformation any more.,,This function however can help you keep the context around for longer:,,from,,flask,,import,,stream_with_context,,,,request,,,,Response,,@app,.,route,(,'/stream',),,def,,streamed_response,():,,@stream_with_context,,def,,generate,():,,yield,,'Hello ',,yield,,request,.,args,[,'name',],,yield,,'!',,return,,Response,(,generate,()),,,,Alternatively it can also be used around a specific generator:,,from,,flask,,import,,stream_with_context,,,,request,,,,Response,,@app,.,route,(,'/stream',),,def,,streamed_response,():,,def,,generate,():,,yield,,'Hello ',,yield,,request,.,args,[,'name',],,yield,,'!',,return,,Response,(,stream_with_context,(,generate,())),,,,,Changelog,,New in version 0.9.,,,,,,Useful Internals,\u00b6,,,,class,flask.ctx.,RequestContext,(,app,,,environ,,,request=None,),\u00b6,,The request context contains all request relevant information.  It is\ncreated at the beginning of the request and pushed to the,_request_ctx_stack,and removed at the end of it.  It will create the\nURL adapter and request object for the WSGI environment provided.,,Do not attempt to use this class directly, instead use,test_request_context(),and,request_context(),to create this object.,,When the request context is popped, it will evaluate all the\nfunctions registered on the application for teardown execution\n(,teardown_request(),).,,The request context is automatically popped at the end of the request\nfor you.  In debug mode the request context is kept around if\nexceptions happen so that interactive debuggers have a chance to\nintrospect the data.  With 0.4 this can also be forced for requests\nthat did not fail and outside of,DEBUG,mode.  By setting,'flask._preserve_context',to,True,on the WSGI environment the\ncontext will not pop itself at the end of the request.  This is used by\nthe,test_client(),for example to implement the\ndeferred cleanup functionality.,,You might find this helpful for unittests where you need the\ninformation from the context local around for a little longer.  Make\nsure to properly,pop(),the stack yourself in\nthat situation, otherwise your unittests will leak memory.,,,,copy,(,),\u00b6,,Creates a copy of this request context with the same request object.\nThis can be used to move a request context to a different greenlet.\nBecause the actual request object is the same this cannot be used to\nmove a request context to a different thread unless access to the\nrequest object is locked.,,,Changelog,,New in version 0.10.,,,,,,match_request,(,),\u00b6,,Can be overridden by a subclass to hook into the matching\nof the request.,,,,,pop,(,exc=<object object>,),\u00b6,,Pops the request context and unbinds it by doing that.  This will\nalso trigger the execution of functions registered by the,teardown_request(),decorator.,,,Changelog,,Changed in version 0.9:,Added the,exc,argument.,,,,,,push,(,),\u00b6,,Binds the request context to the current context.,,,,,,flask.,_request_ctx_stack,\u00b6,,The internal,LocalStack,that is used to implement\nall the context local objects used in Flask.  This is a documented\ninstance and can be used by extensions and application code but the\nuse is discouraged in general.,,The following attributes are always present on each layer of the\nstack:,,,app,,the active Flask application.,,url_adapter,,the URL adapter that was used to match the request.,,request,,the current request object.,,session,,the active session object.,,g,,an object with all the attributes of the,flask.g,object.,,flashes,,an internal cache for the flashed messages.,,,Example usage:,,from,,flask,,import,,_request_ctx_stack,,def,,get_session,():,,ctx,,=,,_request_ctx_stack,.,top,,if,,ctx,,is,,not,,None,:,,return,,ctx,.,session,,,,,,,class,flask.ctx.,AppContext,(,app,),\u00b6,,The application context binds an application object implicitly\nto the current thread or greenlet, similar to how the,RequestContext,binds request information.  The application\ncontext is also implicitly created if a request context is created\nbut the application is not on top of the individual application\ncontext.,,,,pop,(,exc=<object object>,),\u00b6,,Pops the app context.,,,,,push,(,),\u00b6,,Binds the app context to the current context.,,,,,,flask.,_app_ctx_stack,\u00b6,,Works similar to the request context but only binds the application.\nThis is mainly there for extensions to store data.,,,Changelog,,New in version 0.9.,,,,,,class,flask.blueprints.,BlueprintSetupState,(,blueprint,,,app,,,options,,,first_registration,),\u00b6,,Temporary holder object for registering a blueprint with the\napplication.  An instance of this class is created by the,make_setup_state(),method and later passed\nto all register callback functions.,,,,add_url_rule,(,rule,,,endpoint=None,,,view_func=None,,,**options,),\u00b6,,A helper method to register a rule (and optionally a view function)\nto the application.  The endpoint is automatically prefixed with the\nblueprint\u2019s name.,,,,,app,= None,\u00b6,,a reference to the current application,,,,,blueprint,= None,\u00b6,,a reference to the blueprint that created this setup state.,,,,,first_registration,= None,\u00b6,,as blueprints can be registered multiple times with the\napplication and not everything wants to be registered\nmultiple times on it, this attribute can be used to figure\nout if the blueprint was registered in the past already.,,,,,options,= None,\u00b6,,a dictionary with all options that were passed to the,register_blueprint(),method.,,,,,subdomain,= None,\u00b6,,The subdomain that the blueprint should be active for,,None,otherwise.,,,,,url_defaults,= None,\u00b6,,A dictionary with URL defaults that is added to each and every\nURL that was defined with the blueprint.,,,,,url_prefix,= None,\u00b6,,The prefix that should be used for all URLs defined on the\nblueprint.,,,,,,Signals,\u00b6,,,Changelog,,New in version 0.6.,,,,,signals.,signals_available,\u00b6,,True,if the signaling system is available.  This is the case\nwhen,blinker,is installed.,,,The following signals exist in Flask:,,,,flask.,template_rendered,\u00b6,,This signal is sent when a template was successfully rendered.  The\nsignal is invoked with the instance of the template as,template,and the context as dictionary (named,context,).,,Example subscriber:,,def,,log_template_renders,(,sender,,,,template,,,,context,,,,**,extra,):,,sender,.,logger,.,debug,(,'Rendering template \",%s,\" with context,%s,',,,,template,.,name,,or,,'string template',,,,context,),,from,,flask,,import,,template_rendered,,template_rendered,.,connect,(,log_template_renders,,,,app,),,,,,,,flask.,before_render_template,,This signal is sent before template rendering process. The\nsignal is invoked with the instance of the template as,template,and the context as dictionary (named,context,).,,Example subscriber:,,def,,log_template_renders,(,sender,,,,template,,,,context,,,,**,extra,):,,sender,.,logger,.,debug,(,'Rendering template \",%s,\" with context,%s,',,,,template,.,name,,or,,'string template',,,,context,),,from,,flask,,import,,before_render_template,,before_render_template,.,connect,(,log_template_renders,,,,app,),,,,,,,flask.,request_started,\u00b6,,This signal is sent when the request context is set up, before\nany request processing happens.  Because the request context is already\nbound, the subscriber can access the request with the standard global\nproxies such as,request,.,,Example subscriber:,,def,,log_request,(,sender,,,,**,extra,):,,sender,.,logger,.,debug,(,'Request context is set up',),,from,,flask,,import,,request_started,,request_started,.,connect,(,log_request,,,,app,),,,,,,,flask.,request_finished,\u00b6,,This signal is sent right before the response is sent to the client.\nIt is passed the response to be sent named,response,.,,Example subscriber:,,def,,log_response,(,sender,,,,response,,,,**,extra,):,,sender,.,logger,.,debug,(,'Request context is about to close down.  ',,'Response:,%s,',,,,response,),,from,,flask,,import,,request_finished,,request_finished,.,connect,(,log_response,,,,app,),,,,,,,flask.,got_request_exception,\u00b6,,This signal is sent when an exception happens during request processing.\nIt is sent,before,the standard exception handling kicks in and even\nin debug mode, where no exception handling happens.  The exception\nitself is passed to the subscriber as,exception,.,,Example subscriber:,,def,,log_exception,(,sender,,,,exception,,,,**,extra,):,,sender,.,logger,.,debug,(,'Got exception during processing:,%s,',,,,exception,),,from,,flask,,import,,got_request_exception,,got_request_exception,.,connect,(,log_exception,,,,app,),,,,,,,flask.,request_tearing_down,\u00b6,,This signal is sent when the request is tearing down.  This is always\ncalled, even if an exception is caused.  Currently functions listening\nto this signal are called after the regular teardown handlers, but this\nis not something you can rely on.,,Example subscriber:,,def,,close_db_connection,(,sender,,,,**,extra,):,,session,.,close,(),,from,,flask,,import,,request_tearing_down,,request_tearing_down,.,connect,(,close_db_connection,,,,app,),,,,As of Flask 0.9, this will also be passed an,exc,keyword argument\nthat has a reference to the exception that caused the teardown if\nthere was one.,,,,,flask.,appcontext_tearing_down,\u00b6,,This signal is sent when the app context is tearing down.  This is always\ncalled, even if an exception is caused.  Currently functions listening\nto this signal are called after the regular teardown handlers, but this\nis not something you can rely on.,,Example subscriber:,,def,,close_db_connection,(,sender,,,,**,extra,):,,session,.,close,(),,from,,flask,,import,,appcontext_tearing_down,,appcontext_tearing_down,.,connect,(,close_db_connection,,,,app,),,,,This will also be passed an,exc,keyword argument that has a reference\nto the exception that caused the teardown if there was one.,,,,,flask.,appcontext_pushed,\u00b6,,This signal is sent when an application context is pushed.  The sender\nis the application.  This is usually useful for unittests in order to\ntemporarily hook in information.  For instance it can be used to\nset a resource early onto the,g,object.,,Example usage:,,from,,contextlib,,import,,contextmanager,,from,,flask,,import,,appcontext_pushed,,@contextmanager,,def,,user_set,(,app,,,,user,):,,def,,handler,(,sender,,,,**,kwargs,):,,g,.,user,,=,,user,,with,,appcontext_pushed,.,connected_to,(,handler,,,,app,):,,yield,,,,And in the testcode:,,def,,test_user_me,(,self,):,,with,,user_set,(,app,,,,'john',):,,c,,=,,app,.,test_client,(),,resp,,=,,c,.,get,(,'/users/me',),,assert,,resp,.,data,,==,,'username=john',,,,,Changelog,,New in version 0.10.,,,,,,flask.,appcontext_popped,\u00b6,,This signal is sent when an application context is popped.  The sender\nis the application.  This usually falls in line with the,appcontext_tearing_down,signal.,,,Changelog,,New in version 0.10.,,,,,,flask.,message_flashed,\u00b6,,This signal is sent when the application is flashing a message.  The\nmessages is sent as,message,keyword argument and the category as,category,.,,Example subscriber:,,recorded,,=,,[],,def,,record,(,sender,,,,message,,,,category,,,,**,extra,):,,recorded,.,append,((,message,,,,category,)),,from,,flask,,import,,message_flashed,,message_flashed,.,connect,(,record,,,,app,),,,,,Changelog,,New in version 0.10.,,,,,,class,signals.,Namespace,\u00b6,,An alias for,blinker.base.Namespace,if blinker is available,\notherwise a dummy class that creates fake signals.  This class is\navailable for Flask extensions that want to provide the same fallback\nsystem as Flask itself.,,,,signal,(,name,,,doc=None,),\u00b6,,Creates a new signal for this namespace if blinker is available,\notherwise returns a fake signal that has a send method that will\ndo nothing but will fail with a,RuntimeError,for all other\noperations, including connecting.,,,,,,Class-Based Views,\u00b6,,,Changelog,,New in version 0.7.,,,,,class,flask.views.,View,\u00b6,,Alternative way to use view functions.  A subclass has to implement,dispatch_request(),which is called with the view arguments from\nthe URL routing system.  If,methods,is provided the methods\ndo not have to be passed to the,add_url_rule(),method explicitly:,,class,,MyView,(,View,):,,methods,,=,,[,'GET',],,def,,dispatch_request,(,self,,,,name,):,,return,,'Hello,%s,!',,%,,name,,app,.,add_url_rule,(,'/hello/<name>',,,,view_func,=,MyView,.,as_view,(,'myview',)),,,,When you want to decorate a pluggable view you will have to either do that\nwhen the view function is created (by wrapping the return value of,as_view(),) or you can use the,decorators,attribute:,,class,,SecretView,(,View,):,,methods,,=,,[,'GET',],,decorators,,=,,[,superuser_required,],,def,,dispatch_request,(,self,):,,...,,,,The decorators stored in the decorators list are applied one after another\nwhen the view function is created.  Note that you can,not,use the class\nbased decorators since those would decorate the view class and not the\ngenerated view function!,,,,classmethod,as_view,(,name,,,*class_args,,,**class_kwargs,),\u00b6,,Converts the class into an actual view function that can be used\nwith the routing system.  Internally this generates a function on the\nfly which will instantiate the,View,on each request and call\nthe,dispatch_request(),method on it.,,The arguments passed to,as_view(),are forwarded to the\nconstructor of the class.,,,,,decorators,= (),\u00b6,,The canonical way to decorate class-based views is to decorate the\nreturn value of as_view().  However since this moves parts of the\nlogic from the class declaration to the place where it\u2019s hooked\ninto the routing system.,,You can place one or more decorators in this list and whenever the\nview function is created the result is automatically decorated.,,,Changelog,,New in version 0.8.,,,,,,dispatch_request,(,),\u00b6,,Subclasses have to override this method to implement the\nactual view function code.  This method is called with all\nthe arguments from the URL rule.,,,,,methods,= None,\u00b6,,A list of methods this view can handle.,,,,,,class,flask.views.,MethodView,\u00b6,,Like a regular class-based view but that dispatches requests to\nparticular methods.  For instance if you implement a method called,get(),it means it will respond to,'GET',requests and\nthe,dispatch_request(),implementation will automatically\nforward your request to that.  Also,options,is set for you\nautomatically:,,class,,CounterAPI,(,MethodView,):,,def,,get,(,self,):,,return,,session,.,get,(,'counter',,,,0,),,def,,post,(,self,):,,session,[,'counter',],,=,,session,.,get,(,'counter',,,,0,),,+,,1,,return,,'OK',,app,.,add_url_rule,(,'/counter',,,,view_func,=,CounterAPI,.,as_view,(,'counter',)),,,,,,dispatch_request,(,*args,,,**kwargs,),\u00b6,,Subclasses have to override this method to implement the\nactual view function code.  This method is called with all\nthe arguments from the URL rule.,,,,,,URL Route Registrations,\u00b6,,Generally there are three ways to define rules for the routing system:,,,You can use the,flask.Flask.route(),decorator.,,You can use the,flask.Flask.add_url_rule(),function.,,You can directly access the underlying Werkzeug routing system\nwhich is exposed as,flask.Flask.url_map,.,,,Variable parts in the route can be specified with angular brackets\n(,/user/<username>,).  By default a variable part in the URL accepts any\nstring without a slash however a different converter can be specified as\nwell by using,<converter:name>,.,,Variable parts are passed to the view function as keyword arguments.,,The following converters are available:,,,,,,,,string,,accepts any text without a slash (the default),,,int,,accepts integers,,,float,,like,int,but for floating point values,,,path,,like the default but also accepts slashes,,,any,,matches one of the items provided,,,uuid,,accepts UUID strings,,,,,Custom converters can be defined using,flask.Flask.url_map,.,,Here are some examples:,,@app,.,route,(,'/',),,def,,index,():,,pass,,@app,.,route,(,'/<username>',),,def,,show_user,(,username,):,,pass,,@app,.,route,(,'/post/<int:post_id>',),,def,,show_post,(,post_id,):,,pass,,,,An important detail to keep in mind is how Flask deals with trailing\nslashes.  The idea is to keep each URL unique so the following rules\napply:,,,If a rule ends with a slash and is requested without a slash by the\nuser, the user is automatically redirected to the same page with a\ntrailing slash attached.,,If a rule does not end with a trailing slash and the user requests the\npage with a trailing slash, a 404 not found is raised.,,,This is consistent with how web servers deal with static files.  This\nalso makes it possible to use relative link targets safely.,,You can also define multiple rules for the same function.  They have to be\nunique however.  Defaults can also be specified.  Here for example is a\ndefinition for a URL that accepts an optional page:,,@app,.,route,(,'/users/',,,,defaults,=,{,'page',:,,1,}),,@app,.,route,(,'/users/page/<int:page>',),,def,,show_users,(,page,):,,pass,,,,This specifies that,/users/,will be the URL for page one and,/users/page/N,will be the URL for page,N,.,,Here are the parameters that,route(),and,add_url_rule(),accept.  The only difference is that\nwith the route parameter the view function is defined with the decorator\ninstead of the,view_func,parameter.,,,,,,,,rule,,the URL rule as string,,,endpoint,,the endpoint for the registered URL rule.  Flask itself\nassumes that the name of the view function is the name\nof the endpoint if not explicitly stated.,,,view_func,,the function to call when serving a request to the\nprovided endpoint.  If this is not provided one can\nspecify the function later by storing it in the,view_functions,dictionary with the\nendpoint as key.,,,defaults,,A dictionary with defaults for this rule.  See the\nexample above for how defaults work.,,,subdomain,,specifies the rule for the subdomain in case subdomain\nmatching is in use.  If not specified the default\nsubdomain is assumed.,,,**options,,the options to be forwarded to the underlying,Rule,object.  A change to\nWerkzeug is handling of method options.  methods is a list\nof methods this rule should be limited to (,GET,,,POST,etc.).  By default a rule just listens for,GET,(and\nimplicitly,HEAD,).  Starting with Flask 0.6,,OPTIONS,is\nimplicitly added and handled by the standard request\nhandling.  They have to be specified as keyword arguments.,,,,,,,View Function Options,\u00b6,,For internal usage the view functions can have some attributes attached to\ncustomize behavior the view function would normally not have control over.\nThe following attributes can be provided optionally to either override\nsome defaults to,add_url_rule(),or general behavior:,,,__name__,: The name of a function is by default used as endpoint.  If\nendpoint is provided explicitly this value is used.  Additionally this\nwill be prefixed with the name of the blueprint by default which\ncannot be customized from the function itself.,,methods,: If methods are not provided when the URL rule is added,\nFlask will look on the view function object itself if a,methods,attribute exists.  If it does, it will pull the information for the\nmethods from there.,,provide_automatic_options,: if this attribute is set Flask will\neither force enable or disable the automatic implementation of the\nHTTP,OPTIONS,response.  This can be useful when working with\ndecorators that want to customize the,OPTIONS,response on a per-view\nbasis.,,required_methods,: if this attribute is set, Flask will always add\nthese methods when registering a URL rule even if the methods were\nexplicitly overridden in the,route(),call.,,,Full example:,,def,,index,():,,if,,request,.,method,,==,,'OPTIONS',:,,# custom options handling here,,...,,return,,'Hello World!',,index,.,provide_automatic_options,,=,,False,,index,.,methods,,=,,[,'GET',,,,'OPTIONS',],,app,.,add_url_rule,(,'/',,,,index,),,,,,Changelog,,New in version 0.8:,The,provide_automatic_options,functionality was added.,,,,,Command Line Interface,\u00b6,,,,class,flask.cli.,FlaskGroup,(,add_default_commands=True,,,create_app=None,,,add_version_option=True,,,**extra,),\u00b6,,Special subclass of the,AppGroup,group that supports\nloading more commands from the configured Flask app.  Normally a\ndeveloper does not have to interface with this class but there are\nsome very advanced use cases for which it makes sense to create an\ninstance of this.,,For information as of why this is useful see,Custom Scripts,.,,,,,,Parameters:,,add_default_commands,\u2013 if this is True then the default run and\nshell commands wil be added.,,add_version_option,\u2013 adds the,--version,option.,,create_app,\u2013 an optional callback that is passed the script info\nand returns the loaded app.,,,,,,,,,get_command,(,ctx,,,name,),\u00b6,,Given a context and a command name, this returns a,Command,object if it exists or returns,None,.,,,,,list_commands,(,ctx,),\u00b6,,Returns a list of subcommand names in the order they should\nappear.,,,,,main,(,*args,,,**kwargs,),\u00b6,,This is the way to invoke a script with all the bells and\nwhistles as a command line application.  This will always terminate\nthe application after a call.  If this is not wanted,,SystemExit,needs to be caught.,,This method is also available by directly calling the instance of\na,Command,.,,,New in version 3.0:,Added the,standalone_mode,flag to control the standalone mode.,,,,Changelog,,,,,Parameters:,,args,\u2013 the arguments that should be used for parsing.  If not\nprovided,,sys.argv[1:],is used.,,prog_name,\u2013 the program name that should be used.  By default\nthe program name is constructed by taking the file\nname from,sys.argv[0],.,,complete_var,\u2013 the environment variable that controls the\nbash completion support.  The default is,\"_<prog_name>_COMPLETE\",with prog name in\nuppercase.,,standalone_mode,\u2013 the default behavior is to invoke the script\nin standalone mode.  Click will then\nhandle exceptions and convert them into\nerror messages and the function will never\nreturn but shut down the interpreter.  If\nthis is set to,False,they will be\npropagated to the caller and the return\nvalue of this function is the return value\nof,invoke(),.,,extra,\u2013 extra keyword arguments are forwarded to the context\nconstructor.  See,Context,for more information.,,,,,,,,,,,class,flask.cli.,AppGroup,(,name=None,,,commands=None,,,**attrs,),\u00b6,,This works similar to a regular click,Group,but it\nchanges the behavior of the,command(),decorator so that it\nautomatically wraps the functions in,with_appcontext(),.,,Not to be confused with,FlaskGroup,.,,,,command,(,*args,,,**kwargs,),\u00b6,,This works exactly like the method of the same name on a regular,click.Group,but it wraps callbacks in,with_appcontext(),unless it\u2019s disabled by passing,with_appcontext=False,.,,,,,group,(,*args,,,**kwargs,),\u00b6,,This works exactly like the method of the same name on a regular,click.Group,but it defaults the group class to,AppGroup,.,,,,,,class,flask.cli.,ScriptInfo,(,app_import_path=None,,,create_app=None,),\u00b6,,Help object to deal with Flask applications.  This is usually not\nnecessary to interface with as it\u2019s used internally in the dispatching\nto click.  In future versions of Flask this object will most likely play\na bigger role.  Typically it\u2019s created automatically by the,FlaskGroup,but you can also manually create it and pass it\nonwards as click object.,,,,app_import_path,= None,\u00b6,,Optionally the import path for the Flask application.,,,,,create_app,= None,\u00b6,,Optionally a function that is passed the script info to create\nthe instance of the application.,,,,,data,= None,\u00b6,,A dictionary with arbitrary data that can be associated with\nthis script info.,,,,,load_app,(,),\u00b6,,Loads the Flask app (if not yet loaded) and returns it.  Calling\nthis multiple times will just result in the already loaded app to\nbe returned.,,,,,,flask.cli.,with_appcontext,(,f,),\u00b6,,Wraps a callback so that it\u2019s guaranteed to be executed with the\nscript\u2019s application context.  If callbacks are registered directly\nto the,app.cli,object then they are wrapped with this function\nby default unless it\u2019s disabled.,,,,,flask.cli.,pass_script_info,(,f,),\u00b6,,Marks a function so that an instance of,ScriptInfo,is passed\nas first argument to the click callback.,,,,,flask.cli.,run_command,= <click.core.Command object>,\u00b6,,Runs a local development server for the Flask application.,,This local server is recommended for development purposes only but it\ncan also be used for simple intranet deployments.  By default it will\nnot support any sort of concurrency at all to simplify debugging.  This\ncan be changed with the \u2013with-threads option which will enable basic\nmultithreading.,,The reloader and debugger are by default enabled if the debug flag of\nFlask is enabled and disabled otherwise.,,,,,flask.cli.,shell_command,= <click.core.Command object>,\u00b6,,Runs an interactive Python shell in the context of a given\nFlask application.  The application will populate the default\nnamespace of this shell according to it\u2019s configuration.,,This is useful for executing small snippets of management code\nwithout having to manually configuring the application.,,,,,,,,,,,,,,Contents,,,API,,Application Object,,Blueprint Objects,,Incoming Request Data,,Response Objects,,Sessions,,Session Interface,,Test Client,,Application Globals,,Useful Functions and Classes,,Message Flashing,,JSON Support,,Template Rendering,,Configuration,,Extensions,,Stream Helpers,,Useful Internals,,Signals,,Class-Based Views,,URL Route Registrations,,View Function Options,,Command Line Interface,,,,,Navigation,,,Overview,,,Previous:,Becoming Big,,Next:,Design Decisions in Flask,,,,,Versions,,,Development,,(unstable),,Flask 1.0,,(stable),,Flask 0.12,,,,,,,Quick search,,,,,,,,,,,$('#searchbox').show(0);,,,,,,\u00a9 Copyright 2010 Pallets Team.\n      Created using,Sphinx,1.7.4.,,"},
{"name": "librelist archives", "url": "http://librelist.com/browser/flask/2011/8/6/flask-celery/", "content": "Flask-celery,,,,,,,librelist archives,,,home,//,archives,//,,\u00ab back to archive,,Flask-celery,,,Flask-celery,by Joe Esposito,,,Re: [flask] Flask-celery,by anh le,,,Re: [flask] Flask-celery,by Joe Esposito,,,,,,Flask-celery,,,From:,Joe Esposito,Date:,2011-08-06 @ 22:01,,Hi, does anyone know of any start-to-finish tutorials for setting up\nflask-celery on Linode?\n\nI've been swimming in both rabbitmq and celery configuration for the past\nfew hours and I feel like I haven't gotten anywhere.\n\nMuch thanks.,,,,Re: [flask] Flask-celery,,,From:,anh le,Date:,2011-08-08 @ 11:06,,Hi Joe,\n\nIt took me 3 days to get the example from flask-celery (the myapp.py) works\non my linux box:\n\nCreate a config file:\n\n1. add config.py to example folder\n\nCELERY_RESULT_BACKEND = 'database'\nCELERY_RESULT_DBURI = 'sqlite:///myapp.sqlite'\n\nBROKER_HOST = \"localhost\"\nBROKER_PORT = 5672\nBROKER_VHOST = \"/\"\nBROKER_USER = \"guest\"\nBROKER_PASSWORD = \"guest\"\n\n2. update myapp.py to use that config.py:\n...\napp = create_app()\napp.config.from_pyfile('config.py')\ncelery = Celery(app)\n...\n\n3. Config your rabbitmq to add vhost and user as in celery doc\n\n4. Open a console and start rabbitmq-server\n\n5. Open a console and start celeryd: python manage.py celeryd\n\n6. Open another console and start flask web server: python myapp.py\n\nvisit http://localhost:5000 to play around with 'add' task\n\nHope that helps,\n\n\n\n\nOn Sun, Aug 7, 2011 at 5:01 AM, Joe Esposito <espo58@gmail.com> wrote:,> Hi, does anyone know of any start-to-finish tutorials for setting up,,> flask-celery on Linode?,,>,,> I've been swimming in both rabbitmq and celery configuration for the past,,> few hours and I feel like I haven't gotten anywhere.,,>,,> Much thanks.,,>,,>,,,,Re: [flask] Flask-celery,,,From:,Joe Esposito,Date:,2011-08-16 @ 01:26,,Thanks, that did help. Good to have it all written in one place.\n\nOn Mon, Aug 8, 2011 at 7:06 AM, anh le <anhlh2@gmail.com> wrote:,> Hi Joe,,,>,,> It took me 3 days to get the example from flask-celery (the myapp.py) works,,> on my linux box:,,>,,> Create a config file:,,>,,> 1. add config.py to example folder,,>,,> CELERY_RESULT_BACKEND = 'database',,> CELERY_RESULT_DBURI = 'sqlite:///myapp.sqlite',,>,,> BROKER_HOST = \"localhost\",,> BROKER_PORT = 5672,,> BROKER_VHOST = \"/\",,> BROKER_USER = \"guest\",,> BROKER_PASSWORD = \"guest\",,>,,> 2. update myapp.py to use that config.py:,,> ...,,> app = create_app(),,> app.config.from_pyfile('config.py'),,> celery = Celery(app),,> ...,,>,,> 3. Config your rabbitmq to add vhost and user as in celery doc,,>,,> 4. Open a console and start rabbitmq-server,,>,,> 5. Open a console and start celeryd: python manage.py celeryd,,>,,> 6. Open another console and start flask web server: python myapp.py,,>,,> visit http://localhost:5000 to play around with 'add' task,,>,,> Hope that helps,,,>,,>,,>,,>,,> On Sun, Aug 7, 2011 at 5:01 AM, Joe Esposito <espo58@gmail.com> wrote:,,>,,>> Hi, does anyone know of any start-to-finish tutorials for setting up,,>> flask-celery on Linode?,,>>,,>> I've been swimming in both rabbitmq and celery configuration for the past,,>> few hours and I feel like I haven't gotten anywhere.,,>>,,>> Much thanks.,,>>,,>>,,>,,,,,,,Archives based on code by,Armin Ronacher,//"}
]